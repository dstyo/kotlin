/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/boxInline/callableReference")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class CallableReferenceInlineTestsGenerated extends AbstractCallableReferenceInlineTests {
    public void testAllFilesPresentInCallableReference() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
    }

    @TestMetadata("classLevel.kt")
    public void testClassLevel() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/classLevel.kt", this::doTest);
    }

    @TestMetadata("classLevel2.kt")
    public void testClassLevel2() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/classLevel2.kt", this::doTest);
    }

    @TestMetadata("constructor.kt")
    public void testConstructor() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/constructor.kt", this::doTest);
    }

    @TestMetadata("intrinsic.kt")
    public void testIntrinsic() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/intrinsic.kt", this::doTest);
    }

    @TestMetadata("kt15449.kt")
    public void testKt15449() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/kt15449.kt", this::doTest);
    }

    @TestMetadata("kt16411.kt")
    public void testKt16411() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/kt16411.kt", this::doTest);
    }

    @TestMetadata("propertyIntrinsic.kt")
    public void testPropertyIntrinsic() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/propertyIntrinsic.kt", this::doTest);
    }

    @TestMetadata("propertyReference.kt")
    public void testPropertyReference() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/propertyReference.kt", this::doTest);
    }

    @TestMetadata("topLevel.kt")
    public void testTopLevel() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/topLevel.kt", this::doTest);
    }

    @TestMetadata("topLevelExtension.kt")
    public void testTopLevelExtension() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/topLevelExtension.kt", this::doTest);
    }

    @TestMetadata("topLevelProperty.kt")
    public void testTopLevelProperty() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/topLevelProperty.kt", this::doTest);
    }

    @TestMetadata("compiler/testData/codegen/boxInline/callableReference/bound")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Bound extends AbstractCallableReferenceInlineTests {
        public void testAllFilesPresentInBound() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/callableReference/bound"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
        }

        @TestMetadata("classProperty.kt")
        public void testClassProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/classProperty.kt", this::doTest);
        }

        @TestMetadata("emptyLhsFunction.kt")
        public void testEmptyLhsFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/emptyLhsFunction.kt", this::doTest);
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/expression.kt", this::doTest);
        }

        @TestMetadata("extensionReceiver.kt")
        public void testExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/extensionReceiver.kt", this::doTest);
        }

        @TestMetadata("filter.kt")
        public void testFilter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/filter.kt", this::doTest);
        }

        @TestMetadata("intrinsic.kt")
        public void testIntrinsic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/intrinsic.kt", this::doTest);
        }

        @TestMetadata("kt18728.kt")
        public void testKt18728() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/kt18728.kt", this::doTest);
        }

        @TestMetadata("kt18728_2.kt")
        public void testKt18728_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/kt18728_2.kt", this::doTest);
        }

        @TestMetadata("kt18728_3.kt")
        public void testKt18728_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/kt18728_3.kt", this::doTest);
        }

        @TestMetadata("kt18728_4.kt")
        public void testKt18728_4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/kt18728_4.kt", this::doTest);
        }

        @TestMetadata("map.kt")
        public void testMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/map.kt", this::doTest);
        }

        @TestMetadata("mixed.kt")
        public void testMixed() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/mixed.kt", this::doTest);
        }

        @TestMetadata("objectProperty.kt")
        public void testObjectProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/objectProperty.kt", this::doTest);
        }

        @TestMetadata("propertyImportedFromObject.kt")
        public void testPropertyImportedFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/propertyImportedFromObject.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/simple.kt", this::doTest);
        }

        @TestMetadata("topLevelExtensionProperty.kt")
        public void testTopLevelExtensionProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/topLevelExtensionProperty.kt", this::doTest);
        }
    }
}
