/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class NonLocalReturnsTestGenerated extends AbstractNonLocalReturnsTest {
    public void testAllFilesPresentInNonLocalReturns() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
    }

    @TestMetadata("explicitLocalReturn.kt")
    public void testExplicitLocalReturn() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/explicitLocalReturn.kt", this::doTest);
    }

    @TestMetadata("justReturnInLambda.kt")
    public void testJustReturnInLambda() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/justReturnInLambda.kt", this::doTest);
    }

    @TestMetadata("kt5199.kt")
    public void testKt5199() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/kt5199.kt", this::doTest);
    }

    @TestMetadata("kt8948.kt")
    public void testKt8948() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/kt8948.kt", this::doTest);
    }

    @TestMetadata("kt8948v2.kt")
    public void testKt8948v2() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/kt8948v2.kt", this::doTest);
    }

    @TestMetadata("nestedNonLocals.kt")
    public void testNestedNonLocals() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/nestedNonLocals.kt", this::doTest);
    }

    @TestMetadata("noInlineLocalReturn.kt")
    public void testNoInlineLocalReturn() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/noInlineLocalReturn.kt", this::doTest);
    }

    @TestMetadata("nonLocalReturnFromOuterLambda.kt")
    public void testNonLocalReturnFromOuterLambda() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/nonLocalReturnFromOuterLambda.kt", this::doTest);
    }

    @TestMetadata("propertyAccessors.kt")
    public void testPropertyAccessors() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/propertyAccessors.kt", this::doTest);
    }

    @TestMetadata("returnFromFunctionExpr.kt")
    public void testReturnFromFunctionExpr() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/returnFromFunctionExpr.kt", this::doTest);
    }

    @TestMetadata("simple.kt")
    public void testSimple() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/simple.kt", this::doTest);
    }

    @TestMetadata("simpleFunctional.kt")
    public void testSimpleFunctional() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/simpleFunctional.kt", this::doTest);
    }

    @TestMetadata("simpleVoid.kt")
    public void testSimpleVoid() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/simpleVoid.kt", this::doTest);
    }

    @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Deparenthesize extends AbstractNonLocalReturnsTest {
        public void testAllFilesPresentInDeparenthesize() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
        }

        @TestMetadata("bracket.kt")
        public void testBracket() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize/bracket.kt", this::doTest);
        }

        @TestMetadata("labeled.kt")
        public void testLabeled() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize/labeled.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryFinally extends AbstractNonLocalReturnsTest {
        public void testAllFilesPresentInTryFinally() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
        }

        @TestMetadata("kt20433.kt")
        public void testKt20433() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt20433.kt", this::doTest);
        }

        @TestMetadata("kt20433_2.kt")
        public void testKt20433_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt20433_2.kt", this::doTest);
        }

        @TestMetadata("kt20433_2_void.kt")
        public void testKt20433_2_void() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt20433_2_void.kt", this::doTest);
        }

        @TestMetadata("kt20433_void.kt")
        public void testKt20433_void() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt20433_void.kt", this::doTest);
        }

        @TestMetadata("kt6956.kt")
        public void testKt6956() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt6956.kt", this::doTest);
        }

        @TestMetadata("kt7273.kt")
        public void testKt7273() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt7273.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnFromCatchBlock.kt")
        public void testNonLocalReturnFromCatchBlock() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/nonLocalReturnFromCatchBlock.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnFromOuterLambda.kt")
        public void testNonLocalReturnFromOuterLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/nonLocalReturnFromOuterLambda.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnToCatchBlock.kt")
        public void testNonLocalReturnToCatchBlock() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/nonLocalReturnToCatchBlock.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CallSite extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInCallSite() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
            }

            @TestMetadata("callSite.kt")
            public void testCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/callSite.kt", this::doTest);
            }

            @TestMetadata("callSiteComplex.kt")
            public void testCallSiteComplex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/callSiteComplex.kt", this::doTest);
            }

            @TestMetadata("exceptionTableSplit.kt")
            public void testExceptionTableSplit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/exceptionTableSplit.kt", this::doTest);
            }

            @TestMetadata("exceptionTableSplitNoReturn.kt")
            public void testExceptionTableSplitNoReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/exceptionTableSplitNoReturn.kt", this::doTest);
            }

            @TestMetadata("finallyInFinally.kt")
            public void testFinallyInFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/finallyInFinally.kt", this::doTest);
            }

            @TestMetadata("wrongVarInterval.kt")
            public void testWrongVarInterval() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/wrongVarInterval.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Chained extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInChained() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
            }

            @TestMetadata("finallyInFinally.kt")
            public void testFinallyInFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/finallyInFinally.kt", this::doTest);
            }

            @TestMetadata("finallyInFinally2.kt")
            public void testFinallyInFinally2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/finallyInFinally2.kt", this::doTest);
            }

            @TestMetadata("intReturn.kt")
            public void testIntReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturn.kt", this::doTest);
            }

            @TestMetadata("intReturnComplex.kt")
            public void testIntReturnComplex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex.kt", this::doTest);
            }

            @TestMetadata("intReturnComplex2.kt")
            public void testIntReturnComplex2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex2.kt", this::doTest);
            }

            @TestMetadata("intReturnComplex3.kt")
            public void testIntReturnComplex3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex3.kt", this::doTest);
            }

            @TestMetadata("intReturnComplex4.kt")
            public void testIntReturnComplex4() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex4.kt", this::doTest);
            }

            @TestMetadata("nestedLambda.kt")
            public void testNestedLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/nestedLambda.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DeclSite extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInDeclSite() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
            }

            @TestMetadata("complex.kt")
            public void testComplex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/complex.kt", this::doTest);
            }

            @TestMetadata("intReturn.kt")
            public void testIntReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/intReturn.kt", this::doTest);
            }

            @TestMetadata("intReturnComplex.kt")
            public void testIntReturnComplex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/intReturnComplex.kt", this::doTest);
            }

            @TestMetadata("longReturn.kt")
            public void testLongReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/longReturn.kt", this::doTest);
            }

            @TestMetadata("nested.kt")
            public void testNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/nested.kt", this::doTest);
            }

            @TestMetadata("returnInFinally.kt")
            public void testReturnInFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInFinally.kt", this::doTest);
            }

            @TestMetadata("returnInTry.kt")
            public void testReturnInTry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInTry.kt", this::doTest);
            }

            @TestMetadata("returnInTryAndFinally.kt")
            public void testReturnInTryAndFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInTryAndFinally.kt", this::doTest);
            }

            @TestMetadata("severalInTry.kt")
            public void testSeveralInTry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/severalInTry.kt", this::doTest);
            }

            @TestMetadata("severalInTryComplex.kt")
            public void testSeveralInTryComplex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/severalInTryComplex.kt", this::doTest);
            }

            @TestMetadata("voidInlineFun.kt")
            public void testVoidInlineFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/voidInlineFun.kt", this::doTest);
            }

            @TestMetadata("voidNonLocal.kt")
            public void testVoidNonLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/voidNonLocal.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ExceptionTable extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInExceptionTable() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
            }

            @TestMetadata("break.kt")
            public void testBreak() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/break.kt", this::doTest);
            }

            @TestMetadata("continue.kt")
            public void testContinue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/continue.kt", this::doTest);
            }

            @TestMetadata("exceptionInFinally.kt")
            public void testExceptionInFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/exceptionInFinally.kt", this::doTest);
            }

            @TestMetadata("forInFinally.kt")
            public void testForInFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/forInFinally.kt", this::doTest);
            }

            @TestMetadata("innerAndExternal.kt")
            public void testInnerAndExternal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternal.kt", this::doTest);
            }

            @TestMetadata("innerAndExternalNested.kt")
            public void testInnerAndExternalNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternalNested.kt", this::doTest);
            }

            @TestMetadata("innerAndExternalSimple.kt")
            public void testInnerAndExternalSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternalSimple.kt", this::doTest);
            }

            @TestMetadata("nested.kt")
            public void testNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nested.kt", this::doTest);
            }

            @TestMetadata("nestedWithReturns.kt")
            public void testNestedWithReturns() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nestedWithReturns.kt", this::doTest);
            }

            @TestMetadata("nestedWithReturnsSimple.kt")
            public void testNestedWithReturnsSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nestedWithReturnsSimple.kt", this::doTest);
            }

            @TestMetadata("noFinally.kt")
            public void testNoFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/noFinally.kt", this::doTest);
            }

            @TestMetadata("severalCatchClause.kt")
            public void testSeveralCatchClause() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/severalCatchClause.kt", this::doTest);
            }

            @TestMetadata("simpleThrow.kt")
            public void testSimpleThrow() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/simpleThrow.kt", this::doTest);
            }

            @TestMetadata("synchonized.kt")
            public void testSynchonized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/synchonized.kt", this::doTest);
            }

            @TestMetadata("throwInFinally.kt")
            public void testThrowInFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/throwInFinally.kt", this::doTest);
            }

            @TestMetadata("tryCatchInFinally.kt")
            public void testTryCatchInFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/tryCatchInFinally.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Variables extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInVariables() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
            }

            @TestMetadata("kt7792.kt")
            public void testKt7792() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables/kt7792.kt", this::doTest);
            }
        }
    }
}
