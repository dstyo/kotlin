/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("js/js.translator/testData/box")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IrBoxJsTestGenerated extends AbstractIrBoxJsTest {
    public void testAllFilesPresentInBox() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
    }

    @TestMetadata("js/js.translator/testData/box/annotation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotation extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInAnnotation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/annotation"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("annotationClass.kt")
        public void testAnnotationClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/annotation/annotationClass.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReference extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInCallableReference() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/callableReference"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("js/js.translator/testData/box/callableReference/function")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Function extends AbstractIrBoxJsTest {
            @TestMetadata("abstractClassMember.kt")
            public void testAbstractClassMember() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/abstractClassMember.kt", this::doTest);
            }

            public void testAllFilesPresentInFunction() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/callableReference/function"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("classMemberAndExtension.kt")
            public void testClassMemberAndExtension() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberAndExtension.kt", this::doTest);
            }

            @TestMetadata("classMemberAndNonExtensionCompatibility.kt")
            public void testClassMemberAndNonExtensionCompatibility() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberAndNonExtensionCompatibility.kt", this::doTest);
            }

            @TestMetadata("classMemberFromClass.kt")
            public void testClassMemberFromClass() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberFromClass.kt", this::doTest);
            }

            @TestMetadata("classMemberFromExtension.kt")
            public void testClassMemberFromExtension() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberFromExtension.kt", this::doTest);
            }

            @TestMetadata("classMemberFromTopLevelStringNoArgs.kt")
            public void testClassMemberFromTopLevelStringNoArgs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberFromTopLevelStringNoArgs.kt", this::doTest);
            }

            @TestMetadata("classMemberFromTopLevelStringOneStringArg.kt")
            public void testClassMemberFromTopLevelStringOneStringArg() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberFromTopLevelStringOneStringArg.kt", this::doTest);
            }

            @TestMetadata("classMemberFromTopLevelUnitNoArgs.kt")
            public void testClassMemberFromTopLevelUnitNoArgs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberFromTopLevelUnitNoArgs.kt", this::doTest);
            }

            @TestMetadata("classMemberFromTopLevelUnitOneStringArg.kt")
            public void testClassMemberFromTopLevelUnitOneStringArg() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberFromTopLevelUnitOneStringArg.kt", this::doTest);
            }

            @TestMetadata("classMemberOverridden.kt")
            public void testClassMemberOverridden() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/classMemberOverridden.kt", this::doTest);
            }

            @TestMetadata("closureWithSideEffect.kt")
            public void testClosureWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/closureWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("constructorFromTopLevelNoArgs.kt")
            public void testConstructorFromTopLevelNoArgs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/constructorFromTopLevelNoArgs.kt", this::doTest);
            }

            @TestMetadata("constructorFromTopLevelOneStringArg.kt")
            public void testConstructorFromTopLevelOneStringArg() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/constructorFromTopLevelOneStringArg.kt", this::doTest);
            }

            @TestMetadata("constructorsWithArgs.kt")
            public void testConstructorsWithArgs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/constructorsWithArgs.kt", this::doTest);
            }

            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extension.kt", this::doTest);
            }

            @TestMetadata("extensionFromClass.kt")
            public void testExtensionFromClass() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionFromClass.kt", this::doTest);
            }

            @TestMetadata("extensionFromExtension.kt")
            public void testExtensionFromExtension() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionFromExtension.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevel.kt")
            public void testExtensionFromTopLevel() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionFromTopLevel.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevelStringNoArgs.kt")
            public void testExtensionFromTopLevelStringNoArgs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionFromTopLevelStringNoArgs.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevelStringOneStringArg.kt")
            public void testExtensionFromTopLevelStringOneStringArg() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionFromTopLevelStringOneStringArg.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevelUnitNoArgs.kt")
            public void testExtensionFromTopLevelUnitNoArgs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionFromTopLevelUnitNoArgs.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevelUnitOneStringArg.kt")
            public void testExtensionFromTopLevelUnitOneStringArg() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionFromTopLevelUnitOneStringArg.kt", this::doTest);
            }

            @TestMetadata("extensionToPrimitive.kt")
            public void testExtensionToPrimitive() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionToPrimitive.kt", this::doTest);
            }

            @TestMetadata("extensionWithClosure.kt")
            public void testExtensionWithClosure() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/extensionWithClosure.kt", this::doTest);
            }

            @TestMetadata("localAndTopLevelExtensions.kt")
            public void testLocalAndTopLevelExtensions() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/localAndTopLevelExtensions.kt", this::doTest);
            }

            @TestMetadata("localLocal.kt")
            public void testLocalLocal() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/localLocal.kt", this::doTest);
            }

            @TestMetadata("recursiveClosure.kt")
            public void testRecursiveClosure() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/recursiveClosure.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/simple.kt", this::doTest);
            }

            @TestMetadata("simpleClosure.kt")
            public void testSimpleClosure() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/simpleClosure.kt", this::doTest);
            }

            @TestMetadata("simpleWithArg.kt")
            public void testSimpleWithArg() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/simpleWithArg.kt", this::doTest);
            }

            @TestMetadata("stringNativeExtension.kt")
            public void testStringNativeExtension() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/stringNativeExtension.kt", this::doTest);
            }

            @TestMetadata("topLevelFromClass.kt")
            public void testTopLevelFromClass() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/topLevelFromClass.kt", this::doTest);
            }

            @TestMetadata("topLevelFromExtension.kt")
            public void testTopLevelFromExtension() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/topLevelFromExtension.kt", this::doTest);
            }

            @TestMetadata("topLevelFromTopLevelStringNoArgs.kt")
            public void testTopLevelFromTopLevelStringNoArgs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/topLevelFromTopLevelStringNoArgs.kt", this::doTest);
            }

            @TestMetadata("topLevelFromTopLevelWithArg.kt")
            public void testTopLevelFromTopLevelWithArg() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/topLevelFromTopLevelWithArg.kt", this::doTest);
            }

            @TestMetadata("unitWithSideEffect.kt")
            public void testUnitWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/function/unitWithSideEffect.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/callableReference/property")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Property extends AbstractIrBoxJsTest {
            @TestMetadata("accessViaSubclass.kt")
            public void testAccessViaSubclass() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/accessViaSubclass.kt", this::doTest);
            }

            public void testAllFilesPresentInProperty() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/callableReference/property"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("delegated.kt")
            public void testDelegated() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/delegated.kt", this::doTest);
            }

            @TestMetadata("delegatedMutable.kt")
            public void testDelegatedMutable() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/delegatedMutable.kt", this::doTest);
            }

            @TestMetadata("extensionProperty.kt")
            public void testExtensionProperty() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/extensionProperty.kt", this::doTest);
            }

            @TestMetadata("kClassInstanceIsInitializedFirst.kt")
            public void testKClassInstanceIsInitializedFirst() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/kClassInstanceIsInitializedFirst.kt", this::doTest);
            }

            @TestMetadata("memberProperty.kt")
            public void testMemberProperty() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/memberProperty.kt", this::doTest);
            }

            @TestMetadata("overriddenInSubclass.kt")
            public void testOverriddenInSubclass() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/overriddenInSubclass.kt", this::doTest);
            }

            @TestMetadata("simpleExtension.kt")
            public void testSimpleExtension() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/simpleExtension.kt", this::doTest);
            }

            @TestMetadata("simpleMember.kt")
            public void testSimpleMember() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/simpleMember.kt", this::doTest);
            }

            @TestMetadata("simpleMutableExtension.kt")
            public void testSimpleMutableExtension() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/simpleMutableExtension.kt", this::doTest);
            }

            @TestMetadata("simpleMutableMember.kt")
            public void testSimpleMutableMember() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/simpleMutableMember.kt", this::doTest);
            }

            @TestMetadata("simpleMutableTopLevel.kt")
            public void testSimpleMutableTopLevel() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/simpleMutableTopLevel.kt", this::doTest);
            }

            @TestMetadata("simpleTopLevel.kt")
            public void testSimpleTopLevel() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/simpleTopLevel.kt", this::doTest);
            }

            @TestMetadata("topLevelVar.kt")
            public void testTopLevelVar() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/callableReference/property/topLevelVar.kt", this::doTest);
            }
        }
    }

    @TestMetadata("js/js.translator/testData/box/char")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Char extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInChar() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/char"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("charBinaryOperations.kt")
        public void testCharBinaryOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charBinaryOperations.kt", this::doTest);
        }

        @TestMetadata("charCompareToIntrinsic.kt")
        public void testCharCompareToIntrinsic() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charCompareToIntrinsic.kt", this::doTest);
        }

        @TestMetadata("charConstantByUnicodeId.kt")
        public void testCharConstantByUnicodeId() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charConstantByUnicodeId.kt", this::doTest);
        }

        @TestMetadata("charConversions.kt")
        public void testCharConversions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charConversions.kt", this::doTest);
        }

        @TestMetadata("charElvis.kt")
        public void testCharElvis() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charElvis.kt", this::doTest);
        }

        @TestMetadata("charEquals.kt")
        public void testCharEquals() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charEquals.kt", this::doTest);
        }

        @TestMetadata("charInStringTemplate.kt")
        public void testCharInStringTemplate() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charInStringTemplate.kt", this::doTest);
        }

        @TestMetadata("charIsCheck.kt")
        public void testCharIsCheck() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charIsCheck.kt", this::doTest);
        }

        @TestMetadata("charRanges.kt")
        public void testCharRanges() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charRanges.kt", this::doTest);
        }

        @TestMetadata("charUnaryOperations.kt")
        public void testCharUnaryOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/charUnaryOperations.kt", this::doTest);
        }

        @TestMetadata("topLevelCallables.kt")
        public void testTopLevelCallables() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/topLevelCallables.kt", this::doTest);
        }

        @TestMetadata("unboxedCharSpecials.kt")
        public void testUnboxedCharSpecials() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/char/unboxedCharSpecials.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/classObject")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassObject extends AbstractIrBoxJsTest {
        @TestMetadata("accessing.kt")
        public void testAccessing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/accessing.kt", this::doTest);
        }

        public void testAllFilesPresentInClassObject() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/classObject"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("defaultObjectSameNamesAsInOuter.kt")
        public void testDefaultObjectSameNamesAsInOuter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/defaultObjectSameNamesAsInOuter.kt", this::doTest);
        }

        @TestMetadata("enumCompanionObject.kt")
        public void testEnumCompanionObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/enumCompanionObject.kt", this::doTest);
        }

        @TestMetadata("inTrait.kt")
        public void testInTrait() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/inTrait.kt", this::doTest);
        }

        @TestMetadata("invokeOperatorInCompanionObject.kt")
        public void testInvokeOperatorInCompanionObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/invokeOperatorInCompanionObject.kt", this::doTest);
        }

        @TestMetadata("namedClassObject.kt")
        public void testNamedClassObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/namedClassObject.kt", this::doTest);
        }

        @TestMetadata("objectInCompanionObject.kt")
        public void testObjectInCompanionObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/objectInCompanionObject.kt", this::doTest);
        }

        @TestMetadata("setVar.kt")
        public void testSetVar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/setVar.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/simple.kt", this::doTest);
        }

        @TestMetadata("withInheritance.kt")
        public void testWithInheritance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/classObject/withInheritance.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/closure")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Closure extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInClosure() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/closure"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("closureArrayListInstance.kt")
        public void testClosureArrayListInstance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureArrayListInstance.kt", this::doTest);
        }

        @TestMetadata("closureFunctionAsArgument.kt")
        public void testClosureFunctionAsArgument() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureFunctionAsArgument.kt", this::doTest);
        }

        @TestMetadata("closureFunctionByInnerFunction.kt")
        public void testClosureFunctionByInnerFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureFunctionByInnerFunction.kt", this::doTest);
        }

        @TestMetadata("closureGenericTypeValue.kt")
        public void testClosureGenericTypeValue() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureGenericTypeValue.kt", this::doTest);
        }

        @TestMetadata("closureInFewFunctionWithDifferentName.kt")
        public void testClosureInFewFunctionWithDifferentName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureInFewFunctionWithDifferentName.kt", this::doTest);
        }

        @TestMetadata("closureInNestedFunctions.kt")
        public void testClosureInNestedFunctions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureInNestedFunctions.kt", this::doTest);
        }

        @TestMetadata("closureInNestedFunctionsInMethod.kt")
        public void testClosureInNestedFunctionsInMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureInNestedFunctionsInMethod.kt", this::doTest);
        }

        @TestMetadata("closureInNestedFunctionsWhichMixedWithObject.kt")
        public void testClosureInNestedFunctionsWhichMixedWithObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureInNestedFunctionsWhichMixedWithObject.kt", this::doTest);
        }

        @TestMetadata("closureInNestedLambdasInObject.kt")
        public void testClosureInNestedLambdasInObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureInNestedLambdasInObject.kt", this::doTest);
        }

        @TestMetadata("closureInObject.kt")
        public void testClosureInObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureInObject.kt", this::doTest);
        }

        @TestMetadata("closureInWithInsideWith.kt")
        public void testClosureInWithInsideWith() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureInWithInsideWith.kt", this::doTest);
        }

        @TestMetadata("closureLambdaVarInLambda.kt")
        public void testClosureLambdaVarInLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureLambdaVarInLambda.kt", this::doTest);
        }

        @TestMetadata("closureLocalFunction.kt")
        public void testClosureLocalFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureLocalFunction.kt", this::doTest);
        }

        @TestMetadata("closureLocalFunctionByInnerFunction.kt")
        public void testClosureLocalFunctionByInnerFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureLocalFunctionByInnerFunction.kt", this::doTest);
        }

        @TestMetadata("closureLocalFunctionByInnerFunctionInConstructor.kt")
        public void testClosureLocalFunctionByInnerFunctionInConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureLocalFunctionByInnerFunctionInConstructor.kt", this::doTest);
        }

        @TestMetadata("closureLocalInNestedObject.kt")
        public void testClosureLocalInNestedObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureLocalInNestedObject.kt", this::doTest);
        }

        @TestMetadata("closureLocalLiteralFunction.kt")
        public void testClosureLocalLiteralFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureLocalLiteralFunction.kt", this::doTest);
        }

        @TestMetadata("closureReceiverInLocalExtFunByLocalExtFun.kt")
        public void testClosureReceiverInLocalExtFunByLocalExtFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureReceiverInLocalExtFunByLocalExtFun.kt", this::doTest);
        }

        @TestMetadata("closureReferencingMember.kt")
        public void testClosureReferencingMember() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureReferencingMember.kt", this::doTest);
        }

        @TestMetadata("closureThisAndClassObject.kt")
        public void testClosureThisAndClassObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisAndClassObject.kt", this::doTest);
        }

        @TestMetadata("closureThisAndReceiver.kt")
        public void testClosureThisAndReceiver() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisAndReceiver.kt", this::doTest);
        }

        @TestMetadata("closureThisByUsingMethodFromParentClass.kt")
        public void testClosureThisByUsingMethodFromParentClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisByUsingMethodFromParentClass.kt", this::doTest);
        }

        @TestMetadata("closureThisInConstructor.kt")
        public void testClosureThisInConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisInConstructor.kt", this::doTest);
        }

        @TestMetadata("closureThisInExtLambdaInsideMethod.kt")
        public void testClosureThisInExtLambdaInsideMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisInExtLambdaInsideMethod.kt", this::doTest);
        }

        @TestMetadata("closureThisInFunctionWhichNamedSameAsParentClass.kt")
        public void testClosureThisInFunctionWhichNamedSameAsParentClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisInFunctionWhichNamedSameAsParentClass.kt", this::doTest);
        }

        @TestMetadata("closureThisInLambdaInsideMethod.kt")
        public void testClosureThisInLambdaInsideMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisInLambdaInsideMethod.kt", this::doTest);
        }

        @TestMetadata("closureThisInLambdaInsideObject.kt")
        public void testClosureThisInLambdaInsideObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisInLambdaInsideObject.kt", this::doTest);
        }

        @TestMetadata("closureThisInLocalFunction.kt")
        public void testClosureThisInLocalFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureThisInLocalFunction.kt", this::doTest);
        }

        @TestMetadata("closureValToScopeWithSameNameDeclaration.kt")
        public void testClosureValToScopeWithSameNameDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureValToScopeWithSameNameDeclaration.kt", this::doTest);
        }

        @TestMetadata("closureVarToScopeWithSameNameDeclaration.kt")
        public void testClosureVarToScopeWithSameNameDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/closureVarToScopeWithSameNameDeclaration.kt", this::doTest);
        }

        @TestMetadata("deepInnerClassInLocalClass.kt")
        public void testDeepInnerClassInLocalClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/deepInnerClassInLocalClass.kt", this::doTest);
        }

        @TestMetadata("deepInnerClassInLocalClassFromExtension.kt")
        public void testDeepInnerClassInLocalClassFromExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/deepInnerClassInLocalClassFromExtension.kt", this::doTest);
        }

        @TestMetadata("enclosingClassFromInnerLocalClass.kt")
        public void testEnclosingClassFromInnerLocalClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/enclosingClassFromInnerLocalClass.kt", this::doTest);
        }

        @TestMetadata("enclosingClassFromLocalClass.kt")
        public void testEnclosingClassFromLocalClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/enclosingClassFromLocalClass.kt", this::doTest);
        }

        @TestMetadata("implicitGenericReceiverInExtensionInLocalClass.kt")
        public void testImplicitGenericReceiverInExtensionInLocalClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/implicitGenericReceiverInExtensionInLocalClass.kt", this::doTest);
        }

        @TestMetadata("iteratingCallbacks.kt")
        public void testIteratingCallbacks() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/iteratingCallbacks.kt", this::doTest);
        }

        @TestMetadata("lambdaInLocalFun.kt")
        public void testLambdaInLocalFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/lambdaInLocalFun.kt", this::doTest);
        }

        @TestMetadata("localConstructorAndMethod.kt")
        public void testLocalConstructorAndMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/localConstructorAndMethod.kt", this::doTest);
        }

        @TestMetadata("localParameterInCallback.kt")
        public void testLocalParameterInCallback() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/localParameterInCallback.kt", this::doTest);
        }

        @TestMetadata("objectWithInvokeOperator.kt")
        public void testObjectWithInvokeOperator() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/objectWithInvokeOperator.kt", this::doTest);
        }

        @TestMetadata("recursiveExtFunction.kt")
        public void testRecursiveExtFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/recursiveExtFunction.kt", this::doTest);
        }

        @TestMetadata("recursiveFunction.kt")
        public void testRecursiveFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/recursiveFunction.kt", this::doTest);
        }

        @TestMetadata("recursiveFunctionWithSameNameDeclaration.kt")
        public void testRecursiveFunctionWithSameNameDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/recursiveFunctionWithSameNameDeclaration.kt", this::doTest);
        }

        @TestMetadata("withManyClosuresInNestedFunctionsAndObjects.kt")
        public void testWithManyClosuresInNestedFunctionsAndObjects() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/withManyClosuresInNestedFunctionsAndObjects.kt", this::doTest);
        }

        @TestMetadata("wrappedVariableInExtensionFun.kt")
        public void testWrappedVariableInExtensionFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/closure/wrappedVariableInExtensionFun.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/coercion")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Coercion extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInCoercion() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/coercion"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("bridgeChar.kt")
        public void testBridgeChar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/bridgeChar.kt", this::doTest);
        }

        @TestMetadata("charValParameter.kt")
        public void testCharValParameter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/charValParameter.kt", this::doTest);
        }

        @TestMetadata("classProperty.kt")
        public void testClassProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/classProperty.kt", this::doTest);
        }

        @TestMetadata("defaultAccessors.kt")
        public void testDefaultAccessors() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/defaultAccessors.kt", this::doTest);
        }

        @TestMetadata("derivedFunctionReturningChar.kt")
        public void testDerivedFunctionReturningChar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/derivedFunctionReturningChar.kt", this::doTest);
        }

        @TestMetadata("derivedFunctionReturningUnit.kt")
        public void testDerivedFunctionReturningUnit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/derivedFunctionReturningUnit.kt", this::doTest);
        }

        @TestMetadata("destructuringToUnit.kt")
        public void testDestructuringToUnit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/destructuringToUnit.kt", this::doTest);
        }

        @TestMetadata("extensionReceiver.kt")
        public void testExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/extensionReceiver.kt", this::doTest);
        }

        @TestMetadata("ifWithUnit.kt")
        public void testIfWithUnit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/ifWithUnit.kt", this::doTest);
        }

        @TestMetadata("inlineFunReturningUnit.kt")
        public void testInlineFunReturningUnit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/inlineFunReturningUnit.kt", this::doTest);
        }

        @TestMetadata("lambdaParameters.kt")
        public void testLambdaParameters() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/lambdaParameters.kt", this::doTest);
        }

        @TestMetadata("loopOverUnits.kt")
        public void testLoopOverUnits() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/loopOverUnits.kt", this::doTest);
        }

        @TestMetadata("propertyBridgeChar.kt")
        public void testPropertyBridgeChar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/propertyBridgeChar.kt", this::doTest);
        }

        @TestMetadata("receiverSmartCast.kt")
        public void testReceiverSmartCast() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/receiverSmartCast.kt", this::doTest);
        }

        @TestMetadata("safeCallLetReturningUnit.kt")
        public void testSafeCallLetReturningUnit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/safeCallLetReturningUnit.kt", this::doTest);
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/topLevelProperty.kt", this::doTest);
        }

        @TestMetadata("tryWithEmptyCatch.kt")
        public void testTryWithEmptyCatch() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/tryWithEmptyCatch.kt", this::doTest);
        }

        @TestMetadata("unitAsExtensionReceiver.kt")
        public void testUnitAsExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/unitAsExtensionReceiver.kt", this::doTest);
        }

        @TestMetadata("unitIsAs.kt")
        public void testUnitIsAs() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/unitIsAs.kt", this::doTest);
        }

        @TestMetadata("unitNullCheck.kt")
        public void testUnitNullCheck() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/unitNullCheck.kt", this::doTest);
        }

        @TestMetadata("unitSafeCall.kt")
        public void testUnitSafeCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/unitSafeCall.kt", this::doTest);
        }

        @TestMetadata("whenWithUnit.kt")
        public void testWhenWithUnit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coercion/whenWithUnit.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Coroutines extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInCoroutines() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/coroutines"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("debugStatement.kt")
        public void testDebugStatement() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coroutines/debugStatement.kt", this::doTest);
        }

        @TestMetadata("localVarOptimization.kt")
        public void testLocalVarOptimization() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coroutines/localVarOptimization.kt", this::doTest);
        }

        @TestMetadata("nativeExceptions.kt")
        public void testNativeExceptions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/coroutines/nativeExceptions.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/crossModuleRef")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CrossModuleRef extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInCrossModuleRef() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/crossModuleRef"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("callableObjectRef.kt")
        public void testCallableObjectRef() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/callableObjectRef.kt", this::doTest);
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/constructor.kt", this::doTest);
        }

        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/inheritance.kt", this::doTest);
        }

        @TestMetadata("inlineJsModule.kt")
        public void testInlineJsModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/inlineJsModule.kt", this::doTest);
        }

        @TestMetadata("inlineJsModuleNonIdentifier.kt")
        public void testInlineJsModuleNonIdentifier() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/inlineJsModuleNonIdentifier.kt", this::doTest);
        }

        @TestMetadata("inlineJsModulePackage.kt")
        public void testInlineJsModulePackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/inlineJsModulePackage.kt", this::doTest);
        }

        @TestMetadata("inlineModule.kt")
        public void testInlineModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/inlineModule.kt", this::doTest);
        }

        @TestMetadata("inlineModuleNonIndentifier.kt")
        public void testInlineModuleNonIndentifier() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/inlineModuleNonIndentifier.kt", this::doTest);
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/lambda.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/object.kt", this::doTest);
        }

        @TestMetadata("objectInInlineClosure.kt")
        public void testObjectInInlineClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/objectInInlineClosure.kt", this::doTest);
        }

        @TestMetadata("objectIsObject.kt")
        public void testObjectIsObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/objectIsObject.kt", this::doTest);
        }

        @TestMetadata("topLevelExtension.kt")
        public void testTopLevelExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/topLevelExtension.kt", this::doTest);
        }

        @TestMetadata("topLevelFunction.kt")
        public void testTopLevelFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/topLevelFunction.kt", this::doTest);
        }

        @TestMetadata("topLevelMutableProperty.kt")
        public void testTopLevelMutableProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/topLevelMutableProperty.kt", this::doTest);
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/crossModuleRef/topLevelProperty.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/dataClass")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DataClass extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInDataClass() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/dataClass"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("components.kt")
        public void testComponents() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dataClass/components.kt", this::doTest);
        }

        @TestMetadata("copy.kt")
        public void testCopy() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dataClass/copy.kt", this::doTest);
        }

        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dataClass/equals.kt", this::doTest);
        }

        @TestMetadata("hashcode.kt")
        public void testHashcode() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dataClass/hashcode.kt", this::doTest);
        }

        @TestMetadata("keyrole.kt")
        public void testKeyrole() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dataClass/keyrole.kt", this::doTest);
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dataClass/override.kt", this::doTest);
        }

        @TestMetadata("privateFields.kt")
        public void testPrivateFields() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dataClass/privateFields.kt", this::doTest);
        }

        @TestMetadata("tostring.kt")
        public void testTostring() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dataClass/tostring.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultArguments extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInDefaultArguments() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/defaultArguments"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("complexExpressionAsConstructorDefaultArgument.kt")
        public void testComplexExpressionAsConstructorDefaultArgument() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/complexExpressionAsConstructorDefaultArgument.kt", this::doTest);
        }

        @TestMetadata("complexExpressionAsDefaultArgument.kt")
        public void testComplexExpressionAsDefaultArgument() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/complexExpressionAsDefaultArgument.kt", this::doTest);
        }

        @TestMetadata("complexExpressionAsOverriddenDefaultArgument.kt")
        public void testComplexExpressionAsOverriddenDefaultArgument() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/complexExpressionAsOverriddenDefaultArgument.kt", this::doTest);
        }

        @TestMetadata("constructorCallWithDefArg1.kt")
        public void testConstructorCallWithDefArg1() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/constructorCallWithDefArg1.kt", this::doTest);
        }

        @TestMetadata("constructorCallWithDefArg2.kt")
        public void testConstructorCallWithDefArg2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/constructorCallWithDefArg2.kt", this::doTest);
        }

        @TestMetadata("defArgsWithSuperCall.kt")
        public void testDefArgsWithSuperCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/defArgsWithSuperCall.kt", this::doTest);
        }

        @TestMetadata("defaultArgumentsInFunctionWithExpressionAsBody.kt")
        public void testDefaultArgumentsInFunctionWithExpressionAsBody() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/defaultArgumentsInFunctionWithExpressionAsBody.kt", this::doTest);
        }

        @TestMetadata("enumSuperConstructor.kt")
        public void testEnumSuperConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/enumSuperConstructor.kt", this::doTest);
        }

        @TestMetadata("enumWithDefArg.kt")
        public void testEnumWithDefArg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/enumWithDefArg.kt", this::doTest);
        }

        @TestMetadata("enumWithOneDefArg.kt")
        public void testEnumWithOneDefArg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/enumWithOneDefArg.kt", this::doTest);
        }

        @TestMetadata("enumWithTwoDefArgs.kt")
        public void testEnumWithTwoDefArgs() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/enumWithTwoDefArgs.kt", this::doTest);
        }

        @TestMetadata("extensionFunWithDefArgs.kt")
        public void testExtensionFunWithDefArgs() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/extensionFunWithDefArgs.kt", this::doTest);
        }

        @TestMetadata("funInAbstractClassWithDefArg.kt")
        public void testFunInAbstractClassWithDefArg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/funInAbstractClassWithDefArg.kt", this::doTest);
        }

        @TestMetadata("inheritViaAnotherInterface.kt")
        public void testInheritViaAnotherInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/inheritViaAnotherInterface.kt", this::doTest);
        }

        @TestMetadata("inheritViaAnotherInterfaceIndirectly.kt")
        public void testInheritViaAnotherInterfaceIndirectly() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/inheritViaAnotherInterfaceIndirectly.kt", this::doTest);
        }

        @TestMetadata("overloadFunWithDefArg.kt")
        public void testOverloadFunWithDefArg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/overloadFunWithDefArg.kt", this::doTest);
        }

        @TestMetadata("primarySuperConstructor.kt")
        public void testPrimarySuperConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/primarySuperConstructor.kt", this::doTest);
        }

        @TestMetadata("secondarySuperConstructor.kt")
        public void testSecondarySuperConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/secondarySuperConstructor.kt", this::doTest);
        }

        @TestMetadata("superCall.kt")
        public void testSuperCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/superCall.kt", this::doTest);
        }

        @TestMetadata("virtualCallWithDefArg.kt")
        public void testVirtualCallWithDefArg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/defaultArguments/virtualCallWithDefArg.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/delegateProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegateProperty extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInDelegateProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/delegateProperty"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("capturedLocalVal.kt")
        public void testCapturedLocalVal() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/capturedLocalVal.kt", this::doTest);
        }

        @TestMetadata("capturedLocalValNoInline.kt")
        public void testCapturedLocalValNoInline() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/capturedLocalValNoInline.kt", this::doTest);
        }

        @TestMetadata("capturedLocalVar.kt")
        public void testCapturedLocalVar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/capturedLocalVar.kt", this::doTest);
        }

        @TestMetadata("capturedLocalVarNoInline.kt")
        public void testCapturedLocalVarNoInline() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/capturedLocalVarNoInline.kt", this::doTest);
        }

        @TestMetadata("clashingNameInSubclass.kt")
        public void testClashingNameInSubclass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/clashingNameInSubclass.kt", this::doTest);
        }

        @TestMetadata("delegateByExtensionProperty.kt")
        public void testDelegateByExtensionProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/delegateByExtensionProperty.kt", this::doTest);
        }

        @TestMetadata("delegateByTopLevelFun.kt")
        public void testDelegateByTopLevelFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/delegateByTopLevelFun.kt", this::doTest);
        }

        @TestMetadata("delegateByTopLevelProperty.kt")
        public void testDelegateByTopLevelProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/delegateByTopLevelProperty.kt", this::doTest);
        }

        @TestMetadata("delegateWithPropertyAccess.kt")
        public void testDelegateWithPropertyAccess() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/delegateWithPropertyAccess.kt", this::doTest);
        }

        @TestMetadata("getAsExtensionFun.kt")
        public void testGetAsExtensionFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/getAsExtensionFun.kt", this::doTest);
        }

        @TestMetadata("localVal.kt")
        public void testLocalVal() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/localVal.kt", this::doTest);
        }

        @TestMetadata("localVar.kt")
        public void testLocalVar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/localVar.kt", this::doTest);
        }

        @TestMetadata("localVarInc.kt")
        public void testLocalVarInc() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/localVarInc.kt", this::doTest);
        }

        @TestMetadata("localVarPlusAssign.kt")
        public void testLocalVarPlusAssign() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/localVarPlusAssign.kt", this::doTest);
        }

        @TestMetadata("metadataReferentialEquality.kt")
        public void testMetadataReferentialEquality() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/metadataReferentialEquality.kt", this::doTest);
        }

        @TestMetadata("peculiarName.kt")
        public void testPeculiarName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/peculiarName.kt", this::doTest);
        }

        @TestMetadata("propertyMetadata.kt")
        public void testPropertyMetadata() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/propertyMetadata.kt", this::doTest);
        }

        @TestMetadata("setAsExtensionFun.kt")
        public void testSetAsExtensionFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/setAsExtensionFun.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/simple.kt", this::doTest);
        }

        @TestMetadata("topLevelVal.kt")
        public void testTopLevelVal() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/topLevelVal.kt", this::doTest);
        }

        @TestMetadata("topLevelVar.kt")
        public void testTopLevelVar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/topLevelVar.kt", this::doTest);
        }

        @TestMetadata("unusedPropertyMetadata.kt")
        public void testUnusedPropertyMetadata() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/unusedPropertyMetadata.kt", this::doTest);
        }

        @TestMetadata("withGenerics.kt")
        public void testWithGenerics() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegateProperty/withGenerics.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/delegation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Delegation extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInDelegation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/delegation"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("complexDelegation.kt")
        public void testComplexDelegation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/complexDelegation.kt", this::doTest);
        }

        @TestMetadata("delegation2.kt")
        public void testDelegation2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegation2.kt", this::doTest);
        }

        @TestMetadata("delegation3.kt")
        public void testDelegation3() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegation3.kt", this::doTest);
        }

        @TestMetadata("delegation4.kt")
        public void testDelegation4() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegation4.kt", this::doTest);
        }

        @TestMetadata("delegationByArg.kt")
        public void testDelegationByArg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationByArg.kt", this::doTest);
        }

        @TestMetadata("delegationByExprWithArgs.kt")
        public void testDelegationByExprWithArgs() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationByExprWithArgs.kt", this::doTest);
        }

        @TestMetadata("delegationByFunExpr.kt")
        public void testDelegationByFunExpr() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationByFunExpr.kt", this::doTest);
        }

        @TestMetadata("delegationByIfExpr.kt")
        public void testDelegationByIfExpr() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationByIfExpr.kt", this::doTest);
        }

        @TestMetadata("delegationByInh.kt")
        public void testDelegationByInh() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationByInh.kt", this::doTest);
        }

        @TestMetadata("delegationByNewInstance.kt")
        public void testDelegationByNewInstance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationByNewInstance.kt", this::doTest);
        }

        @TestMetadata("delegationChain.kt")
        public void testDelegationChain() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationChain.kt", this::doTest);
        }

        @TestMetadata("delegationEvaluationOrder1.kt")
        public void testDelegationEvaluationOrder1() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationEvaluationOrder1.kt", this::doTest);
        }

        @TestMetadata("delegationEvaluationOrder2.kt")
        public void testDelegationEvaluationOrder2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationEvaluationOrder2.kt", this::doTest);
        }

        @TestMetadata("delegationExtFun1.kt")
        public void testDelegationExtFun1() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationExtFun1.kt", this::doTest);
        }

        @TestMetadata("delegationExtFun2.kt")
        public void testDelegationExtFun2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationExtFun2.kt", this::doTest);
        }

        @TestMetadata("delegationExtProp.kt")
        public void testDelegationExtProp() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationExtProp.kt", this::doTest);
        }

        @TestMetadata("delegationExtensionPropertyDelegated.kt")
        public void testDelegationExtensionPropertyDelegated() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationExtensionPropertyDelegated.kt", this::doTest);
        }

        @TestMetadata("delegationGenericArg.kt")
        public void testDelegationGenericArg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationGenericArg.kt", this::doTest);
        }

        @TestMetadata("delegationMethodsWithArgs.kt")
        public void testDelegationMethodsWithArgs() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/delegationMethodsWithArgs.kt", this::doTest);
        }

        @TestMetadata("jsNamePropertyDelegation.kt")
        public void testJsNamePropertyDelegation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/jsNamePropertyDelegation.kt", this::doTest);
        }

        @TestMetadata("onObject.kt")
        public void testOnObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/delegation/onObject.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/dynamic")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Dynamic extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInDynamic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/dynamic"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("binaryOperations.kt")
        public void testBinaryOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/binaryOperations.kt", this::doTest);
        }

        @TestMetadata("callGetMethod.kt")
        public void testCallGetMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/callGetMethod.kt", this::doTest);
        }

        @TestMetadata("callMethods.kt")
        public void testCallMethods() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/callMethods.kt", this::doTest);
        }

        @TestMetadata("callSetMethod.kt")
        public void testCallSetMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/callSetMethod.kt", this::doTest);
        }

        @TestMetadata("compareTo.kt")
        public void testCompareTo() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/compareTo.kt", this::doTest);
        }

        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/equals.kt", this::doTest);
        }

        @TestMetadata("getByBrackets.kt")
        public void testGetByBrackets() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/getByBrackets.kt", this::doTest);
        }

        @TestMetadata("identityEquals.kt")
        public void testIdentityEquals() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/identityEquals.kt", this::doTest);
        }

        @TestMetadata("incrementAndDecrement.kt")
        public void testIncrementAndDecrement() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/incrementAndDecrement.kt", this::doTest);
        }

        @TestMetadata("infixCall.kt")
        public void testInfixCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/infixCall.kt", this::doTest);
        }

        @TestMetadata("invoke.kt")
        public void testInvoke() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/invoke.kt", this::doTest);
        }

        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/is.kt", this::doTest);
        }

        @TestMetadata("isJsPrimitiveType.kt")
        public void testIsJsPrimitiveType() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/isJsPrimitiveType.kt", this::doTest);
        }

        @TestMetadata("iterator.kt")
        public void testIterator() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/iterator.kt", this::doTest);
        }

        @TestMetadata("nameClashing.kt")
        public void testNameClashing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/nameClashing.kt", this::doTest);
        }

        @TestMetadata("operationsWithAssignment.kt")
        public void testOperationsWithAssignment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/operationsWithAssignment.kt", this::doTest);
        }

        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/propertyAccess.kt", this::doTest);
        }

        @TestMetadata("propertySideEffect.kt")
        public void testPropertySideEffect() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/propertySideEffect.kt", this::doTest);
        }

        @TestMetadata("setByBrackets.kt")
        public void testSetByBrackets() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/setByBrackets.kt", this::doTest);
        }

        @TestMetadata("unaryOperations.kt")
        public void testUnaryOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/dynamic/unaryOperations.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/enum")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Enum extends AbstractIrBoxJsTest {
        @TestMetadata("accessing.kt")
        public void testAccessing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/accessing.kt", this::doTest);
        }

        public void testAllFilesPresentInEnum() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/enum"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("enumInheritedFromTrait.kt")
        public void testEnumInheritedFromTrait() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/enumInheritedFromTrait.kt", this::doTest);
        }

        @TestMetadata("enumIsComparable.kt")
        public void testEnumIsComparable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/enumIsComparable.kt", this::doTest);
        }

        @TestMetadata("enumWithInheritance.kt")
        public void testEnumWithInheritance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/enumWithInheritance.kt", this::doTest);
        }

        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/equals.kt", this::doTest);
        }

        @TestMetadata("equalsNullUndefined.kt")
        public void testEqualsNullUndefined() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/equalsNullUndefined.kt", this::doTest);
        }

        @TestMetadata("implementsComparable.kt")
        public void testImplementsComparable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/implementsComparable.kt", this::doTest);
        }

        @TestMetadata("initializationOrder.kt")
        public void testInitializationOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/initializationOrder.kt", this::doTest);
        }

        @TestMetadata("nativeEnum.kt")
        public void testNativeEnum() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/nativeEnum.kt", this::doTest);
        }

        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/simpleEnum.kt", this::doTest);
        }

        @TestMetadata("standardMethods.kt")
        public void testStandardMethods() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/standardMethods.kt", this::doTest);
        }

        @TestMetadata("superCallInEnumLiteral.kt")
        public void testSuperCallInEnumLiteral() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/enum/superCallInEnumLiteral.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/examples")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Examples extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInExamples() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/examples"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("basicmethod.kt")
        public void testBasicmethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/basicmethod.kt", this::doTest);
        }

        @TestMetadata("basicproperty.kt")
        public void testBasicproperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/basicproperty.kt", this::doTest);
        }

        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/classObject.kt", this::doTest);
        }

        @TestMetadata("closureWithParameter.kt")
        public void testClosureWithParameter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/closureWithParameter.kt", this::doTest);
        }

        @TestMetadata("closureWithParameterAndBoxing.kt")
        public void testClosureWithParameterAndBoxing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/closureWithParameterAndBoxing.kt", this::doTest);
        }

        @TestMetadata("doubleEnclosedLocalVariable.kt")
        public void testDoubleEnclosedLocalVariable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/doubleEnclosedLocalVariable.kt", this::doTest);
        }

        @TestMetadata("enclosed.kt")
        public void testEnclosed() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/enclosed.kt", this::doTest);
        }

        @TestMetadata("enclosingLocalVariable.kt")
        public void testEnclosingLocalVariable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/enclosingLocalVariable.kt", this::doTest);
        }

        @TestMetadata("extensionClosure.kt")
        public void testExtensionClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/extensionClosure.kt", this::doTest);
        }

        @TestMetadata("funDelegation.kt")
        public void testFunDelegation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/funDelegation.kt", this::doTest);
        }

        @TestMetadata("incrementProperty.kt")
        public void testIncrementProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/incrementProperty.kt", this::doTest);
        }

        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/inheritance.kt", this::doTest);
        }

        @TestMetadata("inheritedInnerClass.kt")
        public void testInheritedInnerClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/inheritedInnerClass.kt", this::doTest);
        }

        @TestMetadata("inheritedMethod.kt")
        public void testInheritedMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/inheritedMethod.kt", this::doTest);
        }

        @TestMetadata("initializerBlock.kt")
        public void testInitializerBlock() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/initializerBlock.kt", this::doTest);
        }

        @TestMetadata("initializerBlockDImpl.kt")
        public void testInitializerBlockDImpl() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/initializerBlockDImpl.kt", this::doTest);
        }

        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/innerClass.kt", this::doTest);
        }

        @TestMetadata("kt242.kt")
        public void testKt242() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/kt242.kt", this::doTest);
        }

        @TestMetadata("newInstanceDefaultConstructor.kt")
        public void testNewInstanceDefaultConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/newInstanceDefaultConstructor.kt", this::doTest);
        }

        @TestMetadata("overloadBinaryOperator.kt")
        public void testOverloadBinaryOperator() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/overloadBinaryOperator.kt", this::doTest);
        }

        @TestMetadata("overloadPlusAssignReturn.kt")
        public void testOverloadPlusAssignReturn() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/overloadPlusAssignReturn.kt", this::doTest);
        }

        @TestMetadata("overloadPlusToPlusAssign.kt")
        public void testOverloadPlusToPlusAssign() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/overloadPlusToPlusAssign.kt", this::doTest);
        }

        @TestMetadata("overloadUnaryOperator.kt")
        public void testOverloadUnaryOperator() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/overloadUnaryOperator.kt", this::doTest);
        }

        @TestMetadata("propertyDelegation.kt")
        public void testPropertyDelegation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/propertyDelegation.kt", this::doTest);
        }

        @TestMetadata("propertyInInitializer.kt")
        public void testPropertyInInitializer() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/propertyInInitializer.kt", this::doTest);
        }

        @TestMetadata("rightHandOverride.kt")
        public void testRightHandOverride() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/rightHandOverride.kt", this::doTest);
        }

        @TestMetadata("simplestClosure.kt")
        public void testSimplestClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/simplestClosure.kt", this::doTest);
        }

        @TestMetadata("simplestClosureAndBoxing.kt")
        public void testSimplestClosureAndBoxing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/simplestClosureAndBoxing.kt", this::doTest);
        }

        @TestMetadata("traitproperty.kt")
        public void testTraitproperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/examples/traitproperty.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/expression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Expression extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("js/js.translator/testData/box/expression/cast")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Cast extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInCast() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/cast"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("castExtensionToKMutableProperty.kt")
            public void testCastExtensionToKMutableProperty() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castExtensionToKMutableProperty.kt", this::doTest);
            }

            @TestMetadata("castExtensionToKProperty1.kt")
            public void testCastExtensionToKProperty1() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castExtensionToKProperty1.kt", this::doTest);
            }

            @TestMetadata("castToAny.kt")
            public void testCastToAny() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToAny.kt", this::doTest);
            }

            @TestMetadata("castToArray.kt")
            public void testCastToArray() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToArray.kt", this::doTest);
            }

            @TestMetadata("castToFunction.kt")
            public void testCastToFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToFunction.kt", this::doTest);
            }

            @TestMetadata("castToGenericType.kt")
            public void testCastToGenericType() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToGenericType.kt", this::doTest);
            }

            @TestMetadata("castToGenericTypeWithMultipleUpperBounds.kt")
            public void testCastToGenericTypeWithMultipleUpperBounds() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToGenericTypeWithMultipleUpperBounds.kt", this::doTest);
            }

            @TestMetadata("castToGenericTypeWithUpperBound.kt")
            public void testCastToGenericTypeWithUpperBound() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToGenericTypeWithUpperBound.kt", this::doTest);
            }

            @TestMetadata("castToKMutableProperty0.kt")
            public void testCastToKMutableProperty0() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToKMutableProperty0.kt", this::doTest);
            }

            @TestMetadata("castToKMutableProperty1.kt")
            public void testCastToKMutableProperty1() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToKMutableProperty1.kt", this::doTest);
            }

            @TestMetadata("castToKProperty0.kt")
            public void testCastToKProperty0() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToKProperty0.kt", this::doTest);
            }

            @TestMetadata("castToKProperty1.kt")
            public void testCastToKProperty1() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToKProperty1.kt", this::doTest);
            }

            @TestMetadata("castToNotNull.kt")
            public void testCastToNotNull() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToNotNull.kt", this::doTest);
            }

            @TestMetadata("castToNullable.kt")
            public void testCastToNullable() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/castToNullable.kt", this::doTest);
            }

            @TestMetadata("explicitUpcast.kt")
            public void testExplicitUpcast() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/explicitUpcast.kt", this::doTest);
            }

            @TestMetadata("implicitCastToLong.kt")
            public void testImplicitCastToLong() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/implicitCastToLong.kt", this::doTest);
            }

            @TestMetadata("primitiveToClass.kt")
            public void testPrimitiveToClass() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/primitiveToClass.kt", this::doTest);
            }

            @TestMetadata("reifiedToNotNull.kt")
            public void testReifiedToNotNull() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/reifiedToNotNull.kt", this::doTest);
            }

            @TestMetadata("reifiedToNullable1.kt")
            public void testReifiedToNullable1() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/reifiedToNullable1.kt", this::doTest);
            }

            @TestMetadata("reifiedToNullable2.kt")
            public void testReifiedToNullable2() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/reifiedToNullable2.kt", this::doTest);
            }

            @TestMetadata("safeCastToGenericTypeWithUpperBound.kt")
            public void testSafeCastToGenericTypeWithUpperBound() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/safeCastToGenericTypeWithUpperBound.kt", this::doTest);
            }

            @TestMetadata("safeCastToNotNull.kt")
            public void testSafeCastToNotNull() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/safeCastToNotNull.kt", this::doTest);
            }

            @TestMetadata("safeCastToNullable.kt")
            public void testSafeCastToNullable() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/safeCastToNullable.kt", this::doTest);
            }

            @TestMetadata("safeCastToReifiedNotNull.kt")
            public void testSafeCastToReifiedNotNull() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/safeCastToReifiedNotNull.kt", this::doTest);
            }

            @TestMetadata("safeCastToReifiedNullable.kt")
            public void testSafeCastToReifiedNullable() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/safeCastToReifiedNullable.kt", this::doTest);
            }

            @TestMetadata("smartCastInExtensionFunction.kt")
            public void testSmartCastInExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/smartCastInExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("smartCastInFunction.kt")
            public void testSmartCastInFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/cast/smartCastInFunction.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/compareTo")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CompareTo extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInCompareTo() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/compareTo"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("booleanCompareTo.kt")
            public void testBooleanCompareTo() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/compareTo/booleanCompareTo.kt", this::doTest);
            }

            @TestMetadata("customCompareToMethod.kt")
            public void testCustomCompareToMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/compareTo/customCompareToMethod.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/dollarParameter")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DollarParameter extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInDollarParameter() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/dollarParameter"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("dollarParameter.kt")
            public void testDollarParameter() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/dollarParameter/dollarParameter.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/equals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Equals extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInEquals() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/equals"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("arrays.kt")
            public void testArrays() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/arrays.kt", this::doTest);
            }

            @TestMetadata("compareNullableListWithNull.kt")
            public void testCompareNullableListWithNull() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/compareNullableListWithNull.kt", this::doTest);
            }

            @TestMetadata("compareNullablesWithCustomEquals.kt")
            public void testCompareNullablesWithCustomEquals() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/compareNullablesWithCustomEquals.kt", this::doTest);
            }

            @TestMetadata("compareToNullWithCustomEquals.kt")
            public void testCompareToNullWithCustomEquals() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/compareToNullWithCustomEquals.kt", this::doTest);
            }

            @TestMetadata("customEqualsMethod.kt")
            public void testCustomEqualsMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/customEqualsMethod.kt", this::doTest);
            }

            @TestMetadata("customEqualsMethodOnAny.kt")
            public void testCustomEqualsMethodOnAny() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/customEqualsMethodOnAny.kt", this::doTest);
            }

            @TestMetadata("equalsBehaviorOnNull.kt")
            public void testEqualsBehaviorOnNull() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/equalsBehaviorOnNull.kt", this::doTest);
            }

            @TestMetadata("equalsNullOrUndefined.kt")
            public void testEqualsNullOrUndefined() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/equalsNullOrUndefined.kt", this::doTest);
            }

            @TestMetadata("explicitEqualsMethod.kt")
            public void testExplicitEqualsMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/explicitEqualsMethod.kt", this::doTest);
            }

            @TestMetadata("explicitEqualsMethodForPrimitives.kt")
            public void testExplicitEqualsMethodForPrimitives() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/explicitEqualsMethodForPrimitives.kt", this::doTest);
            }

            @TestMetadata("kt2370.kt")
            public void testKt2370() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/kt2370.kt", this::doTest);
            }

            @TestMetadata("stringsEqual.kt")
            public void testStringsEqual() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/stringsEqual.kt", this::doTest);
            }

            @TestMetadata("superEquals.kt")
            public void testSuperEquals() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/equals/superEquals.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/evaluationOrder")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class EvaluationOrder extends AbstractIrBoxJsTest {
            @TestMetadata("2dangerousInExpression.kt")
            public void test2dangerousInExpression() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/2dangerousInExpression.kt", this::doTest);
            }

            public void testAllFilesPresentInEvaluationOrder() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/evaluationOrder"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("andAndWithBreakContinueReturn.kt")
            public void testAndAndWithBreakContinueReturn() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/andAndWithBreakContinueReturn.kt", this::doTest);
            }

            @TestMetadata("andAndWithSideEffect.kt")
            public void testAndAndWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/andAndWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("andAndWithTmpVarRhs.kt")
            public void testAndAndWithTmpVarRhs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/andAndWithTmpVarRhs.kt", this::doTest);
            }

            @TestMetadata("assignToArrayElementWithSideEffect.kt")
            public void testAssignToArrayElementWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/assignToArrayElementWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("assignToDotQualifiedWithSideEffect.kt")
            public void testAssignToDotQualifiedWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/assignToDotQualifiedWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("booleanAndOr.kt")
            public void testBooleanAndOr() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/booleanAndOr.kt", this::doTest);
            }

            @TestMetadata("callArgs.kt")
            public void testCallArgs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/callArgs.kt", this::doTest);
            }

            @TestMetadata("callVarargs.kt")
            public void testCallVarargs() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/callVarargs.kt", this::doTest);
            }

            @TestMetadata("callWithBreakContinueReturn.kt")
            public void testCallWithBreakContinueReturn() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/callWithBreakContinueReturn.kt", this::doTest);
            }

            @TestMetadata("castWithBreakContinueReturn.kt")
            public void testCastWithBreakContinueReturn() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/castWithBreakContinueReturn.kt", this::doTest);
            }

            @TestMetadata("compareToIntrinsicWithSideEffect.kt")
            public void testCompareToIntrinsicWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/compareToIntrinsicWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("dangerousInline.kt")
            public void testDangerousInline() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/dangerousInline.kt", this::doTest);
            }

            @TestMetadata("dangerousInsideDangerous.kt")
            public void testDangerousInsideDangerous() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/dangerousInsideDangerous.kt", this::doTest);
            }

            @TestMetadata("elvisComplex.kt")
            public void testElvisComplex() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/elvisComplex.kt", this::doTest);
            }

            @TestMetadata("elvisWithBreakContinueReturn.kt")
            public void testElvisWithBreakContinueReturn() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/elvisWithBreakContinueReturn.kt", this::doTest);
            }

            @TestMetadata("equalsIntrinsicWithSideEffect.kt")
            public void testEqualsIntrinsicWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/equalsIntrinsicWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("evaluationOrder1.kt")
            public void testEvaluationOrder1() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/evaluationOrder1.kt", this::doTest);
            }

            @TestMetadata("evaluationOrder2.kt")
            public void testEvaluationOrder2() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/evaluationOrder2.kt", this::doTest);
            }

            @TestMetadata("ifAsFunArgument.kt")
            public void testIfAsFunArgument() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/ifAsFunArgument.kt", this::doTest);
            }

            @TestMetadata("ifAsPlusArgument.kt")
            public void testIfAsPlusArgument() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/ifAsPlusArgument.kt", this::doTest);
            }

            @TestMetadata("ifWithComplex.kt")
            public void testIfWithComplex() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/ifWithComplex.kt", this::doTest);
            }

            @TestMetadata("intrinsicComplex.kt")
            public void testIntrinsicComplex() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/intrinsicComplex.kt", this::doTest);
            }

            @TestMetadata("intrinsicWithBreakContinueReturn.kt")
            public void testIntrinsicWithBreakContinueReturn() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/intrinsicWithBreakContinueReturn.kt", this::doTest);
            }

            @TestMetadata("literalFunctionAsArgumentWithSideEffect.kt")
            public void testLiteralFunctionAsArgumentWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/literalFunctionAsArgumentWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("loopWithBreakContinueReturnInCondition.kt")
            public void testLoopWithBreakContinueReturnInCondition() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/loopWithBreakContinueReturnInCondition.kt", this::doTest);
            }

            @TestMetadata("orOrWithBreakContinueReturn.kt")
            public void testOrOrWithBreakContinueReturn() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/orOrWithBreakContinueReturn.kt", this::doTest);
            }

            @TestMetadata("orOrWithSideEffect.kt")
            public void testOrOrWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/orOrWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("reassignmentLhsCaching.kt")
            public void testReassignmentLhsCaching() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/reassignmentLhsCaching.kt", this::doTest);
            }

            @TestMetadata("secondaryConstructorTemporaryVars.kt")
            public void testSecondaryConstructorTemporaryVars() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/secondaryConstructorTemporaryVars.kt", this::doTest);
            }

            @TestMetadata("singleComponentDestructuring.kt")
            public void testSingleComponentDestructuring() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/singleComponentDestructuring.kt", this::doTest);
            }

            @TestMetadata("whenAsMinusArgument.kt")
            public void testWhenAsMinusArgument() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/whenAsMinusArgument.kt", this::doTest);
            }

            @TestMetadata("whenJsLiteralWithSideEffect.kt")
            public void testWhenJsLiteralWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/whenJsLiteralWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("whenWithComplexConditions.kt")
            public void testWhenWithComplexConditions() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/evaluationOrder/whenWithComplexConditions.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/for")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class For extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInFor() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/for"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("forIteratesOverArray.kt")
            public void testForIteratesOverArray() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forIteratesOverArray.kt", this::doTest);
            }

            @TestMetadata("forIteratesOverLiteralRange.kt")
            public void testForIteratesOverLiteralRange() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forIteratesOverLiteralRange.kt", this::doTest);
            }

            @TestMetadata("forIteratesOverNonLiteralRange.kt")
            public void testForIteratesOverNonLiteralRange() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forIteratesOverNonLiteralRange.kt", this::doTest);
            }

            @TestMetadata("forIteratesOverSomethingWithIterator.kt")
            public void testForIteratesOverSomethingWithIterator() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forIteratesOverSomethingWithIterator.kt", this::doTest);
            }

            @TestMetadata("forIteratesOverTypeParameter.kt")
            public void testForIteratesOverTypeParameter() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forIteratesOverTypeParameter.kt", this::doTest);
            }

            @TestMetadata("forOnEmptyArray.kt")
            public void testForOnEmptyArray() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forOnEmptyArray.kt", this::doTest);
            }

            @TestMetadata("forWithComplexOneStatement.kt")
            public void testForWithComplexOneStatement() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forWithComplexOneStatement.kt", this::doTest);
            }

            @TestMetadata("forWithEmptyBody.kt")
            public void testForWithEmptyBody() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forWithEmptyBody.kt", this::doTest);
            }

            @TestMetadata("forWithSideEffectImElementAccessAndWithEmptyBody.kt")
            public void testForWithSideEffectImElementAccessAndWithEmptyBody() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/forWithSideEffectImElementAccessAndWithEmptyBody.kt", this::doTest);
            }

            @TestMetadata("labeledFor.kt")
            public void testLabeledFor() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/labeledFor.kt", this::doTest);
            }

            @TestMetadata("labeledForWithContinue.kt")
            public void testLabeledForWithContinue() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/labeledForWithContinue.kt", this::doTest);
            }

            @TestMetadata("labeledForWithWhile.kt")
            public void testLabeledForWithWhile() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/labeledForWithWhile.kt", this::doTest);
            }

            @TestMetadata("overArrayWithIndex.kt")
            public void testOverArrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/overArrayWithIndex.kt", this::doTest);
            }

            @TestMetadata("overCollectionWithIndex.kt")
            public void testOverCollectionWithIndex() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/overCollectionWithIndex.kt", this::doTest);
            }

            @TestMetadata("rangeOptimization.kt")
            public void testRangeOptimization() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/for/rangeOptimization.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/function")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Function extends AbstractIrBoxJsTest {
            @TestMetadata("adderClosure.kt")
            public void testAdderClosure() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/adderClosure.kt", this::doTest);
            }

            public void testAllFilesPresentInFunction() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/function"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("anonymousWithLambda.kt")
            public void testAnonymousWithLambda() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/anonymousWithLambda.kt", this::doTest);
            }

            @TestMetadata("callFunInInit.kt")
            public void testCallFunInInit() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/callFunInInit.kt", this::doTest);
            }

            @TestMetadata("closureWithParameter.kt")
            public void testClosureWithParameter() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/closureWithParameter.kt", this::doTest);
            }

            @TestMetadata("closureWithParameterAndBoxing.kt")
            public void testClosureWithParameterAndBoxing() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/closureWithParameterAndBoxing.kt", this::doTest);
            }

            @TestMetadata("defaultParameters.kt")
            public void testDefaultParameters() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/defaultParameters.kt", this::doTest);
            }

            @TestMetadata("enclosingThis.kt")
            public void testEnclosingThis() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/enclosingThis.kt", this::doTest);
            }

            @TestMetadata("expressionAsExtFunction.kt")
            public void testExpressionAsExtFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/expressionAsExtFunction.kt", this::doTest);
            }

            @TestMetadata("expressionAsFunction.kt")
            public void testExpressionAsFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/expressionAsFunction.kt", this::doTest);
            }

            @TestMetadata("functionExpression.kt")
            public void testFunctionExpression() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/functionExpression.kt", this::doTest);
            }

            @TestMetadata("functionInsideFunction.kt")
            public void testFunctionInsideFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/functionInsideFunction.kt", this::doTest);
            }

            @TestMetadata("functionLiteral.kt")
            public void testFunctionLiteral() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/functionLiteral.kt", this::doTest);
            }

            @TestMetadata("functionLiteralAsLastParameter.kt")
            public void testFunctionLiteralAsLastParameter() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/functionLiteralAsLastParameter.kt", this::doTest);
            }

            @TestMetadata("functionLiteralAsParameter.kt")
            public void testFunctionLiteralAsParameter() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/functionLiteralAsParameter.kt", this::doTest);
            }

            @TestMetadata("functionUsedBeforeDeclaration.kt")
            public void testFunctionUsedBeforeDeclaration() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/functionUsedBeforeDeclaration.kt", this::doTest);
            }

            @TestMetadata("functionWithTwoParametersCall.kt")
            public void testFunctionWithTwoParametersCall() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/functionWithTwoParametersCall.kt", this::doTest);
            }

            @TestMetadata("implicitItParameter.kt")
            public void testImplicitItParameter() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/implicitItParameter.kt", this::doTest);
            }

            @TestMetadata("KT-921.kt")
            public void testKT_921() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/KT-921.kt", this::doTest);
            }

            @TestMetadata("lambdaOrLocalFunInsideEnumMethod.kt")
            public void testLambdaOrLocalFunInsideEnumMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/lambdaOrLocalFunInsideEnumMethod.kt", this::doTest);
            }

            @TestMetadata("localExtFunction.kt")
            public void testLocalExtFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/localExtFunction.kt", this::doTest);
            }

            @TestMetadata("localInInitBlock.kt")
            public void testLocalInInitBlock() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/localInInitBlock.kt", this::doTest);
            }

            @TestMetadata("loopClosure.kt")
            public void testLoopClosure() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/loopClosure.kt", this::doTest);
            }

            @TestMetadata("mangling.kt")
            public void testMangling() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/mangling.kt", this::doTest);
            }

            @TestMetadata("manglingAnyMethods.kt")
            public void testManglingAnyMethods() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/manglingAnyMethods.kt", this::doTest);
            }

            @TestMetadata("manglingClashFunctionsAndClasses.kt")
            public void testManglingClashFunctionsAndClasses() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/manglingClashFunctionsAndClasses.kt", this::doTest);
            }

            @TestMetadata("manglingClashWithFunctionsWithoutParameters.kt")
            public void testManglingClashWithFunctionsWithoutParameters() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/manglingClashWithFunctionsWithoutParameters.kt", this::doTest);
            }

            @TestMetadata("manglingStability.kt")
            public void testManglingStability() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/manglingStability.kt", this::doTest);
            }

            @TestMetadata("namedArguments.kt")
            public void testNamedArguments() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/namedArguments.kt", this::doTest);
            }

            @TestMetadata("overloadClassConstructorByFactoryMethod.kt")
            public void testOverloadClassConstructorByFactoryMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/overloadClassConstructorByFactoryMethod.kt", this::doTest);
            }

            @TestMetadata("overloadOverridenFun.kt")
            public void testOverloadOverridenFun() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/overloadOverridenFun.kt", this::doTest);
            }

            @TestMetadata("overloadingWithInheritance.kt")
            public void testOverloadingWithInheritance() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/overloadingWithInheritance.kt", this::doTest);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/vararg.kt", this::doTest);
            }

            @TestMetadata("whenFunction.kt")
            public void testWhenFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/function/whenFunction.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/identifierClash")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IdentifierClash extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInIdentifierClash() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/identifierClash"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("overloadedFun.kt")
            public void testOverloadedFun() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/identifierClash/overloadedFun.kt", this::doTest);
            }

            @TestMetadata("privateDeclarations.kt")
            public void testPrivateDeclarations() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/identifierClash/privateDeclarations.kt", this::doTest);
            }

            @TestMetadata("useVariableOfNameOfFunction.kt")
            public void testUseVariableOfNameOfFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/identifierClash/useVariableOfNameOfFunction.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/identityEquals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IdentityEquals extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInIdentityEquals() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/identityEquals"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("identityEqualsMethod.kt")
            public void testIdentityEqualsMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/identityEquals/identityEqualsMethod.kt", this::doTest);
            }

            @TestMetadata("identityEqualsMethodForPrimitives.kt")
            public void testIdentityEqualsMethodForPrimitives() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/identityEquals/identityEqualsMethodForPrimitives.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/if")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class If extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInIf() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/if"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("ifElseAsExpressionWithThrow.kt")
            public void testIfElseAsExpressionWithThrow() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/if/ifElseAsExpressionWithThrow.kt", this::doTest);
            }

            @TestMetadata("ifElseCurlyBraces.kt")
            public void testIfElseCurlyBraces() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/if/ifElseCurlyBraces.kt", this::doTest);
            }

            @TestMetadata("ifInsideLambda.kt")
            public void testIfInsideLambda() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/if/ifInsideLambda.kt", this::doTest);
            }

            @TestMetadata("nestedIf.kt")
            public void testNestedIf() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/if/nestedIf.kt", this::doTest);
            }

            @TestMetadata("withEmptyBlocks.kt")
            public void testWithEmptyBlocks() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/if/withEmptyBlocks.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/invoke")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Invoke extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInInvoke() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/invoke"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("explicitInvokeLambda.kt")
            public void testExplicitInvokeLambda() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/explicitInvokeLambda.kt", this::doTest);
            }

            @TestMetadata("extensionInvoke.kt")
            public void testExtensionInvoke() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/extensionInvoke.kt", this::doTest);
            }

            @TestMetadata("inheritFromFunctionTraits.kt")
            public void testInheritFromFunctionTraits() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/inheritFromFunctionTraits.kt", this::doTest);
            }

            @TestMetadata("internalFunctionFromSuperclass.kt")
            public void testInternalFunctionFromSuperclass() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/internalFunctionFromSuperclass.kt", this::doTest);
            }

            @TestMetadata("invokeInExtensionFunctionLiteral.kt")
            public void testInvokeInExtensionFunctionLiteral() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/invokeInExtensionFunctionLiteral.kt", this::doTest);
            }

            @TestMetadata("invokeInFunctionLiteral.kt")
            public void testInvokeInFunctionLiteral() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/invokeInFunctionLiteral.kt", this::doTest);
            }

            @TestMetadata("invokeMethod.kt")
            public void testInvokeMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/invokeMethod.kt", this::doTest);
            }

            @TestMetadata("invokeOnExprByConvention.kt")
            public void testInvokeOnExprByConvention() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/invokeOnExprByConvention.kt", this::doTest);
            }

            @TestMetadata("invokeWithDispatchAndExtensionReceivers.kt")
            public void testInvokeWithDispatchAndExtensionReceivers() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/invokeWithDispatchAndExtensionReceivers.kt", this::doTest);
            }

            @TestMetadata("invokeWithDispatchReceiver.kt")
            public void testInvokeWithDispatchReceiver() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/invokeWithDispatchReceiver.kt", this::doTest);
            }

            @TestMetadata("invokeWithExtensionReceiver.kt")
            public void testInvokeWithExtensionReceiver() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/invokeWithExtensionReceiver.kt", this::doTest);
            }

            @TestMetadata("invokeWithImplicitDispatchReceiverAndExtensionReceiver.kt")
            public void testInvokeWithImplicitDispatchReceiverAndExtensionReceiver() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/invoke/invokeWithImplicitDispatchReceiverAndExtensionReceiver.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/misc")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Misc extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInMisc() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/misc"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("classWithoutPackage.kt")
            public void testClassWithoutPackage() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/classWithoutPackage.kt", this::doTest);
            }

            @TestMetadata("elvis.kt")
            public void testElvis() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/elvis.kt", this::doTest);
            }

            @TestMetadata("elvisReturnNested.kt")
            public void testElvisReturnNested() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/elvisReturnNested.kt", this::doTest);
            }

            @TestMetadata("elvisReturnSimple.kt")
            public void testElvisReturnSimple() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/elvisReturnSimple.kt", this::doTest);
            }

            @TestMetadata("elvisWithThrow.kt")
            public void testElvisWithThrow() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/elvisWithThrow.kt", this::doTest);
            }

            @TestMetadata("exclExcl.kt")
            public void testExclExcl() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/exclExcl.kt", this::doTest);
            }

            @TestMetadata("exclExclResultIsComputedOnce.kt")
            public void testExclExclResultIsComputedOnce() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/exclExclResultIsComputedOnce.kt", this::doTest);
            }

            @TestMetadata("exclExclThrows.kt")
            public void testExclExclThrows() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/exclExclThrows.kt", this::doTest);
            }

            @TestMetadata("extensionLiteralCalledInsideExtensionFunction.kt")
            public void testExtensionLiteralCalledInsideExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/extensionLiteralCalledInsideExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("extensionLiteralCreatedAtPackageLevel.kt")
            public void testExtensionLiteralCreatedAtPackageLevel() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/extensionLiteralCreatedAtPackageLevel.kt", this::doTest);
            }

            @TestMetadata("funInConstructor.kt")
            public void testFunInConstructor() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/funInConstructor.kt", this::doTest);
            }

            @TestMetadata("funInConstructorBlock.kt")
            public void testFunInConstructorBlock() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/funInConstructorBlock.kt", this::doTest);
            }

            @TestMetadata("inheritFromJetIterator.kt")
            public void testInheritFromJetIterator() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/inheritFromJetIterator.kt", this::doTest);
            }

            @TestMetadata("intRange.kt")
            public void testIntRange() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/intRange.kt", this::doTest);
            }

            @TestMetadata("KT-1052.kt")
            public void testKT_1052() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-1052.kt", this::doTest);
            }

            @TestMetadata("KT-1052-2.kt")
            public void testKT_1052_2() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-1052-2.kt", this::doTest);
            }

            @TestMetadata("KT-1361-1.kt")
            public void testKT_1361_1() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-1361-1.kt", this::doTest);
            }

            @TestMetadata("KT-1361-2.kt")
            public void testKT_1361_2() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-1361-2.kt", this::doTest);
            }

            @TestMetadata("KT-1865.kt")
            public void testKT_1865() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-1865.kt", this::doTest);
            }

            @TestMetadata("KT-2314.kt")
            public void testKT_2314() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-2314.kt", this::doTest);
            }

            @TestMetadata("KT-5058.kt")
            public void testKT_5058() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-5058.kt", this::doTest);
            }

            @TestMetadata("KT-740.kt")
            public void testKT_740() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-740.kt", this::doTest);
            }

            @TestMetadata("KT-740-2.kt")
            public void testKT_740_2() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-740-2.kt", this::doTest);
            }

            @TestMetadata("KT-740-3.kt")
            public void testKT_740_3() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-740-3.kt", this::doTest);
            }

            @TestMetadata("KT-817.kt")
            public void testKT_817() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/KT-817.kt", this::doTest);
            }

            @TestMetadata("kt9443.kt")
            public void testKt9443() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/kt9443.kt", this::doTest);
            }

            @TestMetadata("lazyProperty.kt")
            public void testLazyProperty() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/lazyProperty.kt", this::doTest);
            }

            @TestMetadata("localProperty.kt")
            public void testLocalProperty() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/localProperty.kt", this::doTest);
            }

            @TestMetadata("localVarAsFunction.kt")
            public void testLocalVarAsFunction() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/localVarAsFunction.kt", this::doTest);
            }

            @TestMetadata("packageLevelVarInPackage.kt")
            public void testPackageLevelVarInPackage() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/packageLevelVarInPackage.kt", this::doTest);
            }

            @TestMetadata("packageLevelVarInRoot.kt")
            public void testPackageLevelVarInRoot() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/packageLevelVarInRoot.kt", this::doTest);
            }

            @TestMetadata("packagePropertyCalledAsFun.kt")
            public void testPackagePropertyCalledAsFun() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/packagePropertyCalledAsFun.kt", this::doTest);
            }

            @TestMetadata("propertiesWithExplicitlyDefinedAccessorsWithoutBodies.kt")
            public void testPropertiesWithExplicitlyDefinedAccessorsWithoutBodies() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/propertiesWithExplicitlyDefinedAccessorsWithoutBodies.kt", this::doTest);
            }

            @TestMetadata("propertyAsFunCalledOnConstructor.kt")
            public void testPropertyAsFunCalledOnConstructor() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/propertyAsFunCalledOnConstructor.kt", this::doTest);
            }

            @TestMetadata("rightAssocForGeneratedConditionalOperator.kt")
            public void testRightAssocForGeneratedConditionalOperator() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/rightAssocForGeneratedConditionalOperator.kt", this::doTest);
            }

            @TestMetadata("safeCallComputesExpressionOnlyOnce.kt")
            public void testSafeCallComputesExpressionOnlyOnce() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/safeCallComputesExpressionOnlyOnce.kt", this::doTest);
            }

            @TestMetadata("stringInterpolationEvaluationOrder.kt")
            public void testStringInterpolationEvaluationOrder() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/stringInterpolationEvaluationOrder.kt", this::doTest);
            }

            @TestMetadata("temporaryVariableCreatedInPackageInitializer.kt")
            public void testTemporaryVariableCreatedInPackageInitializer() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/temporaryVariableCreatedInPackageInitializer.kt", this::doTest);
            }

            @TestMetadata("throwThrow.kt")
            public void testThrowThrow() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/throwThrow.kt", this::doTest);
            }

            @TestMetadata("toGeneratorInStdlib.kt")
            public void testToGeneratorInStdlib() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/toGeneratorInStdlib.kt", this::doTest);
            }

            @TestMetadata("whenReturnedWithoutBlock.kt")
            public void testWhenReturnedWithoutBlock() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/misc/whenReturnedWithoutBlock.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/stringClass")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class StringClass extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInStringClass() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/stringClass"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("extensionMethods.kt")
            public void testExtensionMethods() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/extensionMethods.kt", this::doTest);
            }

            @TestMetadata("intInTemplate.kt")
            public void testIntInTemplate() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/intInTemplate.kt", this::doTest);
            }

            @TestMetadata("kt2227.kt")
            public void testKt2227() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/kt2227.kt", this::doTest);
            }

            @TestMetadata("kt2227_2.kt")
            public void testKt2227_2() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/kt2227_2.kt", this::doTest);
            }

            @TestMetadata("multipleExpressionsInTemplate.kt")
            public void testMultipleExpressionsInTemplate() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/multipleExpressionsInTemplate.kt", this::doTest);
            }

            @TestMetadata("nullableTypeInStringTemplate.kt")
            public void testNullableTypeInStringTemplate() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/nullableTypeInStringTemplate.kt", this::doTest);
            }

            @TestMetadata("numbersInTemplate.kt")
            public void testNumbersInTemplate() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/numbersInTemplate.kt", this::doTest);
            }

            @TestMetadata("objectToStringCallInTemplate.kt")
            public void testObjectToStringCallInTemplate() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/objectToStringCallInTemplate.kt", this::doTest);
            }

            @TestMetadata("stringAssignment.kt")
            public void testStringAssignment() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/stringAssignment.kt", this::doTest);
            }

            @TestMetadata("stringConstant.kt")
            public void testStringConstant() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/stringConstant.kt", this::doTest);
            }

            @TestMetadata("stringInTemplate.kt")
            public void testStringInTemplate() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/stringInTemplate.kt", this::doTest);
            }

            @TestMetadata("stringNotEqualToNumber.kt")
            public void testStringNotEqualToNumber() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/stringNotEqualToNumber.kt", this::doTest);
            }

            @TestMetadata("subSequence.kt")
            public void testSubSequence() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringClass/subSequence.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/stringTemplates")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class StringTemplates extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInStringTemplates() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/stringTemplates"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("nonStrings.kt")
            public void testNonStrings() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringTemplates/nonStrings.kt", this::doTest);
            }

            @TestMetadata("objectWithToString.kt")
            public void testObjectWithToString() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringTemplates/objectWithToString.kt", this::doTest);
            }

            @TestMetadata("stringValues.kt")
            public void testStringValues() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/stringTemplates/stringValues.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/try")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Try extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInTry() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/try"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("exceptionToString.kt")
            public void testExceptionToString() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/exceptionToString.kt", this::doTest);
            }

            @TestMetadata("multipleCatchBlocks.kt")
            public void testMultipleCatchBlocks() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/multipleCatchBlocks.kt", this::doTest);
            }

            @TestMetadata("rethrowExceptionIfNotCaught.kt")
            public void testRethrowExceptionIfNotCaught() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/rethrowExceptionIfNotCaught.kt", this::doTest);
            }

            @TestMetadata("tryCatchCorrectForSubclasses.kt")
            public void testTryCatchCorrectForSubclasses() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/tryCatchCorrectForSubclasses.kt", this::doTest);
            }

            @TestMetadata("tryCatchDynamic.kt")
            public void testTryCatchDynamic() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/tryCatchDynamic.kt", this::doTest);
            }

            @TestMetadata("tryCatchExpr.kt")
            public void testTryCatchExpr() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/tryCatchExpr.kt", this::doTest);
            }

            @TestMetadata("tryCatchExpressionWithMessage.kt")
            public void testTryCatchExpressionWithMessage() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/tryCatchExpressionWithMessage.kt", this::doTest);
            }

            @TestMetadata("tryCatchThrowable.kt")
            public void testTryCatchThrowable() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/tryCatchThrowable.kt", this::doTest);
            }

            @TestMetadata("tryCatchWithDifferentParameterNames.kt")
            public void testTryCatchWithDifferentParameterNames() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/try/tryCatchWithDifferentParameterNames.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/when")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class When extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInWhen() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/when"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("doWhileWithOneStmWhen.kt")
            public void testDoWhileWithOneStmWhen() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/doWhileWithOneStmWhen.kt", this::doTest);
            }

            @TestMetadata("empty.kt")
            public void testEmpty() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/empty.kt", this::doTest);
            }

            @TestMetadata("exhaustiveCheckException.kt")
            public void testExhaustiveCheckException() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/exhaustiveCheckException.kt", this::doTest);
            }

            @TestMetadata("externalEnumSubject.kt")
            public void testExternalEnumSubject() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/externalEnumSubject.kt", this::doTest);
            }

            @TestMetadata("forWithOneStmWhen.kt")
            public void testForWithOneStmWhen() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/forWithOneStmWhen.kt", this::doTest);
            }

            @TestMetadata("ifInWhen.kt")
            public void testIfInWhen() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/ifInWhen.kt", this::doTest);
            }

            @TestMetadata("ifInWhenDanglingElseIssue.kt")
            public void testIfInWhenDanglingElseIssue() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/ifInWhenDanglingElseIssue.kt", this::doTest);
            }

            @TestMetadata("ifWithOneStmWhen.kt")
            public void testIfWithOneStmWhen() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/ifWithOneStmWhen.kt", this::doTest);
            }

            @TestMetadata("kt1665.kt")
            public void testKt1665() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/kt1665.kt", this::doTest);
            }

            @TestMetadata("matchNullableType.kt")
            public void testMatchNullableType() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/matchNullableType.kt", this::doTest);
            }

            @TestMetadata("multipleCases.kt")
            public void testMultipleCases() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/multipleCases.kt", this::doTest);
            }

            @TestMetadata("whenAsExpression.kt")
            public void testWhenAsExpression() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenAsExpression.kt", this::doTest);
            }

            @TestMetadata("whenAsExpressionWithThrow.kt")
            public void testWhenAsExpressionWithThrow() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenAsExpressionWithThrow.kt", this::doTest);
            }

            @TestMetadata("whenConditionWithReturn.kt")
            public void testWhenConditionWithReturn() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenConditionWithReturn.kt", this::doTest);
            }

            @TestMetadata("whenEqualsPattern.kt")
            public void testWhenEqualsPattern() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenEqualsPattern.kt", this::doTest);
            }

            @TestMetadata("whenEvaluatesArgumentOnlyOnce.kt")
            public void testWhenEvaluatesArgumentOnlyOnce() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenEvaluatesArgumentOnlyOnce.kt", this::doTest);
            }

            @TestMetadata("whenExecutesOnlyOnce.kt")
            public void testWhenExecutesOnlyOnce() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenExecutesOnlyOnce.kt", this::doTest);
            }

            @TestMetadata("whenNotType.kt")
            public void testWhenNotType() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenNotType.kt", this::doTest);
            }

            @TestMetadata("whenStatementWithRangeClause.kt")
            public void testWhenStatementWithRangeClause() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenStatementWithRangeClause.kt", this::doTest);
            }

            @TestMetadata("whenType.kt")
            public void testWhenType() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenType.kt", this::doTest);
            }

            @TestMetadata("whenValue.kt")
            public void testWhenValue() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenValue.kt", this::doTest);
            }

            @TestMetadata("whenValueOrType.kt")
            public void testWhenValueOrType() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenValueOrType.kt", this::doTest);
            }

            @TestMetadata("whenWithCharRangeClause.kt")
            public void testWhenWithCharRangeClause() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithCharRangeClause.kt", this::doTest);
            }

            @TestMetadata("whenWithCustomRangeClause.kt")
            public void testWhenWithCustomRangeClause() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithCustomRangeClause.kt", this::doTest);
            }

            @TestMetadata("whenWithIf.kt")
            public void testWhenWithIf() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithIf.kt", this::doTest);
            }

            @TestMetadata("whenWithIfConditionAndOnlyElse.kt")
            public void testWhenWithIfConditionAndOnlyElse() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithIfConditionAndOnlyElse.kt", this::doTest);
            }

            @TestMetadata("whenWithLongRangeClause.kt")
            public void testWhenWithLongRangeClause() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithLongRangeClause.kt", this::doTest);
            }

            @TestMetadata("whenWithOneStmWhen.kt")
            public void testWhenWithOneStmWhen() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithOneStmWhen.kt", this::doTest);
            }

            @TestMetadata("whenWithOnlyElse.kt")
            public void testWhenWithOnlyElse() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithOnlyElse.kt", this::doTest);
            }

            @TestMetadata("whenWithRangeClause.kt")
            public void testWhenWithRangeClause() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithRangeClause.kt", this::doTest);
            }

            @TestMetadata("whenWithoutExpression.kt")
            public void testWhenWithoutExpression() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whenWithoutExpression.kt", this::doTest);
            }

            @TestMetadata("whileWithOneStmWhen.kt")
            public void testWhileWithOneStmWhen() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/when/whileWithOneStmWhen.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/expression/while")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class While extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInWhile() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/expression/while"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("doWhileWithComplexCondition.kt")
            public void testDoWhileWithComplexCondition() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/while/doWhileWithComplexCondition.kt", this::doTest);
            }

            @TestMetadata("doWhileWithComplexConditionAndContinue.kt")
            public void testDoWhileWithComplexConditionAndContinue() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/while/doWhileWithComplexConditionAndContinue.kt", this::doTest);
            }

            @TestMetadata("whileWithComplexCondition.kt")
            public void testWhileWithComplexCondition() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/while/whileWithComplexCondition.kt", this::doTest);
            }

            @TestMetadata("whileWithComplexConditionAndContinue.kt")
            public void testWhileWithComplexConditionAndContinue() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/while/whileWithComplexConditionAndContinue.kt", this::doTest);
            }

            @TestMetadata("whileWithComplexOneStatement.kt")
            public void testWhileWithComplexOneStatement() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/expression/while/whileWithComplexOneStatement.kt", this::doTest);
            }
        }
    }

    @TestMetadata("js/js.translator/testData/box/extensionFunction")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ExtensionFunction extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInExtensionFunction() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/extensionFunction"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("extensionForSuperclass.kt")
        public void testExtensionForSuperclass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionForSuperclass.kt", this::doTest);
        }

        @TestMetadata("extensionFunctionCalledFromExtensionFunction.kt")
        public void testExtensionFunctionCalledFromExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionFunctionCalledFromExtensionFunction.kt", this::doTest);
        }

        @TestMetadata("extensionFunctionCalledFromFor.kt")
        public void testExtensionFunctionCalledFromFor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionFunctionCalledFromFor.kt", this::doTest);
        }

        @TestMetadata("extensionFunctionOnExpression.kt")
        public void testExtensionFunctionOnExpression() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionFunctionOnExpression.kt", this::doTest);
        }

        @TestMetadata("extensionInsideFunctionLiteral.kt")
        public void testExtensionInsideFunctionLiteral() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionInsideFunctionLiteral.kt", this::doTest);
        }

        @TestMetadata("extensionLiteralPassedToFunction.kt")
        public void testExtensionLiteralPassedToFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionLiteralPassedToFunction.kt", this::doTest);
        }

        @TestMetadata("extensionOnClassWithExplicitAndImplicitReceiver.kt")
        public void testExtensionOnClassWithExplicitAndImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionOnClassWithExplicitAndImplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("extensionPropertyOnClassWithExplicitAndImplicitReceiver.kt")
        public void testExtensionPropertyOnClassWithExplicitAndImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionPropertyOnClassWithExplicitAndImplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("extensionUsedInsideClass.kt")
        public void testExtensionUsedInsideClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionUsedInsideClass.kt", this::doTest);
        }

        @TestMetadata("extensionWithImplicitReceiver.kt")
        public void testExtensionWithImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/extensionWithImplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/generic.kt", this::doTest);
        }

        @TestMetadata("implicitReceiverInExtension.kt")
        public void testImplicitReceiverInExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/implicitReceiverInExtension.kt", this::doTest);
        }

        @TestMetadata("intExtension.kt")
        public void testIntExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/intExtension.kt", this::doTest);
        }

        @TestMetadata("superClassMemberInExtension.kt")
        public void testSuperClassMemberInExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/superClassMemberInExtension.kt", this::doTest);
        }

        @TestMetadata("virtualExtension.kt")
        public void testVirtualExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/virtualExtension.kt", this::doTest);
        }

        @TestMetadata("virtualExtensionOverride.kt")
        public void testVirtualExtensionOverride() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionFunction/virtualExtensionOverride.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/extensionProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ExtensionProperty extends AbstractIrBoxJsTest {
        @TestMetadata("absExtension.kt")
        public void testAbsExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionProperty/absExtension.kt", this::doTest);
        }

        public void testAllFilesPresentInExtensionProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/extensionProperty"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("externalExtensionProperty.kt")
        public void testExternalExtensionProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionProperty/externalExtensionProperty.kt", this::doTest);
        }

        @TestMetadata("inClass.kt")
        public void testInClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionProperty/inClass.kt", this::doTest);
        }

        @TestMetadata("privateExtensionProperty.kt")
        public void testPrivateExtensionProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionProperty/privateExtensionProperty.kt", this::doTest);
        }

        @TestMetadata("propertyWithGetterAndSetter.kt")
        public void testPropertyWithGetterAndSetter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionProperty/propertyWithGetterAndSetter.kt", this::doTest);
        }

        @TestMetadata("simplePropertyWithGetter.kt")
        public void testSimplePropertyWithGetter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/extensionProperty/simplePropertyWithGetter.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/incremental")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Incremental extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInIncremental() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/incremental"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("catchScope.kt")
        public void testCatchScope() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/catchScope.kt", this::doTest);
        }

        @TestMetadata("classReferencingClass.kt")
        public void testClassReferencingClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/classReferencingClass.kt", this::doTest);
        }

        @TestMetadata("coroutines.kt")
        public void testCoroutines() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/coroutines.kt", this::doTest);
        }

        @TestMetadata("defaultArguments.kt")
        public void testDefaultArguments() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/defaultArguments.kt", this::doTest);
        }

        @TestMetadata("enumUsage.kt")
        public void testEnumUsage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/enumUsage.kt", this::doTest);
        }

        @TestMetadata("exportedPackage.kt")
        public void testExportedPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/exportedPackage.kt", this::doTest);
        }

        @TestMetadata("functionReferencingClass.kt")
        public void testFunctionReferencingClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/functionReferencingClass.kt", this::doTest);
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/inline.kt", this::doTest);
        }

        @TestMetadata("inlineLambda.kt")
        public void testInlineLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/inlineLambda.kt", this::doTest);
        }

        @TestMetadata("jsModule.kt")
        public void testJsModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/jsModule.kt", this::doTest);
        }

        @TestMetadata("multipleExport.kt")
        public void testMultipleExport() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/multipleExport.kt", this::doTest);
        }

        @TestMetadata("multipleReimport.kt")
        public void testMultipleReimport() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/multipleReimport.kt", this::doTest);
        }

        @TestMetadata("packagesWithSameName.kt")
        public void testPackagesWithSameName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/packagesWithSameName.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/simple.kt", this::doTest);
        }

        @TestMetadata("sourceMapSourceEmbedding.kt")
        public void testSourceMapSourceEmbedding() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/sourceMapSourceEmbedding.kt", this::doTest);
        }

        @TestMetadata("syntheticStatement.kt")
        public void testSyntheticStatement() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/incremental/syntheticStatement.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/inheritance")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inheritance extends AbstractIrBoxJsTest {
        @TestMetadata("abstractVarOverride.kt")
        public void testAbstractVarOverride() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/abstractVarOverride.kt", this::doTest);
        }

        public void testAllFilesPresentInInheritance() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/inheritance"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("baseCall.kt")
        public void testBaseCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/baseCall.kt", this::doTest);
        }

        @TestMetadata("baseCallOrder.kt")
        public void testBaseCallOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/baseCallOrder.kt", this::doTest);
        }

        @TestMetadata("baseClassDefinedAfterDerived.kt")
        public void testBaseClassDefinedAfterDerived() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/baseClassDefinedAfterDerived.kt", this::doTest);
        }

        @TestMetadata("complexInitializationOrder.kt")
        public void testComplexInitializationOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/complexInitializationOrder.kt", this::doTest);
        }

        @TestMetadata("definitionOrder.kt")
        public void testDefinitionOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/definitionOrder.kt", this::doTest);
        }

        @TestMetadata("fromFakeClasses.kt")
        public void testFromFakeClasses() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/fromFakeClasses.kt", this::doTest);
        }

        @TestMetadata("fromNativeInterface.kt")
        public void testFromNativeInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/fromNativeInterface.kt", this::doTest);
        }

        @TestMetadata("fromNestedNativeClass.kt")
        public void testFromNestedNativeClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/fromNestedNativeClass.kt", this::doTest);
        }

        @TestMetadata("inheritFromCharIterator.kt")
        public void testInheritFromCharIterator() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/inheritFromCharIterator.kt", this::doTest);
        }

        @TestMetadata("initializationOrder.kt")
        public void testInitializationOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/initializationOrder.kt", this::doTest);
        }

        @TestMetadata("initializersOfBasicClassExecute.kt")
        public void testInitializersOfBasicClassExecute() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/initializersOfBasicClassExecute.kt", this::doTest);
        }

        @TestMetadata("kt3499.kt")
        public void testKt3499() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/kt3499.kt", this::doTest);
        }

        @TestMetadata("methodOverride.kt")
        public void testMethodOverride() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/methodOverride.kt", this::doTest);
        }

        @TestMetadata("nativeNativeKotlin.kt")
        public void testNativeNativeKotlin() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/nativeNativeKotlin.kt", this::doTest);
        }

        @TestMetadata("overrideAnyMethods.kt")
        public void testOverrideAnyMethods() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/overrideAnyMethods.kt", this::doTest);
        }

        @TestMetadata("valOverride.kt")
        public void testValOverride() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/valOverride.kt", this::doTest);
        }

        @TestMetadata("valuePassedToAncestorConstructor.kt")
        public void testValuePassedToAncestorConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/valuePassedToAncestorConstructor.kt", this::doTest);
        }

        @TestMetadata("withInitializeMethod.kt")
        public void testWithInitializeMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/withInitializeMethod.kt", this::doTest);
        }

        @TestMetadata("js/js.translator/testData/box/inheritance/interfaces")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Interfaces extends AbstractIrBoxJsTest {
            @TestMetadata("abstractClassInheritingDefaultMethod.kt")
            public void testAbstractClassInheritingDefaultMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/interfaces/abstractClassInheritingDefaultMethod.kt", this::doTest);
            }

            public void testAllFilesPresentInInterfaces() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/inheritance/interfaces"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("withDefaultMethod.kt")
            public void testWithDefaultMethod() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/interfaces/withDefaultMethod.kt", this::doTest);
            }

            @TestMetadata("withDefaultMethodFromSuperInterface.kt")
            public void testWithDefaultMethodFromSuperInterface() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/interfaces/withDefaultMethodFromSuperInterface.kt", this::doTest);
            }

            @TestMetadata("withDefaultProperty.kt")
            public void testWithDefaultProperty() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/inheritance/interfaces/withDefaultProperty.kt", this::doTest);
            }
        }
    }

    @TestMetadata("js/js.translator/testData/box/initialize")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Initialize extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInInitialize() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/initialize"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("classInitializer.kt")
        public void testClassInitializer() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/classInitializer.kt", this::doTest);
        }

        @TestMetadata("complexPropertyInitializer.kt")
        public void testComplexPropertyInitializer() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/complexPropertyInitializer.kt", this::doTest);
        }

        @TestMetadata("complexTopLevelPropertyInitializer.kt")
        public void testComplexTopLevelPropertyInitializer() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/complexTopLevelPropertyInitializer.kt", this::doTest);
        }

        @TestMetadata("declarationInitializedWithThrow.kt")
        public void testDeclarationInitializedWithThrow() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/declarationInitializedWithThrow.kt", this::doTest);
        }

        @TestMetadata("lateinit.kt")
        public void testLateinit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/lateinit.kt", this::doTest);
        }

        @TestMetadata("propertyInitializationOrder.kt")
        public void testPropertyInitializationOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/propertyInitializationOrder.kt", this::doTest);
        }

        @TestMetadata("rootPackageValInit.kt")
        public void testRootPackageValInit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/rootPackageValInit.kt", this::doTest);
        }

        @TestMetadata("rootValInit.kt")
        public void testRootValInit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/rootValInit.kt", this::doTest);
        }

        @TestMetadata("uninitializedLateinit.kt")
        public void testUninitializedLateinit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/initialize/uninitializedLateinit.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/inline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inline extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInInline() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/inline"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("anonymousFunction.kt")
        public void testAnonymousFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/anonymousFunction.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectInlineMethod.kt")
        public void testAnonymousObjectInlineMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/anonymousObjectInlineMethod.kt", this::doTest);
        }

        @TestMetadata("arrayLiteralAliasing.kt")
        public void testArrayLiteralAliasing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/arrayLiteralAliasing.kt", this::doTest);
        }

        @TestMetadata("astCopy.kt")
        public void testAstCopy() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/astCopy.kt", this::doTest);
        }

        @TestMetadata("callFunction.kt")
        public void testCallFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/callFunction.kt", this::doTest);
        }

        @TestMetadata("callInlineFunctionOnTopLevel.kt")
        public void testCallInlineFunctionOnTopLevel() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/callInlineFunctionOnTopLevel.kt", this::doTest);
        }

        @TestMetadata("callInlineFunctionOnTopLevelSimple.kt")
        public void testCallInlineFunctionOnTopLevelSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/callInlineFunctionOnTopLevelSimple.kt", this::doTest);
        }

        @TestMetadata("callableReference.kt")
        public void testCallableReference() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/callableReference.kt", this::doTest);
        }

        @TestMetadata("callableReferenceOfLocalInline.kt")
        public void testCallableReferenceOfLocalInline() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/callableReferenceOfLocalInline.kt", this::doTest);
        }

        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/classObject.kt", this::doTest);
        }

        @TestMetadata("dontInlineFunctionCall.kt")
        public void testDontInlineFunctionCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/dontInlineFunctionCall.kt", this::doTest);
        }

        @TestMetadata("expressionBodyWithLambdaCall.kt")
        public void testExpressionBodyWithLambdaCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/expressionBodyWithLambdaCall.kt", this::doTest);
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/extension.kt", this::doTest);
        }

        @TestMetadata("extensionWithManyArguments.kt")
        public void testExtensionWithManyArguments() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/extensionWithManyArguments.kt", this::doTest);
        }

        @TestMetadata("identityEquals.kt")
        public void testIdentityEquals() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/identityEquals.kt", this::doTest);
        }

        @TestMetadata("incrementProperty.kt")
        public void testIncrementProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/incrementProperty.kt", this::doTest);
        }

        @TestMetadata("inlineCallInsideStringTemplate.kt")
        public void testInlineCallInsideStringTemplate() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineCallInsideStringTemplate.kt", this::doTest);
        }

        @TestMetadata("inlineCallNoInline.kt")
        public void testInlineCallNoInline() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineCallNoInline.kt", this::doTest);
        }

        @TestMetadata("inlineCapturingThis.kt")
        public void testInlineCapturingThis() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineCapturingThis.kt", this::doTest);
        }

        @TestMetadata("inlineChain.kt")
        public void testInlineChain() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineChain.kt", this::doTest);
        }

        @TestMetadata("inlineChainWithFewStatements.kt")
        public void testInlineChainWithFewStatements() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineChainWithFewStatements.kt", this::doTest);
        }

        @TestMetadata("inlineDefaultArgument.kt")
        public void testInlineDefaultArgument() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineDefaultArgument.kt", this::doTest);
        }

        @TestMetadata("inlineFunctionInLambda.kt")
        public void testInlineFunctionInLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineFunctionInLambda.kt", this::doTest);
        }

        @TestMetadata("inlineGenericSimple.kt")
        public void testInlineGenericSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineGenericSimple.kt", this::doTest);
        }

        @TestMetadata("inlineIf.kt")
        public void testInlineIf() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineIf.kt", this::doTest);
        }

        @TestMetadata("inlineImportNameClash.kt")
        public void testInlineImportNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineImportNameClash.kt", this::doTest);
        }

        @TestMetadata("inlineInInlineWithLambda.kt")
        public void testInlineInInlineWithLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineInInlineWithLambda.kt", this::doTest);
        }

        @TestMetadata("inlineInInlineWithLambdaPrivate.kt")
        public void testInlineInInlineWithLambdaPrivate() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineInInlineWithLambdaPrivate.kt", this::doTest);
        }

        @TestMetadata("inlineInc.kt")
        public void testInlineInc() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineInc.kt", this::doTest);
        }

        @TestMetadata("inlineIntSimple.kt")
        public void testInlineIntSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineIntSimple.kt", this::doTest);
        }

        @TestMetadata("inlineLambdaNoCapture.kt")
        public void testInlineLambdaNoCapture() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineLambdaNoCapture.kt", this::doTest);
        }

        @TestMetadata("inlineLambdaWithCapture.kt")
        public void testInlineLambdaWithCapture() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineLambdaWithCapture.kt", this::doTest);
        }

        @TestMetadata("inlineMethod.kt")
        public void testInlineMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineMethod.kt", this::doTest);
        }

        @TestMetadata("inlineNoReturn.kt")
        public void testInlineNoReturn() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineNoReturn.kt", this::doTest);
        }

        @TestMetadata("inlineOrder.kt")
        public void testInlineOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineOrder.kt", this::doTest);
        }

        @TestMetadata("inlineSimpleAssignment.kt")
        public void testInlineSimpleAssignment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/inlineSimpleAssignment.kt", this::doTest);
        }

        @TestMetadata("innerOuterThis.kt")
        public void testInnerOuterThis() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/innerOuterThis.kt", this::doTest);
        }

        @TestMetadata("iteratorOnInlineFunctionResult.kt")
        public void testIteratorOnInlineFunctionResult() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/iteratorOnInlineFunctionResult.kt", this::doTest);
        }

        @TestMetadata("jsCode.kt")
        public void testJsCode() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/jsCode.kt", this::doTest);
        }

        @TestMetadata("jsCodeVarDeclared.kt")
        public void testJsCodeVarDeclared() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/jsCodeVarDeclared.kt", this::doTest);
        }

        @TestMetadata("lambdaInLambda.kt")
        public void testLambdaInLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/lambdaInLambda.kt", this::doTest);
        }

        @TestMetadata("lambdaReassignment.kt")
        public void testLambdaReassignment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/lambdaReassignment.kt", this::doTest);
        }

        @TestMetadata("lambdaReassignmentWithCapture.kt")
        public void testLambdaReassignmentWithCapture() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/lambdaReassignmentWithCapture.kt", this::doTest);
        }

        @TestMetadata("localInlineExtensionFunction.kt")
        public void testLocalInlineExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/localInlineExtensionFunction.kt", this::doTest);
        }

        @TestMetadata("localInlineFunction.kt")
        public void testLocalInlineFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/localInlineFunction.kt", this::doTest);
        }

        @TestMetadata("localInlineFunctionComplex.kt")
        public void testLocalInlineFunctionComplex() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/localInlineFunctionComplex.kt", this::doTest);
        }

        @TestMetadata("localInlineFunctionDeclaredInLambda.kt")
        public void testLocalInlineFunctionDeclaredInLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/localInlineFunctionDeclaredInLambda.kt", this::doTest);
        }

        @TestMetadata("localInlineFunctionNameClash.kt")
        public void testLocalInlineFunctionNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/localInlineFunctionNameClash.kt", this::doTest);
        }

        @TestMetadata("localInlineFunctionReference.kt")
        public void testLocalInlineFunctionReference() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/localInlineFunctionReference.kt", this::doTest);
        }

        @TestMetadata("metadataForPublicFunction.kt")
        public void testMetadataForPublicFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/metadataForPublicFunction.kt", this::doTest);
        }

        @TestMetadata("multiDeclaration.kt")
        public void testMultiDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/multiDeclaration.kt", this::doTest);
        }

        @TestMetadata("noInlineLambda.kt")
        public void testNoInlineLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/noInlineLambda.kt", this::doTest);
        }

        @TestMetadata("operators.kt")
        public void testOperators() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/operators.kt", this::doTest);
        }

        @TestMetadata("params.kt")
        public void testParams() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/params.kt", this::doTest);
        }

        @TestMetadata("rootConstructor.kt")
        public void testRootConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/rootConstructor.kt", this::doTest);
        }

        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/safeCall.kt", this::doTest);
        }

        @TestMetadata("sameNameOfDeclarationsInSameModule.kt")
        public void testSameNameOfDeclarationsInSameModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/sameNameOfDeclarationsInSameModule.kt", this::doTest);
        }

        @TestMetadata("severalClosures.kt")
        public void testSeveralClosures() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/severalClosures.kt", this::doTest);
        }

        @TestMetadata("severalUsage.kt")
        public void testSeveralUsage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/severalUsage.kt", this::doTest);
        }

        @TestMetadata("simpleDouble.kt")
        public void testSimpleDouble() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/simpleDouble.kt", this::doTest);
        }

        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/simpleEnum.kt", this::doTest);
        }

        @TestMetadata("simpleInt.kt")
        public void testSimpleInt() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/simpleInt.kt", this::doTest);
        }

        @TestMetadata("simpleLambda.kt")
        public void testSimpleLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/simpleLambda.kt", this::doTest);
        }

        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/simpleObject.kt", this::doTest);
        }

        @TestMetadata("simpleReturnFunctionWithResultUnused.kt")
        public void testSimpleReturnFunctionWithResultUnused() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/simpleReturnFunctionWithResultUnused.kt", this::doTest);
        }

        @TestMetadata("statementsAfterReturn.kt")
        public void testStatementsAfterReturn() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/statementsAfterReturn.kt", this::doTest);
        }

        @TestMetadata("thisImplicitlyCaptured.kt")
        public void testThisImplicitlyCaptured() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/thisImplicitlyCaptured.kt", this::doTest);
        }

        @TestMetadata("thisLiteralAliasing.kt")
        public void testThisLiteralAliasing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/thisLiteralAliasing.kt", this::doTest);
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inline/vararg.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/inlineEvaluationOrder")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineEvaluationOrder extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInInlineEvaluationOrder() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/inlineEvaluationOrder"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("alsoWithReassingment.kt")
        public void testAlsoWithReassingment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/alsoWithReassingment.kt", this::doTest);
        }

        @TestMetadata("argumentOfCall.kt")
        public void testArgumentOfCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/argumentOfCall.kt", this::doTest);
        }

        @TestMetadata("argumentOfCallMultipleInlineCalls.kt")
        public void testArgumentOfCallMultipleInlineCalls() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/argumentOfCallMultipleInlineCalls.kt", this::doTest);
        }

        @TestMetadata("argumentOfInlineCall.kt")
        public void testArgumentOfInlineCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/argumentOfInlineCall.kt", this::doTest);
        }

        @TestMetadata("argumentOfNew.kt")
        public void testArgumentOfNew() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/argumentOfNew.kt", this::doTest);
        }

        @TestMetadata("arrayAccess1.kt")
        public void testArrayAccess1() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/arrayAccess1.kt", this::doTest);
        }

        @TestMetadata("arrayAccess2.kt")
        public void testArrayAccess2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/arrayAccess2.kt", this::doTest);
        }

        @TestMetadata("arrayAccess3.kt")
        public void testArrayAccess3() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/arrayAccess3.kt", this::doTest);
        }

        @TestMetadata("arrayAccessLhsDecomposed.kt")
        public void testArrayAccessLhsDecomposed() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/arrayAccessLhsDecomposed.kt", this::doTest);
        }

        @TestMetadata("arrayLiteral.kt")
        public void testArrayLiteral() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/arrayLiteral.kt", this::doTest);
        }

        @TestMetadata("arrayLiteralMultipleInlineCalls.kt")
        public void testArrayLiteralMultipleInlineCalls() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/arrayLiteralMultipleInlineCalls.kt", this::doTest);
        }

        @TestMetadata("arrayLiteralNested.kt")
        public void testArrayLiteralNested() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/arrayLiteralNested.kt", this::doTest);
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/assignment.kt", this::doTest);
        }

        @TestMetadata("binaryOperator.kt")
        public void testBinaryOperator() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/binaryOperator.kt", this::doTest);
        }

        @TestMetadata("binaryOperatorMultipleInlineCalls.kt")
        public void testBinaryOperatorMultipleInlineCalls() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/binaryOperatorMultipleInlineCalls.kt", this::doTest);
        }

        @TestMetadata("callQualifier.kt")
        public void testCallQualifier() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/callQualifier.kt", this::doTest);
        }

        @TestMetadata("callQualifierComplex.kt")
        public void testCallQualifierComplex() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/callQualifierComplex.kt", this::doTest);
        }

        @TestMetadata("capturedVarAsArgument.kt")
        public void testCapturedVarAsArgument() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/capturedVarAsArgument.kt", this::doTest);
        }

        @TestMetadata("conditional.kt")
        public void testConditional() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/conditional.kt", this::doTest);
        }

        @TestMetadata("conditionalElvis.kt")
        public void testConditionalElvis() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/conditionalElvis.kt", this::doTest);
        }

        @TestMetadata("conditionalNested.kt")
        public void testConditionalNested() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/conditionalNested.kt", this::doTest);
        }

        @TestMetadata("conditionalTestExpression.kt")
        public void testConditionalTestExpression() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/conditionalTestExpression.kt", this::doTest);
        }

        @TestMetadata("conditionalTestExpressionElvis.kt")
        public void testConditionalTestExpressionElvis() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/conditionalTestExpressionElvis.kt", this::doTest);
        }

        @TestMetadata("continueInExtractedDoWhile.kt")
        public void testContinueInExtractedDoWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/continueInExtractedDoWhile.kt", this::doTest);
        }

        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/doWhile.kt", this::doTest);
        }

        @TestMetadata("doWhileComplex.kt")
        public void testDoWhileComplex() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/doWhileComplex.kt", this::doTest);
        }

        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/for.kt", this::doTest);
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/if.kt", this::doTest);
        }

        @TestMetadata("inlineFunctionAsParameterOfQualifiedCall.kt")
        public void testInlineFunctionAsParameterOfQualifiedCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/inlineFunctionAsParameterOfQualifiedCall.kt", this::doTest);
        }

        @TestMetadata("lambdaPropertyExtracted.kt")
        public void testLambdaPropertyExtracted() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/lambdaPropertyExtracted.kt", this::doTest);
        }

        @TestMetadata("lambdaWithClosure.kt")
        public void testLambdaWithClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/lambdaWithClosure.kt", this::doTest);
        }

        @TestMetadata("logicalAnd.kt")
        public void testLogicalAnd() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/logicalAnd.kt", this::doTest);
        }

        @TestMetadata("logicalAndOrMultipleInlineCalls.kt")
        public void testLogicalAndOrMultipleInlineCalls() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/logicalAndOrMultipleInlineCalls.kt", this::doTest);
        }

        @TestMetadata("logicalOr.kt")
        public void testLogicalOr() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/logicalOr.kt", this::doTest);
        }

        @TestMetadata("methodCallQualifierWithSideEffect.kt")
        public void testMethodCallQualifierWithSideEffect() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/methodCallQualifierWithSideEffect.kt", this::doTest);
        }

        @TestMetadata("methodDecomposedWithBind.kt")
        public void testMethodDecomposedWithBind() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/methodDecomposedWithBind.kt", this::doTest);
        }

        @TestMetadata("methodInlineCallQualifierWithSideEffect.kt")
        public void testMethodInlineCallQualifierWithSideEffect() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/methodInlineCallQualifierWithSideEffect.kt", this::doTest);
        }

        @TestMetadata("multiDeclaration.kt")
        public void testMultiDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/multiDeclaration.kt", this::doTest);
        }

        @TestMetadata("multiDeclarationComplex.kt")
        public void testMultiDeclarationComplex() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/multiDeclarationComplex.kt", this::doTest);
        }

        @TestMetadata("nestedContinueInExtractedDoWhile.kt")
        public void testNestedContinueInExtractedDoWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/nestedContinueInExtractedDoWhile.kt", this::doTest);
        }

        @TestMetadata("nestedInlineCall.kt")
        public void testNestedInlineCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/nestedInlineCall.kt", this::doTest);
        }

        @TestMetadata("propertiesInitializationOrder.kt")
        public void testPropertiesInitializationOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/propertiesInitializationOrder.kt", this::doTest);
        }

        @TestMetadata("propertiesInitializationOrderSimple.kt")
        public void testPropertiesInitializationOrderSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/propertiesInitializationOrderSimple.kt", this::doTest);
        }

        @TestMetadata("propertyAccessAfterModification.kt")
        public void testPropertyAccessAfterModification() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/propertyAccessAfterModification.kt", this::doTest);
        }

        @TestMetadata("propertyAccessAndInitializer.kt")
        public void testPropertyAccessAndInitializer() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/propertyAccessAndInitializer.kt", this::doTest);
        }

        @TestMetadata("propertyAccessWithSideEffect.kt")
        public void testPropertyAccessWithSideEffect() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/propertyAccessWithSideEffect.kt", this::doTest);
        }

        @TestMetadata("propertyWithSideEffectExtracted.kt")
        public void testPropertyWithSideEffectExtracted() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/propertyWithSideEffectExtracted.kt", this::doTest);
        }

        @TestMetadata("propertyWithSideEffectPassedToInlineFunction.kt")
        public void testPropertyWithSideEffectPassedToInlineFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/propertyWithSideEffectPassedToInlineFunction.kt", this::doTest);
        }

        @TestMetadata("temporaryVarNonTrivial.kt")
        public void testTemporaryVarNonTrivial() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/temporaryVarNonTrivial.kt", this::doTest);
        }

        @TestMetadata("ternaryConditional.kt")
        public void testTernaryConditional() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/ternaryConditional.kt", this::doTest);
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/while.kt", this::doTest);
        }

        @TestMetadata("whileComplex.kt")
        public void testWhileComplex() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/whileComplex.kt", this::doTest);
        }

        @TestMetadata("whileConditionExtracted.kt")
        public void testWhileConditionExtracted() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineEvaluationOrder/whileConditionExtracted.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/inlineMultiFile")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineMultiFile extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInInlineMultiFile() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/inlineMultiFile"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("anonymousObjectInSimilarFunctions.kt")
        public void testAnonymousObjectInSimilarFunctions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/anonymousObjectInSimilarFunctions.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectOnCallSite.kt")
        public void testAnonymousObjectOnCallSite() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/anonymousObjectOnCallSite.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectOnCallSiteSuperParams.kt")
        public void testAnonymousObjectOnCallSiteSuperParams() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/anonymousObjectOnCallSiteSuperParams.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectOnDeclarationSite.kt")
        public void testAnonymousObjectOnDeclarationSite() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/anonymousObjectOnDeclarationSite.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectOnDeclarationSiteSuperParams.kt")
        public void testAnonymousObjectOnDeclarationSiteSuperParams() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/anonymousObjectOnDeclarationSiteSuperParams.kt", this::doTest);
        }

        @TestMetadata("builders.kt")
        public void testBuilders() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/builders.kt", this::doTest);
        }

        @TestMetadata("buildersAndLambdaCapturing.kt")
        public void testBuildersAndLambdaCapturing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/buildersAndLambdaCapturing.kt", this::doTest);
        }

        @TestMetadata("captureInlinable.kt")
        public void testCaptureInlinable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/captureInlinable.kt", this::doTest);
        }

        @TestMetadata("captureInlinableAndOther.kt")
        public void testCaptureInlinableAndOther() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/captureInlinableAndOther.kt", this::doTest);
        }

        @TestMetadata("captureThisAndReceiver.kt")
        public void testCaptureThisAndReceiver() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/captureThisAndReceiver.kt", this::doTest);
        }

        @TestMetadata("closureChain.kt")
        public void testClosureChain() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/closureChain.kt", this::doTest);
        }

        @TestMetadata("defaultMethod.kt")
        public void testDefaultMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/defaultMethod.kt", this::doTest);
        }

        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/generics.kt", this::doTest);
        }

        @TestMetadata("inlineInDefaultParameter.kt")
        public void testInlineInDefaultParameter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/inlineInDefaultParameter.kt", this::doTest);
        }

        @TestMetadata("inlineMultiFileSimple.kt")
        public void testInlineMultiFileSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/inlineMultiFileSimple.kt", this::doTest);
        }

        @TestMetadata("lambdaCloning.kt")
        public void testLambdaCloning() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/lambdaCloning.kt", this::doTest);
        }

        @TestMetadata("lambdaInLambda2.kt")
        public void testLambdaInLambda2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/lambdaInLambda2.kt", this::doTest);
        }

        @TestMetadata("lambdaInLambdaNoInline.kt")
        public void testLambdaInLambdaNoInline() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/lambdaInLambdaNoInline.kt", this::doTest);
        }

        @TestMetadata("regeneratedLambdaName.kt")
        public void testRegeneratedLambdaName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/regeneratedLambdaName.kt", this::doTest);
        }

        @TestMetadata("sameCaptured.kt")
        public void testSameCaptured() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/sameCaptured.kt", this::doTest);
        }

        @TestMetadata("simpleCapturingInClass.kt")
        public void testSimpleCapturingInClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/simpleCapturingInClass.kt", this::doTest);
        }

        @TestMetadata("simpleCapturingInPackage.kt")
        public void testSimpleCapturingInPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/simpleCapturingInPackage.kt", this::doTest);
        }

        @TestMetadata("simpleDefaultMethod.kt")
        public void testSimpleDefaultMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/simpleDefaultMethod.kt", this::doTest);
        }

        @TestMetadata("trait.kt")
        public void testTrait() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/trait.kt", this::doTest);
        }

        @TestMetadata("tryCatch.kt")
        public void testTryCatch() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/tryCatch.kt", this::doTest);
        }

        @TestMetadata("tryCatch2.kt")
        public void testTryCatch2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/tryCatch2.kt", this::doTest);
        }

        @TestMetadata("tryCatchFinally.kt")
        public void testTryCatchFinally() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/tryCatchFinally.kt", this::doTest);
        }

        @TestMetadata("use.kt")
        public void testUse() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/use.kt", this::doTest);
        }

        @TestMetadata("with.kt")
        public void testWith() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiFile/with.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/inlineMultiModule")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineMultiModule extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInInlineMultiModule() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/inlineMultiModule"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("anotherModuleValInClosure.kt")
        public void testAnotherModuleValInClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/anotherModuleValInClosure.kt", this::doTest);
        }

        @TestMetadata("callFunction.kt")
        public void testCallFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/callFunction.kt", this::doTest);
        }

        @TestMetadata("callableReference.kt")
        public void testCallableReference() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/callableReference.kt", this::doTest);
        }

        @TestMetadata("calledByFqName.kt")
        public void testCalledByFqName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/calledByFqName.kt", this::doTest);
        }

        @TestMetadata("extensionLambda.kt")
        public void testExtensionLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/extensionLambda.kt", this::doTest);
        }

        @TestMetadata("externalInlineCallDecomposed.kt")
        public void testExternalInlineCallDecomposed() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/externalInlineCallDecomposed.kt", this::doTest);
        }

        @TestMetadata("externalInlineNewDecomposed.kt")
        public void testExternalInlineNewDecomposed() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/externalInlineNewDecomposed.kt", this::doTest);
        }

        @TestMetadata("fakeFunctionInAnotherModule.kt")
        public void testFakeFunctionInAnotherModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/fakeFunctionInAnotherModule.kt", this::doTest);
        }

        @TestMetadata("importObjectInstance.kt")
        public void testImportObjectInstance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/importObjectInstance.kt", this::doTest);
        }

        @TestMetadata("inlineInInlineWithLambdaMultiModule.kt")
        public void testInlineInInlineWithLambdaMultiModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/inlineInInlineWithLambdaMultiModule.kt", this::doTest);
        }

        @TestMetadata("inlineMemberFunWithLambda.kt")
        public void testInlineMemberFunWithLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/inlineMemberFunWithLambda.kt", this::doTest);
        }

        @TestMetadata("inlineableAliasForExternalDeclaration.kt")
        public void testInlineableAliasForExternalDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/inlineableAliasForExternalDeclaration.kt", this::doTest);
        }

        @TestMetadata("internalFriend.kt")
        public void testInternalFriend() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/internalFriend.kt", this::doTest);
        }

        @TestMetadata("internalNameClash.kt")
        public void testInternalNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/internalNameClash.kt", this::doTest);
        }

        @TestMetadata("keywordAsMemberName.kt")
        public void testKeywordAsMemberName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/keywordAsMemberName.kt", this::doTest);
        }

        @TestMetadata("kt16144.kt")
        public void testKt16144() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/kt16144.kt", this::doTest);
        }

        @TestMetadata("kt16160.kt")
        public void testKt16160() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/kt16160.kt", this::doTest);
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/lambda.kt", this::doTest);
        }

        @TestMetadata("lambdaCalledInObjectLiteral.kt")
        public void testLambdaCalledInObjectLiteral() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/lambdaCalledInObjectLiteral.kt", this::doTest);
        }

        @TestMetadata("lambdaWithClosure.kt")
        public void testLambdaWithClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/lambdaWithClosure.kt", this::doTest);
        }

        @TestMetadata("localNameClash.kt")
        public void testLocalNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/localNameClash.kt", this::doTest);
        }

        @TestMetadata("localObjectLiteralWithInheritance.kt")
        public void testLocalObjectLiteralWithInheritance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/localObjectLiteralWithInheritance.kt", this::doTest);
        }

        @TestMetadata("method.kt")
        public void testMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/method.kt", this::doTest);
        }

        @TestMetadata("operators.kt")
        public void testOperators() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/operators.kt", this::doTest);
        }

        @TestMetadata("parameterWithDefaultValue.kt")
        public void testParameterWithDefaultValue() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/parameterWithDefaultValue.kt", this::doTest);
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/property.kt", this::doTest);
        }

        @TestMetadata("reexportDuringInline.kt")
        public void testReexportDuringInline() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/reexportDuringInline.kt", this::doTest);
        }

        @TestMetadata("repeatedImport.kt")
        public void testRepeatedImport() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/repeatedImport.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/simple.kt", this::doTest);
        }

        @TestMetadata("topLevelNestedInline.kt")
        public void testTopLevelNestedInline() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/topLevelNestedInline.kt", this::doTest);
        }

        @TestMetadata("typealiases.kt")
        public void testTypealiases() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineMultiModule/typealiases.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/inlineSizeReduction")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineSizeReduction extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInInlineSizeReduction() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/inlineSizeReduction"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("inlineImportCleanup.kt")
        public void testInlineImportCleanup() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/inlineImportCleanup.kt", this::doTest);
        }

        @TestMetadata("inlineLambdaCleanup.kt")
        public void testInlineLambdaCleanup() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/inlineLambdaCleanup.kt", this::doTest);
        }

        @TestMetadata("inlineOrder.kt")
        public void testInlineOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/inlineOrder.kt", this::doTest);
        }

        @TestMetadata("lastBreak.kt")
        public void testLastBreak() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/lastBreak.kt", this::doTest);
        }

        @TestMetadata("multiModuleDefaultArgsCleanup.kt")
        public void testMultiModuleDefaultArgsCleanup() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/multiModuleDefaultArgsCleanup.kt", this::doTest);
        }

        @TestMetadata("noDuplicateVariableDeclaration.kt")
        public void testNoDuplicateVariableDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/noDuplicateVariableDeclaration.kt", this::doTest);
        }

        @TestMetadata("oneTopLevelReturn.kt")
        public void testOneTopLevelReturn() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/oneTopLevelReturn.kt", this::doTest);
        }

        @TestMetadata("propertyAssignment.kt")
        public void testPropertyAssignment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/propertyAssignment.kt", this::doTest);
        }

        @TestMetadata("propertyReassignment.kt")
        public void testPropertyReassignment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/propertyReassignment.kt", this::doTest);
        }

        @TestMetadata("propertyReferenceDoesNotProduceSideEffect.kt")
        public void testPropertyReferenceDoesNotProduceSideEffect() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/propertyReferenceDoesNotProduceSideEffect.kt", this::doTest);
        }

        @TestMetadata("returnInlineCall.kt")
        public void testReturnInlineCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/returnInlineCall.kt", this::doTest);
        }

        @TestMetadata("simpleReturnFunction.kt")
        public void testSimpleReturnFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/simpleReturnFunction.kt", this::doTest);
        }

        @TestMetadata("ternaryConditional.kt")
        public void testTernaryConditional() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/ternaryConditional.kt", this::doTest);
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/this.kt", this::doTest);
        }

        @TestMetadata("valAssignment.kt")
        public void testValAssignment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/valAssignment.kt", this::doTest);
        }

        @TestMetadata("valDeclaration.kt")
        public void testValDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/valDeclaration.kt", this::doTest);
        }

        @TestMetadata("varargTemporaryVar.kt")
        public void testVarargTemporaryVar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineSizeReduction/varargTemporaryVar.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/inlineStdlib")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineStdlib extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInInlineStdlib() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/inlineStdlib"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("callNameClash.kt")
        public void testCallNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/callNameClash.kt", this::doTest);
        }

        @TestMetadata("callableRefToFunInCurrentModule.kt")
        public void testCallableRefToFunInCurrentModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/callableRefToFunInCurrentModule.kt", this::doTest);
        }

        @TestMetadata("closure.kt")
        public void testClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/closure.kt", this::doTest);
        }

        @TestMetadata("closureInObjectLiteral.kt")
        public void testClosureInObjectLiteral() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/closureInObjectLiteral.kt", this::doTest);
        }

        @TestMetadata("closureNested.kt")
        public void testClosureNested() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/closureNested.kt", this::doTest);
        }

        @TestMetadata("localNamesClash.kt")
        public void testLocalNamesClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/localNamesClash.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/simple.kt", this::doTest);
        }

        @TestMetadata("thisInExtension.kt")
        public void testThisInExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/thisInExtension.kt", this::doTest);
        }

        @TestMetadata("unsafeCast.kt")
        public void testUnsafeCast() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/inlineStdlib/unsafeCast.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/java")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Java extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInJava() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/java"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("js/js.translator/testData/box/java/abstractList")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AbstractList extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInAbstractList() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/java/abstractList"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("iterator.kt")
            public void testIterator() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/abstractList/iterator.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/java/arrayList")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ArrayList extends AbstractIrBoxJsTest {
            @TestMetadata("access.kt")
            public void testAccess() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/access.kt", this::doTest);
            }

            public void testAllFilesPresentInArrayList() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/java/arrayList"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("arrayAccess.kt")
            public void testArrayAccess() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/arrayAccess.kt", this::doTest);
            }

            @TestMetadata("constructWithCapacity.kt")
            public void testConstructWithCapacity() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/constructWithCapacity.kt", this::doTest);
            }

            @TestMetadata("constructWithSideEffectParam.kt")
            public void testConstructWithSideEffectParam() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/constructWithSideEffectParam.kt", this::doTest);
            }

            @TestMetadata("containsAll.kt")
            public void testContainsAll() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/containsAll.kt", this::doTest);
            }

            @TestMetadata("emptyList.kt")
            public void testEmptyList() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/emptyList.kt", this::doTest);
            }

            @TestMetadata("indexOOB.kt")
            public void testIndexOOB() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/indexOOB.kt", this::doTest);
            }

            @TestMetadata("indexOf.kt")
            public void testIndexOf() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/indexOf.kt", this::doTest);
            }

            @TestMetadata("isEmpty.kt")
            public void testIsEmpty() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/isEmpty.kt", this::doTest);
            }

            @TestMetadata("iterate.kt")
            public void testIterate() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/iterate.kt", this::doTest);
            }

            @TestMetadata("misc.kt")
            public void testMisc() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/misc.kt", this::doTest);
            }

            @TestMetadata("remove.kt")
            public void testRemove() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/remove.kt", this::doTest);
            }

            @TestMetadata("removeAll.kt")
            public void testRemoveAll() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/removeAll.kt", this::doTest);
            }

            @TestMetadata("removeWithIndexOutOfBounds.kt")
            public void testRemoveWithIndexOutOfBounds() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/removeWithIndexOutOfBounds.kt", this::doTest);
            }

            @TestMetadata("retainAll.kt")
            public void testRetainAll() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/retainAll.kt", this::doTest);
            }

            @TestMetadata("toArray.kt")
            public void testToArray() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/java/arrayList/toArray.kt", this::doTest);
            }
        }
    }

    @TestMetadata("js/js.translator/testData/box/jsCode")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JsCode extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInJsCode() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/jsCode"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("break.kt")
        public void testBreak() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/break.kt", this::doTest);
        }

        @TestMetadata("catchScope.kt")
        public void testCatchScope() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/catchScope.kt", this::doTest);
        }

        @TestMetadata("codeFromVariable.kt")
        public void testCodeFromVariable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/codeFromVariable.kt", this::doTest);
        }

        @TestMetadata("continue.kt")
        public void testContinue() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/continue.kt", this::doTest);
        }

        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/doWhile.kt", this::doTest);
        }

        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/for.kt", this::doTest);
        }

        @TestMetadata("forIn.kt")
        public void testForIn() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/forIn.kt", this::doTest);
        }

        @TestMetadata("forWithoutInit.kt")
        public void testForWithoutInit() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/forWithoutInit.kt", this::doTest);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/function.kt", this::doTest);
        }

        @TestMetadata("functionName.kt")
        public void testFunctionName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/functionName.kt", this::doTest);
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/if.kt", this::doTest);
        }

        @TestMetadata("invocation.kt")
        public void testInvocation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/invocation.kt", this::doTest);
        }

        @TestMetadata("label.kt")
        public void testLabel() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/label.kt", this::doTest);
        }

        @TestMetadata("labelNestedClash.kt")
        public void testLabelNestedClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/labelNestedClash.kt", this::doTest);
        }

        @TestMetadata("labelNestedClashWithKotlin.kt")
        public void testLabelNestedClashWithKotlin() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/labelNestedClashWithKotlin.kt", this::doTest);
        }

        @TestMetadata("labelSiblingClash.kt")
        public void testLabelSiblingClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/labelSiblingClash.kt", this::doTest);
        }

        @TestMetadata("literal.kt")
        public void testLiteral() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/literal.kt", this::doTest);
        }

        @TestMetadata("numberLiteralOverflow.kt")
        public void testNumberLiteralOverflow() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/numberLiteralOverflow.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/object.kt", this::doTest);
        }

        @TestMetadata("objectExpression.kt")
        public void testObjectExpression() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/objectExpression.kt", this::doTest);
        }

        @TestMetadata("objectScopes.kt")
        public void testObjectScopes() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/objectScopes.kt", this::doTest);
        }

        @TestMetadata("operators.kt")
        public void testOperators() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/operators.kt", this::doTest);
        }

        @TestMetadata("quotes.kt")
        public void testQuotes() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/quotes.kt", this::doTest);
        }

        @TestMetadata("referenceToKotlin.kt")
        public void testReferenceToKotlin() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/referenceToKotlin.kt", this::doTest);
        }

        @TestMetadata("switch.kt")
        public void testSwitch() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/switch.kt", this::doTest);
        }

        @TestMetadata("tryCatchFinally.kt")
        public void testTryCatchFinally() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/tryCatchFinally.kt", this::doTest);
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsCode/while.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/jsModule")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JsModule extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInJsModule() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/jsModule"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("externalClass.kt")
        public void testExternalClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalClass.kt", this::doTest);
        }

        @TestMetadata("externalFunction.kt")
        public void testExternalFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalFunction.kt", this::doTest);
        }

        @TestMetadata("externalFunctionPlain.kt")
        public void testExternalFunctionPlain() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalFunctionPlain.kt", this::doTest);
        }

        @TestMetadata("externalFunctionUmd.kt")
        public void testExternalFunctionUmd() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalFunctionUmd.kt", this::doTest);
        }

        @TestMetadata("externalFunctionUmdFallback.kt")
        public void testExternalFunctionUmdFallback() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalFunctionUmdFallback.kt", this::doTest);
        }

        @TestMetadata("externalObject.kt")
        public void testExternalObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalObject.kt", this::doTest);
        }

        @TestMetadata("externalPackage.kt")
        public void testExternalPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalPackage.kt", this::doTest);
        }

        @TestMetadata("externalPackageInDifferentFile.kt")
        public void testExternalPackageInDifferentFile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalPackageInDifferentFile.kt", this::doTest);
        }

        @TestMetadata("externalPackagePlain.kt")
        public void testExternalPackagePlain() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalPackagePlain.kt", this::doTest);
        }

        @TestMetadata("externalPackageUmdFallback.kt")
        public void testExternalPackageUmdFallback() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalPackageUmdFallback.kt", this::doTest);
        }

        @TestMetadata("externalProperty.kt")
        public void testExternalProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/externalProperty.kt", this::doTest);
        }

        @TestMetadata("importCountCommonJS.kt")
        public void testImportCountCommonJS() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/importCountCommonJS.kt", this::doTest);
        }

        @TestMetadata("importCountUmd.kt")
        public void testImportCountUmd() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/importCountUmd.kt", this::doTest);
        }

        @TestMetadata("topLevelVarargFun.kt")
        public void testTopLevelVarargFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsModule/topLevelVarargFun.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/jsName")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JsName extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInJsName() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/jsName"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("avoidNameClash.kt")
        public void testAvoidNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/avoidNameClash.kt", this::doTest);
        }

        @TestMetadata("classes.kt")
        public void testClasses() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/classes.kt", this::doTest);
        }

        @TestMetadata("inheritFromRenamedNativeClass.kt")
        public void testInheritFromRenamedNativeClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/inheritFromRenamedNativeClass.kt", this::doTest);
        }

        @TestMetadata("inheritFromRenamedNativeClassMultimodule.kt")
        public void testInheritFromRenamedNativeClassMultimodule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/inheritFromRenamedNativeClassMultimodule.kt", this::doTest);
        }

        @TestMetadata("jsName.kt")
        public void testJsName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/jsName.kt", this::doTest);
        }

        @TestMetadata("jsNamePropertyAccessors.kt")
        public void testJsNamePropertyAccessors() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/jsNamePropertyAccessors.kt", this::doTest);
        }

        @TestMetadata("overriddenMethod.kt")
        public void testOverriddenMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/overriddenMethod.kt", this::doTest);
        }

        @TestMetadata("overridenFromInterface.kt")
        public void testOverridenFromInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/overridenFromInterface.kt", this::doTest);
        }

        @TestMetadata("peculiarIdentifiers.kt")
        public void testPeculiarIdentifiers() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/peculiarIdentifiers.kt", this::doTest);
        }

        @TestMetadata("privateMethod.kt")
        public void testPrivateMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/privateMethod.kt", this::doTest);
        }

        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/secondaryConstructor.kt", this::doTest);
        }

        @TestMetadata("simpleJsName.kt")
        public void testSimpleJsName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsName/simpleJsName.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/jsQualifier")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JsQualifier extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInJsQualifier() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/jsQualifier"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("classes.kt")
        public void testClasses() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsQualifier/classes.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsQualifier/simple.kt", this::doTest);
        }

        @TestMetadata("umdFallback.kt")
        public void testUmdFallback() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsQualifier/umdFallback.kt", this::doTest);
        }

        @TestMetadata("withModule.kt")
        public void testWithModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/jsQualifier/withModule.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/kotlin.test")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Kotlin_test extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInKotlin_test() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/kotlin.test"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("beforeAfter.kt")
        public void testBeforeAfter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/kotlin.test/beforeAfter.kt", this::doTest);
        }

        @TestMetadata("ignore.kt")
        public void testIgnore() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/kotlin.test/ignore.kt", this::doTest);
        }

        @TestMetadata("inherited.kt")
        public void testInherited() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/kotlin.test/inherited.kt", this::doTest);
        }

        @TestMetadata("mpp.kt")
        public void testMpp() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/kotlin.test/mpp.kt", this::doTest);
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/kotlin.test/nested.kt", this::doTest);
        }

        @TestMetadata("returnTestResult.kt")
        public void testReturnTestResult() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/kotlin.test/returnTestResult.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/kotlin.test/simple.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/labels")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Labels extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInLabels() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/labels"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("labelOnExpression.kt")
        public void testLabelOnExpression() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/labelOnExpression.kt", this::doTest);
        }

        @TestMetadata("labelWithVariableClashing.kt")
        public void testLabelWithVariableClashing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/labelWithVariableClashing.kt", this::doTest);
        }

        @TestMetadata("nestedInlineLabels.kt")
        public void testNestedInlineLabels() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/nestedInlineLabels.kt", this::doTest);
        }

        @TestMetadata("nestedLabels.kt")
        public void testNestedLabels() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/nestedLabels.kt", this::doTest);
        }

        @TestMetadata("nestedLabelsInlinedClashing.kt")
        public void testNestedLabelsInlinedClashing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/nestedLabelsInlinedClashing.kt", this::doTest);
        }

        @TestMetadata("nestedLabelsInlinedClashingAtFunctionsWithClosure.kt")
        public void testNestedLabelsInlinedClashingAtFunctionsWithClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/nestedLabelsInlinedClashingAtFunctionsWithClosure.kt", this::doTest);
        }

        @TestMetadata("peculiarNames.kt")
        public void testPeculiarNames() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/peculiarNames.kt", this::doTest);
        }

        @TestMetadata("siblingLabels.kt")
        public void testSiblingLabels() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/siblingLabels.kt", this::doTest);
        }

        @TestMetadata("siblingLabelsInlined.kt")
        public void testSiblingLabelsInlined() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/siblingLabelsInlined.kt", this::doTest);
        }

        @TestMetadata("siblingLabelsInlinedClashing.kt")
        public void testSiblingLabelsInlinedClashing() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/siblingLabelsInlinedClashing.kt", this::doTest);
        }

        @TestMetadata("simpleLabel.kt")
        public void testSimpleLabel() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/simpleLabel.kt", this::doTest);
        }

        @TestMetadata("simpleLabelInlined.kt")
        public void testSimpleLabelInlined() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/labels/simpleLabelInlined.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/multiFile")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiFile extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInMultiFile() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multiFile"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("classOfTheSameNameInAnotherPackage.kt")
        public void testClassOfTheSameNameInAnotherPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiFile/classOfTheSameNameInAnotherPackage.kt", this::doTest);
        }

        @TestMetadata("classesInheritedFromOtherFile.kt")
        public void testClassesInheritedFromOtherFile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiFile/classesInheritedFromOtherFile.kt", this::doTest);
        }

        @TestMetadata("functionsVisibleFromOtherFile.kt")
        public void testFunctionsVisibleFromOtherFile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiFile/functionsVisibleFromOtherFile.kt", this::doTest);
        }

        @TestMetadata("importedDeclarationMangling.kt")
        public void testImportedDeclarationMangling() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiFile/importedDeclarationMangling.kt", this::doTest);
        }

        @TestMetadata("packageAndMangledMethodDoNotClash.kt")
        public void testPackageAndMangledMethodDoNotClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiFile/packageAndMangledMethodDoNotClash.kt", this::doTest);
        }

        @TestMetadata("packageAndPrivateDeclarationDoNotClash.kt")
        public void testPackageAndPrivateDeclarationDoNotClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiFile/packageAndPrivateDeclarationDoNotClash.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/multiModule")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiModule extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInMultiModule() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multiModule"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("interfaceMethodWithDefaultParameter.kt")
        public void testInterfaceMethodWithDefaultParameter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiModule/interfaceMethodWithDefaultParameter.kt", this::doTest);
        }

        @TestMetadata("localClassMetadata.kt")
        public void testLocalClassMetadata() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiModule/localClassMetadata.kt", this::doTest);
        }

        @TestMetadata("moduleAndVariableNameClash.kt")
        public void testModuleAndVariableNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiModule/moduleAndVariableNameClash.kt", this::doTest);
        }

        @TestMetadata("privateInterfaceNameClash.kt")
        public void testPrivateInterfaceNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiModule/privateInterfaceNameClash.kt", this::doTest);
        }

        @TestMetadata("privateNameClash.kt")
        public void testPrivateNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiModule/privateNameClash.kt", this::doTest);
        }

        @TestMetadata("publishedApiMangling.kt")
        public void testPublishedApiMangling() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiModule/publishedApiMangling.kt", this::doTest);
        }

        @TestMetadata("samePackageNames.kt")
        public void testSamePackageNames() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiModule/samePackageNames.kt", this::doTest);
        }

        @TestMetadata("useElementsFromDefaultPackageInAnotherModule.kt")
        public void testUseElementsFromDefaultPackageInAnotherModule() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiModule/useElementsFromDefaultPackageInAnotherModule.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/multiModuleWrappers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiModuleWrappers extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInMultiModuleWrappers() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multiModuleWrappers"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("js/js.translator/testData/box/multiModuleWrappers/amd")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Amd extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInAmd() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multiModuleWrappers/amd"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("jsModuleOnPackage.kt")
            public void testJsModuleOnPackage() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/amd/jsModuleOnPackage.kt", this::doTest);
            }

            @TestMetadata("moduleWithNonIdentifierName.kt")
            public void testModuleWithNonIdentifierName() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/amd/moduleWithNonIdentifierName.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/amd/simple.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/multiModuleWrappers/common_js")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Common_js extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInCommon_js() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multiModuleWrappers/common_js"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("inlineFromModuleWithNonIdentifierName.kt")
            public void testInlineFromModuleWithNonIdentifierName() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/common_js/inlineFromModuleWithNonIdentifierName.kt", this::doTest);
            }

            @TestMetadata("moduleWithNonIdentifierName.kt")
            public void testModuleWithNonIdentifierName() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/common_js/moduleWithNonIdentifierName.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/common_js/simple.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/multiModuleWrappers/plain")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Plain extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInPlain() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multiModuleWrappers/plain"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("inlineFromModuleWithNonIdentifierName.kt")
            public void testInlineFromModuleWithNonIdentifierName() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/plain/inlineFromModuleWithNonIdentifierName.kt", this::doTest);
            }

            @TestMetadata("moduleWithNonIdentifierName.kt")
            public void testModuleWithNonIdentifierName() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/plain/moduleWithNonIdentifierName.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/plain/simple.kt", this::doTest);
            }
        }

        @TestMetadata("js/js.translator/testData/box/multiModuleWrappers/umd")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Umd extends AbstractIrBoxJsTest {
            public void testAllFilesPresentInUmd() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multiModuleWrappers/umd"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
            }

            @TestMetadata("moduleWithNonIdentifierName.kt")
            public void testModuleWithNonIdentifierName() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/umd/moduleWithNonIdentifierName.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("js/js.translator/testData/box/multiModuleWrappers/umd/simple.kt", this::doTest);
            }
        }
    }

    @TestMetadata("js/js.translator/testData/box/multiPackage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiPackage extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInMultiPackage() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multiPackage"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("classesInheritedFromOtherPackage.kt")
        public void testClassesInheritedFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/classesInheritedFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("createClassFromOtherPackage.kt")
        public void testCreateClassFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/createClassFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("createClassFromOtherPackageUsingImport.kt")
        public void testCreateClassFromOtherPackageUsingImport() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/createClassFromOtherPackageUsingImport.kt", this::doTest);
        }

        @TestMetadata("functionsVisibleFromOtherPackage.kt")
        public void testFunctionsVisibleFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/functionsVisibleFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("nestedPackageFunctionCalledFromOtherPackage.kt")
        public void testNestedPackageFunctionCalledFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/nestedPackageFunctionCalledFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("packageVariableVisibleFromOtherPackage.kt")
        public void testPackageVariableVisibleFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/packageVariableVisibleFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("reflectionFromOtherPackage.kt")
        public void testReflectionFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/reflectionFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("subpackagesWithClashingNames.kt")
        public void testSubpackagesWithClashingNames() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/subpackagesWithClashingNames.kt", this::doTest);
        }

        @TestMetadata("subpackagesWithClashingNamesUsingImport.kt")
        public void testSubpackagesWithClashingNamesUsingImport() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multiPackage/subpackagesWithClashingNamesUsingImport.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/multideclaration")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Multideclaration extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInMultideclaration() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/multideclaration"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("multiValForArray.kt")
        public void testMultiValForArray() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multideclaration/multiValForArray.kt", this::doTest);
        }

        @TestMetadata("multiValForMap.kt")
        public void testMultiValForMap() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multideclaration/multiValForMap.kt", this::doTest);
        }

        @TestMetadata("multiValForRange.kt")
        public void testMultiValForRange() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multideclaration/multiValForRange.kt", this::doTest);
        }

        @TestMetadata("multiValInFor.kt")
        public void testMultiValInFor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multideclaration/multiValInFor.kt", this::doTest);
        }

        @TestMetadata("multiValInIntFor.kt")
        public void testMultiValInIntFor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multideclaration/multiValInIntFor.kt", this::doTest);
        }

        @TestMetadata("multiValInIntRangeFor.kt")
        public void testMultiValInIntRangeFor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multideclaration/multiValInIntRangeFor.kt", this::doTest);
        }

        @TestMetadata("multiValOrVar.kt")
        public void testMultiValOrVar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/multideclaration/multiValOrVar.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/nameClashes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NameClashes extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInNameClashes() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/nameClashes"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("classAndCompanionObjectMembers.kt")
        public void testClassAndCompanionObjectMembers() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/classAndCompanionObjectMembers.kt", this::doTest);
        }

        @TestMetadata("constructorLocalVar.kt")
        public void testConstructorLocalVar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/constructorLocalVar.kt", this::doTest);
        }

        @TestMetadata("differenceInCapitalization.kt")
        public void testDifferenceInCapitalization() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/differenceInCapitalization.kt", this::doTest);
        }

        @TestMetadata("extensionFunctionAndProperty.kt")
        public void testExtensionFunctionAndProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/extensionFunctionAndProperty.kt", this::doTest);
        }

        @TestMetadata("extensionPropertiesWithDifferentReceivers.kt")
        public void testExtensionPropertiesWithDifferentReceivers() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/extensionPropertiesWithDifferentReceivers.kt", this::doTest);
        }

        @TestMetadata("extensionPropertyAndMethod.kt")
        public void testExtensionPropertyAndMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/extensionPropertyAndMethod.kt", this::doTest);
        }

        @TestMetadata("jsNameAndPrivate.kt")
        public void testJsNameAndPrivate() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/jsNameAndPrivate.kt", this::doTest);
        }

        @TestMetadata("localFunctionInLambda.kt")
        public void testLocalFunctionInLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/localFunctionInLambda.kt", this::doTest);
        }

        @TestMetadata("localFunctions.kt")
        public void testLocalFunctions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/localFunctions.kt", this::doTest);
        }

        @TestMetadata("methodAndPrivateProperty.kt")
        public void testMethodAndPrivateProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/methodAndPrivateProperty.kt", this::doTest);
        }

        @TestMetadata("methodOverload.kt")
        public void testMethodOverload() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/methodOverload.kt", this::doTest);
        }

        @TestMetadata("methodOverloadInClassWithTwoUpperBounds.kt")
        public void testMethodOverloadInClassWithTwoUpperBounds() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/methodOverloadInClassWithTwoUpperBounds.kt", this::doTest);
        }

        @TestMetadata("nativeAndTopLevelFunction.kt")
        public void testNativeAndTopLevelFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/nativeAndTopLevelFunction.kt", this::doTest);
        }

        @TestMetadata("nativeDeclarationAndLocalVar.kt")
        public void testNativeDeclarationAndLocalVar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/nativeDeclarationAndLocalVar.kt", this::doTest);
        }

        @TestMetadata("overloadExtension.kt")
        public void testOverloadExtension() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/overloadExtension.kt", this::doTest);
        }

        @TestMetadata("propertyAndNativeMethod.kt")
        public void testPropertyAndNativeMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/propertyAndNativeMethod.kt", this::doTest);
        }

        @TestMetadata("topLevelFunctionAndParameter.kt")
        public void testTopLevelFunctionAndParameter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/topLevelFunctionAndParameter.kt", this::doTest);
        }

        @TestMetadata("withBuiltin.kt")
        public void testWithBuiltin() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nameClashes/withBuiltin.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/native")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Native extends AbstractIrBoxJsTest {
        @TestMetadata("accessToCompanionObjectFromInlineFun.kt")
        public void testAccessToCompanionObjectFromInlineFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/accessToCompanionObjectFromInlineFun.kt", this::doTest);
        }

        public void testAllFilesPresentInNative() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/native"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("callbackOptionalParameter.kt")
        public void testCallbackOptionalParameter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/callbackOptionalParameter.kt", this::doTest);
        }

        @TestMetadata("castToNativeClassChecked.kt")
        public void testCastToNativeClassChecked() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/castToNativeClassChecked.kt", this::doTest);
        }

        @TestMetadata("castToNativeInterface.kt")
        public void testCastToNativeInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/castToNativeInterface.kt", this::doTest);
        }

        @TestMetadata("castToNativeInterfaceChecked.kt")
        public void testCastToNativeInterfaceChecked() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/castToNativeInterfaceChecked.kt", this::doTest);
        }

        @TestMetadata("castToNullableNativeInterface.kt")
        public void testCastToNullableNativeInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/castToNullableNativeInterface.kt", this::doTest);
        }

        @TestMetadata("castToTypeParamBoundedByNativeInterface.kt")
        public void testCastToTypeParamBoundedByNativeInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/castToTypeParamBoundedByNativeInterface.kt", this::doTest);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/class.kt", this::doTest);
        }

        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/classObject.kt", this::doTest);
        }

        @TestMetadata("equalsMangling.kt")
        public void testEqualsMangling() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/equalsMangling.kt", this::doTest);
        }

        @TestMetadata("eval.kt")
        public void testEval() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/eval.kt", this::doTest);
        }

        @TestMetadata("exception.kt")
        public void testException() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/exception.kt", this::doTest);
        }

        @TestMetadata("inheritanceFromNativeClass.kt")
        public void testInheritanceFromNativeClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/inheritanceFromNativeClass.kt", this::doTest);
        }

        @TestMetadata("inheritanceFromNativeTrait.kt")
        public void testInheritanceFromNativeTrait() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/inheritanceFromNativeTrait.kt", this::doTest);
        }

        @TestMetadata("inheritanceInNativeClass.kt")
        public void testInheritanceInNativeClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/inheritanceInNativeClass.kt", this::doTest);
        }

        @TestMetadata("kt2209.kt")
        public void testKt2209() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/kt2209.kt", this::doTest);
        }

        @TestMetadata("library.kt")
        public void testLibrary() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/library.kt", this::doTest);
        }

        @TestMetadata("nativeClassAsReifiedTypeArgument.kt")
        public void testNativeClassAsReifiedTypeArgument() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/nativeClassAsReifiedTypeArgument.kt", this::doTest);
        }

        @TestMetadata("nativeGetterAndNativeSetter.kt")
        public void testNativeGetterAndNativeSetter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/nativeGetterAndNativeSetter.kt", this::doTest);
        }

        @TestMetadata("nativeInvoke.kt")
        public void testNativeInvoke() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/nativeInvoke.kt", this::doTest);
        }

        @TestMetadata("nestedElements.kt")
        public void testNestedElements() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/nestedElements.kt", this::doTest);
        }

        @TestMetadata("objectFunWithVararg.kt")
        public void testObjectFunWithVararg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/objectFunWithVararg.kt", this::doTest);
        }

        @TestMetadata("overrideNativeOverloadedFunction.kt")
        public void testOverrideNativeOverloadedFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/overrideNativeOverloadedFunction.kt", this::doTest);
        }

        @TestMetadata("passExtLambdaFromNative.kt")
        public void testPassExtLambdaFromNative() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/passExtLambdaFromNative.kt", this::doTest);
        }

        @TestMetadata("passExtLambdaToNative.kt")
        public void testPassExtLambdaToNative() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/passExtLambdaToNative.kt", this::doTest);
        }

        @TestMetadata("passMemberOrExtFromNative.kt")
        public void testPassMemberOrExtFromNative() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/passMemberOrExtFromNative.kt", this::doTest);
        }

        @TestMetadata("passMemberOrExtToNative.kt")
        public void testPassMemberOrExtToNative() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/passMemberOrExtToNative.kt", this::doTest);
        }

        @TestMetadata("passTopLevelFunctionFromNative.kt")
        public void testPassTopLevelFunctionFromNative() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/passTopLevelFunctionFromNative.kt", this::doTest);
        }

        @TestMetadata("passTopLevelOrLocalFunctionToNative.kt")
        public void testPassTopLevelOrLocalFunctionToNative() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/passTopLevelOrLocalFunctionToNative.kt", this::doTest);
        }

        @TestMetadata("print.kt")
        public void testPrint() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/print.kt", this::doTest);
        }

        @TestMetadata("privateExternal.kt")
        public void testPrivateExternal() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/privateExternal.kt", this::doTest);
        }

        @TestMetadata("safeCastToNativeInterface.kt")
        public void testSafeCastToNativeInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/safeCastToNativeInterface.kt", this::doTest);
        }

        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/secondaryConstructor.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/simple.kt", this::doTest);
        }

        @TestMetadata("simpleUndefined.kt")
        public void testSimpleUndefined() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/simpleUndefined.kt", this::doTest);
        }

        @TestMetadata("typeof.kt")
        public void testTypeof() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/typeof.kt", this::doTest);
        }

        @TestMetadata("undefined.kt")
        public void testUndefined() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/undefined.kt", this::doTest);
        }

        @TestMetadata("useClassFromInlineFun.kt")
        public void testUseClassFromInlineFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/useClassFromInlineFun.kt", this::doTest);
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/native/vararg.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/nestedTypes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NestedTypes extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInNestedTypes() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/nestedTypes"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("implicitOuterThisFromLambda.kt")
        public void testImplicitOuterThisFromLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/implicitOuterThisFromLambda.kt", this::doTest);
        }

        @TestMetadata("implicitOuterThisFromLocalClass.kt")
        public void testImplicitOuterThisFromLocalClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/implicitOuterThisFromLocalClass.kt", this::doTest);
        }

        @TestMetadata("inheritanceFromNestedBuiltIn.kt")
        public void testInheritanceFromNestedBuiltIn() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/inheritanceFromNestedBuiltIn.kt", this::doTest);
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/inner.kt", this::doTest);
        }

        @TestMetadata("innerObjectRefFromConstructor.kt")
        public void testInnerObjectRefFromConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/innerObjectRefFromConstructor.kt", this::doTest);
        }

        @TestMetadata("innerReferenceFromChild.kt")
        public void testInnerReferenceFromChild() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/innerReferenceFromChild.kt", this::doTest);
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/nested.kt", this::doTest);
        }

        @TestMetadata("nestedInInterface.kt")
        public void testNestedInInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/nestedInInterface.kt", this::doTest);
        }

        @TestMetadata("nestedObjectLazyInitialized.kt")
        public void testNestedObjectLazyInitialized() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/nestedObjectLazyInitialized.kt", this::doTest);
        }

        @TestMetadata("outerClassReferenceFromSecondaryConstructor.kt")
        public void testOuterClassReferenceFromSecondaryConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/outerClassReferenceFromSecondaryConstructor.kt", this::doTest);
        }

        @TestMetadata("outerCompanion.kt")
        public void testOuterCompanion() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/outerCompanion.kt", this::doTest);
        }

        @TestMetadata("outerNative.kt")
        public void testOuterNative() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/outerNative.kt", this::doTest);
        }

        @TestMetadata("outerObject.kt")
        public void testOuterObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/outerObject.kt", this::doTest);
        }

        @TestMetadata("outerThis.kt")
        public void testOuterThis() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/outerThis.kt", this::doTest);
        }

        @TestMetadata("privateFieldNotOverridenInNestedSubclass.kt")
        public void testPrivateFieldNotOverridenInNestedSubclass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/privateFieldNotOverridenInNestedSubclass.kt", this::doTest);
        }

        @TestMetadata("receivers.kt")
        public void testReceivers() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/nestedTypes/receivers.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/number")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Number extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInNumber() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/number"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("assignmentIntOverflow.kt")
        public void testAssignmentIntOverflow() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/assignmentIntOverflow.kt", this::doTest);
        }

        @TestMetadata("byteAndShortConversions.kt")
        public void testByteAndShortConversions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/byteAndShortConversions.kt", this::doTest);
        }

        @TestMetadata("constantPropagation.kt")
        public void testConstantPropagation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/constantPropagation.kt", this::doTest);
        }

        @TestMetadata("conversionsWithTruncation.kt")
        public void testConversionsWithTruncation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/conversionsWithTruncation.kt", this::doTest);
        }

        @TestMetadata("conversionsWithoutTruncation.kt")
        public void testConversionsWithoutTruncation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/conversionsWithoutTruncation.kt", this::doTest);
        }

        @TestMetadata("division.kt")
        public void testDivision() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/division.kt", this::doTest);
        }

        @TestMetadata("doubleConversions.kt")
        public void testDoubleConversions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/doubleConversions.kt", this::doTest);
        }

        @TestMetadata("hashCode.kt")
        public void testHashCode() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/hashCode.kt", this::doTest);
        }

        @TestMetadata("hexadecimalConstant.kt")
        public void testHexadecimalConstant() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/hexadecimalConstant.kt", this::doTest);
        }

        @TestMetadata("incDecOptimization.kt")
        public void testIncDecOptimization() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/incDecOptimization.kt", this::doTest);
        }

        @TestMetadata("intConversions.kt")
        public void testIntConversions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/intConversions.kt", this::doTest);
        }

        @TestMetadata("intDivFloat.kt")
        public void testIntDivFloat() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/intDivFloat.kt", this::doTest);
        }

        @TestMetadata("intIncDecOverflow.kt")
        public void testIntIncDecOverflow() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/intIncDecOverflow.kt", this::doTest);
        }

        @TestMetadata("intOverflow.kt")
        public void testIntOverflow() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/intOverflow.kt", this::doTest);
        }

        @TestMetadata("kt2342.kt")
        public void testKt2342() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/kt2342.kt", this::doTest);
        }

        @TestMetadata("longArray.kt")
        public void testLongArray() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/longArray.kt", this::doTest);
        }

        @TestMetadata("longBinaryOperations.kt")
        public void testLongBinaryOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/longBinaryOperations.kt", this::doTest);
        }

        @TestMetadata("longBitOperations.kt")
        public void testLongBitOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/longBitOperations.kt", this::doTest);
        }

        @TestMetadata("longCompareToIntrinsic.kt")
        public void testLongCompareToIntrinsic() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/longCompareToIntrinsic.kt", this::doTest);
        }

        @TestMetadata("longEqualsIntrinsic.kt")
        public void testLongEqualsIntrinsic() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/longEqualsIntrinsic.kt", this::doTest);
        }

        @TestMetadata("longHashCode.kt")
        public void testLongHashCode() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/longHashCode.kt", this::doTest);
        }

        @TestMetadata("longUnaryOperations.kt")
        public void testLongUnaryOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/longUnaryOperations.kt", this::doTest);
        }

        @TestMetadata("mulInt32.kt")
        public void testMulInt32() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/mulInt32.kt", this::doTest);
        }

        @TestMetadata("numberCompareTo.kt")
        public void testNumberCompareTo() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/numberCompareTo.kt", this::doTest);
        }

        @TestMetadata("numberConversions.kt")
        public void testNumberConversions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/numberConversions.kt", this::doTest);
        }

        @TestMetadata("numberIncDec.kt")
        public void testNumberIncDec() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/numberIncDec.kt", this::doTest);
        }

        @TestMetadata("numberIsCheck.kt")
        public void testNumberIsCheck() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/number/numberIsCheck.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/objectDeclaration")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ObjectDeclaration extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInObjectDeclaration() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/objectDeclaration"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("dontPolluteObject.kt")
        public void testDontPolluteObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/dontPolluteObject.kt", this::doTest);
        }

        @TestMetadata("kt3684.kt")
        public void testKt3684() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/kt3684.kt", this::doTest);
        }

        @TestMetadata("lambdaInObjectInsideObject.kt")
        public void testLambdaInObjectInsideObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/lambdaInObjectInsideObject.kt", this::doTest);
        }

        @TestMetadata("objectDeclaration.kt")
        public void testObjectDeclaration() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/objectDeclaration.kt", this::doTest);
        }

        @TestMetadata("objectDeclarationWithVars.kt")
        public void testObjectDeclarationWithVars() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/objectDeclarationWithVars.kt", this::doTest);
        }

        @TestMetadata("objectInMethod.kt")
        public void testObjectInMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/objectInMethod.kt", this::doTest);
        }

        @TestMetadata("objectInObject.kt")
        public void testObjectInObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/objectInObject.kt", this::doTest);
        }

        @TestMetadata("objectInObjectWithClosure.kt")
        public void testObjectInObjectWithClosure() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/objectInObjectWithClosure.kt", this::doTest);
        }

        @TestMetadata("objectInheritingFromATrait.kt")
        public void testObjectInheritingFromATrait() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/objectInheritingFromATrait.kt", this::doTest);
        }

        @TestMetadata("objectInheritingFromClass.kt")
        public void testObjectInheritingFromClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/objectInheritingFromClass.kt", this::doTest);
        }

        @TestMetadata("objectWithMethods.kt")
        public void testObjectWithMethods() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/objectDeclaration/objectWithMethods.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/operatorOverloading")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class OperatorOverloading extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInOperatorOverloading() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/operatorOverloading"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("augmentedAssignmentLhs.kt")
        public void testAugmentedAssignmentLhs() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/augmentedAssignmentLhs.kt", this::doTest);
        }

        @TestMetadata("binaryDivOverload.kt")
        public void testBinaryDivOverload() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/binaryDivOverload.kt", this::doTest);
        }

        @TestMetadata("compareTo.kt")
        public void testCompareTo() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/compareTo.kt", this::doTest);
        }

        @TestMetadata("compareToByName.kt")
        public void testCompareToByName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/compareToByName.kt", this::doTest);
        }

        @TestMetadata("lambdaRhs.kt")
        public void testLambdaRhs() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/lambdaRhs.kt", this::doTest);
        }

        @TestMetadata("notOverload.kt")
        public void testNotOverload() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/notOverload.kt", this::doTest);
        }

        @TestMetadata("operatorOverloadOnPropertyCallGetterAndSetterOnlyOnce.kt")
        public void testOperatorOverloadOnPropertyCallGetterAndSetterOnlyOnce() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/operatorOverloadOnPropertyCallGetterAndSetterOnlyOnce.kt", this::doTest);
        }

        @TestMetadata("overloadPlusAssignArrayList.kt")
        public void testOverloadPlusAssignArrayList() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/overloadPlusAssignArrayList.kt", this::doTest);
        }

        @TestMetadata("overloadPlusAssignViaExtensionFunction.kt")
        public void testOverloadPlusAssignViaExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/overloadPlusAssignViaExtensionFunction.kt", this::doTest);
        }

        @TestMetadata("overloadPlusAssignViaPlusExtensionFunction.kt")
        public void testOverloadPlusAssignViaPlusExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/overloadPlusAssignViaPlusExtensionFunction.kt", this::doTest);
        }

        @TestMetadata("overloadPlusViaExtensionFunction.kt")
        public void testOverloadPlusViaExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/overloadPlusViaExtensionFunction.kt", this::doTest);
        }

        @TestMetadata("overloadUnaryOperationsViaExtensionFunctions.kt")
        public void testOverloadUnaryOperationsViaExtensionFunctions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/overloadUnaryOperationsViaExtensionFunctions.kt", this::doTest);
        }

        @TestMetadata("overloadedCallOnProperty.kt")
        public void testOverloadedCallOnProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/overloadedCallOnProperty.kt", this::doTest);
        }

        @TestMetadata("plusAndMinusAsAnExpression.kt")
        public void testPlusAndMinusAsAnExpression() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/plusAndMinusAsAnExpression.kt", this::doTest);
        }

        @TestMetadata("plusAssignNoReassign.kt")
        public void testPlusAssignNoReassign() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/plusAssignNoReassign.kt", this::doTest);
        }

        @TestMetadata("plusOverload.kt")
        public void testPlusOverload() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/plusOverload.kt", this::doTest);
        }

        @TestMetadata("postfixInc.kt")
        public void testPostfixInc() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/postfixInc.kt", this::doTest);
        }

        @TestMetadata("postfixOnProperty.kt")
        public void testPostfixOnProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/postfixOnProperty.kt", this::doTest);
        }

        @TestMetadata("prefixDecOverload.kt")
        public void testPrefixDecOverload() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/prefixDecOverload.kt", this::doTest);
        }

        @TestMetadata("prefixIncReturnsCorrectValue.kt")
        public void testPrefixIncReturnsCorrectValue() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/prefixIncReturnsCorrectValue.kt", this::doTest);
        }

        @TestMetadata("unaryOnIntProperty.kt")
        public void testUnaryOnIntProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/unaryOnIntProperty.kt", this::doTest);
        }

        @TestMetadata("unaryOnIntPropertyAsStatement.kt")
        public void testUnaryOnIntPropertyAsStatement() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/unaryOnIntPropertyAsStatement.kt", this::doTest);
        }

        @TestMetadata("usingModInCaseModAssignNotAvailable.kt")
        public void testUsingModInCaseModAssignNotAvailable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/operatorOverloading/usingModInCaseModAssignNotAvailable.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/package")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Package extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInPackage() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/package"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("classCreatedInDeeplyNestedPackage.kt")
        public void testClassCreatedInDeeplyNestedPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/package/classCreatedInDeeplyNestedPackage.kt", this::doTest);
        }

        @TestMetadata("deeplyNestedPackage.kt")
        public void testDeeplyNestedPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/package/deeplyNestedPackage.kt", this::doTest);
        }

        @TestMetadata("deeplyNestedPackageFunctionCalled.kt")
        public void testDeeplyNestedPackageFunctionCalled() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/package/deeplyNestedPackageFunctionCalled.kt", this::doTest);
        }

        @TestMetadata("initializersOfNestedPackagesExecute.kt")
        public void testInitializersOfNestedPackagesExecute() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/package/initializersOfNestedPackagesExecute.kt", this::doTest);
        }

        @TestMetadata("nestedPackage.kt")
        public void testNestedPackage() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/package/nestedPackage.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/propertyAccess")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PropertyAccess extends AbstractIrBoxJsTest {
        @TestMetadata("accessToInstanceProperty.kt")
        public void testAccessToInstanceProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/accessToInstanceProperty.kt", this::doTest);
        }

        @TestMetadata("accessorsWithJsName.kt")
        public void testAccessorsWithJsName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/accessorsWithJsName.kt", this::doTest);
        }

        public void testAllFilesPresentInPropertyAccess() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/propertyAccess"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("classUsesPackageProperties.kt")
        public void testClassUsesPackageProperties() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/classUsesPackageProperties.kt", this::doTest);
        }

        @TestMetadata("customGetter.kt")
        public void testCustomGetter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/customGetter.kt", this::doTest);
        }

        @TestMetadata("customSetter.kt")
        public void testCustomSetter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/customSetter.kt", this::doTest);
        }

        @TestMetadata("defaultAccessorsWithJsName.kt")
        public void testDefaultAccessorsWithJsName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/defaultAccessorsWithJsName.kt", this::doTest);
        }

        @TestMetadata("enumerable.kt")
        public void testEnumerable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/enumerable.kt", this::doTest);
        }

        @TestMetadata("extensionLiteralSafeCall.kt")
        public void testExtensionLiteralSafeCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/extensionLiteralSafeCall.kt", this::doTest);
        }

        @TestMetadata("field.kt")
        public void testField() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/field.kt", this::doTest);
        }

        @TestMetadata("initInstanceProperties.kt")
        public void testInitInstanceProperties() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/initInstanceProperties.kt", this::doTest);
        }

        @TestMetadata("initValInConstructor.kt")
        public void testInitValInConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/initValInConstructor.kt", this::doTest);
        }

        @TestMetadata("overloadedOverriddenFunctionPropertyName.kt")
        public void testOverloadedOverriddenFunctionPropertyName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/overloadedOverriddenFunctionPropertyName.kt", this::doTest);
        }

        @TestMetadata("packageCustomAccessors.kt")
        public void testPackageCustomAccessors() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/packageCustomAccessors.kt", this::doTest);
        }

        @TestMetadata("packagePropertyInitializer.kt")
        public void testPackagePropertyInitializer() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/packagePropertyInitializer.kt", this::doTest);
        }

        @TestMetadata("packagePropertySet.kt")
        public void testPackagePropertySet() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/packagePropertySet.kt", this::doTest);
        }

        @TestMetadata("privatePropertyAccessFromMethod.kt")
        public void testPrivatePropertyAccessFromMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/privatePropertyAccessFromMethod.kt", this::doTest);
        }

        @TestMetadata("propertyAssignment.kt")
        public void testPropertyAssignment() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/propertyAssignment.kt", this::doTest);
        }

        @TestMetadata("setter.kt")
        public void testSetter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/setter.kt", this::doTest);
        }

        @TestMetadata("simpleLateInitIsInitialized.kt")
        public void testSimpleLateInitIsInitialized() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/simpleLateInitIsInitialized.kt", this::doTest);
        }

        @TestMetadata("staticAccessorsWithJsName.kt")
        public void testStaticAccessorsWithJsName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/staticAccessorsWithJsName.kt", this::doTest);
        }

        @TestMetadata("subclassAccessorsWithJsNameInSuper.kt")
        public void testSubclassAccessorsWithJsNameInSuper() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/subclassAccessorsWithJsNameInSuper.kt", this::doTest);
        }

        @TestMetadata("twoClassesWithProperties.kt")
        public void testTwoClassesWithProperties() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyAccess/twoClassesWithProperties.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/propertyOverride")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PropertyOverride extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInPropertyOverride() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/propertyOverride"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("checkSupertypeOrder.kt")
        public void testCheckSupertypeOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/checkSupertypeOrder.kt", this::doTest);
        }

        @TestMetadata("initOverrideInConstructor.kt")
        public void testInitOverrideInConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/initOverrideInConstructor.kt", this::doTest);
        }

        @TestMetadata("initOverrideInConstructorComplex.kt")
        public void testInitOverrideInConstructorComplex() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/initOverrideInConstructorComplex.kt", this::doTest);
        }

        @TestMetadata("initOverrideInConstructorExplicitThis.kt")
        public void testInitOverrideInConstructorExplicitThis() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/initOverrideInConstructorExplicitThis.kt", this::doTest);
        }

        @TestMetadata("initOverrideVarInConstructor.kt")
        public void testInitOverrideVarInConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/initOverrideVarInConstructor.kt", this::doTest);
        }

        @TestMetadata("overloadPrivateVal.kt")
        public void testOverloadPrivateVal() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/overloadPrivateVal.kt", this::doTest);
        }

        @TestMetadata("overrideExtensionProperty.kt")
        public void testOverrideExtensionProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/overrideExtensionProperty.kt", this::doTest);
        }

        @TestMetadata("overrideNotDirectlySuper.kt")
        public void testOverrideNotDirectlySuper() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/overrideNotDirectlySuper.kt", this::doTest);
        }

        @TestMetadata("overrideValFromTraits.kt")
        public void testOverrideValFromTraits() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/overrideValFromTraits.kt", this::doTest);
        }

        @TestMetadata("overrideValWithBackendFiled.kt")
        public void testOverrideValWithBackendFiled() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/overrideValWithBackendFiled.kt", this::doTest);
        }

        @TestMetadata("simpleOverride.kt")
        public void testSimpleOverride() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/propertyOverride/simpleOverride.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/range")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Range extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInRange() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/range"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("creatingProgressions.kt")
        public void testCreatingProgressions() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/creatingProgressions.kt", this::doTest);
        }

        @TestMetadata("explicitRange.kt")
        public void testExplicitRange() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/explicitRange.kt", this::doTest);
        }

        @TestMetadata("intDownTo.kt")
        public void testIntDownTo() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/intDownTo.kt", this::doTest);
        }

        @TestMetadata("intInRange.kt")
        public void testIntInRange() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/intInRange.kt", this::doTest);
        }

        @TestMetadata("intUpTo.kt")
        public void testIntUpTo() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/intUpTo.kt", this::doTest);
        }

        @TestMetadata("iteratingOverRanges.kt")
        public void testIteratingOverRanges() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/iteratingOverRanges.kt", this::doTest);
        }

        @TestMetadata("numberRangesOptimized.kt")
        public void testNumberRangesOptimized() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/numberRangesOptimized.kt", this::doTest);
        }

        @TestMetadata("rangeEquals.kt")
        public void testRangeEquals() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/rangeEquals.kt", this::doTest);
        }

        @TestMetadata("rangeSugarSyntax.kt")
        public void testRangeSugarSyntax() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/rangeSugarSyntax.kt", this::doTest);
        }

        @TestMetadata("rangeToDoesNotIterate.kt")
        public void testRangeToDoesNotIterate() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/rangeToDoesNotIterate.kt", this::doTest);
        }

        @TestMetadata("reverse.kt")
        public void testReverse() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/range/reverse.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/reflection")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reflection extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInReflection() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/reflection"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("external.kt")
        public void testExternal() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/external.kt", this::doTest);
        }

        @TestMetadata("jsClass.kt")
        public void testJsClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/jsClass.kt", this::doTest);
        }

        @TestMetadata("jsClassName.kt")
        public void testJsClassName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/jsClassName.kt", this::doTest);
        }

        @TestMetadata("jsClassOnReifiedType.kt")
        public void testJsClassOnReifiedType() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/jsClassOnReifiedType.kt", this::doTest);
        }

        @TestMetadata("jsClassOnReifiedTypeInLambda.kt")
        public void testJsClassOnReifiedTypeInLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/jsClassOnReifiedTypeInLambda.kt", this::doTest);
        }

        @TestMetadata("jsClassSimpleName.kt")
        public void testJsClassSimpleName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/jsClassSimpleName.kt", this::doTest);
        }

        @TestMetadata("kClass.kt")
        public void testKClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/kClass.kt", this::doTest);
        }

        @TestMetadata("kClassIsInstance.kt")
        public void testKClassIsInstance() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/kClassIsInstance.kt", this::doTest);
        }

        @TestMetadata("kClassOnReifiedType.kt")
        public void testKClassOnReifiedType() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/kClassOnReifiedType.kt", this::doTest);
        }

        @TestMetadata("kClassOnReifiedTypeInLambda.kt")
        public void testKClassOnReifiedTypeInLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/kClassOnReifiedTypeInLambda.kt", this::doTest);
        }

        @TestMetadata("kClassSimpleName.kt")
        public void testKClassSimpleName() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/kClassSimpleName.kt", this::doTest);
        }

        @TestMetadata("kClassToAndFromJsClass.kt")
        public void testKClassToAndFromJsClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/kClassToAndFromJsClass.kt", this::doTest);
        }

        @TestMetadata("primitives.kt")
        public void testPrimitives() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/primitives.kt", this::doTest);
        }

        @TestMetadata("primitives-12.kt")
        public void testPrimitives_12() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reflection/primitives-12.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/regression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Regression extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInRegression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/regression"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("kt2470.kt")
        public void testKt2470() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/regression/kt2470.kt", this::doTest);
        }

        @TestMetadata("tmpInsidePrimaryConstructor.kt")
        public void testTmpInsidePrimaryConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/regression/tmpInsidePrimaryConstructor.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/reified")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reified extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInReified() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/reified"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("callChain.kt")
        public void testCallChain() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/callChain.kt", this::doTest);
        }

        @TestMetadata("capture.kt")
        public void testCapture() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/capture.kt", this::doTest);
        }

        @TestMetadata("extensionFun.kt")
        public void testExtensionFun() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/extensionFun.kt", this::doTest);
        }

        @TestMetadata("extensionLambda.kt")
        public void testExtensionLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/extensionLambda.kt", this::doTest);
        }

        @TestMetadata("extensionMethod.kt")
        public void testExtensionMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/extensionMethod.kt", this::doTest);
        }

        @TestMetadata("innerObject.kt")
        public void testInnerObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/innerObject.kt", this::doTest);
        }

        @TestMetadata("isBool.kt")
        public void testIsBool() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/isBool.kt", this::doTest);
        }

        @TestMetadata("isChar.kt")
        public void testIsChar() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/isChar.kt", this::doTest);
        }

        @TestMetadata("isClass.kt")
        public void testIsClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/isClass.kt", this::doTest);
        }

        @TestMetadata("isNumber.kt")
        public void testIsNumber() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/isNumber.kt", this::doTest);
        }

        @TestMetadata("isString.kt")
        public void testIsString() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/isString.kt", this::doTest);
        }

        @TestMetadata("isTNullable.kt")
        public void testIsTNullable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/isTNullable.kt", this::doTest);
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/lambda.kt", this::doTest);
        }

        @TestMetadata("lambdaNameClash.kt")
        public void testLambdaNameClash() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/lambdaNameClash.kt", this::doTest);
        }

        @TestMetadata("method.kt")
        public void testMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/method.kt", this::doTest);
        }

        @TestMetadata("multipleTypeParameters.kt")
        public void testMultipleTypeParameters() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/multipleTypeParameters.kt", this::doTest);
        }

        @TestMetadata("noValueParameters.kt")
        public void testNoValueParameters() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/noValueParameters.kt", this::doTest);
        }

        @TestMetadata("parameterSwap.kt")
        public void testParameterSwap() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/parameterSwap.kt", this::doTest);
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/vararg.kt", this::doTest);
        }

        @TestMetadata("withInlineTurnedOff.kt")
        public void testWithInlineTurnedOff() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/reified/withInlineTurnedOff.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/rtti")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Rtti extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInRtti() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/rtti"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("collectionClassesIsCheck.kt")
        public void testCollectionClassesIsCheck() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/collectionClassesIsCheck.kt", this::doTest);
        }

        @TestMetadata("exceptionIsInterface.kt")
        public void testExceptionIsInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/exceptionIsInterface.kt", this::doTest);
        }

        @TestMetadata("isComparable.kt")
        public void testIsComparable() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/isComparable.kt", this::doTest);
        }

        @TestMetadata("isJsPrimitiveType.kt")
        public void testIsJsPrimitiveType() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/isJsPrimitiveType.kt", this::doTest);
        }

        @TestMetadata("isObject.kt")
        public void testIsObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/isObject.kt", this::doTest);
        }

        @TestMetadata("isReifiedObject.kt")
        public void testIsReifiedObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/isReifiedObject.kt", this::doTest);
        }

        @TestMetadata("isSameClass.kt")
        public void testIsSameClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/isSameClass.kt", this::doTest);
        }

        @TestMetadata("notIsOtherClass.kt")
        public void testNotIsOtherClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/notIsOtherClass.kt", this::doTest);
        }

        @TestMetadata("objectExpression.kt")
        public void testObjectExpression() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/objectExpression.kt", this::doTest);
        }

        @TestMetadata("onNativeObject.kt")
        public void testOnNativeObject() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/onNativeObject.kt", this::doTest);
        }

        @TestMetadata("prototypeUsedToFindInterface.kt")
        public void testPrototypeUsedToFindInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/prototypeUsedToFindInterface.kt", this::doTest);
        }

        @TestMetadata("rttiForClass.kt")
        public void testRttiForClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/rttiForClass.kt", this::doTest);
        }

        @TestMetadata("rttiForTrait.kt")
        public void testRttiForTrait() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/rttiForTrait.kt", this::doTest);
        }

        @TestMetadata("rttiForTrait2.kt")
        public void testRttiForTrait2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/rttiForTrait2.kt", this::doTest);
        }

        @TestMetadata("sideEffectMethod.kt")
        public void testSideEffectMethod() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/sideEffectMethod.kt", this::doTest);
        }

        @TestMetadata("sideEffectProperty.kt")
        public void testSideEffectProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/sideEffectProperty.kt", this::doTest);
        }

        @TestMetadata("stdlibEmptyListClass.kt")
        public void testStdlibEmptyListClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/stdlibEmptyListClass.kt", this::doTest);
        }

        @TestMetadata("subclassOfNativeIsInterface.kt")
        public void testSubclassOfNativeIsInterface() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/rtti/subclassOfNativeIsInterface.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/safeCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SafeCall extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInSafeCall() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/safeCall"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("redundantSafeAccess.kt")
        public void testRedundantSafeAccess() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/safeCall/redundantSafeAccess.kt", this::doTest);
        }

        @TestMetadata("safeAccess.kt")
        public void testSafeAccess() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/safeCall/safeAccess.kt", this::doTest);
        }

        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/safeCall/safeCall.kt", this::doTest);
        }

        @TestMetadata("safeCallAndIntrinsic.kt")
        public void testSafeCallAndIntrinsic() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/safeCall/safeCallAndIntrinsic.kt", this::doTest);
        }

        @TestMetadata("safeCallAndSideEffect.kt")
        public void testSafeCallAndSideEffect() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/safeCall/safeCallAndSideEffect.kt", this::doTest);
        }

        @TestMetadata("safeCallReturnsNullIfFails.kt")
        public void testSafeCallReturnsNullIfFails() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/safeCall/safeCallReturnsNullIfFails.kt", this::doTest);
        }

        @TestMetadata("safeExtensionFunctionCall.kt")
        public void testSafeExtensionFunctionCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/safeCall/safeExtensionFunctionCall.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/simple")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Simple extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInSimple() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/simple"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("assign.kt")
        public void testAssign() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/assign.kt", this::doTest);
        }

        @TestMetadata("breakDoWhile.kt")
        public void testBreakDoWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/breakDoWhile.kt", this::doTest);
        }

        @TestMetadata("breakWhile.kt")
        public void testBreakWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/breakWhile.kt", this::doTest);
        }

        @TestMetadata("classInstantiation.kt")
        public void testClassInstantiation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/classInstantiation.kt", this::doTest);
        }

        @TestMetadata("comparison.kt")
        public void testComparison() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/comparison.kt", this::doTest);
        }

        @TestMetadata("complexExpressionAsConstructorParameter.kt")
        public void testComplexExpressionAsConstructorParameter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/complexExpressionAsConstructorParameter.kt", this::doTest);
        }

        @TestMetadata("constructorWithParameter.kt")
        public void testConstructorWithParameter() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/constructorWithParameter.kt", this::doTest);
        }

        @TestMetadata("constructorWithPropertiesAsParameters.kt")
        public void testConstructorWithPropertiesAsParameters() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/constructorWithPropertiesAsParameters.kt", this::doTest);
        }

        @TestMetadata("continueDoWhile.kt")
        public void testContinueDoWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/continueDoWhile.kt", this::doTest);
        }

        @TestMetadata("continueWhile.kt")
        public void testContinueWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/continueWhile.kt", this::doTest);
        }

        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/doWhile.kt", this::doTest);
        }

        @TestMetadata("doWhile2.kt")
        public void testDoWhile2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/doWhile2.kt", this::doTest);
        }

        @TestMetadata("elseif.kt")
        public void testElseif() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/elseif.kt", this::doTest);
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/if.kt", this::doTest);
        }

        @TestMetadata("ifElseAsExpression.kt")
        public void testIfElseAsExpression() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/ifElseAsExpression.kt", this::doTest);
        }

        @TestMetadata("methodDeclarationAndCall.kt")
        public void testMethodDeclarationAndCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/methodDeclarationAndCall.kt", this::doTest);
        }

        @TestMetadata("minusAssignOnProperty.kt")
        public void testMinusAssignOnProperty() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/minusAssignOnProperty.kt", this::doTest);
        }

        @TestMetadata("notBoolean.kt")
        public void testNotBoolean() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/notBoolean.kt", this::doTest);
        }

        @TestMetadata("plusAssign.kt")
        public void testPlusAssign() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/plusAssign.kt", this::doTest);
        }

        @TestMetadata("positiveAndNegativeNumbers.kt")
        public void testPositiveAndNegativeNumbers() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/positiveAndNegativeNumbers.kt", this::doTest);
        }

        @TestMetadata("postfixIntOperations.kt")
        public void testPostfixIntOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/postfixIntOperations.kt", this::doTest);
        }

        @TestMetadata("prefixIntOperations.kt")
        public void testPrefixIntOperations() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/prefixIntOperations.kt", this::doTest);
        }

        @TestMetadata("primCtorDelegation1.kt")
        public void testPrimCtorDelegation1() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/primCtorDelegation1.kt", this::doTest);
        }

        @TestMetadata("propertiesAsParametersInitialized.kt")
        public void testPropertiesAsParametersInitialized() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/propertiesAsParametersInitialized.kt", this::doTest);
        }

        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/propertyAccess.kt", this::doTest);
        }

        @TestMetadata("secCtorDelegation1.kt")
        public void testSecCtorDelegation1() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/secCtorDelegation1.kt", this::doTest);
        }

        @TestMetadata("secCtorDelegation2.kt")
        public void testSecCtorDelegation2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/secCtorDelegation2.kt", this::doTest);
        }

        @TestMetadata("secCtorDelegation3.kt")
        public void testSecCtorDelegation3() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/secCtorDelegation3.kt", this::doTest);
        }

        @TestMetadata("secCtorDelegation4.kt")
        public void testSecCtorDelegation4() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/secCtorDelegation4.kt", this::doTest);
        }

        @TestMetadata("simpleInitializer.kt")
        public void testSimpleInitializer() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/simpleInitializer.kt", this::doTest);
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/while.kt", this::doTest);
        }

        @TestMetadata("while2.kt")
        public void testWhile2() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/simple/while2.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/standardClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StandardClasses extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInStandardClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/standardClasses"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("any.kt")
        public void testAny() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/any.kt", this::doTest);
        }

        @TestMetadata("array.kt")
        public void testArray() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/array.kt", this::doTest);
        }

        @TestMetadata("arrayAccess.kt")
        public void testArrayAccess() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/arrayAccess.kt", this::doTest);
        }

        @TestMetadata("arrayConstructorsWithLambda.kt")
        public void testArrayConstructorsWithLambda() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/arrayConstructorsWithLambda.kt", this::doTest);
        }

        @TestMetadata("arrayFactoryMethods.kt")
        public void testArrayFactoryMethods() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/arrayFactoryMethods.kt", this::doTest);
        }

        @TestMetadata("arrayFunctionConstructor.kt")
        public void testArrayFunctionConstructor() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/arrayFunctionConstructor.kt", this::doTest);
        }

        @TestMetadata("arrayIsFilledWithNulls.kt")
        public void testArrayIsFilledWithNulls() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/arrayIsFilledWithNulls.kt", this::doTest);
        }

        @TestMetadata("arraySize.kt")
        public void testArraySize() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/arraySize.kt", this::doTest);
        }

        @TestMetadata("arraysIterator.kt")
        public void testArraysIterator() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/arraysIterator.kt", this::doTest);
        }

        @TestMetadata("charArrayGetSet.kt")
        public void testCharArrayGetSet() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/charArrayGetSet.kt", this::doTest);
        }

        @TestMetadata("hashMapTypeOfElement.kt")
        public void testHashMapTypeOfElement() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/hashMapTypeOfElement.kt", this::doTest);
        }

        @TestMetadata("hashSetTypeOfElement.kt")
        public void testHashSetTypeOfElement() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/hashSetTypeOfElement.kt", this::doTest);
        }

        @TestMetadata("mutableMapRemoveWithCollision.kt")
        public void testMutableMapRemoveWithCollision() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/mutableMapRemoveWithCollision.kt", this::doTest);
        }

        @TestMetadata("stringBuilder.kt")
        public void testStringBuilder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/stringBuilder.kt", this::doTest);
        }

        @TestMetadata("stringPlus.kt")
        public void testStringPlus() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/standardClasses/stringPlus.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/superCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SuperCall extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInSuperCall() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/superCall"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("classSuperCall.kt")
        public void testClassSuperCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/superCall/classSuperCall.kt", this::doTest);
        }

        @TestMetadata("intrinsic.kt")
        public void testIntrinsic() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/superCall/intrinsic.kt", this::doTest);
        }

        @TestMetadata("nativeSuperClass.kt")
        public void testNativeSuperClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/superCall/nativeSuperClass.kt", this::doTest);
        }

        @TestMetadata("propertySuperAccess.kt")
        public void testPropertySuperAccess() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/superCall/propertySuperAccess.kt", this::doTest);
        }

        @TestMetadata("traitSuperCall.kt")
        public void testTraitSuperCall() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/superCall/traitSuperCall.kt", this::doTest);
        }
    }

    @TestMetadata("js/js.translator/testData/box/trait")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Trait extends AbstractIrBoxJsTest {
        public void testAllFilesPresentInTrait() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/box/trait"), Pattern.compile("^([^_](.+))\\.kt$"), TargetBackend.JS_IR, true);
        }

        @TestMetadata("checkImplementationCharacteristics.kt")
        public void testCheckImplementationCharacteristics() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/checkImplementationCharacteristics.kt", this::doTest);
        }

        @TestMetadata("classDerivesFromClassAndTrait.kt")
        public void testClassDerivesFromClassAndTrait() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/classDerivesFromClassAndTrait.kt", this::doTest);
        }

        @TestMetadata("classDerivesFromTraitAndClass.kt")
        public void testClassDerivesFromTraitAndClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/classDerivesFromTraitAndClass.kt", this::doTest);
        }

        @TestMetadata("definitionOrder.kt")
        public void testDefinitionOrder() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/definitionOrder.kt", this::doTest);
        }

        @TestMetadata("example.kt")
        public void testExample() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/example.kt", this::doTest);
        }

        @TestMetadata("funDelegation.kt")
        public void testFunDelegation() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/funDelegation.kt", this::doTest);
        }

        @TestMetadata("traitAddsFunctionsToClass.kt")
        public void testTraitAddsFunctionsToClass() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/traitAddsFunctionsToClass.kt", this::doTest);
        }

        @TestMetadata("traitExtendsTrait.kt")
        public void testTraitExtendsTrait() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/traitExtendsTrait.kt", this::doTest);
        }

        @TestMetadata("traitExtendsTwoTraits.kt")
        public void testTraitExtendsTwoTraits() throws Exception {
            KotlinTestUtils.runTest("js/js.translator/testData/box/trait/traitExtendsTwoTraits.kt", this::doTest);
        }
    }
}
