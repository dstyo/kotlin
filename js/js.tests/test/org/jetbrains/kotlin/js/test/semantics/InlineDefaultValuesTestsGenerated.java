/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/boxInline/defaultValues")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class InlineDefaultValuesTestsGenerated extends AbstractInlineDefaultValuesTests {
    @TestMetadata("33Parameters.kt")
    public void test33Parameters() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/33Parameters.kt", this::doTest);
    }

    @TestMetadata("33ParametersInConstructor.kt")
    public void test33ParametersInConstructor() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/33ParametersInConstructor.kt", this::doTest);
    }

    public void testAllFilesPresentInDefaultValues() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
    }

    @TestMetadata("defaultInExtension.kt")
    public void testDefaultInExtension() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/defaultInExtension.kt", this::doTest);
    }

    @TestMetadata("defaultMethod.kt")
    public void testDefaultMethod() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/defaultMethod.kt", this::doTest);
    }

    @TestMetadata("defaultMethodInClass.kt")
    public void testDefaultMethodInClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/defaultMethodInClass.kt", this::doTest);
    }

    @TestMetadata("defaultParamRemapping.kt")
    public void testDefaultParamRemapping() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/defaultParamRemapping.kt", this::doTest);
    }

    @TestMetadata("inlineInDefaultParameter.kt")
    public void testInlineInDefaultParameter() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/inlineInDefaultParameter.kt", this::doTest);
    }

    @TestMetadata("inlineLambdaInNoInlineDefault.kt")
    public void testInlineLambdaInNoInlineDefault() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/inlineLambdaInNoInlineDefault.kt", this::doTest);
    }

    @TestMetadata("kt11479.kt")
    public void testKt11479() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt11479.kt", this::doTest);
    }

    @TestMetadata("kt11479InlinedDefaultParameter.kt")
    public void testKt11479InlinedDefaultParameter() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt11479InlinedDefaultParameter.kt", this::doTest);
    }

    @TestMetadata("kt14564.kt")
    public void testKt14564() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt14564.kt", this::doTest);
    }

    @TestMetadata("kt14564_2.kt")
    public void testKt14564_2() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt14564_2.kt", this::doTest);
    }

    @TestMetadata("kt18689.kt")
    public void testKt18689() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt18689.kt", this::doTest);
    }

    @TestMetadata("kt18689_2.kt")
    public void testKt18689_2() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt18689_2.kt", this::doTest);
    }

    @TestMetadata("kt18689_3.kt")
    public void testKt18689_3() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt18689_3.kt", this::doTest);
    }

    @TestMetadata("kt18689_4.kt")
    public void testKt18689_4() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt18689_4.kt", this::doTest);
    }

    @TestMetadata("kt5685.kt")
    public void testKt5685() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt5685.kt", this::doTest);
    }

    @TestMetadata("simpleDefaultMethod.kt")
    public void testSimpleDefaultMethod() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/simpleDefaultMethod.kt", this::doTest);
    }

    @TestMetadata("varArgNoInline.kt")
    public void testVarArgNoInline() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/varArgNoInline.kt", this::doTest);
    }

    @TestMetadata("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LambdaInlining extends AbstractInlineDefaultValuesTests {
        public void testAllFilesPresentInLambdaInlining() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
        }

        @TestMetadata("checkLambdaClassIsPresent.kt")
        public void testCheckLambdaClassIsPresent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkLambdaClassIsPresent.kt", this::doTest);
        }

        @TestMetadata("checkLambdaClassesArePresent.kt")
        public void testCheckLambdaClassesArePresent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkLambdaClassesArePresent.kt", this::doTest);
        }

        @TestMetadata("checkObjectClassIsPresent.kt")
        public void testCheckObjectClassIsPresent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkObjectClassIsPresent.kt", this::doTest);
        }

        @TestMetadata("checkStaticLambdaClassIsPresent.kt")
        public void testCheckStaticLambdaClassIsPresent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkStaticLambdaClassIsPresent.kt", this::doTest);
        }

        @TestMetadata("checkStaticLambdaClassesArePresent.kt")
        public void testCheckStaticLambdaClassesArePresent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkStaticLambdaClassesArePresent.kt", this::doTest);
        }

        @TestMetadata("checkStaticObjectClassIsPresent.kt")
        public void testCheckStaticObjectClassIsPresent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkStaticObjectClassIsPresent.kt", this::doTest);
        }

        @TestMetadata("defaultCallInDefaultLambda.kt")
        public void testDefaultCallInDefaultLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/defaultCallInDefaultLambda.kt", this::doTest);
        }

        @TestMetadata("defaultLambdaInNoInline.kt")
        public void testDefaultLambdaInNoInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/defaultLambdaInNoInline.kt", this::doTest);
        }

        @TestMetadata("genericLambda.kt")
        public void testGenericLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/genericLambda.kt", this::doTest);
        }

        @TestMetadata("instanceCapuredInClass.kt")
        public void testInstanceCapuredInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/instanceCapuredInClass.kt", this::doTest);
        }

        @TestMetadata("instanceCapuredInInterface.kt")
        public void testInstanceCapuredInInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/instanceCapuredInInterface.kt", this::doTest);
        }

        @TestMetadata("jvmStaticDefault.kt")
        public void testJvmStaticDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/jvmStaticDefault.kt", this::doTest);
        }

        @TestMetadata("kt21827.kt")
        public void testKt21827() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/kt21827.kt", this::doTest);
        }

        @TestMetadata("noInline.kt")
        public void testNoInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/noInline.kt", this::doTest);
        }

        @TestMetadata("nonDefaultInlineInNoInline.kt")
        public void testNonDefaultInlineInNoInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/nonDefaultInlineInNoInline.kt", this::doTest);
        }

        @TestMetadata("receiverClash.kt")
        public void testReceiverClash() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/receiverClash.kt", this::doTest);
        }

        @TestMetadata("receiverClash2.kt")
        public void testReceiverClash2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/receiverClash2.kt", this::doTest);
        }

        @TestMetadata("receiverClashInClass.kt")
        public void testReceiverClashInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/receiverClashInClass.kt", this::doTest);
        }

        @TestMetadata("receiverClashInClass2.kt")
        public void testReceiverClashInClass2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/receiverClashInClass2.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simple.kt", this::doTest);
        }

        @TestMetadata("simpleErased.kt")
        public void testSimpleErased() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleErased.kt", this::doTest);
        }

        @TestMetadata("simpleErasedStaticInstance.kt")
        public void testSimpleErasedStaticInstance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleErasedStaticInstance.kt", this::doTest);
        }

        @TestMetadata("simpleExtension.kt")
        public void testSimpleExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleExtension.kt", this::doTest);
        }

        @TestMetadata("simpleGeneric.kt")
        public void testSimpleGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleGeneric.kt", this::doTest);
        }

        @TestMetadata("simpleStaticInstance.kt")
        public void testSimpleStaticInstance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleStaticInstance.kt", this::doTest);
        }

        @TestMetadata("thisClash.kt")
        public void testThisClash() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/thisClash.kt", this::doTest);
        }

        @TestMetadata("thisClashInClass.kt")
        public void testThisClashInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/thisClashInClass.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CallableReferences extends AbstractInlineDefaultValuesTests {
            public void testAllFilesPresentInCallableReferences() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
            }

            @TestMetadata("boundFunctionReference.kt")
            public void testBoundFunctionReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundFunctionReference.kt", this::doTest);
            }

            @TestMetadata("boundFunctionReferenceOnInt.kt")
            public void testBoundFunctionReferenceOnInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundFunctionReferenceOnInt.kt", this::doTest);
            }

            @TestMetadata("boundFunctionReferenceOnLong.kt")
            public void testBoundFunctionReferenceOnLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundFunctionReferenceOnLong.kt", this::doTest);
            }

            @TestMetadata("boundPropertyReference.kt")
            public void testBoundPropertyReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundPropertyReference.kt", this::doTest);
            }

            @TestMetadata("boundPropertyReferenceOnInt.kt")
            public void testBoundPropertyReferenceOnInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundPropertyReferenceOnInt.kt", this::doTest);
            }

            @TestMetadata("boundPropertyReferenceOnLong.kt")
            public void testBoundPropertyReferenceOnLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundPropertyReferenceOnLong.kt", this::doTest);
            }

            @TestMetadata("constuctorReference.kt")
            public void testConstuctorReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/constuctorReference.kt", this::doTest);
            }

            @TestMetadata("functionImportedFromObject.kt")
            public void testFunctionImportedFromObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/functionImportedFromObject.kt", this::doTest);
            }

            @TestMetadata("functionReference.kt")
            public void testFunctionReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/functionReference.kt", this::doTest);
            }

            @TestMetadata("functionReferenceFromClass.kt")
            public void testFunctionReferenceFromClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/functionReferenceFromClass.kt", this::doTest);
            }

            @TestMetadata("functionReferenceFromObject.kt")
            public void testFunctionReferenceFromObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/functionReferenceFromObject.kt", this::doTest);
            }

            @TestMetadata("innerClassConstuctorReference.kt")
            public void testInnerClassConstuctorReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/innerClassConstuctorReference.kt", this::doTest);
            }

            @TestMetadata("privateFunctionReference.kt")
            public void testPrivateFunctionReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/privateFunctionReference.kt", this::doTest);
            }

            @TestMetadata("privatePropertyReference.kt")
            public void testPrivatePropertyReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/privatePropertyReference.kt", this::doTest);
            }

            @TestMetadata("propertyImportedFromObject.kt")
            public void testPropertyImportedFromObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/propertyImportedFromObject.kt", this::doTest);
            }

            @TestMetadata("propertyReference.kt")
            public void testPropertyReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/propertyReference.kt", this::doTest);
            }

            @TestMetadata("propertyReferenceFromClass.kt")
            public void testPropertyReferenceFromClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/propertyReferenceFromClass.kt", this::doTest);
            }

            @TestMetadata("propertyReferenceFromObject.kt")
            public void testPropertyReferenceFromObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/propertyReferenceFromObject.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/defaultValues/maskElimination")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MaskElimination extends AbstractInlineDefaultValuesTests {
        @TestMetadata("32Parameters.kt")
        public void test32Parameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/32Parameters.kt", this::doTest);
        }

        @TestMetadata("33Parameters.kt")
        public void test33Parameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/33Parameters.kt", this::doTest);
        }

        public void testAllFilesPresentInMaskElimination() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues/maskElimination"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JS, true);
        }

        @TestMetadata("kt18792.kt")
        public void testKt18792() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/kt18792.kt", this::doTest);
        }

        @TestMetadata("kt19679.kt")
        public void testKt19679() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/kt19679.kt", this::doTest);
        }

        @TestMetadata("kt19679_2.kt")
        public void testKt19679_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/kt19679_2.kt", this::doTest);
        }

        @TestMetadata("kt19679_3.kt")
        public void testKt19679_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/kt19679_3.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/simple.kt", this::doTest);
        }
    }
}
