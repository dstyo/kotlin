/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen.ir;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/boxInline")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IrCompileKotlinAgainstInlineKotlinTestGenerated extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
    public void testAllFilesPresentInBoxInline() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("compiler/testData/codegen/boxInline/anonymousObject")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AnonymousObject extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInAnonymousObject() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/anonymousObject"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("anonymousObjectOnCallSite.kt")
        public void testAnonymousObjectOnCallSite() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/anonymousObjectOnCallSite.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectOnCallSiteSuperParams.kt")
        public void testAnonymousObjectOnCallSiteSuperParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/anonymousObjectOnCallSiteSuperParams.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectOnDeclarationSite.kt")
        public void testAnonymousObjectOnDeclarationSite() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/anonymousObjectOnDeclarationSite.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectOnDeclarationSiteSuperParams.kt")
        public void testAnonymousObjectOnDeclarationSiteSuperParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/anonymousObjectOnDeclarationSiteSuperParams.kt", this::doTest);
        }

        @TestMetadata("capturedLambdaInInline.kt")
        public void testCapturedLambdaInInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/capturedLambdaInInline.kt", this::doTest);
        }

        @TestMetadata("capturedLambdaInInline2.kt")
        public void testCapturedLambdaInInline2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/capturedLambdaInInline2.kt", this::doTest);
        }

        @TestMetadata("capturedLambdaInInline3.kt")
        public void testCapturedLambdaInInline3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/capturedLambdaInInline3.kt", this::doTest);
        }

        @TestMetadata("capturedLambdaInInlineObject.kt")
        public void testCapturedLambdaInInlineObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/capturedLambdaInInlineObject.kt", this::doTest);
        }

        @TestMetadata("changingReturnType.kt")
        public void testChangingReturnType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/changingReturnType.kt", this::doTest);
        }

        @TestMetadata("constructorVisibility.kt")
        public void testConstructorVisibility() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/constructorVisibility.kt", this::doTest);
        }

        @TestMetadata("constructorVisibilityInConstLambda.kt")
        public void testConstructorVisibilityInConstLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/constructorVisibilityInConstLambda.kt", this::doTest);
        }

        @TestMetadata("constructorVisibilityInLambda.kt")
        public void testConstructorVisibilityInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/constructorVisibilityInLambda.kt", this::doTest);
        }

        @TestMetadata("defineClass.kt")
        public void testDefineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/defineClass.kt", this::doTest);
        }

        @TestMetadata("kt13133.kt")
        public void testKt13133() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt13133.kt", this::doTest);
        }

        @TestMetadata("kt13182.kt")
        public void testKt13182() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt13182.kt", this::doTest);
        }

        @TestMetadata("kt13374.kt")
        public void testKt13374() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt13374.kt", this::doTest);
        }

        @TestMetadata("kt14011.kt")
        public void testKt14011() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt14011.kt", this::doTest);
        }

        @TestMetadata("kt14011_2.kt")
        public void testKt14011_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt14011_2.kt", this::doTest);
        }

        @TestMetadata("kt14011_3.kt")
        public void testKt14011_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt14011_3.kt", this::doTest);
        }

        @TestMetadata("kt16193.kt")
        public void testKt16193() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt16193.kt", this::doTest);
        }

        @TestMetadata("kt17972.kt")
        public void testKt17972() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt17972.kt", this::doTest);
        }

        @TestMetadata("kt17972_2.kt")
        public void testKt17972_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt17972_2.kt", this::doTest);
        }

        @TestMetadata("kt17972_3.kt")
        public void testKt17972_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt17972_3.kt", this::doTest);
        }

        @TestMetadata("kt17972_4.kt")
        public void testKt17972_4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt17972_4.kt", this::doTest);
        }

        @TestMetadata("kt17972_5.kt")
        public void testKt17972_5() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt17972_5.kt", this::doTest);
        }

        @TestMetadata("kt17972_super.kt")
        public void testKt17972_super() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt17972_super.kt", this::doTest);
        }

        @TestMetadata("kt17972_super2.kt")
        public void testKt17972_super2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt17972_super2.kt", this::doTest);
        }

        @TestMetadata("kt17972_super3.kt")
        public void testKt17972_super3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt17972_super3.kt", this::doTest);
        }

        @TestMetadata("kt19399.kt")
        public void testKt19399() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt19399.kt", this::doTest);
        }

        @TestMetadata("kt19434.kt")
        public void testKt19434() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt19434.kt", this::doTest);
        }

        @TestMetadata("kt19434_2.kt")
        public void testKt19434_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt19434_2.kt", this::doTest);
        }

        @TestMetadata("kt19723.kt")
        public void testKt19723() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt19723.kt", this::doTest);
        }

        @TestMetadata("kt6552.kt")
        public void testKt6552() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt6552.kt", this::doTest);
        }

        @TestMetadata("kt8133.kt")
        public void testKt8133() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt8133.kt", this::doTest);
        }

        @TestMetadata("kt9064.kt")
        public void testKt9064() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt9064.kt", this::doTest);
        }

        @TestMetadata("kt9064v2.kt")
        public void testKt9064v2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt9064v2.kt", this::doTest);
        }

        @TestMetadata("kt9591.kt")
        public void testKt9591() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt9591.kt", this::doTest);
        }

        @TestMetadata("kt9877.kt")
        public void testKt9877() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt9877.kt", this::doTest);
        }

        @TestMetadata("kt9877_2.kt")
        public void testKt9877_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/kt9877_2.kt", this::doTest);
        }

        @TestMetadata("objectInLambdaCapturesAnotherObject.kt")
        public void testObjectInLambdaCapturesAnotherObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/objectInLambdaCapturesAnotherObject.kt", this::doTest);
        }

        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/safeCall.kt", this::doTest);
        }

        @TestMetadata("safeCall_2.kt")
        public void testSafeCall_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/safeCall_2.kt", this::doTest);
        }

        @TestMetadata("sam.kt")
        public void testSam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/sam.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/anonymousObject/enumWhen")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class EnumWhen extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInEnumWhen() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/anonymousObject/enumWhen"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("callSite.kt")
            public void testCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/enumWhen/callSite.kt", this::doTest);
            }

            @TestMetadata("declSite.kt")
            public void testDeclSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/enumWhen/declSite.kt", this::doTest);
            }

            @TestMetadata("declSiteSeveralMappings.kt")
            public void testDeclSiteSeveralMappings() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/enumWhen/declSiteSeveralMappings.kt", this::doTest);
            }

            @TestMetadata("declSiteSeveralMappingsDifOrder.kt")
            public void testDeclSiteSeveralMappingsDifOrder() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/enumWhen/declSiteSeveralMappingsDifOrder.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/anonymousObject/properRecapturing")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ProperRecapturing extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInProperRecapturing() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/anonymousObject/properRecapturing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("inlineChain.kt")
            public void testInlineChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturing/inlineChain.kt", this::doTest);
            }

            @TestMetadata("lambdaChain.kt")
            public void testLambdaChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturing/lambdaChain.kt", this::doTest);
            }

            @TestMetadata("lambdaChainSimple.kt")
            public void testLambdaChainSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturing/lambdaChainSimple.kt", this::doTest);
            }

            @TestMetadata("lambdaChain_2.kt")
            public void testLambdaChain_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturing/lambdaChain_2.kt", this::doTest);
            }

            @TestMetadata("lambdaChain_3.kt")
            public void testLambdaChain_3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturing/lambdaChain_3.kt", this::doTest);
            }

            @TestMetadata("noInlineLambda.kt")
            public void testNoInlineLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturing/noInlineLambda.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ProperRecapturingInClass extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInProperRecapturingInClass() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("inlineChain.kt")
            public void testInlineChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/inlineChain.kt", this::doTest);
            }

            @TestMetadata("inlinelambdaChain.kt")
            public void testInlinelambdaChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/inlinelambdaChain.kt", this::doTest);
            }

            @TestMetadata("lambdaChain.kt")
            public void testLambdaChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/lambdaChain.kt", this::doTest);
            }

            @TestMetadata("lambdaChainSimple.kt")
            public void testLambdaChainSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/lambdaChainSimple.kt", this::doTest);
            }

            @TestMetadata("lambdaChainSimple_2.kt")
            public void testLambdaChainSimple_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/lambdaChainSimple_2.kt", this::doTest);
            }

            @TestMetadata("lambdaChain_2.kt")
            public void testLambdaChain_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/lambdaChain_2.kt", this::doTest);
            }

            @TestMetadata("lambdaChain_3.kt")
            public void testLambdaChain_3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/lambdaChain_3.kt", this::doTest);
            }

            @TestMetadata("noCapturedThisOnCallSite.kt")
            public void testNoCapturedThisOnCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/noCapturedThisOnCallSite.kt", this::doTest);
            }

            @TestMetadata("noInlineLambda.kt")
            public void testNoInlineLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/noInlineLambda.kt", this::doTest);
            }

            @TestMetadata("twoInlineLambda.kt")
            public void testTwoInlineLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/twoInlineLambda.kt", this::doTest);
            }

            @TestMetadata("twoInlineLambdaComplex.kt")
            public void testTwoInlineLambdaComplex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/twoInlineLambdaComplex.kt", this::doTest);
            }

            @TestMetadata("twoInlineLambdaComplex_2.kt")
            public void testTwoInlineLambdaComplex_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/properRecapturingInClass/twoInlineLambdaComplex_2.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/anonymousObject/sam")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Sam extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInSam() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/anonymousObject/sam"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt17091.kt")
            public void testKt17091() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/sam/kt17091.kt", this::doTest);
            }

            @TestMetadata("kt21671.kt")
            public void testKt21671() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/sam/kt21671.kt", this::doTest);
            }

            @TestMetadata("kt21671_2.kt")
            public void testKt21671_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/sam/kt21671_2.kt", this::doTest);
            }

            @TestMetadata("kt21671_3.kt")
            public void testKt21671_3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/sam/kt21671_3.kt", this::doTest);
            }

            @TestMetadata("kt22304.kt")
            public void testKt22304() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/sam/kt22304.kt", this::doTest);
            }

            @TestMetadata("samOnCallSite.kt")
            public void testSamOnCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/sam/samOnCallSite.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/anonymousObject/twoCapturedReceivers")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TwoCapturedReceivers extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInTwoCapturedReceivers() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/anonymousObject/twoCapturedReceivers"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt8668.kt")
            public void testKt8668() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/twoCapturedReceivers/kt8668.kt", this::doTest);
            }

            @TestMetadata("kt8668_2.kt")
            public void testKt8668_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/twoCapturedReceivers/kt8668_2.kt", this::doTest);
            }

            @TestMetadata("kt8668_3.kt")
            public void testKt8668_3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/twoCapturedReceivers/kt8668_3.kt", this::doTest);
            }

            @TestMetadata("twoDifferentDispatchReceivers.kt")
            public void testTwoDifferentDispatchReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/twoCapturedReceivers/twoDifferentDispatchReceivers.kt", this::doTest);
            }

            @TestMetadata("twoExtensionReceivers.kt")
            public void testTwoExtensionReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/anonymousObject/twoCapturedReceivers/twoExtensionReceivers.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/argumentOrder")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ArgumentOrder extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInArgumentOrder() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/argumentOrder"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("boundFunctionReference.kt")
        public void testBoundFunctionReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/boundFunctionReference.kt", this::doTest);
        }

        @TestMetadata("boundFunctionReference2.kt")
        public void testBoundFunctionReference2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/boundFunctionReference2.kt", this::doTest);
        }

        @TestMetadata("captured.kt")
        public void testCaptured() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/captured.kt", this::doTest);
        }

        @TestMetadata("capturedInExtension.kt")
        public void testCapturedInExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/capturedInExtension.kt", this::doTest);
        }

        @TestMetadata("defaultParametersAndLastVararg.kt")
        public void testDefaultParametersAndLastVararg() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/defaultParametersAndLastVararg.kt", this::doTest);
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/extension.kt", this::doTest);
        }

        @TestMetadata("extensionInClass.kt")
        public void testExtensionInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/extensionInClass.kt", this::doTest);
        }

        @TestMetadata("lambdaMigration.kt")
        public void testLambdaMigration() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/lambdaMigration.kt", this::doTest);
        }

        @TestMetadata("lambdaMigrationInClass.kt")
        public void testLambdaMigrationInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/lambdaMigrationInClass.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/simple.kt", this::doTest);
        }

        @TestMetadata("simpleInClass.kt")
        public void testSimpleInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/simpleInClass.kt", this::doTest);
        }

        @TestMetadata("varargAndDefaultParameters.kt")
        public void testVarargAndDefaultParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/argumentOrder/varargAndDefaultParameters.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/arrayConvention")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ArrayConvention extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInArrayConvention() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/arrayConvention"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("simpleAccess.kt")
        public void testSimpleAccess() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/arrayConvention/simpleAccess.kt", this::doTest);
        }

        @TestMetadata("simpleAccessInClass.kt")
        public void testSimpleAccessInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/arrayConvention/simpleAccessInClass.kt", this::doTest);
        }

        @TestMetadata("simpleAccessWithDefault.kt")
        public void testSimpleAccessWithDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/arrayConvention/simpleAccessWithDefault.kt", this::doTest);
        }

        @TestMetadata("simpleAccessWithDefaultInClass.kt")
        public void testSimpleAccessWithDefaultInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/arrayConvention/simpleAccessWithDefaultInClass.kt", this::doTest);
        }

        @TestMetadata("simpleAccessWithLambda.kt")
        public void testSimpleAccessWithLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/arrayConvention/simpleAccessWithLambda.kt", this::doTest);
        }

        @TestMetadata("simpleAccessWithLambdaInClass.kt")
        public void testSimpleAccessWithLambdaInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/arrayConvention/simpleAccessWithLambdaInClass.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/builders")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Builders extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInBuilders() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/builders"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("builders.kt")
        public void testBuilders() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/builders/builders.kt", this::doTest);
        }

        @TestMetadata("buildersAndLambdaCapturing.kt")
        public void testBuildersAndLambdaCapturing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/builders/buildersAndLambdaCapturing.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/bytecodePreprocessing")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BytecodePreprocessing extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInBytecodePreprocessing() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/bytecodePreprocessing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("apiVersionAtLeast1.kt")
        public void testApiVersionAtLeast1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/bytecodePreprocessing/apiVersionAtLeast1.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReference extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInCallableReference() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classLevel.kt")
        public void testClassLevel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/classLevel.kt", this::doTest);
        }

        @TestMetadata("classLevel2.kt")
        public void testClassLevel2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/classLevel2.kt", this::doTest);
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/constructor.kt", this::doTest);
        }

        @TestMetadata("intrinsic.kt")
        public void testIntrinsic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/intrinsic.kt", this::doTest);
        }

        @TestMetadata("kt15449.kt")
        public void testKt15449() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/kt15449.kt", this::doTest);
        }

        @TestMetadata("kt16411.kt")
        public void testKt16411() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/kt16411.kt", this::doTest);
        }

        @TestMetadata("propertyIntrinsic.kt")
        public void testPropertyIntrinsic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/propertyIntrinsic.kt", this::doTest);
        }

        @TestMetadata("propertyReference.kt")
        public void testPropertyReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/propertyReference.kt", this::doTest);
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/topLevel.kt", this::doTest);
        }

        @TestMetadata("topLevelExtension.kt")
        public void testTopLevelExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/topLevelExtension.kt", this::doTest);
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/topLevelProperty.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/callableReference/bound")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Bound extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInBound() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/callableReference/bound"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("classProperty.kt")
            public void testClassProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/classProperty.kt", this::doTest);
            }

            @TestMetadata("emptyLhsFunction.kt")
            public void testEmptyLhsFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/emptyLhsFunction.kt", this::doTest);
            }

            @TestMetadata("expression.kt")
            public void testExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/expression.kt", this::doTest);
            }

            @TestMetadata("extensionReceiver.kt")
            public void testExtensionReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/extensionReceiver.kt", this::doTest);
            }

            @TestMetadata("filter.kt")
            public void testFilter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/filter.kt", this::doTest);
            }

            @TestMetadata("intrinsic.kt")
            public void testIntrinsic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/intrinsic.kt", this::doTest);
            }

            @TestMetadata("kt18728.kt")
            public void testKt18728() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/kt18728.kt", this::doTest);
            }

            @TestMetadata("kt18728_2.kt")
            public void testKt18728_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/kt18728_2.kt", this::doTest);
            }

            @TestMetadata("kt18728_3.kt")
            public void testKt18728_3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/kt18728_3.kt", this::doTest);
            }

            @TestMetadata("kt18728_4.kt")
            public void testKt18728_4() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/kt18728_4.kt", this::doTest);
            }

            @TestMetadata("map.kt")
            public void testMap() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/map.kt", this::doTest);
            }

            @TestMetadata("mixed.kt")
            public void testMixed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/mixed.kt", this::doTest);
            }

            @TestMetadata("objectProperty.kt")
            public void testObjectProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/objectProperty.kt", this::doTest);
            }

            @TestMetadata("propertyImportedFromObject.kt")
            public void testPropertyImportedFromObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/propertyImportedFromObject.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/simple.kt", this::doTest);
            }

            @TestMetadata("topLevelExtensionProperty.kt")
            public void testTopLevelExtensionProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/callableReference/bound/topLevelExtensionProperty.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/capture")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Capture extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInCapture() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/capture"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("captureInlinable.kt")
        public void testCaptureInlinable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/capture/captureInlinable.kt", this::doTest);
        }

        @TestMetadata("captureInlinableAndOther.kt")
        public void testCaptureInlinableAndOther() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/capture/captureInlinableAndOther.kt", this::doTest);
        }

        @TestMetadata("captureThisAndReceiver.kt")
        public void testCaptureThisAndReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/capture/captureThisAndReceiver.kt", this::doTest);
        }

        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/capture/generics.kt", this::doTest);
        }

        @TestMetadata("simpleCapturingInClass.kt")
        public void testSimpleCapturingInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/capture/simpleCapturingInClass.kt", this::doTest);
        }

        @TestMetadata("simpleCapturingInPackage.kt")
        public void testSimpleCapturingInPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/capture/simpleCapturingInPackage.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/complex")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Complex extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInComplex() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/complex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("closureChain.kt")
        public void testClosureChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complex/closureChain.kt", this::doTest);
        }

        @TestMetadata("forEachLine.kt")
        public void testForEachLine() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complex/forEachLine.kt", this::doTest);
        }

        @TestMetadata("lambdaInLambda.kt")
        public void testLambdaInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complex/lambdaInLambda.kt", this::doTest);
        }

        @TestMetadata("swapAndWith.kt")
        public void testSwapAndWith() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complex/swapAndWith.kt", this::doTest);
        }

        @TestMetadata("swapAndWith2.kt")
        public void testSwapAndWith2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complex/swapAndWith2.kt", this::doTest);
        }

        @TestMetadata("use.kt")
        public void testUse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complex/use.kt", this::doTest);
        }

        @TestMetadata("with.kt")
        public void testWith() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complex/with.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/complexStack")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ComplexStack extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInComplexStack() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/complexStack"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("asCheck.kt")
        public void testAsCheck() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complexStack/asCheck.kt", this::doTest);
        }

        @TestMetadata("asCheck2.kt")
        public void testAsCheck2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complexStack/asCheck2.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complexStack/simple.kt", this::doTest);
        }

        @TestMetadata("simple2.kt")
        public void testSimple2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complexStack/simple2.kt", this::doTest);
        }

        @TestMetadata("simple3.kt")
        public void testSimple3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complexStack/simple3.kt", this::doTest);
        }

        @TestMetadata("simple4.kt")
        public void testSimple4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complexStack/simple4.kt", this::doTest);
        }

        @TestMetadata("simpleExtension.kt")
        public void testSimpleExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/complexStack/simpleExtension.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/contracts")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Contracts extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInContracts() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/contracts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("complexInitializer.kt")
        public void testComplexInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/complexInitializer.kt", this::doTest);
        }

        @TestMetadata("complexInitializerWithStackTransformation.kt")
        public void testComplexInitializerWithStackTransformation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/complexInitializerWithStackTransformation.kt", this::doTest);
        }

        @TestMetadata("definiteLongValInitialization.kt")
        public void testDefiniteLongValInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/definiteLongValInitialization.kt", this::doTest);
        }

        @TestMetadata("definiteNestedValInitialization.kt")
        public void testDefiniteNestedValInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/definiteNestedValInitialization.kt", this::doTest);
        }

        @TestMetadata("definiteValInitialization.kt")
        public void testDefiniteValInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/definiteValInitialization.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturn.kt")
        public void testNonLocalReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/nonLocalReturn.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnWithCycle.kt")
        public void testNonLocalReturnWithCycle() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/nonLocalReturnWithCycle.kt", this::doTest);
        }

        @TestMetadata("propertyInitialization.kt")
        public void testPropertyInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/propertyInitialization.kt", this::doTest);
        }

        @TestMetadata("valInitializationAndUsageInNestedLambda.kt")
        public void testValInitializationAndUsageInNestedLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/contracts/valInitializationAndUsageInNestedLambda.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/defaultValues")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultValues extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        @TestMetadata("33Parameters.kt")
        public void test33Parameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/33Parameters.kt", this::doTest);
        }

        @TestMetadata("33ParametersInConstructor.kt")
        public void test33ParametersInConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/33ParametersInConstructor.kt", this::doTest);
        }

        public void testAllFilesPresentInDefaultValues() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("defaultInExtension.kt")
        public void testDefaultInExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/defaultInExtension.kt", this::doTest);
        }

        @TestMetadata("defaultMethod.kt")
        public void testDefaultMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/defaultMethod.kt", this::doTest);
        }

        @TestMetadata("defaultMethodInClass.kt")
        public void testDefaultMethodInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/defaultMethodInClass.kt", this::doTest);
        }

        @TestMetadata("defaultParamRemapping.kt")
        public void testDefaultParamRemapping() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/defaultParamRemapping.kt", this::doTest);
        }

        @TestMetadata("inlineInDefaultParameter.kt")
        public void testInlineInDefaultParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/inlineInDefaultParameter.kt", this::doTest);
        }

        @TestMetadata("inlineLambdaInNoInlineDefault.kt")
        public void testInlineLambdaInNoInlineDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/inlineLambdaInNoInlineDefault.kt", this::doTest);
        }

        @TestMetadata("kt11479.kt")
        public void testKt11479() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt11479.kt", this::doTest);
        }

        @TestMetadata("kt11479InlinedDefaultParameter.kt")
        public void testKt11479InlinedDefaultParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt11479InlinedDefaultParameter.kt", this::doTest);
        }

        @TestMetadata("kt14564.kt")
        public void testKt14564() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt14564.kt", this::doTest);
        }

        @TestMetadata("kt14564_2.kt")
        public void testKt14564_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt14564_2.kt", this::doTest);
        }

        @TestMetadata("kt18689.kt")
        public void testKt18689() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt18689.kt", this::doTest);
        }

        @TestMetadata("kt18689_2.kt")
        public void testKt18689_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt18689_2.kt", this::doTest);
        }

        @TestMetadata("kt18689_3.kt")
        public void testKt18689_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt18689_3.kt", this::doTest);
        }

        @TestMetadata("kt18689_4.kt")
        public void testKt18689_4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt18689_4.kt", this::doTest);
        }

        @TestMetadata("kt5685.kt")
        public void testKt5685() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/kt5685.kt", this::doTest);
        }

        @TestMetadata("simpleDefaultMethod.kt")
        public void testSimpleDefaultMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/simpleDefaultMethod.kt", this::doTest);
        }

        @TestMetadata("varArgNoInline.kt")
        public void testVarArgNoInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/varArgNoInline.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LambdaInlining extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInLambdaInlining() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("checkLambdaClassIsPresent.kt")
            public void testCheckLambdaClassIsPresent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkLambdaClassIsPresent.kt", this::doTest);
            }

            @TestMetadata("checkLambdaClassesArePresent.kt")
            public void testCheckLambdaClassesArePresent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkLambdaClassesArePresent.kt", this::doTest);
            }

            @TestMetadata("checkObjectClassIsPresent.kt")
            public void testCheckObjectClassIsPresent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkObjectClassIsPresent.kt", this::doTest);
            }

            @TestMetadata("checkStaticLambdaClassIsPresent.kt")
            public void testCheckStaticLambdaClassIsPresent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkStaticLambdaClassIsPresent.kt", this::doTest);
            }

            @TestMetadata("checkStaticLambdaClassesArePresent.kt")
            public void testCheckStaticLambdaClassesArePresent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkStaticLambdaClassesArePresent.kt", this::doTest);
            }

            @TestMetadata("checkStaticObjectClassIsPresent.kt")
            public void testCheckStaticObjectClassIsPresent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/checkStaticObjectClassIsPresent.kt", this::doTest);
            }

            @TestMetadata("defaultCallInDefaultLambda.kt")
            public void testDefaultCallInDefaultLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/defaultCallInDefaultLambda.kt", this::doTest);
            }

            @TestMetadata("defaultLambdaInNoInline.kt")
            public void testDefaultLambdaInNoInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/defaultLambdaInNoInline.kt", this::doTest);
            }

            @TestMetadata("genericLambda.kt")
            public void testGenericLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/genericLambda.kt", this::doTest);
            }

            @TestMetadata("instanceCapuredInClass.kt")
            public void testInstanceCapuredInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/instanceCapuredInClass.kt", this::doTest);
            }

            @TestMetadata("instanceCapuredInInterface.kt")
            public void testInstanceCapuredInInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/instanceCapuredInInterface.kt", this::doTest);
            }

            @TestMetadata("jvmStaticDefault.kt")
            public void testJvmStaticDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/jvmStaticDefault.kt", this::doTest);
            }

            @TestMetadata("kt21827.kt")
            public void testKt21827() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/kt21827.kt", this::doTest);
            }

            @TestMetadata("noInline.kt")
            public void testNoInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/noInline.kt", this::doTest);
            }

            @TestMetadata("nonDefaultInlineInNoInline.kt")
            public void testNonDefaultInlineInNoInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/nonDefaultInlineInNoInline.kt", this::doTest);
            }

            @TestMetadata("receiverClash.kt")
            public void testReceiverClash() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/receiverClash.kt", this::doTest);
            }

            @TestMetadata("receiverClash2.kt")
            public void testReceiverClash2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/receiverClash2.kt", this::doTest);
            }

            @TestMetadata("receiverClashInClass.kt")
            public void testReceiverClashInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/receiverClashInClass.kt", this::doTest);
            }

            @TestMetadata("receiverClashInClass2.kt")
            public void testReceiverClashInClass2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/receiverClashInClass2.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simple.kt", this::doTest);
            }

            @TestMetadata("simpleErased.kt")
            public void testSimpleErased() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleErased.kt", this::doTest);
            }

            @TestMetadata("simpleErasedStaticInstance.kt")
            public void testSimpleErasedStaticInstance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleErasedStaticInstance.kt", this::doTest);
            }

            @TestMetadata("simpleExtension.kt")
            public void testSimpleExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleExtension.kt", this::doTest);
            }

            @TestMetadata("simpleGeneric.kt")
            public void testSimpleGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleGeneric.kt", this::doTest);
            }

            @TestMetadata("simpleStaticInstance.kt")
            public void testSimpleStaticInstance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/simpleStaticInstance.kt", this::doTest);
            }

            @TestMetadata("thisClash.kt")
            public void testThisClash() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/thisClash.kt", this::doTest);
            }

            @TestMetadata("thisClashInClass.kt")
            public void testThisClashInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/thisClashInClass.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CallableReferences extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInCallableReferences() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("boundFunctionReference.kt")
                public void testBoundFunctionReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundFunctionReference.kt", this::doTest);
                }

                @TestMetadata("boundFunctionReferenceOnInt.kt")
                public void testBoundFunctionReferenceOnInt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundFunctionReferenceOnInt.kt", this::doTest);
                }

                @TestMetadata("boundFunctionReferenceOnLong.kt")
                public void testBoundFunctionReferenceOnLong() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundFunctionReferenceOnLong.kt", this::doTest);
                }

                @TestMetadata("boundPropertyReference.kt")
                public void testBoundPropertyReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundPropertyReference.kt", this::doTest);
                }

                @TestMetadata("boundPropertyReferenceOnInt.kt")
                public void testBoundPropertyReferenceOnInt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundPropertyReferenceOnInt.kt", this::doTest);
                }

                @TestMetadata("boundPropertyReferenceOnLong.kt")
                public void testBoundPropertyReferenceOnLong() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/boundPropertyReferenceOnLong.kt", this::doTest);
                }

                @TestMetadata("constuctorReference.kt")
                public void testConstuctorReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/constuctorReference.kt", this::doTest);
                }

                @TestMetadata("functionImportedFromObject.kt")
                public void testFunctionImportedFromObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/functionImportedFromObject.kt", this::doTest);
                }

                @TestMetadata("functionReference.kt")
                public void testFunctionReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/functionReference.kt", this::doTest);
                }

                @TestMetadata("functionReferenceFromClass.kt")
                public void testFunctionReferenceFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/functionReferenceFromClass.kt", this::doTest);
                }

                @TestMetadata("functionReferenceFromObject.kt")
                public void testFunctionReferenceFromObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/functionReferenceFromObject.kt", this::doTest);
                }

                @TestMetadata("innerClassConstuctorReference.kt")
                public void testInnerClassConstuctorReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/innerClassConstuctorReference.kt", this::doTest);
                }

                @TestMetadata("privateFunctionReference.kt")
                public void testPrivateFunctionReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/privateFunctionReference.kt", this::doTest);
                }

                @TestMetadata("privatePropertyReference.kt")
                public void testPrivatePropertyReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/privatePropertyReference.kt", this::doTest);
                }

                @TestMetadata("propertyImportedFromObject.kt")
                public void testPropertyImportedFromObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/propertyImportedFromObject.kt", this::doTest);
                }

                @TestMetadata("propertyReference.kt")
                public void testPropertyReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/propertyReference.kt", this::doTest);
                }

                @TestMetadata("propertyReferenceFromClass.kt")
                public void testPropertyReferenceFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/propertyReferenceFromClass.kt", this::doTest);
                }

                @TestMetadata("propertyReferenceFromObject.kt")
                public void testPropertyReferenceFromObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/lambdaInlining/callableReferences/propertyReferenceFromObject.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/defaultValues/maskElimination")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MaskElimination extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            @TestMetadata("32Parameters.kt")
            public void test32Parameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/32Parameters.kt", this::doTest);
            }

            @TestMetadata("33Parameters.kt")
            public void test33Parameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/33Parameters.kt", this::doTest);
            }

            public void testAllFilesPresentInMaskElimination() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues/maskElimination"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt18792.kt")
            public void testKt18792() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/kt18792.kt", this::doTest);
            }

            @TestMetadata("kt19679.kt")
            public void testKt19679() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/kt19679.kt", this::doTest);
            }

            @TestMetadata("kt19679_2.kt")
            public void testKt19679_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/kt19679_2.kt", this::doTest);
            }

            @TestMetadata("kt19679_3.kt")
            public void testKt19679_3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/kt19679_3.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/defaultValues/maskElimination/simple.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/delegatedProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegatedProperty extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInDelegatedProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt16864.kt")
        public void testKt16864() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/delegatedProperty/kt16864.kt", this::doTest);
        }

        @TestMetadata("local.kt")
        public void testLocal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/delegatedProperty/local.kt", this::doTest);
        }

        @TestMetadata("localInAnonymousObject.kt")
        public void testLocalInAnonymousObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/delegatedProperty/localInAnonymousObject.kt", this::doTest);
        }

        @TestMetadata("localInLambda.kt")
        public void testLocalInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/delegatedProperty/localInLambda.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/enclosingInfo")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class EnclosingInfo extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInEnclosingInfo() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/enclosingInfo"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("anonymousInLambda.kt")
        public void testAnonymousInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enclosingInfo/anonymousInLambda.kt", this::doTest);
        }

        @TestMetadata("inlineChain.kt")
        public void testInlineChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enclosingInfo/inlineChain.kt", this::doTest);
        }

        @TestMetadata("inlineChain2.kt")
        public void testInlineChain2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enclosingInfo/inlineChain2.kt", this::doTest);
        }

        @TestMetadata("objectInInlineFun.kt")
        public void testObjectInInlineFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enclosingInfo/objectInInlineFun.kt", this::doTest);
        }

        @TestMetadata("transformedConstructor.kt")
        public void testTransformedConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enclosingInfo/transformedConstructor.kt", this::doTest);
        }

        @TestMetadata("transformedConstructorWithAdditionalObject.kt")
        public void testTransformedConstructorWithAdditionalObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enclosingInfo/transformedConstructorWithAdditionalObject.kt", this::doTest);
        }

        @TestMetadata("transformedConstructorWithNestedInline.kt")
        public void testTransformedConstructorWithNestedInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enclosingInfo/transformedConstructorWithNestedInline.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/enum")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Enum extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInEnum() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/enum"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt10569.kt")
        public void testKt10569() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/kt10569.kt", this::doTest);
        }

        @TestMetadata("kt18254.kt")
        public void testKt18254() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/kt18254.kt", this::doTest);
        }

        @TestMetadata("valueOf.kt")
        public void testValueOf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valueOf.kt", this::doTest);
        }

        @TestMetadata("valueOfCapturedType.kt")
        public void testValueOfCapturedType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valueOfCapturedType.kt", this::doTest);
        }

        @TestMetadata("valueOfChain.kt")
        public void testValueOfChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valueOfChain.kt", this::doTest);
        }

        @TestMetadata("valueOfChainCapturedType.kt")
        public void testValueOfChainCapturedType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valueOfChainCapturedType.kt", this::doTest);
        }

        @TestMetadata("valueOfNonReified.kt")
        public void testValueOfNonReified() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valueOfNonReified.kt", this::doTest);
        }

        @TestMetadata("values.kt")
        public void testValues() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/values.kt", this::doTest);
        }

        @TestMetadata("valuesAsArray.kt")
        public void testValuesAsArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valuesAsArray.kt", this::doTest);
        }

        @TestMetadata("valuesCapturedType.kt")
        public void testValuesCapturedType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valuesCapturedType.kt", this::doTest);
        }

        @TestMetadata("valuesChain.kt")
        public void testValuesChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valuesChain.kt", this::doTest);
        }

        @TestMetadata("valuesChainCapturedType.kt")
        public void testValuesChainCapturedType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valuesChainCapturedType.kt", this::doTest);
        }

        @TestMetadata("valuesNonReified.kt")
        public void testValuesNonReified() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/enum/valuesNonReified.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/functionExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionExpression extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInFunctionExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/functionExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/functionExpression/extension.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/innerClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InnerClasses extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInInnerClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/innerClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("innerLambda.kt")
        public void testInnerLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/innerClasses/innerLambda.kt", this::doTest);
        }

        @TestMetadata("kt10259.kt")
        public void testKt10259() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/innerClasses/kt10259.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/jvmPackageName")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JvmPackageName extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInJvmPackageName() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/jvmPackageName"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/jvmPackageName/simple.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/lambdaClassClash")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LambdaClassClash extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInLambdaClassClash() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/lambdaClassClash"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("lambdaClassClash.kt")
        public void testLambdaClassClash() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/lambdaClassClash/lambdaClassClash.kt", this::doTest);
        }

        @TestMetadata("noInlineLambdaX2.kt")
        public void testNoInlineLambdaX2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/lambdaClassClash/noInlineLambdaX2.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/lambdaTransformation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LambdaTransformation extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInLambdaTransformation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/lambdaTransformation"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("lambdaCloning.kt")
        public void testLambdaCloning() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/lambdaTransformation/lambdaCloning.kt", this::doTest);
        }

        @TestMetadata("lambdaInLambda2.kt")
        public void testLambdaInLambda2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/lambdaTransformation/lambdaInLambda2.kt", this::doTest);
        }

        @TestMetadata("lambdaInLambdaNoInline.kt")
        public void testLambdaInLambdaNoInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/lambdaTransformation/lambdaInLambdaNoInline.kt", this::doTest);
        }

        @TestMetadata("regeneratedLambdaName.kt")
        public void testRegeneratedLambdaName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/lambdaTransformation/regeneratedLambdaName.kt", this::doTest);
        }

        @TestMetadata("sameCaptured.kt")
        public void testSameCaptured() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/lambdaTransformation/sameCaptured.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/localFunInLambda")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LocalFunInLambda extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInLocalFunInLambda() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/localFunInLambda"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("lambdaInLambdaCapturesAnotherFun.kt")
        public void testLambdaInLambdaCapturesAnotherFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/localFunInLambda/lambdaInLambdaCapturesAnotherFun.kt", this::doTest);
        }

        @TestMetadata("localFunInLambda.kt")
        public void testLocalFunInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/localFunInLambda/localFunInLambda.kt", this::doTest);
        }

        @TestMetadata("localFunInLambdaCapturesAnotherFun.kt")
        public void testLocalFunInLambdaCapturesAnotherFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/localFunInLambda/localFunInLambdaCapturesAnotherFun.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/multifileClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultifileClasses extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInMultifileClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("inlineFromOptimizedMultifileClass.kt")
        public void testInlineFromOptimizedMultifileClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/multifileClasses/inlineFromOptimizedMultifileClass.kt", this::doTest);
        }

        @TestMetadata("inlineFromOtherPackage.kt")
        public void testInlineFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/multifileClasses/inlineFromOtherPackage.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/noInline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NoInline extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInNoInline() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/noInline"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("extensionReceiver.kt")
        public void testExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/noInline/extensionReceiver.kt", this::doTest);
        }

        @TestMetadata("lambdaAsGeneric.kt")
        public void testLambdaAsGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/noInline/lambdaAsGeneric.kt", this::doTest);
        }

        @TestMetadata("lambdaAsNonFunction.kt")
        public void testLambdaAsNonFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/noInline/lambdaAsNonFunction.kt", this::doTest);
        }

        @TestMetadata("noInline.kt")
        public void testNoInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/noInline/noInline.kt", this::doTest);
        }

        @TestMetadata("noInlineLambdaChain.kt")
        public void testNoInlineLambdaChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/noInline/noInlineLambdaChain.kt", this::doTest);
        }

        @TestMetadata("noInlineLambdaChainWithCapturedInline.kt")
        public void testNoInlineLambdaChainWithCapturedInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/noInline/noInlineLambdaChainWithCapturedInline.kt", this::doTest);
        }

        @TestMetadata("withoutInline.kt")
        public void testWithoutInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/noInline/withoutInline.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NonLocalReturns extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInNonLocalReturns() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("explicitLocalReturn.kt")
        public void testExplicitLocalReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/explicitLocalReturn.kt", this::doTest);
        }

        @TestMetadata("justReturnInLambda.kt")
        public void testJustReturnInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/justReturnInLambda.kt", this::doTest);
        }

        @TestMetadata("kt5199.kt")
        public void testKt5199() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/kt5199.kt", this::doTest);
        }

        @TestMetadata("kt8948.kt")
        public void testKt8948() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/kt8948.kt", this::doTest);
        }

        @TestMetadata("kt8948v2.kt")
        public void testKt8948v2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/kt8948v2.kt", this::doTest);
        }

        @TestMetadata("nestedNonLocals.kt")
        public void testNestedNonLocals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/nestedNonLocals.kt", this::doTest);
        }

        @TestMetadata("noInlineLocalReturn.kt")
        public void testNoInlineLocalReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/noInlineLocalReturn.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnFromOuterLambda.kt")
        public void testNonLocalReturnFromOuterLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/nonLocalReturnFromOuterLambda.kt", this::doTest);
        }

        @TestMetadata("propertyAccessors.kt")
        public void testPropertyAccessors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/propertyAccessors.kt", this::doTest);
        }

        @TestMetadata("returnFromFunctionExpr.kt")
        public void testReturnFromFunctionExpr() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/returnFromFunctionExpr.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/simple.kt", this::doTest);
        }

        @TestMetadata("simpleFunctional.kt")
        public void testSimpleFunctional() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/simpleFunctional.kt", this::doTest);
        }

        @TestMetadata("simpleVoid.kt")
        public void testSimpleVoid() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/simpleVoid.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Deparenthesize extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInDeparenthesize() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("bracket.kt")
            public void testBracket() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize/bracket.kt", this::doTest);
            }

            @TestMetadata("labeled.kt")
            public void testLabeled() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize/labeled.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TryFinally extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInTryFinally() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt20433.kt")
            public void testKt20433() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt20433.kt", this::doTest);
            }

            @TestMetadata("kt20433_2.kt")
            public void testKt20433_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt20433_2.kt", this::doTest);
            }

            @TestMetadata("kt20433_2_void.kt")
            public void testKt20433_2_void() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt20433_2_void.kt", this::doTest);
            }

            @TestMetadata("kt20433_void.kt")
            public void testKt20433_void() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt20433_void.kt", this::doTest);
            }

            @TestMetadata("kt6956.kt")
            public void testKt6956() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt6956.kt", this::doTest);
            }

            @TestMetadata("kt7273.kt")
            public void testKt7273() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt7273.kt", this::doTest);
            }

            @TestMetadata("nonLocalReturnFromCatchBlock.kt")
            public void testNonLocalReturnFromCatchBlock() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/nonLocalReturnFromCatchBlock.kt", this::doTest);
            }

            @TestMetadata("nonLocalReturnFromOuterLambda.kt")
            public void testNonLocalReturnFromOuterLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/nonLocalReturnFromOuterLambda.kt", this::doTest);
            }

            @TestMetadata("nonLocalReturnToCatchBlock.kt")
            public void testNonLocalReturnToCatchBlock() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/nonLocalReturnToCatchBlock.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CallSite extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInCallSite() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("callSite.kt")
                public void testCallSite() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/callSite.kt", this::doTest);
                }

                @TestMetadata("callSiteComplex.kt")
                public void testCallSiteComplex() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/callSiteComplex.kt", this::doTest);
                }

                @TestMetadata("exceptionTableSplit.kt")
                public void testExceptionTableSplit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/exceptionTableSplit.kt", this::doTest);
                }

                @TestMetadata("exceptionTableSplitNoReturn.kt")
                public void testExceptionTableSplitNoReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/exceptionTableSplitNoReturn.kt", this::doTest);
                }

                @TestMetadata("finallyInFinally.kt")
                public void testFinallyInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/finallyInFinally.kt", this::doTest);
                }

                @TestMetadata("wrongVarInterval.kt")
                public void testWrongVarInterval() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/wrongVarInterval.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Chained extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInChained() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("finallyInFinally.kt")
                public void testFinallyInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/finallyInFinally.kt", this::doTest);
                }

                @TestMetadata("finallyInFinally2.kt")
                public void testFinallyInFinally2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/finallyInFinally2.kt", this::doTest);
                }

                @TestMetadata("intReturn.kt")
                public void testIntReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturn.kt", this::doTest);
                }

                @TestMetadata("intReturnComplex.kt")
                public void testIntReturnComplex() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex.kt", this::doTest);
                }

                @TestMetadata("intReturnComplex2.kt")
                public void testIntReturnComplex2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex2.kt", this::doTest);
                }

                @TestMetadata("intReturnComplex3.kt")
                public void testIntReturnComplex3() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex3.kt", this::doTest);
                }

                @TestMetadata("intReturnComplex4.kt")
                public void testIntReturnComplex4() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex4.kt", this::doTest);
                }

                @TestMetadata("nestedLambda.kt")
                public void testNestedLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/nestedLambda.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DeclSite extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInDeclSite() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("complex.kt")
                public void testComplex() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/complex.kt", this::doTest);
                }

                @TestMetadata("intReturn.kt")
                public void testIntReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/intReturn.kt", this::doTest);
                }

                @TestMetadata("intReturnComplex.kt")
                public void testIntReturnComplex() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/intReturnComplex.kt", this::doTest);
                }

                @TestMetadata("longReturn.kt")
                public void testLongReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/longReturn.kt", this::doTest);
                }

                @TestMetadata("nested.kt")
                public void testNested() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/nested.kt", this::doTest);
                }

                @TestMetadata("returnInFinally.kt")
                public void testReturnInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInFinally.kt", this::doTest);
                }

                @TestMetadata("returnInTry.kt")
                public void testReturnInTry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInTry.kt", this::doTest);
                }

                @TestMetadata("returnInTryAndFinally.kt")
                public void testReturnInTryAndFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInTryAndFinally.kt", this::doTest);
                }

                @TestMetadata("severalInTry.kt")
                public void testSeveralInTry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/severalInTry.kt", this::doTest);
                }

                @TestMetadata("severalInTryComplex.kt")
                public void testSeveralInTryComplex() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/severalInTryComplex.kt", this::doTest);
                }

                @TestMetadata("voidInlineFun.kt")
                public void testVoidInlineFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/voidInlineFun.kt", this::doTest);
                }

                @TestMetadata("voidNonLocal.kt")
                public void testVoidNonLocal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/voidNonLocal.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ExceptionTable extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInExceptionTable() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("break.kt")
                public void testBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/break.kt", this::doTest);
                }

                @TestMetadata("continue.kt")
                public void testContinue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/continue.kt", this::doTest);
                }

                @TestMetadata("exceptionInFinally.kt")
                public void testExceptionInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/exceptionInFinally.kt", this::doTest);
                }

                @TestMetadata("forInFinally.kt")
                public void testForInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/forInFinally.kt", this::doTest);
                }

                @TestMetadata("innerAndExternal.kt")
                public void testInnerAndExternal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternal.kt", this::doTest);
                }

                @TestMetadata("innerAndExternalNested.kt")
                public void testInnerAndExternalNested() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternalNested.kt", this::doTest);
                }

                @TestMetadata("innerAndExternalSimple.kt")
                public void testInnerAndExternalSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternalSimple.kt", this::doTest);
                }

                @TestMetadata("nested.kt")
                public void testNested() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nested.kt", this::doTest);
                }

                @TestMetadata("nestedWithReturns.kt")
                public void testNestedWithReturns() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nestedWithReturns.kt", this::doTest);
                }

                @TestMetadata("nestedWithReturnsSimple.kt")
                public void testNestedWithReturnsSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nestedWithReturnsSimple.kt", this::doTest);
                }

                @TestMetadata("noFinally.kt")
                public void testNoFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/noFinally.kt", this::doTest);
                }

                @TestMetadata("severalCatchClause.kt")
                public void testSeveralCatchClause() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/severalCatchClause.kt", this::doTest);
                }

                @TestMetadata("simpleThrow.kt")
                public void testSimpleThrow() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/simpleThrow.kt", this::doTest);
                }

                @TestMetadata("synchonized.kt")
                public void testSynchonized() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/synchonized.kt", this::doTest);
                }

                @TestMetadata("throwInFinally.kt")
                public void testThrowInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/throwInFinally.kt", this::doTest);
                }

                @TestMetadata("tryCatchInFinally.kt")
                public void testTryCatchInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/tryCatchInFinally.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Variables extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInVariables() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("kt7792.kt")
                public void testKt7792() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables/kt7792.kt", this::doTest);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/optimizations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Optimizations extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInOptimizations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/optimizations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt20844.kt")
        public void testKt20844() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/optimizations/kt20844.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/private")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Private extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        @TestMetadata("accessorForConst.kt")
        public void testAccessorForConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/accessorForConst.kt", this::doTest);
        }

        @TestMetadata("accessorStability.kt")
        public void testAccessorStability() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/accessorStability.kt", this::doTest);
        }

        @TestMetadata("accessorStabilityInClass.kt")
        public void testAccessorStabilityInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/accessorStabilityInClass.kt", this::doTest);
        }

        public void testAllFilesPresentInPrivate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/private"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("effectivePrivate.kt")
        public void testEffectivePrivate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/effectivePrivate.kt", this::doTest);
        }

        @TestMetadata("kt6453.kt")
        public void testKt6453() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/kt6453.kt", this::doTest);
        }

        @TestMetadata("kt8094.kt")
        public void testKt8094() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/kt8094.kt", this::doTest);
        }

        @TestMetadata("kt8095.kt")
        public void testKt8095() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/kt8095.kt", this::doTest);
        }

        @TestMetadata("nestedInPrivateClass.kt")
        public void testNestedInPrivateClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/nestedInPrivateClass.kt", this::doTest);
        }

        @TestMetadata("privateClass.kt")
        public void testPrivateClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/privateClass.kt", this::doTest);
        }

        @TestMetadata("privateClassExtensionLambda.kt")
        public void testPrivateClassExtensionLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/privateClassExtensionLambda.kt", this::doTest);
        }

        @TestMetadata("privateInInlineInMultiFileFacade.kt")
        public void testPrivateInInlineInMultiFileFacade() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/privateInInlineInMultiFileFacade.kt", this::doTest);
        }

        @TestMetadata("privateInline.kt")
        public void testPrivateInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/private/privateInline.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/property")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Property extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/property"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("augAssignmentAndInc.kt")
        public void testAugAssignmentAndInc() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/augAssignmentAndInc.kt", this::doTest);
        }

        @TestMetadata("augAssignmentAndIncInClass.kt")
        public void testAugAssignmentAndIncInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/augAssignmentAndIncInClass.kt", this::doTest);
        }

        @TestMetadata("augAssignmentAndIncInClassViaConvention.kt")
        public void testAugAssignmentAndIncInClassViaConvention() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/augAssignmentAndIncInClassViaConvention.kt", this::doTest);
        }

        @TestMetadata("augAssignmentAndIncOnExtension.kt")
        public void testAugAssignmentAndIncOnExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/augAssignmentAndIncOnExtension.kt", this::doTest);
        }

        @TestMetadata("augAssignmentAndIncOnExtensionInClass.kt")
        public void testAugAssignmentAndIncOnExtensionInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/augAssignmentAndIncOnExtensionInClass.kt", this::doTest);
        }

        @TestMetadata("augAssignmentAndIncViaConvention.kt")
        public void testAugAssignmentAndIncViaConvention() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/augAssignmentAndIncViaConvention.kt", this::doTest);
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/property.kt", this::doTest);
        }

        @TestMetadata("reifiedVal.kt")
        public void testReifiedVal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/reifiedVal.kt", this::doTest);
        }

        @TestMetadata("reifiedVar.kt")
        public void testReifiedVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/reifiedVar.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/simple.kt", this::doTest);
        }

        @TestMetadata("simpleExtension.kt")
        public void testSimpleExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/property/simpleExtension.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/reified")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reified extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInReified() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/reified"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("capturedLambda.kt")
        public void testCapturedLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/capturedLambda.kt", this::doTest);
        }

        @TestMetadata("capturedLambda2.kt")
        public void testCapturedLambda2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/capturedLambda2.kt", this::doTest);
        }

        @TestMetadata("kt11081.kt")
        public void testKt11081() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt11081.kt", this::doTest);
        }

        @TestMetadata("kt11677.kt")
        public void testKt11677() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt11677.kt", this::doTest);
        }

        @TestMetadata("kt15997.kt")
        public void testKt15997() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt15997.kt", this::doTest);
        }

        @TestMetadata("kt15997_2.kt")
        public void testKt15997_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt15997_2.kt", this::doTest);
        }

        @TestMetadata("kt6988.kt")
        public void testKt6988() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt6988.kt", this::doTest);
        }

        @TestMetadata("kt6988_2.kt")
        public void testKt6988_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt6988_2.kt", this::doTest);
        }

        @TestMetadata("kt6990.kt")
        public void testKt6990() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt6990.kt", this::doTest);
        }

        @TestMetadata("kt7017.kt")
        public void testKt7017() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt7017.kt", this::doTest);
        }

        @TestMetadata("kt8047.kt")
        public void testKt8047() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt8047.kt", this::doTest);
        }

        @TestMetadata("kt9637.kt")
        public void testKt9637() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt9637.kt", this::doTest);
        }

        @TestMetadata("kt9637_2.kt")
        public void testKt9637_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/kt9637_2.kt", this::doTest);
        }

        @TestMetadata("packages.kt")
        public void testPackages() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/packages.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/reified/checkCast")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CheckCast extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInCheckCast() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/reified/checkCast"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("chain.kt")
            public void testChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/checkCast/chain.kt", this::doTest);
            }

            @TestMetadata("kt8043.kt")
            public void testKt8043() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/checkCast/kt8043.kt", this::doTest);
            }

            @TestMetadata("maxStack.kt")
            public void testMaxStack() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/checkCast/maxStack.kt", this::doTest);
            }

            @TestMetadata("nullable.kt")
            public void testNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/checkCast/nullable.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/checkCast/simple.kt", this::doTest);
            }

            @TestMetadata("simpleSafe.kt")
            public void testSimpleSafe() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/checkCast/simpleSafe.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/reified/defaultLambda")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DefaultLambda extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInDefaultLambda() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/reified/defaultLambda"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("chain.kt")
            public void testChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/defaultLambda/chain.kt", this::doTest);
            }

            @TestMetadata("nested.kt")
            public void testNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/defaultLambda/nested.kt", this::doTest);
            }

            @TestMetadata("nested2.kt")
            public void testNested2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/defaultLambda/nested2.kt", this::doTest);
            }

            @TestMetadata("nested2Static.kt")
            public void testNested2Static() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/defaultLambda/nested2Static.kt", this::doTest);
            }

            @TestMetadata("nestedStatic.kt")
            public void testNestedStatic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/defaultLambda/nestedStatic.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/defaultLambda/simple.kt", this::doTest);
            }

            @TestMetadata("transitiveChain.kt")
            public void testTransitiveChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/defaultLambda/transitiveChain.kt", this::doTest);
            }

            @TestMetadata("transitiveChainStatic.kt")
            public void testTransitiveChainStatic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/defaultLambda/transitiveChainStatic.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/reified/isCheck")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IsCheck extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInIsCheck() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/reified/isCheck"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("chain.kt")
            public void testChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/isCheck/chain.kt", this::doTest);
            }

            @TestMetadata("nullable.kt")
            public void testNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/isCheck/nullable.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/reified/isCheck/simple.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/signature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Signature extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSignature() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/signature"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("inProjectionSubstitution.kt")
        public void testInProjectionSubstitution() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/inProjectionSubstitution.kt", this::doTest);
        }

        @TestMetadata("outProjectionSubstitution.kt")
        public void testOutProjectionSubstitution() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/outProjectionSubstitution.kt", this::doTest);
        }

        @TestMetadata("recursion.kt")
        public void testRecursion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/recursion.kt", this::doTest);
        }

        @TestMetadata("sameFormalParameterName.kt")
        public void testSameFormalParameterName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/sameFormalParameterName.kt", this::doTest);
        }

        @TestMetadata("sameReifiedFormalParameterName.kt")
        public void testSameReifiedFormalParameterName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/sameReifiedFormalParameterName.kt", this::doTest);
        }

        @TestMetadata("starProjectionSubstitution.kt")
        public void testStarProjectionSubstitution() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/starProjectionSubstitution.kt", this::doTest);
        }

        @TestMetadata("typeParameterInLambda.kt")
        public void testTypeParameterInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/typeParameterInLambda.kt", this::doTest);
        }

        @TestMetadata("typeParametersSubstitution.kt")
        public void testTypeParametersSubstitution() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/typeParametersSubstitution.kt", this::doTest);
        }

        @TestMetadata("typeParametersSubstitution2.kt")
        public void testTypeParametersSubstitution2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/signature/typeParametersSubstitution2.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/simple")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Simple extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSimple() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/simple"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/classObject.kt", this::doTest);
        }

        @TestMetadata("destructuring.kt")
        public void testDestructuring() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/destructuring.kt", this::doTest);
        }

        @TestMetadata("destructuringIndexClash.kt")
        public void testDestructuringIndexClash() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/destructuringIndexClash.kt", this::doTest);
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/extension.kt", this::doTest);
        }

        @TestMetadata("extensionLambda.kt")
        public void testExtensionLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/extensionLambda.kt", this::doTest);
        }

        @TestMetadata("funImportedFromObject.kt")
        public void testFunImportedFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/funImportedFromObject.kt", this::doTest);
        }

        @TestMetadata("params.kt")
        public void testParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/params.kt", this::doTest);
        }

        @TestMetadata("propImportedFromObject.kt")
        public void testPropImportedFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/propImportedFromObject.kt", this::doTest);
        }

        @TestMetadata("rootConstructor.kt")
        public void testRootConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/rootConstructor.kt", this::doTest);
        }

        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/safeCall.kt", this::doTest);
        }

        @TestMetadata("severalClosures.kt")
        public void testSeveralClosures() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/severalClosures.kt", this::doTest);
        }

        @TestMetadata("severalUsage.kt")
        public void testSeveralUsage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/severalUsage.kt", this::doTest);
        }

        @TestMetadata("simpleDouble.kt")
        public void testSimpleDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/simpleDouble.kt", this::doTest);
        }

        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/simpleEnum.kt", this::doTest);
        }

        @TestMetadata("simpleGenerics.kt")
        public void testSimpleGenerics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/simpleGenerics.kt", this::doTest);
        }

        @TestMetadata("simpleInt.kt")
        public void testSimpleInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/simpleInt.kt", this::doTest);
        }

        @TestMetadata("simpleLambda.kt")
        public void testSimpleLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/simpleLambda.kt", this::doTest);
        }

        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/simpleObject.kt", this::doTest);
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/simple/vararg.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/smap")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Smap extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSmap() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("assertion.kt")
        public void testAssertion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/assertion.kt", this::doTest);
        }

        @TestMetadata("classFromDefaultPackage.kt")
        public void testClassFromDefaultPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/classFromDefaultPackage.kt", this::doTest);
        }

        @TestMetadata("defaultFunction.kt")
        public void testDefaultFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultFunction.kt", this::doTest);
        }

        @TestMetadata("oneFile.kt")
        public void testOneFile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/oneFile.kt", this::doTest);
        }

        @TestMetadata("smap.kt")
        public void testSmap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/smap.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/smap/anonymous")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Anonymous extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInAnonymous() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap/anonymous"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt19175.kt")
            public void testKt19175() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/kt19175.kt", this::doTest);
            }

            @TestMetadata("lambda.kt")
            public void testLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/lambda.kt", this::doTest);
            }

            @TestMetadata("lambdaOnCallSite.kt")
            public void testLambdaOnCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/lambdaOnCallSite.kt", this::doTest);
            }

            @TestMetadata("lambdaOnInlineCallSite.kt")
            public void testLambdaOnInlineCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/lambdaOnInlineCallSite.kt", this::doTest);
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/object.kt", this::doTest);
            }

            @TestMetadata("objectOnCallSite.kt")
            public void testObjectOnCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/objectOnCallSite.kt", this::doTest);
            }

            @TestMetadata("objectOnInlineCallSite.kt")
            public void testObjectOnInlineCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/objectOnInlineCallSite.kt", this::doTest);
            }

            @TestMetadata("objectOnInlineCallSite2.kt")
            public void testObjectOnInlineCallSite2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/objectOnInlineCallSite2.kt", this::doTest);
            }

            @TestMetadata("objectOnInlineCallSiteWithCapture.kt")
            public void testObjectOnInlineCallSiteWithCapture() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/objectOnInlineCallSiteWithCapture.kt", this::doTest);
            }

            @TestMetadata("severalMappingsForDefaultFile.kt")
            public void testSeveralMappingsForDefaultFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/anonymous/severalMappingsForDefaultFile.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/smap/defaultLambda")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DefaultLambda extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInDefaultLambda() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap/defaultLambda"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("defaultLambdaInAnonymous.kt")
            public void testDefaultLambdaInAnonymous() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/defaultLambdaInAnonymous.kt", this::doTest);
            }

            @TestMetadata("inlinInDefault.kt")
            public void testInlinInDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/inlinInDefault.kt", this::doTest);
            }

            @TestMetadata("inlinInDefault2.kt")
            public void testInlinInDefault2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/inlinInDefault2.kt", this::doTest);
            }

            @TestMetadata("inlineAnonymousInDefault.kt")
            public void testInlineAnonymousInDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/inlineAnonymousInDefault.kt", this::doTest);
            }

            @TestMetadata("inlineAnonymousInDefault2.kt")
            public void testInlineAnonymousInDefault2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/inlineAnonymousInDefault2.kt", this::doTest);
            }

            @TestMetadata("kt21827.kt")
            public void testKt21827() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/kt21827.kt", this::doTest);
            }

            @TestMetadata("nested.kt")
            public void testNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/nested.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/simple.kt", this::doTest);
            }

            @TestMetadata("simple2.kt")
            public void testSimple2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/defaultLambda/simple2.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/smap/inlineOnly")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class InlineOnly extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInInlineOnly() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap/inlineOnly"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("noSmap.kt")
            public void testNoSmap() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/inlineOnly/noSmap.kt", this::doTest);
            }

            @TestMetadata("noSmapWithProperty.kt")
            public void testNoSmapWithProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/inlineOnly/noSmapWithProperty.kt", this::doTest);
            }

            @TestMetadata("reified.kt")
            public void testReified() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/inlineOnly/reified.kt", this::doTest);
            }

            @TestMetadata("reifiedProperty.kt")
            public void testReifiedProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/inlineOnly/reifiedProperty.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/smap/newsmap")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Newsmap extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInNewsmap() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap/newsmap"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("differentMapping.kt")
            public void testDifferentMapping() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/newsmap/differentMapping.kt", this::doTest);
            }

            @TestMetadata("mappingInInlineFunLambda.kt")
            public void testMappingInInlineFunLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/newsmap/mappingInInlineFunLambda.kt", this::doTest);
            }

            @TestMetadata("mappingInSubInlineLambda.kt")
            public void testMappingInSubInlineLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/newsmap/mappingInSubInlineLambda.kt", this::doTest);
            }

            @TestMetadata("mappingInSubInlineLambdaSameFileInline.kt")
            public void testMappingInSubInlineLambdaSameFileInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/newsmap/mappingInSubInlineLambdaSameFileInline.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/smap/resolve")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Resolve extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInResolve() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap/resolve"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("inlineComponent.kt")
            public void testInlineComponent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/resolve/inlineComponent.kt", this::doTest);
            }

            @TestMetadata("inlineIterator.kt")
            public void testInlineIterator() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/smap/resolve/inlineIterator.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/special")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Special extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSpecial() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/special"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("identityCheck.kt")
        public void testIdentityCheck() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/special/identityCheck.kt", this::doTest);
        }

        @TestMetadata("ifBranches.kt")
        public void testIfBranches() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/special/ifBranches.kt", this::doTest);
        }

        @TestMetadata("iinc.kt")
        public void testIinc() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/special/iinc.kt", this::doTest);
        }

        @TestMetadata("inlineChain.kt")
        public void testInlineChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/special/inlineChain.kt", this::doTest);
        }

        @TestMetadata("loopInStoreLoadChains.kt")
        public void testLoopInStoreLoadChains() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/special/loopInStoreLoadChains.kt", this::doTest);
        }

        @TestMetadata("loopInStoreLoadChains2.kt")
        public void testLoopInStoreLoadChains2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/special/loopInStoreLoadChains2.kt", this::doTest);
        }

        @TestMetadata("plusAssign.kt")
        public void testPlusAssign() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/special/plusAssign.kt", this::doTest);
        }

        @TestMetadata("stackHeightBug.kt")
        public void testStackHeightBug() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/special/stackHeightBug.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/stackOnReturn")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StackOnReturn extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInStackOnReturn() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/stackOnReturn"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("elvis.kt")
        public void testElvis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/elvis.kt", this::doTest);
        }

        @TestMetadata("ifThenElse.kt")
        public void testIfThenElse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/ifThenElse.kt", this::doTest);
        }

        @TestMetadata("kt11499.kt")
        public void testKt11499() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/kt11499.kt", this::doTest);
        }

        @TestMetadata("kt17591.kt")
        public void testKt17591() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/kt17591.kt", this::doTest);
        }

        @TestMetadata("kt17591a.kt")
        public void testKt17591a() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/kt17591a.kt", this::doTest);
        }

        @TestMetadata("kt17591b.kt")
        public void testKt17591b() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/kt17591b.kt", this::doTest);
        }

        @TestMetadata("mixedTypesOnStack1.kt")
        public void testMixedTypesOnStack1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/mixedTypesOnStack1.kt", this::doTest);
        }

        @TestMetadata("mixedTypesOnStack2.kt")
        public void testMixedTypesOnStack2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/mixedTypesOnStack2.kt", this::doTest);
        }

        @TestMetadata("mixedTypesOnStack3.kt")
        public void testMixedTypesOnStack3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/mixedTypesOnStack3.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturn1.kt")
        public void testNonLocalReturn1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/nonLocalReturn1.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturn2.kt")
        public void testNonLocalReturn2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/nonLocalReturn2.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturn3.kt")
        public void testNonLocalReturn3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/nonLocalReturn3.kt", this::doTest);
        }

        @TestMetadata("returnLong.kt")
        public void testReturnLong() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/returnLong.kt", this::doTest);
        }

        @TestMetadata("tryFinally.kt")
        public void testTryFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/stackOnReturn/tryFinally.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/suspend")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Suspend extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSuspend() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/suspend"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("capturedVariables.kt")
        public void testCapturedVariables() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/capturedVariables.kt", this::doTest);
        }

        @TestMetadata("crossinlineSuspendLambdaInsideCrossinlineSuspendLambda.kt")
        public void testCrossinlineSuspendLambdaInsideCrossinlineSuspendLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/crossinlineSuspendLambdaInsideCrossinlineSuspendLambda.kt", this::doTest);
        }

        @TestMetadata("inlineOrdinaryOfCrossinlineSuspend.kt")
        public void testInlineOrdinaryOfCrossinlineSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineOrdinaryOfCrossinlineSuspend.kt", this::doTest);
        }

        @TestMetadata("inlineOrdinaryOfNoinlineSuspend.kt")
        public void testInlineOrdinaryOfNoinlineSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineOrdinaryOfNoinlineSuspend.kt", this::doTest);
        }

        @TestMetadata("inlineSuspendContinuation.kt")
        public void testInlineSuspendContinuation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineSuspendContinuation.kt", this::doTest);
        }

        @TestMetadata("inlineSuspendOfCrossinlineOrdinary.kt")
        public void testInlineSuspendOfCrossinlineOrdinary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineSuspendOfCrossinlineOrdinary.kt", this::doTest);
        }

        @TestMetadata("inlineSuspendOfCrossinlineSuspend.kt")
        public void testInlineSuspendOfCrossinlineSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineSuspendOfCrossinlineSuspend.kt", this::doTest);
        }

        @TestMetadata("inlineSuspendOfNoinlineOrdinary.kt")
        public void testInlineSuspendOfNoinlineOrdinary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineSuspendOfNoinlineOrdinary.kt", this::doTest);
        }

        @TestMetadata("inlineSuspendOfNoinlineSuspend.kt")
        public void testInlineSuspendOfNoinlineSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineSuspendOfNoinlineSuspend.kt", this::doTest);
        }

        @TestMetadata("inlineSuspendOfOrdinary.kt")
        public void testInlineSuspendOfOrdinary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineSuspendOfOrdinary.kt", this::doTest);
        }

        @TestMetadata("inlineSuspendOfSuspend.kt")
        public void testInlineSuspendOfSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/inlineSuspendOfSuspend.kt", this::doTest);
        }

        @TestMetadata("multipleLocals.kt")
        public void testMultipleLocals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/multipleLocals.kt", this::doTest);
        }

        @TestMetadata("multipleSuspensionPoints.kt")
        public void testMultipleSuspensionPoints() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/multipleSuspensionPoints.kt", this::doTest);
        }

        @TestMetadata("returnValue.kt")
        public void testReturnValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/returnValue.kt", this::doTest);
        }

        @TestMetadata("tryCatchStackTransform.kt")
        public void testTryCatchStackTransform() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/tryCatchStackTransform.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/suspend/defaultParameter")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DefaultParameter extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInDefaultParameter() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/suspend/defaultParameter"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("defaultValueCrossinline.kt")
            public void testDefaultValueCrossinline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/defaultParameter/defaultValueCrossinline.kt", this::doTest);
            }

            @TestMetadata("defaultValueInline.kt")
            public void testDefaultValueInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/defaultParameter/defaultValueInline.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/suspend/receiver")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Receiver extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInReceiver() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/suspend/receiver"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("inlineOrdinaryOfCrossinlineSuspend.kt")
            public void testInlineOrdinaryOfCrossinlineSuspend() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/receiver/inlineOrdinaryOfCrossinlineSuspend.kt", this::doTest);
            }

            @TestMetadata("inlineOrdinaryOfNoinlineSuspend.kt")
            public void testInlineOrdinaryOfNoinlineSuspend() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/receiver/inlineOrdinaryOfNoinlineSuspend.kt", this::doTest);
            }

            @TestMetadata("inlineSuspendOfCrossinlineOrdinary.kt")
            public void testInlineSuspendOfCrossinlineOrdinary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/receiver/inlineSuspendOfCrossinlineOrdinary.kt", this::doTest);
            }

            @TestMetadata("inlineSuspendOfCrossinlineSuspend.kt")
            public void testInlineSuspendOfCrossinlineSuspend() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/receiver/inlineSuspendOfCrossinlineSuspend.kt", this::doTest);
            }

            @TestMetadata("inlineSuspendOfNoinlineOrdinary.kt")
            public void testInlineSuspendOfNoinlineOrdinary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/receiver/inlineSuspendOfNoinlineOrdinary.kt", this::doTest);
            }

            @TestMetadata("inlineSuspendOfNoinlineSuspend.kt")
            public void testInlineSuspendOfNoinlineSuspend() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/receiver/inlineSuspendOfNoinlineSuspend.kt", this::doTest);
            }

            @TestMetadata("inlineSuspendOfOrdinary.kt")
            public void testInlineSuspendOfOrdinary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/receiver/inlineSuspendOfOrdinary.kt", this::doTest);
            }

            @TestMetadata("inlineSuspendOfSuspend.kt")
            public void testInlineSuspendOfSuspend() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/receiver/inlineSuspendOfSuspend.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/suspend/stateMachine")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class StateMachine extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInStateMachine() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/suspend/stateMachine"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("innerLambda.kt")
            public void testInnerLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerLambda.kt", this::doTest);
            }

            @TestMetadata("innerLambdaInsideLambda.kt")
            public void testInnerLambdaInsideLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerLambdaInsideLambda.kt", this::doTest);
            }

            @TestMetadata("innerLambdaWithoutCrossinline.kt")
            public void testInnerLambdaWithoutCrossinline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerLambdaWithoutCrossinline.kt", this::doTest);
            }

            @TestMetadata("innerMadness.kt")
            public void testInnerMadness() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerMadness.kt", this::doTest);
            }

            @TestMetadata("innerMadnessCallSite.kt")
            public void testInnerMadnessCallSite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerMadnessCallSite.kt", this::doTest);
            }

            @TestMetadata("innerObject.kt")
            public void testInnerObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerObject.kt", this::doTest);
            }

            @TestMetadata("innerObjectInsideInnerObject.kt")
            public void testInnerObjectInsideInnerObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerObjectInsideInnerObject.kt", this::doTest);
            }

            @TestMetadata("innerObjectSeveralFunctions.kt")
            public void testInnerObjectSeveralFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerObjectSeveralFunctions.kt", this::doTest);
            }

            @TestMetadata("innerObjectWithoutCapturingCrossinline.kt")
            public void testInnerObjectWithoutCapturingCrossinline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/innerObjectWithoutCapturingCrossinline.kt", this::doTest);
            }

            @TestMetadata("normalInline.kt")
            public void testNormalInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/normalInline.kt", this::doTest);
            }

            @TestMetadata("numberOfSuspentions.kt")
            public void testNumberOfSuspentions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/suspend/stateMachine/numberOfSuspentions.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/syntheticAccessors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SyntheticAccessors extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSyntheticAccessors() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/syntheticAccessors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("constField.kt")
        public void testConstField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/constField.kt", this::doTest);
        }

        @TestMetadata("packagePrivateMembers.kt")
        public void testPackagePrivateMembers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/packagePrivateMembers.kt", this::doTest);
        }

        @TestMetadata("propertyModifiers.kt")
        public void testPropertyModifiers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/propertyModifiers.kt", this::doTest);
        }

        @TestMetadata("protectedMembers.kt")
        public void testProtectedMembers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/protectedMembers.kt", this::doTest);
        }

        @TestMetadata("protectedMembersFromSuper.kt")
        public void testProtectedMembersFromSuper() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/protectedMembersFromSuper.kt", this::doTest);
        }

        @TestMetadata("superCall.kt")
        public void testSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/superCall.kt", this::doTest);
        }

        @TestMetadata("superProperty.kt")
        public void testSuperProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/superProperty.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/syntheticAccessors/withinInlineLambda")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WithinInlineLambda extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInWithinInlineLambda() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/syntheticAccessors/withinInlineLambda"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("directFieldAccess.kt")
            public void testDirectFieldAccess() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/withinInlineLambda/directFieldAccess.kt", this::doTest);
            }

            @TestMetadata("directFieldAccessInCrossInline.kt")
            public void testDirectFieldAccessInCrossInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/withinInlineLambda/directFieldAccessInCrossInline.kt", this::doTest);
            }

            @TestMetadata("privateCall.kt")
            public void testPrivateCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/withinInlineLambda/privateCall.kt", this::doTest);
            }

            @TestMetadata("privateInCrossInline.kt")
            public void testPrivateInCrossInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/withinInlineLambda/privateInCrossInline.kt", this::doTest);
            }

            @TestMetadata("superCall.kt")
            public void testSuperCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/withinInlineLambda/superCall.kt", this::doTest);
            }

            @TestMetadata("superInCrossInline.kt")
            public void testSuperInCrossInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/syntheticAccessors/withinInlineLambda/superInCrossInline.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/trait")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Trait extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInTrait() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/trait"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("trait.kt")
        public void testTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/trait/trait.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/tryCatchFinally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryCatchFinally extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInTryCatchFinally() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/tryCatchFinally"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt5863.kt")
        public void testKt5863() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/tryCatchFinally/kt5863.kt", this::doTest);
        }

        @TestMetadata("tryCatch.kt")
        public void testTryCatch() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/tryCatchFinally/tryCatch.kt", this::doTest);
        }

        @TestMetadata("tryCatch2.kt")
        public void testTryCatch2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/tryCatchFinally/tryCatch2.kt", this::doTest);
        }

        @TestMetadata("tryCatchFinally.kt")
        public void testTryCatchFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/tryCatchFinally/tryCatchFinally.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/varargs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Varargs extends AbstractIrCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInVarargs() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/varargs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt17653.kt")
        public void testKt17653() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/varargs/kt17653.kt", this::doTest);
        }

        @TestMetadata("varargAndDefaultParameters.kt")
        public void testVarargAndDefaultParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/varargs/varargAndDefaultParameters.kt", this::doTest);
        }

        @TestMetadata("varargAndDefaultParameters2.kt")
        public void testVarargAndDefaultParameters2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/boxInline/varargs/varargAndDefaultParameters2.kt", this::doTest);
        }
    }
}
