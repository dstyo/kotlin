/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/bytecodeListing")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class BytecodeListingTestGenerated extends AbstractBytecodeListingTest {
    public void testAllFilesPresentInBytecodeListing() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeListing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("callableNameIntrinsic.kt")
    public void testCallableNameIntrinsic() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/callableNameIntrinsic.kt", this::doTest);
    }

    @TestMetadata("coroutineContextIntrinsic.kt")
    public void testCoroutineContextIntrinsic() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/coroutineContextIntrinsic.kt", this::doTest);
    }

    @TestMetadata("coroutineFields.kt")
    public void testCoroutineFields() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/coroutineFields.kt", this::doTest);
    }

    @TestMetadata("defaultImpls.kt")
    public void testDefaultImpls() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/defaultImpls.kt", this::doTest);
    }

    @TestMetadata("emptyMultifileFacade.kt")
    public void testEmptyMultifileFacade() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/emptyMultifileFacade.kt", this::doTest);
    }

    @TestMetadata("immutableCollection.kt")
    public void testImmutableCollection() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/immutableCollection.kt", this::doTest);
    }

    @TestMetadata("inlineOnly.kt")
    public void testInlineOnly() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/inlineOnly.kt", this::doTest);
    }

    @TestMetadata("InlineOnlyMultifile.kt")
    public void testInlineOnlyMultifile() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/InlineOnlyMultifile.kt", this::doTest);
    }

    @TestMetadata("inlineOnlyProperty.kt")
    public void testInlineOnlyProperty() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/inlineOnlyProperty.kt", this::doTest);
    }

    @TestMetadata("InlineOnlyPropertyMultifile.kt")
    public void testInlineOnlyPropertyMultifile() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/InlineOnlyPropertyMultifile.kt", this::doTest);
    }

    @TestMetadata("invisibleCompanionObject.kt")
    public void testInvisibleCompanionObject() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/invisibleCompanionObject.kt", this::doTest);
    }

    @TestMetadata("invisibleCompanionObject_lv11.kt")
    public void testInvisibleCompanionObject_lv11() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/invisibleCompanionObject_lv11.kt", this::doTest);
    }

    @TestMetadata("invisibleCompanionObject_lv12.kt")
    public void testInvisibleCompanionObject_lv12() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/invisibleCompanionObject_lv12.kt", this::doTest);
    }

    @TestMetadata("jvmOverloadsAndParametersAnnotations.kt")
    public void testJvmOverloadsAndParametersAnnotations() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/jvmOverloadsAndParametersAnnotations.kt", this::doTest);
    }

    @TestMetadata("noCollectionStubMethodsInInterface.kt")
    public void testNoCollectionStubMethodsInInterface() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/noCollectionStubMethodsInInterface.kt", this::doTest);
    }

    @TestMetadata("noDelegationsToPrivateInterfaceMembers.kt")
    public void testNoDelegationsToPrivateInterfaceMembers() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/noDelegationsToPrivateInterfaceMembers.kt", this::doTest);
    }

    @TestMetadata("noReceiverInCallableReferenceClasses.kt")
    public void testNoReceiverInCallableReferenceClasses() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/noReceiverInCallableReferenceClasses.kt", this::doTest);
    }

    @TestMetadata("noRemoveAtInReadOnly.kt")
    public void testNoRemoveAtInReadOnly() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/noRemoveAtInReadOnly.kt", this::doTest);
    }

    @TestMetadata("noToArrayInJava.kt")
    public void testNoToArrayInJava() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/noToArrayInJava.kt", this::doTest);
    }

    @TestMetadata("oomInReturnUnit.kt")
    public void testOomInReturnUnit() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/oomInReturnUnit.kt", this::doTest);
    }

    @TestMetadata("privateSuspendFun.kt")
    public void testPrivateSuspendFun() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/privateSuspendFun.kt", this::doTest);
    }

    @TestMetadata("releaseCoroutines.kt")
    public void testReleaseCoroutines() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/releaseCoroutines.kt", this::doTest);
    }

    @TestMetadata("samAdapterAndInlinedOne.kt")
    public void testSamAdapterAndInlinedOne() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/samAdapterAndInlinedOne.kt", this::doTest);
    }

    @TestMetadata("suspendReifiedFun.kt")
    public void testSuspendReifiedFun() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/suspendReifiedFun.kt", this::doTest);
    }

    @TestMetadata("compiler/testData/codegen/bytecodeListing/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotations extends AbstractBytecodeListingTest {
        public void testAllFilesPresentInAnnotations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeListing/annotations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("defaultTargets.kt")
        public void testDefaultTargets() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/annotations/defaultTargets.kt", this::doTest);
        }

        @TestMetadata("deprecatedJvmOverloads.kt")
        public void testDeprecatedJvmOverloads() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/annotations/deprecatedJvmOverloads.kt", this::doTest);
        }

        @TestMetadata("JvmSynthetic.kt")
        public void testJvmSynthetic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/annotations/JvmSynthetic.kt", this::doTest);
        }

        @TestMetadata("kt9320.kt")
        public void testKt9320() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/annotations/kt9320.kt", this::doTest);
        }

        @TestMetadata("literals.kt")
        public void testLiterals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/annotations/literals.kt", this::doTest);
        }

        @TestMetadata("onProperties.kt")
        public void testOnProperties() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/annotations/onProperties.kt", this::doTest);
        }

        @TestMetadata("onReceiver.kt")
        public void testOnReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/annotations/onReceiver.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeListing/collectionStubs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CollectionStubs extends AbstractBytecodeListingTest {
        public void testAllFilesPresentInCollectionStubs() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeListing/collectionStubs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("noStubsInJavaSuperClass.kt")
        public void testNoStubsInJavaSuperClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/collectionStubs/noStubsInJavaSuperClass.kt", this::doTest);
        }

        @TestMetadata("stubsFromSuperclass.kt")
        public void testStubsFromSuperclass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/collectionStubs/stubsFromSuperclass.kt", this::doTest);
        }

        @TestMetadata("stubsFromSuperclassNoBridges.kt")
        public void testStubsFromSuperclassNoBridges() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/collectionStubs/stubsFromSuperclassNoBridges.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeListing/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineClasses extends AbstractBytecodeListingTest {
        public void testAllFilesPresentInInlineClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeListing/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("companionObjectInsideInlineClass.kt")
        public void testCompanionObjectInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/inlineClasses/companionObjectInsideInlineClass.kt", this::doTest);
        }

        @TestMetadata("computablePropertiesInsideInlineClass.kt")
        public void testComputablePropertiesInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/inlineClasses/computablePropertiesInsideInlineClass.kt", this::doTest);
        }

        @TestMetadata("noBridgesForErasedInlineClass.kt")
        public void testNoBridgesForErasedInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/inlineClasses/noBridgesForErasedInlineClass.kt", this::doTest);
        }

        @TestMetadata("shapeOfInlineClassWithPrimitive.kt")
        public void testShapeOfInlineClassWithPrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/inlineClasses/shapeOfInlineClassWithPrimitive.kt", this::doTest);
        }

        @TestMetadata("shapeOfInlineClassWithPrivateConstructor.kt")
        public void testShapeOfInlineClassWithPrivateConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/inlineClasses/shapeOfInlineClassWithPrivateConstructor.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeListing/specialBridges")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SpecialBridges extends AbstractBytecodeListingTest {
        public void testAllFilesPresentInSpecialBridges() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeListing/specialBridges"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("contains.kt")
        public void testContains() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/specialBridges/contains.kt", this::doTest);
        }

        @TestMetadata("noSpecialBridgeIfPresentInSuperClass.kt")
        public void testNoSpecialBridgeIfPresentInSuperClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/specialBridges/noSpecialBridgeIfPresentInSuperClass.kt", this::doTest);
        }

        @TestMetadata("redundantStubForSize.kt")
        public void testRedundantStubForSize() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/specialBridges/redundantStubForSize.kt", this::doTest);
        }

        @TestMetadata("removeAtTwoSpecialBridges.kt")
        public void testRemoveAtTwoSpecialBridges() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/specialBridges/removeAtTwoSpecialBridges.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/bytecodeListing/specialBridges/signatures")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Signatures extends AbstractBytecodeListingTest {
            public void testAllFilesPresentInSignatures() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeListing/specialBridges/signatures"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("genericClass.kt")
            public void testGenericClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/specialBridges/signatures/genericClass.kt", this::doTest);
            }

            @TestMetadata("nonGenericClass.kt")
            public void testNonGenericClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/specialBridges/signatures/nonGenericClass.kt", this::doTest);
            }

            @TestMetadata("partiallySpecializedClass.kt")
            public void testPartiallySpecializedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/specialBridges/signatures/partiallySpecializedClass.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeListing/tailcall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Tailcall extends AbstractBytecodeListingTest {
        public void testAllFilesPresentInTailcall() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeListing/tailcall"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("tailCallIntrinsics.kt")
        public void testTailCallIntrinsics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/tailcall/tailCallIntrinsics.kt", this::doTest);
        }

        @TestMetadata("tailSuspendUnitFun.kt")
        public void testTailSuspendUnitFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/tailcall/tailSuspendUnitFun.kt", this::doTest);
        }

        @TestMetadata("tryCatchTailCall.kt")
        public void testTryCatchTailCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/tailcall/tryCatchTailCall.kt", this::doTest);
        }

        @TestMetadata("unreachable.kt")
        public void testUnreachable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/tailcall/unreachable.kt", this::doTest);
        }

        @TestMetadata("whenUnit.kt")
        public void testWhenUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeListing/tailcall/whenUnit.kt", this::doTest);
        }
    }
}
