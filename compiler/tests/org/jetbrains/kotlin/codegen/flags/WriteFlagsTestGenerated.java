/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen.flags;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/writeFlags")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class WriteFlagsTestGenerated extends AbstractWriteFlagsTest {
    public void testAllFilesPresentInWriteFlags() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("compiler/testData/writeFlags/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReference extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInCallableReference() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/writeFlags/callableReference/visibility")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Visibility extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/callableReference/visibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("functionReference.kt")
            public void testFunctionReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/callableReference/visibility/functionReference.kt", this::doTest);
            }

            @TestMetadata("functionReferenceInInlineFunction.kt")
            public void testFunctionReferenceInInlineFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/callableReference/visibility/functionReferenceInInlineFunction.kt", this::doTest);
            }

            @TestMetadata("propertyReference.kt")
            public void testPropertyReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/callableReference/visibility/propertyReference.kt", this::doTest);
            }

            @TestMetadata("propertyReferenceInInlineFunction.kt")
            public void testPropertyReferenceInInlineFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/callableReference/visibility/propertyReferenceInInlineFunction.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/writeFlags/class")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Class extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInClass() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/class"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/writeFlags/class/accessFlags")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AccessFlags extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInAccessFlags() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/class/accessFlags"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("defaultImpls.kt")
            public void testDefaultImpls() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/defaultImpls.kt", this::doTest);
            }

            @TestMetadata("innerSealed.kt")
            public void testInnerSealed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/innerSealed.kt", this::doTest);
            }

            @TestMetadata("mappingWhen.kt")
            public void testMappingWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/mappingWhen.kt", this::doTest);
            }

            @TestMetadata("objectLiteral.kt")
            public void testObjectLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/objectLiteral.kt", this::doTest);
            }

            @TestMetadata("publicFinalClass.kt")
            public void testPublicFinalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/publicFinalClass.kt", this::doTest);
            }

            @TestMetadata("publicFinalInnerClass.kt")
            public void testPublicFinalInnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/publicFinalInnerClass.kt", this::doTest);
            }

            @TestMetadata("publicInnerInterface.kt")
            public void testPublicInnerInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/publicInnerInterface.kt", this::doTest);
            }

            @TestMetadata("publicInterface.kt")
            public void testPublicInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/publicInterface.kt", this::doTest);
            }

            @TestMetadata("simpleFilePackageFacade.kt")
            public void testSimpleFilePackageFacade() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/accessFlags/simpleFilePackageFacade.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/writeFlags/class/deprecatedFlag")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DeprecatedFlag extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInDeprecatedFlag() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/class/deprecatedFlag"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("class.kt")
            public void testClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/deprecatedFlag/class.kt", this::doTest);
            }

            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/deprecatedFlag/classObject.kt", this::doTest);
            }

            @TestMetadata("enumClass.kt")
            public void testEnumClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/deprecatedFlag/enumClass.kt", this::doTest);
            }

            @TestMetadata("innerClass.kt")
            public void testInnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/deprecatedFlag/innerClass.kt", this::doTest);
            }

            @TestMetadata("trait.kt")
            public void testTrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/class/deprecatedFlag/trait.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/writeFlags/class/visibility")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Visibility extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/class/visibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/testData/writeFlags/class/visibility/internal")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Internal extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInInternal() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/class/visibility/internal"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/internal/class.kt", this::doTest);
                }

                @TestMetadata("enum.kt")
                public void testEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/internal/enum.kt", this::doTest);
                }

                @TestMetadata("innerClass.kt")
                public void testInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/internal/innerClass.kt", this::doTest);
                }

                @TestMetadata("innerEnum.kt")
                public void testInnerEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/internal/innerEnum.kt", this::doTest);
                }

                @TestMetadata("innerObject.kt")
                public void testInnerObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/internal/innerObject.kt", this::doTest);
                }

                @TestMetadata("innerTrait.kt")
                public void testInnerTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/internal/innerTrait.kt", this::doTest);
                }

                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/internal/object.kt", this::doTest);
                }

                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/internal/trait.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/writeFlags/class/visibility/private")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Private extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInPrivate() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/class/visibility/private"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/private/class.kt", this::doTest);
                }

                @TestMetadata("enum.kt")
                public void testEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/private/enum.kt", this::doTest);
                }

                @TestMetadata("innerClass.kt")
                public void testInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/private/innerClass.kt", this::doTest);
                }

                @TestMetadata("innerEnum.kt")
                public void testInnerEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/private/innerEnum.kt", this::doTest);
                }

                @TestMetadata("innerObject.kt")
                public void testInnerObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/private/innerObject.kt", this::doTest);
                }

                @TestMetadata("innerTrait.kt")
                public void testInnerTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/private/innerTrait.kt", this::doTest);
                }

                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/private/object.kt", this::doTest);
                }

                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/private/trait.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/writeFlags/class/visibility/public")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Public extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInPublic() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/class/visibility/public"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/public/class.kt", this::doTest);
                }

                @TestMetadata("enum.kt")
                public void testEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/public/enum.kt", this::doTest);
                }

                @TestMetadata("innerClass.kt")
                public void testInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/public/innerClass.kt", this::doTest);
                }

                @TestMetadata("innerEnum.kt")
                public void testInnerEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/public/innerEnum.kt", this::doTest);
                }

                @TestMetadata("innerObject.kt")
                public void testInnerObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/public/innerObject.kt", this::doTest);
                }

                @TestMetadata("innerTrait.kt")
                public void testInnerTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/public/innerTrait.kt", this::doTest);
                }

                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/public/object.kt", this::doTest);
                }

                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/class/visibility/public/trait.kt", this::doTest);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/writeFlags/delegatedProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegatedProperty extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInDelegatedProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/writeFlags/delegatedProperty/visibility")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Visibility extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/delegatedProperty/visibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("privateSet.kt")
            public void testPrivateSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/delegatedProperty/visibility/privateSet.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/writeFlags/function")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Function extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInFunction() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/function"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/writeFlags/function/classObjectPrivate")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClassObjectPrivate extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInClassObjectPrivate() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/function/classObjectPrivate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("privateFun.kt")
            public void testPrivateFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/classObjectPrivate/privateFun.kt", this::doTest);
            }

            @TestMetadata("privateVal.kt")
            public void testPrivateVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/classObjectPrivate/privateVal.kt", this::doTest);
            }

            @TestMetadata("privateVar.kt")
            public void testPrivateVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/classObjectPrivate/privateVar.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/writeFlags/function/constructors")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Constructors extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInConstructors() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/function/constructors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/constructors/classObject.kt", this::doTest);
            }

            @TestMetadata("objectInClass.kt")
            public void testObjectInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/constructors/objectInClass.kt", this::doTest);
            }

            @TestMetadata("objectLiteral.kt")
            public void testObjectLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/constructors/objectLiteral.kt", this::doTest);
            }

            @TestMetadata("topLevelObject.kt")
            public void testTopLevelObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/constructors/topLevelObject.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/writeFlags/function/deprecatedFlag")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DeprecatedFlag extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInDeprecatedFlag() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/function/deprecatedFlag"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("emptyGetter.kt")
            public void testEmptyGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/emptyGetter.kt", this::doTest);
            }

            @TestMetadata("emptySetter.kt")
            public void testEmptySetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/emptySetter.kt", this::doTest);
            }

            @TestMetadata("extentionFun.kt")
            public void testExtentionFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/extentionFun.kt", this::doTest);
            }

            @TestMetadata("funInClass.kt")
            public void testFunInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/funInClass.kt", this::doTest);
            }

            @TestMetadata("funInClassObject.kt")
            public void testFunInClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/funInClassObject.kt", this::doTest);
            }

            @TestMetadata("getter.kt")
            public void testGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/getter.kt", this::doTest);
            }

            @TestMetadata("getterAnnotationOnProperty.kt")
            public void testGetterAnnotationOnProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/getterAnnotationOnProperty.kt", this::doTest);
            }

            @TestMetadata("getterForPropertyInConstructor.kt")
            public void testGetterForPropertyInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/getterForPropertyInConstructor.kt", this::doTest);
            }

            @TestMetadata("setter.kt")
            public void testSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/setter.kt", this::doTest);
            }

            @TestMetadata("setterAnnotationOnProperty.kt")
            public void testSetterAnnotationOnProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/setterAnnotationOnProperty.kt", this::doTest);
            }

            @TestMetadata("setterForPropertyInConstructor.kt")
            public void testSetterForPropertyInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/setterForPropertyInConstructor.kt", this::doTest);
            }

            @TestMetadata("topLevelFun.kt")
            public void testTopLevelFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/deprecatedFlag/topLevelFun.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/writeFlags/function/withDefaultArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WithDefaultArguments extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInWithDefaultArguments() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/function/withDefaultArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("funInClass.kt")
            public void testFunInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/withDefaultArguments/funInClass.kt", this::doTest);
            }

            @TestMetadata("funInClassObject.kt")
            public void testFunInClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/withDefaultArguments/funInClassObject.kt", this::doTest);
            }

            @TestMetadata("inlineOnlyFunInClass.kt")
            public void testInlineOnlyFunInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/withDefaultArguments/inlineOnlyFunInClass.kt", this::doTest);
            }

            @TestMetadata("reifiedFunInClass.kt")
            public void testReifiedFunInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/withDefaultArguments/reifiedFunInClass.kt", this::doTest);
            }

            @TestMetadata("topLevelFun.kt")
            public void testTopLevelFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/function/withDefaultArguments/topLevelFun.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/writeFlags/hidden")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Hidden extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInHidden() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/hidden"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/hidden/function.kt", this::doTest);
        }

        @TestMetadata("propertyGetter.kt")
        public void testPropertyGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/hidden/propertyGetter.kt", this::doTest);
        }

        @TestMetadata("propertySetter.kt")
        public void testPropertySetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/hidden/propertySetter.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeFlags/inline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inline extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInInline() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/inline"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("lostInnerClass.kt")
        public void testLostInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/inline/lostInnerClass.kt", this::doTest);
        }

        @TestMetadata("lostInnerClass2.kt")
        public void testLostInnerClass2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/inline/lostInnerClass2.kt", this::doTest);
        }

        @TestMetadata("lostInnerClass3.kt")
        public void testLostInnerClass3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/inline/lostInnerClass3.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeFlags/innerClass")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InnerClass extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInInnerClass() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/innerClass"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/writeFlags/innerClass/visibility")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Visibility extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/innerClass/visibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("internal.kt")
            public void testInternal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/innerClass/visibility/internal.kt", this::doTest);
            }

            @TestMetadata("internalClassObject.kt")
            public void testInternalClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/innerClass/visibility/internalClassObject.kt", this::doTest);
            }

            @TestMetadata("private.kt")
            public void testPrivate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/innerClass/visibility/private.kt", this::doTest);
            }

            @TestMetadata("privateClassObject.kt")
            public void testPrivateClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/innerClass/visibility/privateClassObject.kt", this::doTest);
            }

            @TestMetadata("public.kt")
            public void testPublic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/innerClass/visibility/public.kt", this::doTest);
            }

            @TestMetadata("publicClassObject.kt")
            public void testPublicClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/innerClass/visibility/publicClassObject.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/writeFlags/lambda")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Lambda extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInLambda() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/lambda"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("lambdaInInlineFunction.kt")
        public void testLambdaInInlineFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/lambda/lambdaInInlineFunction.kt", this::doTest);
        }

        @TestMetadata("simpleLambda.kt")
        public void testSimpleLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/lambda/simpleLambda.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeFlags/lateinit")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Lateinit extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInLateinit() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/lateinit"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("lateinitGetter.kt")
        public void testLateinitGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/lateinit/lateinitGetter.kt", this::doTest);
        }

        @TestMetadata("lateinitProperty.kt")
        public void testLateinitProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/lateinit/lateinitProperty.kt", this::doTest);
        }

        @TestMetadata("lateinitPropertyNoSetter.kt")
        public void testLateinitPropertyNoSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeFlags/lateinit/lateinitPropertyNoSetter.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeFlags/property")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Property extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/property"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/writeFlags/property/classObject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClassObject extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInClassObject() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/property/classObject"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/testData/writeFlags/property/classObject/class")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Class extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInClass() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/property/classObject/class"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("delegatedProtectedVar.kt")
                public void testDelegatedProtectedVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/delegatedProtectedVar.kt", this::doTest);
                }

                @TestMetadata("delegatedPublicVal.kt")
                public void testDelegatedPublicVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/delegatedPublicVal.kt", this::doTest);
                }

                @TestMetadata("internalVal.kt")
                public void testInternalVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/internalVal.kt", this::doTest);
                }

                @TestMetadata("internalVar.kt")
                public void testInternalVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/internalVar.kt", this::doTest);
                }

                @TestMetadata("internalVarPrivateSet.kt")
                public void testInternalVarPrivateSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/internalVarPrivateSet.kt", this::doTest);
                }

                @TestMetadata("noBackingField.kt")
                public void testNoBackingField() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/noBackingField.kt", this::doTest);
                }

                @TestMetadata("privateVal.kt")
                public void testPrivateVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/privateVal.kt", this::doTest);
                }

                @TestMetadata("privateVar.kt")
                public void testPrivateVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/privateVar.kt", this::doTest);
                }

                @TestMetadata("protectedVal.kt")
                public void testProtectedVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/protectedVal.kt", this::doTest);
                }

                @TestMetadata("protectedVarPrivateSet.kt")
                public void testProtectedVarPrivateSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/protectedVarPrivateSet.kt", this::doTest);
                }

                @TestMetadata("publicVal.kt")
                public void testPublicVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/publicVal.kt", this::doTest);
                }

                @TestMetadata("publicValNonDefault.kt")
                public void testPublicValNonDefault() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/publicValNonDefault.kt", this::doTest);
                }

                @TestMetadata("publicVar.kt")
                public void testPublicVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/publicVar.kt", this::doTest);
                }

                @TestMetadata("publicVarNonDefault.kt")
                public void testPublicVarNonDefault() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/publicVarNonDefault.kt", this::doTest);
                }

                @TestMetadata("publicVarPrivateSet.kt")
                public void testPublicVarPrivateSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/publicVarPrivateSet.kt", this::doTest);
                }

                @TestMetadata("publicVarProtectedSet.kt")
                public void testPublicVarProtectedSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/publicVarProtectedSet.kt", this::doTest);
                }

                @TestMetadata("publicVarPublicSet.kt")
                public void testPublicVarPublicSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/class/publicVarPublicSet.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/writeFlags/property/classObject/rename")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Rename extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInRename() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/property/classObject/rename"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("constructorAndClassObject.kt")
                public void testConstructorAndClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/rename/constructorAndClassObject.kt", this::doTest);
                }

                @TestMetadata("delegatedAndDelegated.kt")
                public void testDelegatedAndDelegated() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/rename/delegatedAndDelegated.kt", this::doTest);
                }

                @TestMetadata("delegatedAndProperty.kt")
                public void testDelegatedAndProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/rename/delegatedAndProperty.kt", this::doTest);
                }

                @TestMetadata("propertyAndProperty.kt")
                public void testPropertyAndProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/rename/propertyAndProperty.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/writeFlags/property/classObject/trait")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Trait extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInTrait() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/property/classObject/trait"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("delegatedProtectedVar.kt")
                public void testDelegatedProtectedVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/delegatedProtectedVar.kt", this::doTest);
                }

                @TestMetadata("delegatedPublicVal.kt")
                public void testDelegatedPublicVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/delegatedPublicVal.kt", this::doTest);
                }

                @TestMetadata("internalConstVal.kt")
                public void testInternalConstVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/internalConstVal.kt", this::doTest);
                }

                @TestMetadata("internalVal.kt")
                public void testInternalVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/internalVal.kt", this::doTest);
                }

                @TestMetadata("internalVar.kt")
                public void testInternalVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/internalVar.kt", this::doTest);
                }

                @TestMetadata("internalVarPrivateSet.kt")
                public void testInternalVarPrivateSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/internalVarPrivateSet.kt", this::doTest);
                }

                @TestMetadata("noBackingField.kt")
                public void testNoBackingField() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/noBackingField.kt", this::doTest);
                }

                @TestMetadata("privateVal.kt")
                public void testPrivateVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/privateVal.kt", this::doTest);
                }

                @TestMetadata("privateVar.kt")
                public void testPrivateVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/privateVar.kt", this::doTest);
                }

                @TestMetadata("protectedConstVal.kt")
                public void testProtectedConstVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/protectedConstVal.kt", this::doTest);
                }

                @TestMetadata("protectedVal.kt")
                public void testProtectedVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/protectedVal.kt", this::doTest);
                }

                @TestMetadata("protectedVarPrivateSet.kt")
                public void testProtectedVarPrivateSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/protectedVarPrivateSet.kt", this::doTest);
                }

                @TestMetadata("publicConstVal.kt")
                public void testPublicConstVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/publicConstVal.kt", this::doTest);
                }

                @TestMetadata("publicVal.kt")
                public void testPublicVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/publicVal.kt", this::doTest);
                }

                @TestMetadata("publicValNonDefault.kt")
                public void testPublicValNonDefault() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/publicValNonDefault.kt", this::doTest);
                }

                @TestMetadata("publicVar.kt")
                public void testPublicVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/publicVar.kt", this::doTest);
                }

                @TestMetadata("publicVarNonDefault.kt")
                public void testPublicVarNonDefault() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/publicVarNonDefault.kt", this::doTest);
                }

                @TestMetadata("publicVarPrivateSet.kt")
                public void testPublicVarPrivateSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/publicVarPrivateSet.kt", this::doTest);
                }

                @TestMetadata("publicVarProtectedSet.kt")
                public void testPublicVarProtectedSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/publicVarProtectedSet.kt", this::doTest);
                }

                @TestMetadata("publicVarPublicSet.kt")
                public void testPublicVarPublicSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/writeFlags/property/classObject/trait/publicVarPublicSet.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/writeFlags/property/deprecatedFlag")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DeprecatedFlag extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInDeprecatedFlag() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/property/deprecatedFlag"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("propertyInClass.kt")
            public void testPropertyInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/property/deprecatedFlag/propertyInClass.kt", this::doTest);
            }

            @TestMetadata("topLevelProperty.kt")
            public void testTopLevelProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/property/deprecatedFlag/topLevelProperty.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/writeFlags/property/syntheticAnnotationsMethod")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SyntheticAnnotationsMethod extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInSyntheticAnnotationsMethod() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/property/syntheticAnnotationsMethod"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("privateProperty.kt")
            public void testPrivateProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/property/syntheticAnnotationsMethod/privateProperty.kt", this::doTest);
            }

            @TestMetadata("protectedProperty.kt")
            public void testProtectedProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/property/syntheticAnnotationsMethod/protectedProperty.kt", this::doTest);
            }

            @TestMetadata("publicProperty.kt")
            public void testPublicProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/property/syntheticAnnotationsMethod/publicProperty.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/writeFlags/property/visibility")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Visibility extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/property/visibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("internal.kt")
            public void testInternal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/property/visibility/internal.kt", this::doTest);
            }

            @TestMetadata("private.kt")
            public void testPrivate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/property/visibility/private.kt", this::doTest);
            }

            @TestMetadata("public.kt")
            public void testPublic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/property/visibility/public.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/writeFlags/typealias")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Typealias extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInTypealias() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/typealias"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/writeFlags/typealias/syntheticAnnotationsMethod")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SyntheticAnnotationsMethod extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInSyntheticAnnotationsMethod() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeFlags/typealias/syntheticAnnotationsMethod"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("privateTypealias.kt")
            public void testPrivateTypealias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/typealias/syntheticAnnotationsMethod/privateTypealias.kt", this::doTest);
            }

            @TestMetadata("publicTypealias.kt")
            public void testPublicTypealias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeFlags/typealias/syntheticAnnotationsMethod/publicTypealias.kt", this::doTest);
            }
        }
    }
}
