/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class LightAnalysisModeTestGenerated extends AbstractLightAnalysisModeTest {
    public void testAllFilesPresentInBox() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
    }

    @TestMetadata("compiler/testData/codegen/box/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotations extends AbstractLightAnalysisModeTest {
        @TestMetadata("wrongAnnotationArgumentInCtor.kt")
        public void ignoreWrongAnnotationArgumentInCtor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/wrongAnnotationArgumentInCtor.kt", this::doTest);
        }

        public void testAllFilesPresentInAnnotations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/annotations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("annotatedEnumEntry.kt")
        public void testAnnotatedEnumEntry() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotatedEnumEntry.kt", this::doTest);
        }

        @TestMetadata("annotatedObjectLiteral.kt")
        public void testAnnotatedObjectLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotatedObjectLiteral.kt", this::doTest);
        }

        @TestMetadata("annotationWithKotlinProperty.kt")
        public void testAnnotationWithKotlinProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotationWithKotlinProperty.kt", this::doTest);
        }

        @TestMetadata("annotationWithKotlinPropertyFromInterfaceCompanion.kt")
        public void testAnnotationWithKotlinPropertyFromInterfaceCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotationWithKotlinPropertyFromInterfaceCompanion.kt", this::doTest);
        }

        @TestMetadata("annotationsOnDefault.kt")
        public void testAnnotationsOnDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotationsOnDefault.kt", this::doTest);
        }

        @TestMetadata("annotationsOnTypeAliases.kt")
        public void testAnnotationsOnTypeAliases() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotationsOnTypeAliases.kt", this::doTest);
        }

        @TestMetadata("constValInAnnotation.kt")
        public void testConstValInAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/constValInAnnotation.kt", this::doTest);
        }

        @TestMetadata("defaultParameterValues.kt")
        public void testDefaultParameterValues() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/defaultParameterValues.kt", this::doTest);
        }

        @TestMetadata("delegatedPropertySetter.kt")
        public void testDelegatedPropertySetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/delegatedPropertySetter.kt", this::doTest);
        }

        @TestMetadata("fileClassWithFileAnnotation.kt")
        public void testFileClassWithFileAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/fileClassWithFileAnnotation.kt", this::doTest);
        }

        @TestMetadata("jvmAnnotationFlags.kt")
        public void testJvmAnnotationFlags() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/jvmAnnotationFlags.kt", this::doTest);
        }

        @TestMetadata("kotlinPropertyFromClassObjectAsParameter.kt")
        public void testKotlinPropertyFromClassObjectAsParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/kotlinPropertyFromClassObjectAsParameter.kt", this::doTest);
        }

        @TestMetadata("kotlinTopLevelPropertyAsParameter.kt")
        public void testKotlinTopLevelPropertyAsParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/kotlinTopLevelPropertyAsParameter.kt", this::doTest);
        }

        @TestMetadata("kt10136.kt")
        public void testKt10136() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/kt10136.kt", this::doTest);
        }

        @TestMetadata("nestedClassPropertyAsParameter.kt")
        public void testNestedClassPropertyAsParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/nestedClassPropertyAsParameter.kt", this::doTest);
        }

        @TestMetadata("nestedClassesInAnnotations.kt")
        public void testNestedClassesInAnnotations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/nestedClassesInAnnotations.kt", this::doTest);
        }

        @TestMetadata("parameterAnnotationInDefaultImpls.kt")
        public void testParameterAnnotationInDefaultImpls() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/parameterAnnotationInDefaultImpls.kt", this::doTest);
        }

        @TestMetadata("parameterWithPrimitiveType.kt")
        public void testParameterWithPrimitiveType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/parameterWithPrimitiveType.kt", this::doTest);
        }

        @TestMetadata("propertyWithPropertyInInitializerAsParameter.kt")
        public void testPropertyWithPropertyInInitializerAsParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/propertyWithPropertyInInitializerAsParameter.kt", this::doTest);
        }

        @TestMetadata("resolveWithLowPriorityAnnotation.kt")
        public void testResolveWithLowPriorityAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/resolveWithLowPriorityAnnotation.kt", this::doTest);
        }

        @TestMetadata("varargInAnnotationParameter.kt")
        public void testVarargInAnnotationParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/varargInAnnotationParameter.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/annotations/annotatedLambda")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AnnotatedLambda extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInAnnotatedLambda() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/annotations/annotatedLambda"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("funExpression.kt")
            public void testFunExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotatedLambda/funExpression.kt", this::doTest);
            }

            @TestMetadata("lambda.kt")
            public void testLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotatedLambda/lambda.kt", this::doTest);
            }

            @TestMetadata("samFunExpression.kt")
            public void testSamFunExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotatedLambda/samFunExpression.kt", this::doTest);
            }

            @TestMetadata("samLambda.kt")
            public void testSamLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/annotations/annotatedLambda/samLambda.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/argumentOrder")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ArgumentOrder extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInArgumentOrder() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/argumentOrder"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("argumentOrderInObjectSuperCall.kt")
        public void testArgumentOrderInObjectSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInObjectSuperCall.kt", this::doTest);
        }

        @TestMetadata("argumentOrderInSuperCall.kt")
        public void testArgumentOrderInSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInSuperCall.kt", this::doTest);
        }

        @TestMetadata("arguments.kt")
        public void testArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/arguments.kt", this::doTest);
        }

        @TestMetadata("captured.kt")
        public void testCaptured() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/captured.kt", this::doTest);
        }

        @TestMetadata("capturedInExtension.kt")
        public void testCapturedInExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/capturedInExtension.kt", this::doTest);
        }

        @TestMetadata("defaults.kt")
        public void testDefaults() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/defaults.kt", this::doTest);
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/extension.kt", this::doTest);
        }

        @TestMetadata("extensionInClass.kt")
        public void testExtensionInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/extensionInClass.kt", this::doTest);
        }

        @TestMetadata("kt9277.kt")
        public void testKt9277() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/kt9277.kt", this::doTest);
        }

        @TestMetadata("lambdaMigration.kt")
        public void testLambdaMigration() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/lambdaMigration.kt", this::doTest);
        }

        @TestMetadata("lambdaMigrationInClass.kt")
        public void testLambdaMigrationInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/lambdaMigrationInClass.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/simple.kt", this::doTest);
        }

        @TestMetadata("simpleInClass.kt")
        public void testSimpleInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/argumentOrder/simpleInClass.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/arrays")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Arrays extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInArrays() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/arrays"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("arrayConstructorsSimple.kt")
        public void testArrayConstructorsSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/arrayConstructorsSimple.kt", this::doTest);
        }

        @TestMetadata("arrayGetAssignMultiIndex.kt")
        public void testArrayGetAssignMultiIndex() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/arrayGetAssignMultiIndex.kt", this::doTest);
        }

        @TestMetadata("arrayGetMultiIndex.kt")
        public void testArrayGetMultiIndex() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/arrayGetMultiIndex.kt", this::doTest);
        }

        @TestMetadata("arrayInstanceOf.kt")
        public void testArrayInstanceOf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/arrayInstanceOf.kt", this::doTest);
        }

        @TestMetadata("arrayPlusAssign.kt")
        public void testArrayPlusAssign() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/arrayPlusAssign.kt", this::doTest);
        }

        @TestMetadata("arraysAreCloneable.kt")
        public void testArraysAreCloneable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/arraysAreCloneable.kt", this::doTest);
        }

        @TestMetadata("cloneArray.kt")
        public void testCloneArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/cloneArray.kt", this::doTest);
        }

        @TestMetadata("clonePrimitiveArrays.kt")
        public void testClonePrimitiveArrays() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/clonePrimitiveArrays.kt", this::doTest);
        }

        @TestMetadata("collectionAssignGetMultiIndex.kt")
        public void testCollectionAssignGetMultiIndex() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/collectionAssignGetMultiIndex.kt", this::doTest);
        }

        @TestMetadata("collectionGetMultiIndex.kt")
        public void testCollectionGetMultiIndex() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/collectionGetMultiIndex.kt", this::doTest);
        }

        @TestMetadata("forEachBooleanArray.kt")
        public void testForEachBooleanArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/forEachBooleanArray.kt", this::doTest);
        }

        @TestMetadata("forEachByteArray.kt")
        public void testForEachByteArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/forEachByteArray.kt", this::doTest);
        }

        @TestMetadata("forEachCharArray.kt")
        public void testForEachCharArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/forEachCharArray.kt", this::doTest);
        }

        @TestMetadata("forEachDoubleArray.kt")
        public void testForEachDoubleArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/forEachDoubleArray.kt", this::doTest);
        }

        @TestMetadata("forEachFloatArray.kt")
        public void testForEachFloatArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/forEachFloatArray.kt", this::doTest);
        }

        @TestMetadata("forEachIntArray.kt")
        public void testForEachIntArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/forEachIntArray.kt", this::doTest);
        }

        @TestMetadata("forEachLongArray.kt")
        public void testForEachLongArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/forEachLongArray.kt", this::doTest);
        }

        @TestMetadata("forEachShortArray.kt")
        public void testForEachShortArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/forEachShortArray.kt", this::doTest);
        }

        @TestMetadata("genericArrayInObjectLiteralConstructor.kt")
        public void testGenericArrayInObjectLiteralConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/genericArrayInObjectLiteralConstructor.kt", this::doTest);
        }

        @TestMetadata("hashMap.kt")
        public void testHashMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/hashMap.kt", this::doTest);
        }

        @TestMetadata("inProjectionAsParameter.kt")
        public void testInProjectionAsParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/inProjectionAsParameter.kt", this::doTest);
        }

        @TestMetadata("inProjectionOfArray.kt")
        public void testInProjectionOfArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/inProjectionOfArray.kt", this::doTest);
        }

        @TestMetadata("inProjectionOfList.kt")
        public void testInProjectionOfList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/inProjectionOfList.kt", this::doTest);
        }

        @TestMetadata("indices.kt")
        public void testIndices() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/indices.kt", this::doTest);
        }

        @TestMetadata("indicesChar.kt")
        public void testIndicesChar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/indicesChar.kt", this::doTest);
        }

        @TestMetadata("iterator.kt")
        public void testIterator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iterator.kt", this::doTest);
        }

        @TestMetadata("iteratorBooleanArray.kt")
        public void testIteratorBooleanArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorBooleanArray.kt", this::doTest);
        }

        @TestMetadata("iteratorByteArray.kt")
        public void testIteratorByteArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorByteArray.kt", this::doTest);
        }

        @TestMetadata("iteratorByteArrayNextByte.kt")
        public void testIteratorByteArrayNextByte() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorByteArrayNextByte.kt", this::doTest);
        }

        @TestMetadata("iteratorCharArray.kt")
        public void testIteratorCharArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorCharArray.kt", this::doTest);
        }

        @TestMetadata("iteratorDoubleArray.kt")
        public void testIteratorDoubleArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorDoubleArray.kt", this::doTest);
        }

        @TestMetadata("iteratorFloatArray.kt")
        public void testIteratorFloatArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorFloatArray.kt", this::doTest);
        }

        @TestMetadata("iteratorIntArray.kt")
        public void testIteratorIntArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorIntArray.kt", this::doTest);
        }

        @TestMetadata("iteratorLongArray.kt")
        public void testIteratorLongArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorLongArray.kt", this::doTest);
        }

        @TestMetadata("iteratorLongArrayNextLong.kt")
        public void testIteratorLongArrayNextLong() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorLongArrayNextLong.kt", this::doTest);
        }

        @TestMetadata("iteratorShortArray.kt")
        public void testIteratorShortArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/iteratorShortArray.kt", this::doTest);
        }

        @TestMetadata("kt1291.kt")
        public void testKt1291() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt1291.kt", this::doTest);
        }

        @TestMetadata("kt17134.kt")
        public void testKt17134() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt17134.kt", this::doTest);
        }

        @TestMetadata("kt238.kt")
        public void testKt238() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt238.kt", this::doTest);
        }

        @TestMetadata("kt2997.kt")
        public void testKt2997() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt2997.kt", this::doTest);
        }

        @TestMetadata("kt33.kt")
        public void testKt33() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt33.kt", this::doTest);
        }

        @TestMetadata("kt3771.kt")
        public void testKt3771() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt3771.kt", this::doTest);
        }

        @TestMetadata("kt4118.kt")
        public void testKt4118() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt4118.kt", this::doTest);
        }

        @TestMetadata("kt4348.kt")
        public void testKt4348() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt4348.kt", this::doTest);
        }

        @TestMetadata("kt4357.kt")
        public void testKt4357() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt4357.kt", this::doTest);
        }

        @TestMetadata("kt503.kt")
        public void testKt503() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt503.kt", this::doTest);
        }

        @TestMetadata("kt594.kt")
        public void testKt594() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt594.kt", this::doTest);
        }

        @TestMetadata("kt602.kt")
        public void testKt602() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt602.kt", this::doTest);
        }

        @TestMetadata("kt7009.kt")
        public void testKt7009() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt7009.kt", this::doTest);
        }

        @TestMetadata("kt7288.kt")
        public void testKt7288() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt7288.kt", this::doTest);
        }

        @TestMetadata("kt7338.kt")
        public void testKt7338() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt7338.kt", this::doTest);
        }

        @TestMetadata("kt779.kt")
        public void testKt779() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt779.kt", this::doTest);
        }

        @TestMetadata("kt945.kt")
        public void testKt945() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt945.kt", this::doTest);
        }

        @TestMetadata("kt950.kt")
        public void testKt950() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/kt950.kt", this::doTest);
        }

        @TestMetadata("longAsIndex.kt")
        public void testLongAsIndex() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/longAsIndex.kt", this::doTest);
        }

        @TestMetadata("multiArrayConstructors.kt")
        public void testMultiArrayConstructors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiArrayConstructors.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnArrayConstructor.kt")
        public void testNonLocalReturnArrayConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/nonLocalReturnArrayConstructor.kt", this::doTest);
        }

        @TestMetadata("nonNullArray.kt")
        public void testNonNullArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/nonNullArray.kt", this::doTest);
        }

        @TestMetadata("primitiveArrays.kt")
        public void testPrimitiveArrays() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/primitiveArrays.kt", this::doTest);
        }

        @TestMetadata("stdlib.kt")
        public void testStdlib() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/stdlib.kt", this::doTest);
        }

        @TestMetadata("varargsWithJava.kt")
        public void testVarargsWithJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/varargsWithJava.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MultiDecl extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInMultiDecl() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("kt15560.kt")
            public void testKt15560() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15560.kt", this::doTest);
            }

            @TestMetadata("kt15568.kt")
            public void testKt15568() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15568.kt", this::doTest);
            }

            @TestMetadata("kt15575.kt")
            public void testKt15575() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15575.kt", this::doTest);
            }

            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclFor.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentExtensions.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentMemberExtensions.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForValCaptured.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl/int")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Int extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInInt() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl/int"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl/long")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Long extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInLong() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl/long"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/binaryOp")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BinaryOp extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInBinaryOp() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/binaryOp"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("bitwiseOp.kt")
        public void testBitwiseOp() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/bitwiseOp.kt", this::doTest);
        }

        @TestMetadata("bitwiseOpAny.kt")
        public void testBitwiseOpAny() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/bitwiseOpAny.kt", this::doTest);
        }

        @TestMetadata("bitwiseOpNullable.kt")
        public void testBitwiseOpNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/bitwiseOpNullable.kt", this::doTest);
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/call.kt", this::doTest);
        }

        @TestMetadata("callAny.kt")
        public void testCallAny() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/callAny.kt", this::doTest);
        }

        @TestMetadata("callNullable.kt")
        public void testCallNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/callNullable.kt", this::doTest);
        }

        @TestMetadata("compareBoxedChars.kt")
        public void testCompareBoxedChars() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/compareBoxedChars.kt", this::doTest);
        }

        @TestMetadata("compareWithBoxedDouble.kt")
        public void testCompareWithBoxedDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedDouble.kt", this::doTest);
        }

        @TestMetadata("compareWithBoxedLong.kt")
        public void testCompareWithBoxedLong() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedLong.kt", this::doTest);
        }

        @TestMetadata("divisionByZero.kt")
        public void testDivisionByZero() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/divisionByZero.kt", this::doTest);
        }

        @TestMetadata("intrinsic.kt")
        public void testIntrinsic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/intrinsic.kt", this::doTest);
        }

        @TestMetadata("intrinsicAny.kt")
        public void testIntrinsicAny() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/intrinsicAny.kt", this::doTest);
        }

        @TestMetadata("intrinsicNullable.kt")
        public void testIntrinsicNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/intrinsicNullable.kt", this::doTest);
        }

        @TestMetadata("kt11163.kt")
        public void testKt11163() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/kt11163.kt", this::doTest);
        }

        @TestMetadata("kt11163_properIeee754comparisons.kt")
        public void testKt11163_properIeee754comparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/kt11163_properIeee754comparisons.kt", this::doTest);
        }

        @TestMetadata("kt23030_properIeee754comparisons.kt")
        public void testKt23030_properIeee754comparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/kt23030_properIeee754comparisons.kt", this::doTest);
        }

        @TestMetadata("kt6747_identityEquals.kt")
        public void testKt6747_identityEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/kt6747_identityEquals.kt", this::doTest);
        }

        @TestMetadata("overflowChar.kt")
        public void testOverflowChar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/overflowChar.kt", this::doTest);
        }

        @TestMetadata("overflowInt.kt")
        public void testOverflowInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/overflowInt.kt", this::doTest);
        }

        @TestMetadata("overflowLong.kt")
        public void testOverflowLong() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/binaryOp/overflowLong.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/boxingOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BoxingOptimization extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInBoxingOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/boxingOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("boxedIntegersCmp.kt")
        public void testBoxedIntegersCmp() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/boxedIntegersCmp.kt", this::doTest);
        }

        @TestMetadata("boxedPrimitivesAreEqual.kt")
        public void testBoxedPrimitivesAreEqual() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/boxedPrimitivesAreEqual.kt", this::doTest);
        }

        @TestMetadata("boxedRealsCmp.kt")
        public void testBoxedRealsCmp() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/boxedRealsCmp.kt", this::doTest);
        }

        @TestMetadata("casts.kt")
        public void testCasts() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/casts.kt", this::doTest);
        }

        @TestMetadata("checkcastAndInstanceOf.kt")
        public void testCheckcastAndInstanceOf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/checkcastAndInstanceOf.kt", this::doTest);
        }

        @TestMetadata("explicitEqualsOnDouble.kt")
        public void testExplicitEqualsOnDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/explicitEqualsOnDouble.kt", this::doTest);
        }

        @TestMetadata("fold.kt")
        public void testFold() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/fold.kt", this::doTest);
        }

        @TestMetadata("foldRange.kt")
        public void testFoldRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/foldRange.kt", this::doTest);
        }

        @TestMetadata("intCompareTo.kt")
        public void testIntCompareTo() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/intCompareTo.kt", this::doTest);
        }

        @TestMetadata("kClassEquals.kt")
        public void testKClassEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kClassEquals.kt", this::doTest);
        }

        @TestMetadata("kt15871.kt")
        public void testKt15871() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt15871.kt", this::doTest);
        }

        @TestMetadata("kt17748.kt")
        public void testKt17748() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt17748.kt", this::doTest);
        }

        @TestMetadata("kt19767.kt")
        public void testKt19767() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt19767.kt", this::doTest);
        }

        @TestMetadata("kt19767_2.kt")
        public void testKt19767_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_2.kt", this::doTest);
        }

        @TestMetadata("kt19767_3.kt")
        public void testKt19767_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_3.kt", this::doTest);
        }

        @TestMetadata("kt19767_chain.kt")
        public void testKt19767_chain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_chain.kt", this::doTest);
        }

        @TestMetadata("kt5493.kt")
        public void testKt5493() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt5493.kt", this::doTest);
        }

        @TestMetadata("kt5588.kt")
        public void testKt5588() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt5588.kt", this::doTest);
        }

        @TestMetadata("kt5844.kt")
        public void testKt5844() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt5844.kt", this::doTest);
        }

        @TestMetadata("kt6047.kt")
        public void testKt6047() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt6047.kt", this::doTest);
        }

        @TestMetadata("kt6842.kt")
        public void testKt6842() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/kt6842.kt", this::doTest);
        }

        @TestMetadata("maxMinBy.kt")
        public void testMaxMinBy() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/maxMinBy.kt", this::doTest);
        }

        @TestMetadata("nullCheck.kt")
        public void testNullCheck() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/nullCheck.kt", this::doTest);
        }

        @TestMetadata("progressions.kt")
        public void testProgressions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/progressions.kt", this::doTest);
        }

        @TestMetadata("safeCallWithElvis.kt")
        public void testSafeCallWithElvis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/safeCallWithElvis.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/simple.kt", this::doTest);
        }

        @TestMetadata("simpleUninitializedMerge.kt")
        public void testSimpleUninitializedMerge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/simpleUninitializedMerge.kt", this::doTest);
        }

        @TestMetadata("taintedValues.kt")
        public void testTaintedValues() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/taintedValues.kt", this::doTest);
        }

        @TestMetadata("taintedValuesBox.kt")
        public void testTaintedValuesBox() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/taintedValuesBox.kt", this::doTest);
        }

        @TestMetadata("unsafeRemoving.kt")
        public void testUnsafeRemoving() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/unsafeRemoving.kt", this::doTest);
        }

        @TestMetadata("variables.kt")
        public void testVariables() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/boxingOptimization/variables.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/bridges")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Bridges extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInBridges() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/bridges"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("bridgeInInterface.kt")
        public void testBridgeInInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/bridgeInInterface.kt", this::doTest);
        }

        @TestMetadata("bridgeInInterfaceWithProperties.kt")
        public void testBridgeInInterfaceWithProperties() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/bridgeInInterfaceWithProperties.kt", this::doTest);
        }

        @TestMetadata("complexMultiInheritance.kt")
        public void testComplexMultiInheritance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/complexMultiInheritance.kt", this::doTest);
        }

        @TestMetadata("complexTraitImpl.kt")
        public void testComplexTraitImpl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/complexTraitImpl.kt", this::doTest);
        }

        @TestMetadata("delegation.kt")
        public void testDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/delegation.kt", this::doTest);
        }

        @TestMetadata("delegationComplex.kt")
        public void testDelegationComplex() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/delegationComplex.kt", this::doTest);
        }

        @TestMetadata("delegationComplexWithList.kt")
        public void testDelegationComplexWithList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/delegationComplexWithList.kt", this::doTest);
        }

        @TestMetadata("delegationProperty.kt")
        public void testDelegationProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/delegationProperty.kt", this::doTest);
        }

        @TestMetadata("diamond.kt")
        public void testDiamond() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/diamond.kt", this::doTest);
        }

        @TestMetadata("fakeCovariantOverride.kt")
        public void testFakeCovariantOverride() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/fakeCovariantOverride.kt", this::doTest);
        }

        @TestMetadata("fakeGenericCovariantOverride.kt")
        public void testFakeGenericCovariantOverride() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/fakeGenericCovariantOverride.kt", this::doTest);
        }

        @TestMetadata("fakeGenericCovariantOverrideWithDelegation.kt")
        public void testFakeGenericCovariantOverrideWithDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/fakeGenericCovariantOverrideWithDelegation.kt", this::doTest);
        }

        @TestMetadata("fakeOverrideOfTraitImpl.kt")
        public void testFakeOverrideOfTraitImpl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/fakeOverrideOfTraitImpl.kt", this::doTest);
        }

        @TestMetadata("fakeOverrideWithSeveralSuperDeclarations.kt")
        public void testFakeOverrideWithSeveralSuperDeclarations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/fakeOverrideWithSeveralSuperDeclarations.kt", this::doTest);
        }

        @TestMetadata("fakeOverrideWithSynthesizedImplementation.kt")
        public void testFakeOverrideWithSynthesizedImplementation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/fakeOverrideWithSynthesizedImplementation.kt", this::doTest);
        }

        @TestMetadata("genericProperty.kt")
        public void testGenericProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/genericProperty.kt", this::doTest);
        }

        @TestMetadata("kt12416.kt")
        public void testKt12416() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/kt12416.kt", this::doTest);
        }

        @TestMetadata("kt1939.kt")
        public void testKt1939() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/kt1939.kt", this::doTest);
        }

        @TestMetadata("kt1959.kt")
        public void testKt1959() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/kt1959.kt", this::doTest);
        }

        @TestMetadata("kt2498.kt")
        public void testKt2498() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/kt2498.kt", this::doTest);
        }

        @TestMetadata("kt2702.kt")
        public void testKt2702() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/kt2702.kt", this::doTest);
        }

        @TestMetadata("kt2833.kt")
        public void testKt2833() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/kt2833.kt", this::doTest);
        }

        @TestMetadata("kt2920.kt")
        public void testKt2920() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/kt2920.kt", this::doTest);
        }

        @TestMetadata("kt318.kt")
        public void testKt318() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/kt318.kt", this::doTest);
        }

        @TestMetadata("longChainOneBridge.kt")
        public void testLongChainOneBridge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/longChainOneBridge.kt", this::doTest);
        }

        @TestMetadata("manyTypeArgumentsSubstitutedSuccessively.kt")
        public void testManyTypeArgumentsSubstitutedSuccessively() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/manyTypeArgumentsSubstitutedSuccessively.kt", this::doTest);
        }

        @TestMetadata("methodFromTrait.kt")
        public void testMethodFromTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/methodFromTrait.kt", this::doTest);
        }

        @TestMetadata("noBridgeOnMutableCollectionInheritance.kt")
        public void testNoBridgeOnMutableCollectionInheritance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/noBridgeOnMutableCollectionInheritance.kt", this::doTest);
        }

        @TestMetadata("objectClone.kt")
        public void testObjectClone() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/objectClone.kt", this::doTest);
        }

        @TestMetadata("overrideAbstractProperty.kt")
        public void testOverrideAbstractProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/overrideAbstractProperty.kt", this::doTest);
        }

        @TestMetadata("overrideReturnType.kt")
        public void testOverrideReturnType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/overrideReturnType.kt", this::doTest);
        }

        @TestMetadata("propertyAccessorsWithoutBody.kt")
        public void testPropertyAccessorsWithoutBody() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/propertyAccessorsWithoutBody.kt", this::doTest);
        }

        @TestMetadata("propertyDiamond.kt")
        public void testPropertyDiamond() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/propertyDiamond.kt", this::doTest);
        }

        @TestMetadata("propertyInConstructor.kt")
        public void testPropertyInConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/propertyInConstructor.kt", this::doTest);
        }

        @TestMetadata("propertySetter.kt")
        public void testPropertySetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/propertySetter.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/simple.kt", this::doTest);
        }

        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/simpleEnum.kt", this::doTest);
        }

        @TestMetadata("simpleGenericMethod.kt")
        public void testSimpleGenericMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/simpleGenericMethod.kt", this::doTest);
        }

        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/simpleObject.kt", this::doTest);
        }

        @TestMetadata("simpleReturnType.kt")
        public void testSimpleReturnType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/simpleReturnType.kt", this::doTest);
        }

        @TestMetadata("simpleTraitImpl.kt")
        public void testSimpleTraitImpl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/simpleTraitImpl.kt", this::doTest);
        }

        @TestMetadata("simpleUpperBound.kt")
        public void testSimpleUpperBound() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/simpleUpperBound.kt", this::doTest);
        }

        @TestMetadata("strListContains.kt")
        public void testStrListContains() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/strListContains.kt", this::doTest);
        }

        @TestMetadata("traitImplInheritsTraitImpl.kt")
        public void testTraitImplInheritsTraitImpl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/traitImplInheritsTraitImpl.kt", this::doTest);
        }

        @TestMetadata("twoParentsWithDifferentMethodsTwoBridges.kt")
        public void testTwoParentsWithDifferentMethodsTwoBridges() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges.kt", this::doTest);
        }

        @TestMetadata("twoParentsWithDifferentMethodsTwoBridges2.kt")
        public void testTwoParentsWithDifferentMethodsTwoBridges2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges2.kt", this::doTest);
        }

        @TestMetadata("twoParentsWithTheSameMethodOneBridge.kt")
        public void testTwoParentsWithTheSameMethodOneBridge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/twoParentsWithTheSameMethodOneBridge.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/bridges/substitutionInSuperClass")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SubstitutionInSuperClass extends AbstractLightAnalysisModeTest {
            @TestMetadata("abstractFun.kt")
            public void testAbstractFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/abstractFun.kt", this::doTest);
            }

            public void testAllFilesPresentInSubstitutionInSuperClass() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/bridges/substitutionInSuperClass"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("boundedTypeArguments.kt")
            public void testBoundedTypeArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/boundedTypeArguments.kt", this::doTest);
            }

            @TestMetadata("delegation.kt")
            public void testDelegation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/delegation.kt", this::doTest);
            }

            @TestMetadata("differentErasureInSuperClass.kt")
            public void testDifferentErasureInSuperClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/differentErasureInSuperClass.kt", this::doTest);
            }

            @TestMetadata("differentErasureInSuperClassComplex.kt")
            public void testDifferentErasureInSuperClassComplex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/differentErasureInSuperClassComplex.kt", this::doTest);
            }

            @TestMetadata("enum.kt")
            public void testEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/enum.kt", this::doTest);
            }

            @TestMetadata("genericMethod.kt")
            public void testGenericMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/genericMethod.kt", this::doTest);
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/object.kt", this::doTest);
            }

            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/property.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/simple.kt", this::doTest);
            }

            @TestMetadata("upperBound.kt")
            public void testUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/upperBound.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BuiltinStubMethods extends AbstractLightAnalysisModeTest {
        @TestMetadata("abstractMember.kt")
        public void testAbstractMember() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/abstractMember.kt", this::doTest);
        }

        public void testAllFilesPresentInBuiltinStubMethods() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("Collection.kt")
        public void testCollection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/Collection.kt", this::doTest);
        }

        @TestMetadata("customReadOnlyIterator.kt")
        public void testCustomReadOnlyIterator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/customReadOnlyIterator.kt", this::doTest);
        }

        @TestMetadata("delegationToArrayList.kt")
        public void testDelegationToArrayList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/delegationToArrayList.kt", this::doTest);
        }

        @TestMetadata("implementationInTrait.kt")
        public void testImplementationInTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/implementationInTrait.kt", this::doTest);
        }

        @TestMetadata("inheritedImplementations.kt")
        public void testInheritedImplementations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/inheritedImplementations.kt", this::doTest);
        }

        @TestMetadata("Iterator.kt")
        public void testIterator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/Iterator.kt", this::doTest);
        }

        @TestMetadata("IteratorWithRemove.kt")
        public void testIteratorWithRemove() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/IteratorWithRemove.kt", this::doTest);
        }

        @TestMetadata("List.kt")
        public void testList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/List.kt", this::doTest);
        }

        @TestMetadata("ListIterator.kt")
        public void testListIterator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/ListIterator.kt", this::doTest);
        }

        @TestMetadata("ListWithAllImplementations.kt")
        public void testListWithAllImplementations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/ListWithAllImplementations.kt", this::doTest);
        }

        @TestMetadata("ListWithAllInheritedImplementations.kt")
        public void testListWithAllInheritedImplementations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/ListWithAllInheritedImplementations.kt", this::doTest);
        }

        @TestMetadata("manyTypeParametersWithUpperBounds.kt")
        public void testManyTypeParametersWithUpperBounds() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/manyTypeParametersWithUpperBounds.kt", this::doTest);
        }

        @TestMetadata("Map.kt")
        public void testMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/Map.kt", this::doTest);
        }

        @TestMetadata("MapEntry.kt")
        public void testMapEntry() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/MapEntry.kt", this::doTest);
        }

        @TestMetadata("MapEntryWithSetValue.kt")
        public void testMapEntryWithSetValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/MapEntryWithSetValue.kt", this::doTest);
        }

        @TestMetadata("MapWithAllImplementations.kt")
        public void testMapWithAllImplementations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/MapWithAllImplementations.kt", this::doTest);
        }

        @TestMetadata("nonTrivialSubstitution.kt")
        public void testNonTrivialSubstitution() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/nonTrivialSubstitution.kt", this::doTest);
        }

        @TestMetadata("nonTrivialUpperBound.kt")
        public void testNonTrivialUpperBound() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/nonTrivialUpperBound.kt", this::doTest);
        }

        @TestMetadata("substitutedIterable.kt")
        public void testSubstitutedIterable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/substitutedIterable.kt", this::doTest);
        }

        @TestMetadata("SubstitutedList.kt")
        public void testSubstitutedList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/SubstitutedList.kt", this::doTest);
        }

        @TestMetadata("substitutedListWithExtraSuperInterface.kt")
        public void testSubstitutedListWithExtraSuperInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/substitutedListWithExtraSuperInterface.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ExtendJavaCollections extends AbstractLightAnalysisModeTest {
            @TestMetadata("abstractList.kt")
            public void testAbstractList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/abstractList.kt", this::doTest);
            }

            @TestMetadata("abstractMap.kt")
            public void testAbstractMap() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/abstractMap.kt", this::doTest);
            }

            @TestMetadata("abstractSet.kt")
            public void testAbstractSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/abstractSet.kt", this::doTest);
            }

            public void testAllFilesPresentInExtendJavaCollections() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("arrayList.kt")
            public void testArrayList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/arrayList.kt", this::doTest);
            }

            @TestMetadata("hashMap.kt")
            public void testHashMap() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/hashMap.kt", this::doTest);
            }

            @TestMetadata("hashSet.kt")
            public void testHashSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/hashSet.kt", this::doTest);
            }

            @TestMetadata("mapEntry.kt")
            public void testMapEntry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/mapEntry.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReference extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInCallableReference() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("compiler/testData/codegen/box/callableReference/bound")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Bound extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInBound() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/array.kt", this::doTest);
            }

            @TestMetadata("companionObjectReceiver.kt")
            public void testCompanionObjectReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/companionObjectReceiver.kt", this::doTest);
            }

            @TestMetadata("emptyLHS.kt")
            public void testEmptyLHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/emptyLHS.kt", this::doTest);
            }

            @TestMetadata("enumEntryMember.kt")
            public void testEnumEntryMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/enumEntryMember.kt", this::doTest);
            }

            @TestMetadata("genericValOnLHS.kt")
            public void testGenericValOnLHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/genericValOnLHS.kt", this::doTest);
            }

            @TestMetadata("kCallableNameIntrinsic.kt")
            public void testKCallableNameIntrinsic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/kCallableNameIntrinsic.kt", this::doTest);
            }

            @TestMetadata("kt12738.kt")
            public void testKt12738() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/kt12738.kt", this::doTest);
            }

            @TestMetadata("kt15446.kt")
            public void testKt15446() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/kt15446.kt", this::doTest);
            }

            @TestMetadata("localUnitFunction.kt")
            public void testLocalUnitFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/localUnitFunction.kt", this::doTest);
            }

            @TestMetadata("multiCase.kt")
            public void testMultiCase() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/multiCase.kt", this::doTest);
            }

            @TestMetadata("nullReceiver.kt")
            public void testNullReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/nullReceiver.kt", this::doTest);
            }

            @TestMetadata("objectReceiver.kt")
            public void testObjectReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/objectReceiver.kt", this::doTest);
            }

            @TestMetadata("primitiveReceiver.kt")
            public void testPrimitiveReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/primitiveReceiver.kt", this::doTest);
            }

            @TestMetadata("simpleFunction.kt")
            public void testSimpleFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/simpleFunction.kt", this::doTest);
            }

            @TestMetadata("simpleProperty.kt")
            public void testSimpleProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/simpleProperty.kt", this::doTest);
            }

            @TestMetadata("smartCastForExtensionReceiver.kt")
            public void testSmartCastForExtensionReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/smartCastForExtensionReceiver.kt", this::doTest);
            }

            @TestMetadata("syntheticExtensionOnLHS.kt")
            public void testSyntheticExtensionOnLHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/syntheticExtensionOnLHS.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/callableReference/bound/equals")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Equals extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInEquals() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound/equals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("nullableReceiverInEquals.kt")
                public void testNullableReceiverInEquals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/equals/nullableReceiverInEquals.kt", this::doTest);
                }

                @TestMetadata("propertyAccessors.kt")
                public void testPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/equals/propertyAccessors.kt", this::doTest);
                }

                @TestMetadata("receiverInEquals.kt")
                public void testReceiverInEquals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/equals/receiverInEquals.kt", this::doTest);
                }

                @TestMetadata("reflectionReference.kt")
                public void testReflectionReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/equals/reflectionReference.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/callableReference/bound/inline")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inline extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInInline() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound/inline"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("emptyLhsProperty.kt")
                public void testEmptyLhsProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/inline/emptyLhsProperty.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/inline/simple.kt", this::doTest);
                }

                @TestMetadata("simpleVal.kt")
                public void testSimpleVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/bound/inline/simpleVal.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/callableReference/function")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Function extends AbstractLightAnalysisModeTest {
            @TestMetadata("abstractClassMember.kt")
            public void testAbstractClassMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/abstractClassMember.kt", this::doTest);
            }

            public void testAllFilesPresentInFunction() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/callableReference/function"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("booleanNotIntrinsic.kt")
            public void testBooleanNotIntrinsic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/booleanNotIntrinsic.kt", this::doTest);
            }

            @TestMetadata("classMemberFromClass.kt")
            public void testClassMemberFromClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromClass.kt", this::doTest);
            }

            @TestMetadata("classMemberFromExtension.kt")
            public void testClassMemberFromExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromExtension.kt", this::doTest);
            }

            @TestMetadata("classMemberFromTopLevelStringNoArgs.kt")
            public void testClassMemberFromTopLevelStringNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelStringNoArgs.kt", this::doTest);
            }

            @TestMetadata("classMemberFromTopLevelStringOneStringArg.kt")
            public void testClassMemberFromTopLevelStringOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelStringOneStringArg.kt", this::doTest);
            }

            @TestMetadata("classMemberFromTopLevelUnitNoArgs.kt")
            public void testClassMemberFromTopLevelUnitNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelUnitNoArgs.kt", this::doTest);
            }

            @TestMetadata("classMemberFromTopLevelUnitOneStringArg.kt")
            public void testClassMemberFromTopLevelUnitOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelUnitOneStringArg.kt", this::doTest);
            }

            @TestMetadata("constructorFromTopLevelNoArgs.kt")
            public void testConstructorFromTopLevelNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/constructorFromTopLevelNoArgs.kt", this::doTest);
            }

            @TestMetadata("constructorFromTopLevelOneStringArg.kt")
            public void testConstructorFromTopLevelOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/constructorFromTopLevelOneStringArg.kt", this::doTest);
            }

            @TestMetadata("enumValueOfMethod.kt")
            public void testEnumValueOfMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/enumValueOfMethod.kt", this::doTest);
            }

            @TestMetadata("equalsIntrinsic.kt")
            public void testEqualsIntrinsic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/equalsIntrinsic.kt", this::doTest);
            }

            @TestMetadata("extensionFromClass.kt")
            public void testExtensionFromClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/extensionFromClass.kt", this::doTest);
            }

            @TestMetadata("extensionFromExtension.kt")
            public void testExtensionFromExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/extensionFromExtension.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevelStringNoArgs.kt")
            public void testExtensionFromTopLevelStringNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelStringNoArgs.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevelStringOneStringArg.kt")
            public void testExtensionFromTopLevelStringOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelStringOneStringArg.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevelUnitNoArgs.kt")
            public void testExtensionFromTopLevelUnitNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelUnitNoArgs.kt", this::doTest);
            }

            @TestMetadata("extensionFromTopLevelUnitOneStringArg.kt")
            public void testExtensionFromTopLevelUnitOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelUnitOneStringArg.kt", this::doTest);
            }

            @TestMetadata("genericCallableReferenceArguments.kt")
            public void testGenericCallableReferenceArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferenceArguments.kt", this::doTest);
            }

            @TestMetadata("genericCallableReferencesWithNullableTypes.kt")
            public void testGenericCallableReferencesWithNullableTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferencesWithNullableTypes.kt", this::doTest);
            }

            @TestMetadata("genericCallableReferencesWithOverload.kt")
            public void testGenericCallableReferencesWithOverload() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferencesWithOverload.kt", this::doTest);
            }

            @TestMetadata("genericMember.kt")
            public void testGenericMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/genericMember.kt", this::doTest);
            }

            @TestMetadata("genericWithDependentType.kt")
            public void testGenericWithDependentType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/genericWithDependentType.kt", this::doTest);
            }

            @TestMetadata("getArityViaFunctionImpl.kt")
            public void testGetArityViaFunctionImpl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/getArityViaFunctionImpl.kt", this::doTest);
            }

            @TestMetadata("innerClassConstructorWithTwoReceivers.kt")
            public void testInnerClassConstructorWithTwoReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/innerClassConstructorWithTwoReceivers.kt", this::doTest);
            }

            @TestMetadata("innerConstructorFromClass.kt")
            public void testInnerConstructorFromClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromClass.kt", this::doTest);
            }

            @TestMetadata("innerConstructorFromExtension.kt")
            public void testInnerConstructorFromExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromExtension.kt", this::doTest);
            }

            @TestMetadata("innerConstructorFromTopLevelNoArgs.kt")
            public void testInnerConstructorFromTopLevelNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromTopLevelNoArgs.kt", this::doTest);
            }

            @TestMetadata("innerConstructorFromTopLevelOneStringArg.kt")
            public void testInnerConstructorFromTopLevelOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromTopLevelOneStringArg.kt", this::doTest);
            }

            @TestMetadata("javaCollectionsStaticMethod.kt")
            public void testJavaCollectionsStaticMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/javaCollectionsStaticMethod.kt", this::doTest);
            }

            @TestMetadata("nestedConstructorFromClass.kt")
            public void testNestedConstructorFromClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromClass.kt", this::doTest);
            }

            @TestMetadata("nestedConstructorFromTopLevelNoArgs.kt")
            public void testNestedConstructorFromTopLevelNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromTopLevelNoArgs.kt", this::doTest);
            }

            @TestMetadata("nestedConstructorFromTopLevelOneStringArg.kt")
            public void testNestedConstructorFromTopLevelOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromTopLevelOneStringArg.kt", this::doTest);
            }

            @TestMetadata("newArray.kt")
            public void testNewArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/newArray.kt", this::doTest);
            }

            @TestMetadata("overloadedFun.kt")
            public void testOverloadedFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/overloadedFun.kt", this::doTest);
            }

            @TestMetadata("overloadedFunVsVal.kt")
            public void testOverloadedFunVsVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/overloadedFunVsVal.kt", this::doTest);
            }

            @TestMetadata("privateClassMember.kt")
            public void testPrivateClassMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/privateClassMember.kt", this::doTest);
            }

            @TestMetadata("sortListOfStrings.kt")
            public void testSortListOfStrings() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/sortListOfStrings.kt", this::doTest);
            }

            @TestMetadata("specialCalls.kt")
            public void testSpecialCalls() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/specialCalls.kt", this::doTest);
            }

            @TestMetadata("topLevelFromClass.kt")
            public void testTopLevelFromClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromClass.kt", this::doTest);
            }

            @TestMetadata("topLevelFromExtension.kt")
            public void testTopLevelFromExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromExtension.kt", this::doTest);
            }

            @TestMetadata("topLevelFromTopLevelStringNoArgs.kt")
            public void testTopLevelFromTopLevelStringNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelStringNoArgs.kt", this::doTest);
            }

            @TestMetadata("topLevelFromTopLevelStringOneStringArg.kt")
            public void testTopLevelFromTopLevelStringOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelStringOneStringArg.kt", this::doTest);
            }

            @TestMetadata("topLevelFromTopLevelUnitNoArgs.kt")
            public void testTopLevelFromTopLevelUnitNoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitNoArgs.kt", this::doTest);
            }

            @TestMetadata("topLevelFromTopLevelUnitOneStringArg.kt")
            public void testTopLevelFromTopLevelUnitOneStringArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitOneStringArg.kt", this::doTest);
            }

            @TestMetadata("traitImplMethodWithClassReceiver.kt")
            public void testTraitImplMethodWithClassReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/traitImplMethodWithClassReceiver.kt", this::doTest);
            }

            @TestMetadata("traitMember.kt")
            public void testTraitMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/traitMember.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/callableReference/function/local")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Local extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInLocal() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/callableReference/function/local"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("captureOuter.kt")
                public void testCaptureOuter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/captureOuter.kt", this::doTest);
                }

                @TestMetadata("classMember.kt")
                public void testClassMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/classMember.kt", this::doTest);
                }

                @TestMetadata("closureWithSideEffect.kt")
                public void testClosureWithSideEffect() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/closureWithSideEffect.kt", this::doTest);
                }

                @TestMetadata("constructor.kt")
                public void testConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/constructor.kt", this::doTest);
                }

                @TestMetadata("constructorWithInitializer.kt")
                public void testConstructorWithInitializer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/constructorWithInitializer.kt", this::doTest);
                }

                @TestMetadata("enumExtendsTrait.kt")
                public void testEnumExtendsTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/enumExtendsTrait.kt", this::doTest);
                }

                @TestMetadata("equalsHashCode.kt")
                public void testEqualsHashCode() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/equalsHashCode.kt", this::doTest);
                }

                @TestMetadata("extension.kt")
                public void testExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/extension.kt", this::doTest);
                }

                @TestMetadata("extensionToLocalClass.kt")
                public void testExtensionToLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/extensionToLocalClass.kt", this::doTest);
                }

                @TestMetadata("extensionToPrimitive.kt")
                public void testExtensionToPrimitive() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/extensionToPrimitive.kt", this::doTest);
                }

                @TestMetadata("extensionWithClosure.kt")
                public void testExtensionWithClosure() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/extensionWithClosure.kt", this::doTest);
                }

                @TestMetadata("genericMember.kt")
                public void testGenericMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/genericMember.kt", this::doTest);
                }

                @TestMetadata("localClassMember.kt")
                public void testLocalClassMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/localClassMember.kt", this::doTest);
                }

                @TestMetadata("localFunctionName.kt")
                public void testLocalFunctionName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/localFunctionName.kt", this::doTest);
                }

                @TestMetadata("localLocal.kt")
                public void testLocalLocal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/localLocal.kt", this::doTest);
                }

                @TestMetadata("recursiveClosure.kt")
                public void testRecursiveClosure() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/recursiveClosure.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/simple.kt", this::doTest);
                }

                @TestMetadata("simpleClosure.kt")
                public void testSimpleClosure() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/simpleClosure.kt", this::doTest);
                }

                @TestMetadata("simpleWithArg.kt")
                public void testSimpleWithArg() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/simpleWithArg.kt", this::doTest);
                }

                @TestMetadata("unitWithSideEffect.kt")
                public void testUnitWithSideEffect() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/function/local/unitWithSideEffect.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/callableReference/property")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Property extends AbstractLightAnalysisModeTest {
            @TestMetadata("accessViaSubclass.kt")
            public void testAccessViaSubclass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/accessViaSubclass.kt", this::doTest);
            }

            public void testAllFilesPresentInProperty() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/callableReference/property"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("delegated.kt")
            public void testDelegated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/delegated.kt", this::doTest);
            }

            @TestMetadata("delegatedMutable.kt")
            public void testDelegatedMutable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/delegatedMutable.kt", this::doTest);
            }

            @TestMetadata("enumNameOrdinal.kt")
            public void testEnumNameOrdinal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/enumNameOrdinal.kt", this::doTest);
            }

            @TestMetadata("extensionToArray.kt")
            public void testExtensionToArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/extensionToArray.kt", this::doTest);
            }

            @TestMetadata("genericProperty.kt")
            public void testGenericProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/genericProperty.kt", this::doTest);
            }

            @TestMetadata("invokePropertyReference.kt")
            public void testInvokePropertyReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/invokePropertyReference.kt", this::doTest);
            }

            @TestMetadata("javaBeanConvention.kt")
            public void testJavaBeanConvention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/javaBeanConvention.kt", this::doTest);
            }

            @TestMetadata("kClassInstanceIsInitializedFirst.kt")
            public void testKClassInstanceIsInitializedFirst() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/kClassInstanceIsInitializedFirst.kt", this::doTest);
            }

            @TestMetadata("kt12044.kt")
            public void testKt12044() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/kt12044.kt", this::doTest);
            }

            @TestMetadata("kt12982_protectedPropertyReference.kt")
            public void testKt12982_protectedPropertyReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/kt12982_protectedPropertyReference.kt", this::doTest);
            }

            @TestMetadata("kt14330.kt")
            public void testKt14330() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/kt14330.kt", this::doTest);
            }

            @TestMetadata("kt14330_2.kt")
            public void testKt14330_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/kt14330_2.kt", this::doTest);
            }

            @TestMetadata("kt15447.kt")
            public void testKt15447() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/kt15447.kt", this::doTest);
            }

            @TestMetadata("kt6870_privatePropertyReference.kt")
            public void testKt6870_privatePropertyReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/kt6870_privatePropertyReference.kt", this::doTest);
            }

            @TestMetadata("listOfStringsMapLength.kt")
            public void testListOfStringsMapLength() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/listOfStringsMapLength.kt", this::doTest);
            }

            @TestMetadata("localClassVar.kt")
            public void testLocalClassVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/localClassVar.kt", this::doTest);
            }

            @TestMetadata("overriddenInSubclass.kt")
            public void testOverriddenInSubclass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/overriddenInSubclass.kt", this::doTest);
            }

            @TestMetadata("privateSetOuterClass.kt")
            public void testPrivateSetOuterClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/privateSetOuterClass.kt", this::doTest);
            }

            @TestMetadata("privateSetterInsideClass.kt")
            public void testPrivateSetterInsideClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/privateSetterInsideClass.kt", this::doTest);
            }

            @TestMetadata("privateSetterOutsideClass.kt")
            public void testPrivateSetterOutsideClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/privateSetterOutsideClass.kt", this::doTest);
            }

            @TestMetadata("simpleExtension.kt")
            public void testSimpleExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/simpleExtension.kt", this::doTest);
            }

            @TestMetadata("simpleMember.kt")
            public void testSimpleMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/simpleMember.kt", this::doTest);
            }

            @TestMetadata("simpleMutableExtension.kt")
            public void testSimpleMutableExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableExtension.kt", this::doTest);
            }

            @TestMetadata("simpleMutableMember.kt")
            public void testSimpleMutableMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableMember.kt", this::doTest);
            }

            @TestMetadata("simpleMutableTopLevel.kt")
            public void testSimpleMutableTopLevel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableTopLevel.kt", this::doTest);
            }

            @TestMetadata("simpleTopLevel.kt")
            public void testSimpleTopLevel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/property/simpleTopLevel.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/callableReference/serializability")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Serializability extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInSerializability() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/callableReference/serializability"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("boundWithNotSerializableReceiver.kt")
            public void testBoundWithNotSerializableReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/serializability/boundWithNotSerializableReceiver.kt", this::doTest);
            }

            @TestMetadata("boundWithSerializableReceiver.kt")
            public void testBoundWithSerializableReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/serializability/boundWithSerializableReceiver.kt", this::doTest);
            }

            @TestMetadata("noReflect.kt")
            public void testNoReflect() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/serializability/noReflect.kt", this::doTest);
            }

            @TestMetadata("reflectedIsNotSerialized.kt")
            public void testReflectedIsNotSerialized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/serializability/reflectedIsNotSerialized.kt", this::doTest);
            }

            @TestMetadata("withReflect.kt")
            public void testWithReflect() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/callableReference/serializability/withReflect.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/casts")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Casts extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInCasts() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/casts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("as.kt")
        public void testAs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/as.kt", this::doTest);
        }

        @TestMetadata("asForConstants.kt")
        public void testAsForConstants() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/asForConstants.kt", this::doTest);
        }

        @TestMetadata("asSafe.kt")
        public void testAsSafe() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/asSafe.kt", this::doTest);
        }

        @TestMetadata("asSafeFail.kt")
        public void testAsSafeFail() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/asSafeFail.kt", this::doTest);
        }

        @TestMetadata("asSafeForConstants.kt")
        public void testAsSafeForConstants() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/asSafeForConstants.kt", this::doTest);
        }

        @TestMetadata("asUnit.kt")
        public void testAsUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/asUnit.kt", this::doTest);
        }

        @TestMetadata("asWithGeneric.kt")
        public void testAsWithGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/asWithGeneric.kt", this::doTest);
        }

        @TestMetadata("castGenericNull.kt")
        public void testCastGenericNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/castGenericNull.kt", this::doTest);
        }

        @TestMetadata("intersectionTypeMultipleBounds.kt")
        public void testIntersectionTypeMultipleBounds() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/intersectionTypeMultipleBounds.kt", this::doTest);
        }

        @TestMetadata("intersectionTypeMultipleBoundsImplicitReceiver.kt")
        public void testIntersectionTypeMultipleBoundsImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/intersectionTypeMultipleBoundsImplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("intersectionTypeSmartcast.kt")
        public void testIntersectionTypeSmartcast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/intersectionTypeSmartcast.kt", this::doTest);
        }

        @TestMetadata("intersectionTypeWithMultipleBoundsAsReceiver.kt")
        public void testIntersectionTypeWithMultipleBoundsAsReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/intersectionTypeWithMultipleBoundsAsReceiver.kt", this::doTest);
        }

        @TestMetadata("intersectionTypeWithoutGenericsAsReceiver.kt")
        public void testIntersectionTypeWithoutGenericsAsReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/intersectionTypeWithoutGenericsAsReceiver.kt", this::doTest);
        }

        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/is.kt", this::doTest);
        }

        @TestMetadata("isNullablePrimitive.kt")
        public void testIsNullablePrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/isNullablePrimitive.kt", this::doTest);
        }

        @TestMetadata("kt22714.kt")
        public void testKt22714() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/kt22714.kt", this::doTest);
        }

        @TestMetadata("lambdaToUnitCast.kt")
        public void testLambdaToUnitCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/lambdaToUnitCast.kt", this::doTest);
        }

        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/notIs.kt", this::doTest);
        }

        @TestMetadata("unitAsAny.kt")
        public void testUnitAsAny() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/unitAsAny.kt", this::doTest);
        }

        @TestMetadata("unitAsInt.kt")
        public void testUnitAsInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/unitAsInt.kt", this::doTest);
        }

        @TestMetadata("unitAsSafeAny.kt")
        public void testUnitAsSafeAny() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/unitAsSafeAny.kt", this::doTest);
        }

        @TestMetadata("unitNullableCast.kt")
        public void testUnitNullableCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/unitNullableCast.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/casts/functions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Functions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInFunctions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/casts/functions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("asFunKBig.kt")
            public void testAsFunKBig() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/asFunKBig.kt", this::doTest);
            }

            @TestMetadata("asFunKSmall.kt")
            public void testAsFunKSmall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/asFunKSmall.kt", this::doTest);
            }

            @TestMetadata("isFunKBig.kt")
            public void testIsFunKBig() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/isFunKBig.kt", this::doTest);
            }

            @TestMetadata("isFunKSmall.kt")
            public void testIsFunKSmall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/isFunKSmall.kt", this::doTest);
            }

            @TestMetadata("javaTypeIsFunK.kt")
            public void testJavaTypeIsFunK() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/javaTypeIsFunK.kt", this::doTest);
            }

            @TestMetadata("reifiedAsFunKBig.kt")
            public void testReifiedAsFunKBig() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/reifiedAsFunKBig.kt", this::doTest);
            }

            @TestMetadata("reifiedAsFunKSmall.kt")
            public void testReifiedAsFunKSmall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/reifiedAsFunKSmall.kt", this::doTest);
            }

            @TestMetadata("reifiedIsFunKBig.kt")
            public void testReifiedIsFunKBig() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/reifiedIsFunKBig.kt", this::doTest);
            }

            @TestMetadata("reifiedIsFunKSmall.kt")
            public void testReifiedIsFunKSmall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/reifiedIsFunKSmall.kt", this::doTest);
            }

            @TestMetadata("reifiedSafeAsFunKBig.kt")
            public void testReifiedSafeAsFunKBig() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/reifiedSafeAsFunKBig.kt", this::doTest);
            }

            @TestMetadata("reifiedSafeAsFunKSmall.kt")
            public void testReifiedSafeAsFunKSmall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/reifiedSafeAsFunKSmall.kt", this::doTest);
            }

            @TestMetadata("safeAsFunKBig.kt")
            public void testSafeAsFunKBig() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/safeAsFunKBig.kt", this::doTest);
            }

            @TestMetadata("safeAsFunKSmall.kt")
            public void testSafeAsFunKSmall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/functions/safeAsFunKSmall.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LiteralExpressionAsGenericArgument extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInLiteralExpressionAsGenericArgument() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("binaryExpressionCast.kt")
            public void testBinaryExpressionCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/binaryExpressionCast.kt", this::doTest);
            }

            @TestMetadata("javaBox.kt")
            public void testJavaBox() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/javaBox.kt", this::doTest);
            }

            @TestMetadata("labeledExpressionCast.kt")
            public void testLabeledExpressionCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/labeledExpressionCast.kt", this::doTest);
            }

            @TestMetadata("parenthesizedExpressionCast.kt")
            public void testParenthesizedExpressionCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/parenthesizedExpressionCast.kt", this::doTest);
            }

            @TestMetadata("superConstructor.kt")
            public void testSuperConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/superConstructor.kt", this::doTest);
            }

            @TestMetadata("unaryExpressionCast.kt")
            public void testUnaryExpressionCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/unaryExpressionCast.kt", this::doTest);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/vararg.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/casts/mutableCollections")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MutableCollections extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInMutableCollections() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/casts/mutableCollections"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("asWithMutable.kt")
            public void testAsWithMutable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/mutableCollections/asWithMutable.kt", this::doTest);
            }

            @TestMetadata("isWithMutable.kt")
            public void testIsWithMutable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/mutableCollections/isWithMutable.kt", this::doTest);
            }

            @TestMetadata("mutabilityMarkerInterfaces.kt")
            public void testMutabilityMarkerInterfaces() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/mutableCollections/mutabilityMarkerInterfaces.kt", this::doTest);
            }

            @TestMetadata("reifiedAsWithMutable.kt")
            public void testReifiedAsWithMutable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedAsWithMutable.kt", this::doTest);
            }

            @TestMetadata("reifiedIsWithMutable.kt")
            public void testReifiedIsWithMutable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedIsWithMutable.kt", this::doTest);
            }

            @TestMetadata("reifiedSafeAsWithMutable.kt")
            public void testReifiedSafeAsWithMutable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedSafeAsWithMutable.kt", this::doTest);
            }

            @TestMetadata("safeAsWithMutable.kt")
            public void testSafeAsWithMutable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/mutableCollections/safeAsWithMutable.kt", this::doTest);
            }

            @TestMetadata("weirdMutableCasts.kt")
            public void testWeirdMutableCasts() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/casts/mutableCollections/weirdMutableCasts.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/checkcastOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CheckcastOptimization extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInCheckcastOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/checkcastOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("kt19128.kt")
        public void testKt19128() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/checkcastOptimization/kt19128.kt", this::doTest);
        }

        @TestMetadata("kt19246.kt")
        public void testKt19246() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/checkcastOptimization/kt19246.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/classLiteral")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassLiteral extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInClassLiteral() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/classLiteral"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("primitiveKClassEquality.kt")
        public void testPrimitiveKClassEquality() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/primitiveKClassEquality.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/classLiteral/bound")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Bound extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInBound() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/classLiteral/bound"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("javaIntrinsicWithSideEffect.kt")
            public void testJavaIntrinsicWithSideEffect() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/bound/javaIntrinsicWithSideEffect.kt", this::doTest);
            }

            @TestMetadata("primitives.kt")
            public void testPrimitives() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/bound/primitives.kt", this::doTest);
            }

            @TestMetadata("sideEffect.kt")
            public void testSideEffect() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/bound/sideEffect.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/bound/simple.kt", this::doTest);
            }

            @TestMetadata("smartCast.kt")
            public void testSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/bound/smartCast.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/classLiteral/java")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Java extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInJava() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/classLiteral/java"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("java.kt")
            public void testJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/java/java.kt", this::doTest);
            }

            @TestMetadata("javaObjectType.kt")
            public void testJavaObjectType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/java/javaObjectType.kt", this::doTest);
            }

            @TestMetadata("javaObjectTypeReified.kt")
            public void testJavaObjectTypeReified() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/java/javaObjectTypeReified.kt", this::doTest);
            }

            @TestMetadata("javaPrimitiveType.kt")
            public void testJavaPrimitiveType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/java/javaPrimitiveType.kt", this::doTest);
            }

            @TestMetadata("javaPrimitiveTypeReified.kt")
            public void testJavaPrimitiveTypeReified() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/java/javaPrimitiveTypeReified.kt", this::doTest);
            }

            @TestMetadata("javaReified.kt")
            public void testJavaReified() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/java/javaReified.kt", this::doTest);
            }

            @TestMetadata("kt11943.kt")
            public void testKt11943() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/java/kt11943.kt", this::doTest);
            }

            @TestMetadata("objectSuperConstructorCall.kt")
            public void testObjectSuperConstructorCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classLiteral/java/objectSuperConstructorCall.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/classes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Classes extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/classes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("boxPrimitiveTypeInClinitOfClassObject.kt")
        public void testBoxPrimitiveTypeInClinitOfClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/boxPrimitiveTypeInClinitOfClassObject.kt", this::doTest);
        }

        @TestMetadata("classCompanionInitializationWithJava.kt")
        public void testClassCompanionInitializationWithJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classCompanionInitializationWithJava.kt", this::doTest);
        }

        @TestMetadata("classNamedAsOldPackageFacade.kt")
        public void testClassNamedAsOldPackageFacade() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classNamedAsOldPackageFacade.kt", this::doTest);
        }

        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObject.kt", this::doTest);
        }

        @TestMetadata("classObjectAsExtensionReceiver.kt")
        public void testClassObjectAsExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObjectAsExtensionReceiver.kt", this::doTest);
        }

        @TestMetadata("classObjectAsStaticInitializer.kt")
        public void testClassObjectAsStaticInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObjectAsStaticInitializer.kt", this::doTest);
        }

        @TestMetadata("classObjectField.kt")
        public void testClassObjectField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObjectField.kt", this::doTest);
        }

        @TestMetadata("classObjectInTrait.kt")
        public void testClassObjectInTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObjectInTrait.kt", this::doTest);
        }

        @TestMetadata("classObjectNotOfEnum.kt")
        public void testClassObjectNotOfEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObjectNotOfEnum.kt", this::doTest);
        }

        @TestMetadata("classObjectToString.kt")
        public void testClassObjectToString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObjectToString.kt", this::doTest);
        }

        @TestMetadata("classObjectWithPrivateGenericMember.kt")
        public void testClassObjectWithPrivateGenericMember() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObjectWithPrivateGenericMember.kt", this::doTest);
        }

        @TestMetadata("classObjectsWithParentClasses.kt")
        public void testClassObjectsWithParentClasses() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/classObjectsWithParentClasses.kt", this::doTest);
        }

        @TestMetadata("comanionObjectFieldVsClassField.kt")
        public void testComanionObjectFieldVsClassField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/comanionObjectFieldVsClassField.kt", this::doTest);
        }

        @TestMetadata("defaultObjectSameNamesAsInOuter.kt")
        public void testDefaultObjectSameNamesAsInOuter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/defaultObjectSameNamesAsInOuter.kt", this::doTest);
        }

        @TestMetadata("delegateConstructorCallWithKeywords.kt")
        public void testDelegateConstructorCallWithKeywords() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegateConstructorCallWithKeywords.kt", this::doTest);
        }

        @TestMetadata("delegation2.kt")
        public void testDelegation2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegation2.kt", this::doTest);
        }

        @TestMetadata("delegation3.kt")
        public void testDelegation3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegation3.kt", this::doTest);
        }

        @TestMetadata("delegation4.kt")
        public void testDelegation4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegation4.kt", this::doTest);
        }

        @TestMetadata("delegationGenericArg.kt")
        public void testDelegationGenericArg() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegationGenericArg.kt", this::doTest);
        }

        @TestMetadata("delegationGenericArgUpperBound.kt")
        public void testDelegationGenericArgUpperBound() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegationGenericArgUpperBound.kt", this::doTest);
        }

        @TestMetadata("delegationGenericLongArg.kt")
        public void testDelegationGenericLongArg() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegationGenericLongArg.kt", this::doTest);
        }

        @TestMetadata("delegationJava.kt")
        public void testDelegationJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegationJava.kt", this::doTest);
        }

        @TestMetadata("delegationMethodsWithArgs.kt")
        public void testDelegationMethodsWithArgs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/delegationMethodsWithArgs.kt", this::doTest);
        }

        @TestMetadata("exceptionConstructor.kt")
        public void testExceptionConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/exceptionConstructor.kt", this::doTest);
        }

        @TestMetadata("extensionOnNamedClassObject.kt")
        public void testExtensionOnNamedClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/extensionOnNamedClassObject.kt", this::doTest);
        }

        @TestMetadata("funDelegation.kt")
        public void testFunDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/funDelegation.kt", this::doTest);
        }

        @TestMetadata("implementComparableInSubclass.kt")
        public void testImplementComparableInSubclass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/implementComparableInSubclass.kt", this::doTest);
        }

        @TestMetadata("inheritSetAndHashSet.kt")
        public void testInheritSetAndHashSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inheritSetAndHashSet.kt", this::doTest);
        }

        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inheritance.kt", this::doTest);
        }

        @TestMetadata("inheritedInnerClass.kt")
        public void testInheritedInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inheritedInnerClass.kt", this::doTest);
        }

        @TestMetadata("inheritedMethod.kt")
        public void testInheritedMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inheritedMethod.kt", this::doTest);
        }

        @TestMetadata("initializerBlock.kt")
        public void testInitializerBlock() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/initializerBlock.kt", this::doTest);
        }

        @TestMetadata("initializerBlockDImpl.kt")
        public void testInitializerBlockDImpl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/initializerBlockDImpl.kt", this::doTest);
        }

        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/innerClass.kt", this::doTest);
        }

        @TestMetadata("interfaceCompanionInitializationWithJava.kt")
        public void testInterfaceCompanionInitializationWithJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/interfaceCompanionInitializationWithJava.kt", this::doTest);
        }

        @TestMetadata("kt1018.kt")
        public void testKt1018() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1018.kt", this::doTest);
        }

        @TestMetadata("kt1120.kt")
        public void testKt1120() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1120.kt", this::doTest);
        }

        @TestMetadata("kt1134.kt")
        public void testKt1134() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1134.kt", this::doTest);
        }

        @TestMetadata("kt1157.kt")
        public void testKt1157() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1157.kt", this::doTest);
        }

        @TestMetadata("kt1247.kt")
        public void testKt1247() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1247.kt", this::doTest);
        }

        @TestMetadata("kt1345.kt")
        public void testKt1345() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1345.kt", this::doTest);
        }

        @TestMetadata("kt1439.kt")
        public void testKt1439() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1439.kt", this::doTest);
        }

        @TestMetadata("kt1535.kt")
        public void testKt1535() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1535.kt", this::doTest);
        }

        @TestMetadata("kt1538.kt")
        public void testKt1538() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1538.kt", this::doTest);
        }

        @TestMetadata("kt1578.kt")
        public void testKt1578() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1578.kt", this::doTest);
        }

        @TestMetadata("kt1611.kt")
        public void testKt1611() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1611.kt", this::doTest);
        }

        @TestMetadata("kt1721.kt")
        public void testKt1721() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1721.kt", this::doTest);
        }

        @TestMetadata("kt1726.kt")
        public void testKt1726() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1726.kt", this::doTest);
        }

        @TestMetadata("kt1759.kt")
        public void testKt1759() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1759.kt", this::doTest);
        }

        @TestMetadata("kt1891.kt")
        public void testKt1891() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1891.kt", this::doTest);
        }

        @TestMetadata("kt1918.kt")
        public void testKt1918() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1918.kt", this::doTest);
        }

        @TestMetadata("kt1976.kt")
        public void testKt1976() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1976.kt", this::doTest);
        }

        @TestMetadata("kt1980.kt")
        public void testKt1980() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt1980.kt", this::doTest);
        }

        @TestMetadata("kt2224.kt")
        public void testKt2224() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2224.kt", this::doTest);
        }

        @TestMetadata("kt2288.kt")
        public void testKt2288() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2288.kt", this::doTest);
        }

        @TestMetadata("kt2384.kt")
        public void testKt2384() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2384.kt", this::doTest);
        }

        @TestMetadata("kt2390.kt")
        public void testKt2390() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2390.kt", this::doTest);
        }

        @TestMetadata("kt2391.kt")
        public void testKt2391() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2391.kt", this::doTest);
        }

        @TestMetadata("kt2395.kt")
        public void testKt2395() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2395.kt", this::doTest);
        }

        @TestMetadata("kt2417.kt")
        public void testKt2417() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2417.kt", this::doTest);
        }

        @TestMetadata("kt2477.kt")
        public void testKt2477() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2477.kt", this::doTest);
        }

        @TestMetadata("kt2480.kt")
        public void testKt2480() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2480.kt", this::doTest);
        }

        @TestMetadata("kt2482.kt")
        public void testKt2482() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2482.kt", this::doTest);
        }

        @TestMetadata("kt2485.kt")
        public void testKt2485() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2485.kt", this::doTest);
        }

        @TestMetadata("kt249.kt")
        public void testKt249() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt249.kt", this::doTest);
        }

        @TestMetadata("kt2532.kt")
        public void testKt2532() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2532.kt", this::doTest);
        }

        @TestMetadata("kt2566.kt")
        public void testKt2566() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2566.kt", this::doTest);
        }

        @TestMetadata("kt2566_2.kt")
        public void testKt2566_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2566_2.kt", this::doTest);
        }

        @TestMetadata("kt2607.kt")
        public void testKt2607() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2607.kt", this::doTest);
        }

        @TestMetadata("kt2626.kt")
        public void testKt2626() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2626.kt", this::doTest);
        }

        @TestMetadata("kt2711.kt")
        public void testKt2711() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2711.kt", this::doTest);
        }

        @TestMetadata("kt2784.kt")
        public void testKt2784() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt2784.kt", this::doTest);
        }

        @TestMetadata("kt285.kt")
        public void testKt285() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt285.kt", this::doTest);
        }

        @TestMetadata("kt3001.kt")
        public void testKt3001() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt3001.kt", this::doTest);
        }

        @TestMetadata("kt3114.kt")
        public void testKt3114() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt3114.kt", this::doTest);
        }

        @TestMetadata("kt3414.kt")
        public void testKt3414() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt3414.kt", this::doTest);
        }

        @TestMetadata("kt343.kt")
        public void testKt343() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt343.kt", this::doTest);
        }

        @TestMetadata("kt3546.kt")
        public void testKt3546() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt3546.kt", this::doTest);
        }

        @TestMetadata("kt454.kt")
        public void testKt454() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt454.kt", this::doTest);
        }

        @TestMetadata("kt471.kt")
        public void testKt471() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt471.kt", this::doTest);
        }

        @TestMetadata("kt48.kt")
        public void testKt48() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt48.kt", this::doTest);
        }

        @TestMetadata("kt496.kt")
        public void testKt496() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt496.kt", this::doTest);
        }

        @TestMetadata("kt500.kt")
        public void testKt500() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt500.kt", this::doTest);
        }

        @TestMetadata("kt501.kt")
        public void testKt501() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt501.kt", this::doTest);
        }

        @TestMetadata("kt504.kt")
        public void testKt504() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt504.kt", this::doTest);
        }

        @TestMetadata("kt508.kt")
        public void testKt508() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt508.kt", this::doTest);
        }

        @TestMetadata("kt5347.kt")
        public void testKt5347() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt5347.kt", this::doTest);
        }

        @TestMetadata("kt6136.kt")
        public void testKt6136() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt6136.kt", this::doTest);
        }

        @TestMetadata("kt633.kt")
        public void testKt633() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt633.kt", this::doTest);
        }

        @TestMetadata("kt6816.kt")
        public void testKt6816() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt6816.kt", this::doTest);
        }

        @TestMetadata("kt707.kt")
        public void testKt707() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt707.kt", this::doTest);
        }

        @TestMetadata("kt723.kt")
        public void testKt723() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt723.kt", this::doTest);
        }

        @TestMetadata("kt725.kt")
        public void testKt725() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt725.kt", this::doTest);
        }

        @TestMetadata("kt8011.kt")
        public void testKt8011() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt8011.kt", this::doTest);
        }

        @TestMetadata("kt8011a.kt")
        public void testKt8011a() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt8011a.kt", this::doTest);
        }

        @TestMetadata("kt903.kt")
        public void testKt903() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt903.kt", this::doTest);
        }

        @TestMetadata("kt940.kt")
        public void testKt940() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt940.kt", this::doTest);
        }

        @TestMetadata("kt9642.kt")
        public void testKt9642() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/kt9642.kt", this::doTest);
        }

        @TestMetadata("namedClassObject.kt")
        public void testNamedClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/namedClassObject.kt", this::doTest);
        }

        @TestMetadata("outerThis.kt")
        public void testOuterThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/outerThis.kt", this::doTest);
        }

        @TestMetadata("overloadBinaryOperator.kt")
        public void testOverloadBinaryOperator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/overloadBinaryOperator.kt", this::doTest);
        }

        @TestMetadata("overloadPlusAssign.kt")
        public void testOverloadPlusAssign() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/overloadPlusAssign.kt", this::doTest);
        }

        @TestMetadata("overloadPlusAssignReturn.kt")
        public void testOverloadPlusAssignReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/overloadPlusAssignReturn.kt", this::doTest);
        }

        @TestMetadata("overloadPlusToPlusAssign.kt")
        public void testOverloadPlusToPlusAssign() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/overloadPlusToPlusAssign.kt", this::doTest);
        }

        @TestMetadata("overloadUnaryOperator.kt")
        public void testOverloadUnaryOperator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/overloadUnaryOperator.kt", this::doTest);
        }

        @TestMetadata("privateOuterFunctions.kt")
        public void testPrivateOuterFunctions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/privateOuterFunctions.kt", this::doTest);
        }

        @TestMetadata("privateOuterProperty.kt")
        public void testPrivateOuterProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/privateOuterProperty.kt", this::doTest);
        }

        @TestMetadata("privateToThis.kt")
        public void testPrivateToThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/privateToThis.kt", this::doTest);
        }

        @TestMetadata("propertyDelegation.kt")
        public void testPropertyDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/propertyDelegation.kt", this::doTest);
        }

        @TestMetadata("propertyInInitializer.kt")
        public void testPropertyInInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/propertyInInitializer.kt", this::doTest);
        }

        @TestMetadata("quotedClassName.kt")
        public void testQuotedClassName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/quotedClassName.kt", this::doTest);
        }

        @TestMetadata("rightHandOverride.kt")
        public void testRightHandOverride() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/rightHandOverride.kt", this::doTest);
        }

        @TestMetadata("sealedInSameFile.kt")
        public void testSealedInSameFile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/sealedInSameFile.kt", this::doTest);
        }

        @TestMetadata("selfcreate.kt")
        public void testSelfcreate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/selfcreate.kt", this::doTest);
        }

        @TestMetadata("simpleBox.kt")
        public void testSimpleBox() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/simpleBox.kt", this::doTest);
        }

        @TestMetadata("superConstructorCallWithComplexArg.kt")
        public void testSuperConstructorCallWithComplexArg() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/superConstructorCallWithComplexArg.kt", this::doTest);
        }

        @TestMetadata("typedDelegation.kt")
        public void testTypedDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/typedDelegation.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/classes/inner")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inner extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInInner() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/classes/inner"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("instantiateInDerived.kt")
            public void testInstantiateInDerived() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inner/instantiateInDerived.kt", this::doTest);
            }

            @TestMetadata("instantiateInDerivedLabeled.kt")
            public void testInstantiateInDerivedLabeled() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inner/instantiateInDerivedLabeled.kt", this::doTest);
            }

            @TestMetadata("instantiateInSameClass.kt")
            public void testInstantiateInSameClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inner/instantiateInSameClass.kt", this::doTest);
            }

            @TestMetadata("kt6708.kt")
            public void testKt6708() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inner/kt6708.kt", this::doTest);
            }

            @TestMetadata("properOuter.kt")
            public void testProperOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inner/properOuter.kt", this::doTest);
            }

            @TestMetadata("properSuperLinking.kt")
            public void testProperSuperLinking() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/classes/inner/properSuperLinking.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/closures")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Closures extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInClosures() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/closures"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("captureExtensionReceiver.kt")
        public void testCaptureExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureExtensionReceiver.kt", this::doTest);
        }

        @TestMetadata("capturedLocalGenericFun.kt")
        public void testCapturedLocalGenericFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedLocalGenericFun.kt", this::doTest);
        }

        @TestMetadata("closureInsideConstrucor.kt")
        public void testClosureInsideConstrucor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureInsideConstrucor.kt", this::doTest);
        }

        @TestMetadata("closureOnTopLevel1.kt")
        public void testClosureOnTopLevel1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureOnTopLevel1.kt", this::doTest);
        }

        @TestMetadata("closureOnTopLevel2.kt")
        public void testClosureOnTopLevel2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureOnTopLevel2.kt", this::doTest);
        }

        @TestMetadata("closureWithParameter.kt")
        public void testClosureWithParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureWithParameter.kt", this::doTest);
        }

        @TestMetadata("closureWithParameterAndBoxing.kt")
        public void testClosureWithParameterAndBoxing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureWithParameterAndBoxing.kt", this::doTest);
        }

        @TestMetadata("doubleEnclosedLocalVariable.kt")
        public void testDoubleEnclosedLocalVariable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/doubleEnclosedLocalVariable.kt", this::doTest);
        }

        @TestMetadata("enclosingLocalVariable.kt")
        public void testEnclosingLocalVariable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/enclosingLocalVariable.kt", this::doTest);
        }

        @TestMetadata("enclosingThis.kt")
        public void testEnclosingThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/enclosingThis.kt", this::doTest);
        }

        @TestMetadata("extensionClosure.kt")
        public void testExtensionClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/extensionClosure.kt", this::doTest);
        }

        @TestMetadata("kt10044.kt")
        public void testKt10044() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt10044.kt", this::doTest);
        }

        @TestMetadata("kt11634.kt")
        public void testKt11634() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt11634.kt", this::doTest);
        }

        @TestMetadata("kt11634_2.kt")
        public void testKt11634_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt11634_2.kt", this::doTest);
        }

        @TestMetadata("kt11634_3.kt")
        public void testKt11634_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt11634_3.kt", this::doTest);
        }

        @TestMetadata("kt11634_4.kt")
        public void testKt11634_4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt11634_4.kt", this::doTest);
        }

        @TestMetadata("kt2151.kt")
        public void testKt2151() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt2151.kt", this::doTest);
        }

        @TestMetadata("kt3152.kt")
        public void testKt3152() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt3152.kt", this::doTest);
        }

        @TestMetadata("kt3523.kt")
        public void testKt3523() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt3523.kt", this::doTest);
        }

        @TestMetadata("kt3738.kt")
        public void testKt3738() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt3738.kt", this::doTest);
        }

        @TestMetadata("kt3905.kt")
        public void testKt3905() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt3905.kt", this::doTest);
        }

        @TestMetadata("kt4106.kt")
        public void testKt4106() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt4106.kt", this::doTest);
        }

        @TestMetadata("kt4137.kt")
        public void testKt4137() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt4137.kt", this::doTest);
        }

        @TestMetadata("kt5589.kt")
        public void testKt5589() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/kt5589.kt", this::doTest);
        }

        @TestMetadata("localClassFunClosure.kt")
        public void testLocalClassFunClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/localClassFunClosure.kt", this::doTest);
        }

        @TestMetadata("localClassLambdaClosure.kt")
        public void testLocalClassLambdaClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/localClassLambdaClosure.kt", this::doTest);
        }

        @TestMetadata("localFunctionInFunction.kt")
        public void testLocalFunctionInFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/localFunctionInFunction.kt", this::doTest);
        }

        @TestMetadata("localFunctionInInitializer.kt")
        public void testLocalFunctionInInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/localFunctionInInitializer.kt", this::doTest);
        }

        @TestMetadata("localGenericFun.kt")
        public void testLocalGenericFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/localGenericFun.kt", this::doTest);
        }

        @TestMetadata("localReturn.kt")
        public void testLocalReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/localReturn.kt", this::doTest);
        }

        @TestMetadata("localReturnWithAutolabel.kt")
        public void testLocalReturnWithAutolabel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/localReturnWithAutolabel.kt", this::doTest);
        }

        @TestMetadata("noRefToOuter.kt")
        public void testNoRefToOuter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/noRefToOuter.kt", this::doTest);
        }

        @TestMetadata("recursiveClosure.kt")
        public void testRecursiveClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/recursiveClosure.kt", this::doTest);
        }

        @TestMetadata("refsAreSerializable.kt")
        public void testRefsAreSerializable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/refsAreSerializable.kt", this::doTest);
        }

        @TestMetadata("simplestClosure.kt")
        public void testSimplestClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/simplestClosure.kt", this::doTest);
        }

        @TestMetadata("simplestClosureAndBoxing.kt")
        public void testSimplestClosureAndBoxing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/simplestClosureAndBoxing.kt", this::doTest);
        }

        @TestMetadata("subclosuresWithinInitializers.kt")
        public void testSubclosuresWithinInitializers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/subclosuresWithinInitializers.kt", this::doTest);
        }

        @TestMetadata("underscoreParameters.kt")
        public void testUnderscoreParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/underscoreParameters.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/closures/captureInSuperConstructorCall")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CaptureInSuperConstructorCall extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInCaptureInSuperConstructorCall() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/closures/captureInSuperConstructorCall"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("constructorParameterAndLocalCapturedInLambdaInLocalClass.kt")
            public void testConstructorParameterAndLocalCapturedInLambdaInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterAndLocalCapturedInLambdaInLocalClass.kt", this::doTest);
            }

            @TestMetadata("constructorParameterCapturedInLambdaInLocalClass.kt")
            public void testConstructorParameterCapturedInLambdaInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterCapturedInLambdaInLocalClass.kt", this::doTest);
            }

            @TestMetadata("constructorParameterCapturedInLambdaInLocalClass2.kt")
            public void testConstructorParameterCapturedInLambdaInLocalClass2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterCapturedInLambdaInLocalClass2.kt", this::doTest);
            }

            @TestMetadata("kt13454.kt")
            public void testKt13454() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt13454.kt", this::doTest);
            }

            @TestMetadata("kt14148.kt")
            public void testKt14148() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt14148.kt", this::doTest);
            }

            @TestMetadata("kt4174.kt")
            public void testKt4174() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt4174.kt", this::doTest);
            }

            @TestMetadata("kt4174a.kt")
            public void testKt4174a() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt4174a.kt", this::doTest);
            }

            @TestMetadata("localCapturedInAnonymousObjectInLocalClass.kt")
            public void testLocalCapturedInAnonymousObjectInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInAnonymousObjectInLocalClass.kt", this::doTest);
            }

            @TestMetadata("localCapturedInAnonymousObjectInLocalClass2.kt")
            public void testLocalCapturedInAnonymousObjectInLocalClass2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInAnonymousObjectInLocalClass2.kt", this::doTest);
            }

            @TestMetadata("localCapturedInLambdaInInnerClassInLocalClass.kt")
            public void testLocalCapturedInLambdaInInnerClassInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInLambdaInInnerClassInLocalClass.kt", this::doTest);
            }

            @TestMetadata("localCapturedInLambdaInLocalClass.kt")
            public void testLocalCapturedInLambdaInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInLambdaInLocalClass.kt", this::doTest);
            }

            @TestMetadata("localFunctionCapturedInLambda.kt")
            public void testLocalFunctionCapturedInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localFunctionCapturedInLambda.kt", this::doTest);
            }

            @TestMetadata("outerAndLocalCapturedInLocalClass.kt")
            public void testOuterAndLocalCapturedInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerAndLocalCapturedInLocalClass.kt", this::doTest);
            }

            @TestMetadata("outerCapturedAsImplicitThisInBoundReference.kt")
            public void testOuterCapturedAsImplicitThisInBoundReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedAsImplicitThisInBoundReference.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInFunctionLiteral.kt")
            public void testOuterCapturedInFunctionLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInFunctionLiteral.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInInlineLambda.kt")
            public void testOuterCapturedInInlineLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInInlineLambda.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInInlineLambda2.kt")
            public void testOuterCapturedInInlineLambda2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInInlineLambda2.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInLambda.kt")
            public void testOuterCapturedInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambda.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInLambda2.kt")
            public void testOuterCapturedInLambda2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambda2.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInLambdaInSecondaryConstructor.kt")
            public void testOuterCapturedInLambdaInSecondaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambdaInSecondaryConstructor.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInLambdaInSubExpression.kt")
            public void testOuterCapturedInLambdaInSubExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambdaInSubExpression.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInLocalClass.kt")
            public void testOuterCapturedInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLocalClass.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInNestedLambda.kt")
            public void testOuterCapturedInNestedLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInNestedLambda.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInNestedObject.kt")
            public void testOuterCapturedInNestedObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInNestedObject.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInObject.kt")
            public void testOuterCapturedInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInObject.kt", this::doTest);
            }

            @TestMetadata("outerCapturedInObject2.kt")
            public void testOuterCapturedInObject2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInObject2.kt", this::doTest);
            }

            @TestMetadata("outerEnumEntryCapturedInLambdaInInnerClass.kt")
            public void testOuterEnumEntryCapturedInLambdaInInnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerEnumEntryCapturedInLambdaInInnerClass.kt", this::doTest);
            }

            @TestMetadata("properValueCapturedByClosure1.kt")
            public void testProperValueCapturedByClosure1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/properValueCapturedByClosure1.kt", this::doTest);
            }

            @TestMetadata("properValueCapturedByClosure2.kt")
            public void testProperValueCapturedByClosure2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/properValueCapturedByClosure2.kt", this::doTest);
            }

            @TestMetadata("referenceToCapturedVariablesInMultipleLambdas.kt")
            public void testReferenceToCapturedVariablesInMultipleLambdas() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/referenceToCapturedVariablesInMultipleLambdas.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/closures/captureOuterProperty")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CaptureOuterProperty extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInCaptureOuterProperty() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/closures/captureOuterProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("captureFunctionInProperty.kt")
            public void testCaptureFunctionInProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureOuterProperty/captureFunctionInProperty.kt", this::doTest);
            }

            @TestMetadata("inFunction.kt")
            public void testInFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inFunction.kt", this::doTest);
            }

            @TestMetadata("inProperty.kt")
            public void testInProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inProperty.kt", this::doTest);
            }

            @TestMetadata("inPropertyDeepObjectChain.kt")
            public void testInPropertyDeepObjectChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyDeepObjectChain.kt", this::doTest);
            }

            @TestMetadata("inPropertyFromSuperClass.kt")
            public void testInPropertyFromSuperClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperClass.kt", this::doTest);
            }

            @TestMetadata("inPropertyFromSuperSuperClass.kt")
            public void testInPropertyFromSuperSuperClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperSuperClass.kt", this::doTest);
            }

            @TestMetadata("kt4176.kt")
            public void testKt4176() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureOuterProperty/kt4176.kt", this::doTest);
            }

            @TestMetadata("kt4656.kt")
            public void testKt4656() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/captureOuterProperty/kt4656.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/closures/capturedVarsOptimization")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CapturedVarsOptimization extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInCapturedVarsOptimization() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/closures/capturedVarsOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("capturedInCrossinline.kt")
            public void testCapturedInCrossinline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInCrossinline.kt", this::doTest);
            }

            @TestMetadata("capturedInInlineOnlyAssign.kt")
            public void testCapturedInInlineOnlyAssign() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyAssign.kt", this::doTest);
            }

            @TestMetadata("capturedInInlineOnlyCAO.kt")
            public void testCapturedInInlineOnlyCAO() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyCAO.kt", this::doTest);
            }

            @TestMetadata("capturedInInlineOnlyIncrDecr.kt")
            public void testCapturedInInlineOnlyIncrDecr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyIncrDecr.kt", this::doTest);
            }

            @TestMetadata("capturedInInlineOnlyIndexedCAO.kt")
            public void testCapturedInInlineOnlyIndexedCAO() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyIndexedCAO.kt", this::doTest);
            }

            @TestMetadata("capturedVarsOfSize2.kt")
            public void testCapturedVarsOfSize2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedVarsOfSize2.kt", this::doTest);
            }

            @TestMetadata("kt17200.kt")
            public void testKt17200() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt17200.kt", this::doTest);
            }

            @TestMetadata("kt17588.kt")
            public void testKt17588() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt17588.kt", this::doTest);
            }

            @TestMetadata("sharedSlotsWithCapturedVars.kt")
            public void testSharedSlotsWithCapturedVars() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/sharedSlotsWithCapturedVars.kt", this::doTest);
            }

            @TestMetadata("withCoroutines.kt")
            public void testWithCoroutines() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/withCoroutines.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/closures/closureInsideClosure")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClosureInsideClosure extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInClosureInsideClosure() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/closures/closureInsideClosure"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("localFunInsideLocalFun.kt")
            public void testLocalFunInsideLocalFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFun.kt", this::doTest);
            }

            @TestMetadata("localFunInsideLocalFunDifferentSignatures.kt")
            public void testLocalFunInsideLocalFunDifferentSignatures() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFunDifferentSignatures.kt", this::doTest);
            }

            @TestMetadata("propertyAndFunctionNameClash.kt")
            public void testPropertyAndFunctionNameClash() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureInsideClosure/propertyAndFunctionNameClash.kt", this::doTest);
            }

            @TestMetadata("threeLevels.kt")
            public void testThreeLevels() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevels.kt", this::doTest);
            }

            @TestMetadata("threeLevelsDifferentSignatures.kt")
            public void testThreeLevelsDifferentSignatures() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevelsDifferentSignatures.kt", this::doTest);
            }

            @TestMetadata("varAsFunInsideLocalFun.kt")
            public void testVarAsFunInsideLocalFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/closures/closureInsideClosure/varAsFunInsideLocalFun.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/collectionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CollectionLiterals extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInCollectionLiterals() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/collectionLiterals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("collectionLiteralsInArgumentPosition.kt")
        public void testCollectionLiteralsInArgumentPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsInArgumentPosition.kt", this::doTest);
        }

        @TestMetadata("collectionLiteralsWithConstants.kt")
        public void testCollectionLiteralsWithConstants() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsWithConstants.kt", this::doTest);
        }

        @TestMetadata("collectionLiteralsWithVarargs.kt")
        public void testCollectionLiteralsWithVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsWithVarargs.kt", this::doTest);
        }

        @TestMetadata("defaultAnnotationParameterValues.kt")
        public void testDefaultAnnotationParameterValues() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collectionLiterals/defaultAnnotationParameterValues.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/collections")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Collections extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInCollections() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/collections"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("charSequence.kt")
        public void testCharSequence() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/charSequence.kt", this::doTest);
        }

        @TestMetadata("implementCollectionThroughKotlin.kt")
        public void testImplementCollectionThroughKotlin() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/implementCollectionThroughKotlin.kt", this::doTest);
        }

        @TestMetadata("inSetWithSmartCast.kt")
        public void testInSetWithSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/inSetWithSmartCast.kt", this::doTest);
        }

        @TestMetadata("irrelevantImplCharSequence.kt")
        public void testIrrelevantImplCharSequence() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/irrelevantImplCharSequence.kt", this::doTest);
        }

        @TestMetadata("irrelevantImplCharSequenceKotlin.kt")
        public void testIrrelevantImplCharSequenceKotlin() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/irrelevantImplCharSequenceKotlin.kt", this::doTest);
        }

        @TestMetadata("irrelevantImplMutableList.kt")
        public void testIrrelevantImplMutableList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableList.kt", this::doTest);
        }

        @TestMetadata("irrelevantImplMutableListKotlin.kt")
        public void testIrrelevantImplMutableListKotlin() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableListKotlin.kt", this::doTest);
        }

        @TestMetadata("irrelevantImplMutableListSubstitution.kt")
        public void testIrrelevantImplMutableListSubstitution() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableListSubstitution.kt", this::doTest);
        }

        @TestMetadata("irrelevantRemoveAtOverrideInJava.kt")
        public void testIrrelevantRemoveAtOverrideInJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/irrelevantRemoveAtOverrideInJava.kt", this::doTest);
        }

        @TestMetadata("irrelevantSizeOverrideInJava.kt")
        public void testIrrelevantSizeOverrideInJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/irrelevantSizeOverrideInJava.kt", this::doTest);
        }

        @TestMetadata("mutableList.kt")
        public void testMutableList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/mutableList.kt", this::doTest);
        }

        @TestMetadata("noStubsInJavaSuperClass.kt")
        public void testNoStubsInJavaSuperClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/noStubsInJavaSuperClass.kt", this::doTest);
        }

        @TestMetadata("platformValueContains.kt")
        public void testPlatformValueContains() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/platformValueContains.kt", this::doTest);
        }

        @TestMetadata("readOnlyList.kt")
        public void testReadOnlyList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/readOnlyList.kt", this::doTest);
        }

        @TestMetadata("readOnlyMap.kt")
        public void testReadOnlyMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/readOnlyMap.kt", this::doTest);
        }

        @TestMetadata("removeAtInt.kt")
        public void testRemoveAtInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/removeAtInt.kt", this::doTest);
        }

        @TestMetadata("strList.kt")
        public void testStrList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/strList.kt", this::doTest);
        }

        @TestMetadata("toArrayInJavaClass.kt")
        public void testToArrayInJavaClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/collections/toArrayInJavaClass.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/compatibility")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Compatibility extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInCompatibility() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/compatibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("dataClassEqualsHashCodeToString.kt")
        public void testDataClassEqualsHashCodeToString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/compatibility/dataClassEqualsHashCodeToString.kt", this::doTest);
        }

        @TestMetadata("privateCompanionObject.kt")
        public void testPrivateCompanionObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/compatibility/privateCompanionObject.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/constants")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constants extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInConstants() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/constants"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("constantsInWhen.kt")
        public void testConstantsInWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constants/constantsInWhen.kt", this::doTest);
        }

        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constants/float.kt", this::doTest);
        }

        @TestMetadata("kt9532.kt")
        public void testKt9532() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constants/kt9532.kt", this::doTest);
        }

        @TestMetadata("kt9532_lv10.kt")
        public void testKt9532_lv10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constants/kt9532_lv10.kt", this::doTest);
        }

        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constants/long.kt", this::doTest);
        }

        @TestMetadata("privateConst.kt")
        public void testPrivateConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constants/privateConst.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/constructorCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConstructorCall extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInConstructorCall() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/constructorCall"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("breakInConstructorArguments.kt")
        public void testBreakInConstructorArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/breakInConstructorArguments.kt", this::doTest);
        }

        @TestMetadata("continueInConstructorArguments.kt")
        public void testContinueInConstructorArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/continueInConstructorArguments.kt", this::doTest);
        }

        @TestMetadata("earlyReturnInConstructorArguments.kt")
        public void testEarlyReturnInConstructorArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/earlyReturnInConstructorArguments.kt", this::doTest);
        }

        @TestMetadata("inlineFunInConstructorCallEvaluationOrder.kt")
        public void testInlineFunInConstructorCallEvaluationOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallEvaluationOrder.kt", this::doTest);
        }

        @TestMetadata("inlineFunInConstructorCallWithDisabledNormalization.kt")
        public void testInlineFunInConstructorCallWithDisabledNormalization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallWithDisabledNormalization.kt", this::doTest);
        }

        @TestMetadata("inlineFunInConstructorCallWithEnabledNormalization.kt")
        public void testInlineFunInConstructorCallWithEnabledNormalization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallWithEnabledNormalization.kt", this::doTest);
        }

        @TestMetadata("inlineFunInConstructorCallWithStrictNormalization.kt")
        public void testInlineFunInConstructorCallWithStrictNormalization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallWithStrictNormalization.kt", this::doTest);
        }

        @TestMetadata("inlineFunInInnerClassConstructorCall.kt")
        public void testInlineFunInInnerClassConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/inlineFunInInnerClassConstructorCall.kt", this::doTest);
        }

        @TestMetadata("inlineFunInLocalClassConstructorCall.kt")
        public void testInlineFunInLocalClassConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/inlineFunInLocalClassConstructorCall.kt", this::doTest);
        }

        @TestMetadata("loopInInlineFunInSuperConstructorCallWithEnabledNormalization.kt")
        public void testLoopInInlineFunInSuperConstructorCallWithEnabledNormalization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/loopInInlineFunInSuperConstructorCallWithEnabledNormalization.kt", this::doTest);
        }

        @TestMetadata("loopInInlineFunWithEnabledNormalization.kt")
        public void testLoopInInlineFunWithEnabledNormalization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/loopInInlineFunWithEnabledNormalization.kt", this::doTest);
        }

        @TestMetadata("nestedConstructorCallWithJumpOutInConstructorArguments.kt")
        public void testNestedConstructorCallWithJumpOutInConstructorArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/nestedConstructorCallWithJumpOutInConstructorArguments.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnInConstructorArguments.kt")
        public void testNonLocalReturnInConstructorArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/nonLocalReturnInConstructorArguments.kt", this::doTest);
        }

        @TestMetadata("possiblyPoppedUnitializedValueInArguments.kt")
        public void testPossiblyPoppedUnitializedValueInArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/possiblyPoppedUnitializedValueInArguments.kt", this::doTest);
        }

        @TestMetadata("regularConstructorCallEvaluationOrder.kt")
        public void testRegularConstructorCallEvaluationOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/regularConstructorCallEvaluationOrder.kt", this::doTest);
        }

        @TestMetadata("tryCatchInConstructorCallEvaluationOrder.kt")
        public void testTryCatchInConstructorCallEvaluationOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/constructorCall/tryCatchInConstructorCallEvaluationOrder.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ControlStructures extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInControlStructures() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("bottles.kt")
        public void testBottles() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/bottles.kt", this::doTest);
        }

        @TestMetadata("breakInFinally.kt")
        public void testBreakInFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakInFinally.kt", this::doTest);
        }

        @TestMetadata("compareBoxedIntegerToZero.kt")
        public void testCompareBoxedIntegerToZero() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/compareBoxedIntegerToZero.kt", this::doTest);
        }

        @TestMetadata("conditionOfEmptyIf.kt")
        public void testConditionOfEmptyIf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/conditionOfEmptyIf.kt", this::doTest);
        }

        @TestMetadata("continueInExpr.kt")
        public void testContinueInExpr() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/continueInExpr.kt", this::doTest);
        }

        @TestMetadata("continueInFor.kt")
        public void testContinueInFor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/continueInFor.kt", this::doTest);
        }

        @TestMetadata("continueInForCondition.kt")
        public void testContinueInForCondition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/continueInForCondition.kt", this::doTest);
        }

        @TestMetadata("continueInWhile.kt")
        public void testContinueInWhile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/continueInWhile.kt", this::doTest);
        }

        @TestMetadata("continueToLabelInFor.kt")
        public void testContinueToLabelInFor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/continueToLabelInFor.kt", this::doTest);
        }

        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/doWhile.kt", this::doTest);
        }

        @TestMetadata("doWhileFib.kt")
        public void testDoWhileFib() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/doWhileFib.kt", this::doTest);
        }

        @TestMetadata("doWhileWithContinue.kt")
        public void testDoWhileWithContinue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/doWhileWithContinue.kt", this::doTest);
        }

        @TestMetadata("emptyDoWhile.kt")
        public void testEmptyDoWhile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/emptyDoWhile.kt", this::doTest);
        }

        @TestMetadata("emptyFor.kt")
        public void testEmptyFor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/emptyFor.kt", this::doTest);
        }

        @TestMetadata("emptyWhile.kt")
        public void testEmptyWhile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/emptyWhile.kt", this::doTest);
        }

        @TestMetadata("factorialTest.kt")
        public void testFactorialTest() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/factorialTest.kt", this::doTest);
        }

        @TestMetadata("finallyOnEmptyReturn.kt")
        public void testFinallyOnEmptyReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/finallyOnEmptyReturn.kt", this::doTest);
        }

        @TestMetadata("forArrayList.kt")
        public void testForArrayList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forArrayList.kt", this::doTest);
        }

        @TestMetadata("forArrayListMultiDecl.kt")
        public void testForArrayListMultiDecl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forArrayListMultiDecl.kt", this::doTest);
        }

        @TestMetadata("forInCharSequence.kt")
        public void testForInCharSequence() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequence.kt", this::doTest);
        }

        @TestMetadata("forInCharSequenceMut.kt")
        public void testForInCharSequenceMut() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceMut.kt", this::doTest);
        }

        @TestMetadata("forInSmartCastToArray.kt")
        public void testForInSmartCastToArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInSmartCastToArray.kt", this::doTest);
        }

        @TestMetadata("forLoopMemberExtensionAll.kt")
        public void testForLoopMemberExtensionAll() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionAll.kt", this::doTest);
        }

        @TestMetadata("forLoopMemberExtensionHasNext.kt")
        public void testForLoopMemberExtensionHasNext() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionHasNext.kt", this::doTest);
        }

        @TestMetadata("forLoopMemberExtensionNext.kt")
        public void testForLoopMemberExtensionNext() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionNext.kt", this::doTest);
        }

        @TestMetadata("forUserType.kt")
        public void testForUserType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forUserType.kt", this::doTest);
        }

        @TestMetadata("inRangeConditionsInWhen.kt")
        public void testInRangeConditionsInWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/inRangeConditionsInWhen.kt", this::doTest);
        }

        @TestMetadata("kt12908.kt")
        public void testKt12908() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt12908.kt", this::doTest);
        }

        @TestMetadata("kt12908_2.kt")
        public void testKt12908_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt12908_2.kt", this::doTest);
        }

        @TestMetadata("kt1441.kt")
        public void testKt1441() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt1441.kt", this::doTest);
        }

        @TestMetadata("kt14839.kt")
        public void testKt14839() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt14839.kt", this::doTest);
        }

        @TestMetadata("kt15726.kt")
        public void testKt15726() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt15726.kt", this::doTest);
        }

        @TestMetadata("kt1688.kt")
        public void testKt1688() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt1688.kt", this::doTest);
        }

        @TestMetadata("kt17110.kt")
        public void testKt17110() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt17110.kt", this::doTest);
        }

        @TestMetadata("kt1742.kt")
        public void testKt1742() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt1742.kt", this::doTest);
        }

        @TestMetadata("kt17590.kt")
        public void testKt17590() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt17590.kt", this::doTest);
        }

        @TestMetadata("kt17590_long.kt")
        public void testKt17590_long() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt17590_long.kt", this::doTest);
        }

        @TestMetadata("kt1899.kt")
        public void testKt1899() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt1899.kt", this::doTest);
        }

        @TestMetadata("kt2147.kt")
        public void testKt2147() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt2147.kt", this::doTest);
        }

        @TestMetadata("kt2259.kt")
        public void testKt2259() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt2259.kt", this::doTest);
        }

        @TestMetadata("kt2291.kt")
        public void testKt2291() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt2291.kt", this::doTest);
        }

        @TestMetadata("kt237.kt")
        public void testKt237() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt237.kt", this::doTest);
        }

        @TestMetadata("kt2416.kt")
        public void testKt2416() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt2416.kt", this::doTest);
        }

        @TestMetadata("kt2423.kt")
        public void testKt2423() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt2423.kt", this::doTest);
        }

        @TestMetadata("kt2577.kt")
        public void testKt2577() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt2577.kt", this::doTest);
        }

        @TestMetadata("kt2597.kt")
        public void testKt2597() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt2597.kt", this::doTest);
        }

        @TestMetadata("kt299.kt")
        public void testKt299() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt299.kt", this::doTest);
        }

        @TestMetadata("kt3087.kt")
        public void testKt3087() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt3087.kt", this::doTest);
        }

        @TestMetadata("kt3203_1.kt")
        public void testKt3203_1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt3203_1.kt", this::doTest);
        }

        @TestMetadata("kt3203_2.kt")
        public void testKt3203_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt3203_2.kt", this::doTest);
        }

        @TestMetadata("kt3273.kt")
        public void testKt3273() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt3273.kt", this::doTest);
        }

        @TestMetadata("kt3280.kt")
        public void testKt3280() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt3280.kt", this::doTest);
        }

        @TestMetadata("kt3574.kt")
        public void testKt3574() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt3574.kt", this::doTest);
        }

        @TestMetadata("kt416.kt")
        public void testKt416() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt416.kt", this::doTest);
        }

        @TestMetadata("kt513.kt")
        public void testKt513() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt513.kt", this::doTest);
        }

        @TestMetadata("kt628.kt")
        public void testKt628() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt628.kt", this::doTest);
        }

        @TestMetadata("kt769.kt")
        public void testKt769() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt769.kt", this::doTest);
        }

        @TestMetadata("kt772.kt")
        public void testKt772() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt772.kt", this::doTest);
        }

        @TestMetadata("kt773.kt")
        public void testKt773() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt773.kt", this::doTest);
        }

        @TestMetadata("kt8148.kt")
        public void testKt8148() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt8148.kt", this::doTest);
        }

        @TestMetadata("kt8148_break.kt")
        public void testKt8148_break() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt8148_break.kt", this::doTest);
        }

        @TestMetadata("kt8148_continue.kt")
        public void testKt8148_continue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt8148_continue.kt", this::doTest);
        }

        @TestMetadata("kt870.kt")
        public void testKt870() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt870.kt", this::doTest);
        }

        @TestMetadata("kt9022Return.kt")
        public void testKt9022Return() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt9022Return.kt", this::doTest);
        }

        @TestMetadata("kt9022Throw.kt")
        public void testKt9022Throw() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt9022Throw.kt", this::doTest);
        }

        @TestMetadata("kt910.kt")
        public void testKt910() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt910.kt", this::doTest);
        }

        @TestMetadata("kt958.kt")
        public void testKt958() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/kt958.kt", this::doTest);
        }

        @TestMetadata("longRange.kt")
        public void testLongRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/longRange.kt", this::doTest);
        }

        @TestMetadata("parameterWithNameForFunctionType.kt")
        public void testParameterWithNameForFunctionType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/parameterWithNameForFunctionType.kt", this::doTest);
        }

        @TestMetadata("quicksort.kt")
        public void testQuicksort() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/quicksort.kt", this::doTest);
        }

        @TestMetadata("tryCatchFinallyChain.kt")
        public void testTryCatchFinallyChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchFinallyChain.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class BreakContinueInExpressions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInBreakContinueInExpressions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("breakFromOuter.kt")
            public void testBreakFromOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakFromOuter.kt", this::doTest);
            }

            @TestMetadata("breakInDoWhile.kt")
            public void testBreakInDoWhile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInDoWhile.kt", this::doTest);
            }

            @TestMetadata("breakInExpr.kt")
            public void testBreakInExpr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInExpr.kt", this::doTest);
            }

            @TestMetadata("continueInDoWhile.kt")
            public void testContinueInDoWhile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/continueInDoWhile.kt", this::doTest);
            }

            @TestMetadata("continueInExpr.kt")
            public void testContinueInExpr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/continueInExpr.kt", this::doTest);
            }

            @TestMetadata("inlineWithStack.kt")
            public void testInlineWithStack() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlineWithStack.kt", this::doTest);
            }

            @TestMetadata("innerLoopWithStack.kt")
            public void testInnerLoopWithStack() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/innerLoopWithStack.kt", this::doTest);
            }

            @TestMetadata("kt14581.kt")
            public void testKt14581() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt14581.kt", this::doTest);
            }

            @TestMetadata("kt16713.kt")
            public void testKt16713() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt16713.kt", this::doTest);
            }

            @TestMetadata("kt16713_2.kt")
            public void testKt16713_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt16713_2.kt", this::doTest);
            }

            @TestMetadata("kt17384.kt")
            public void testKt17384() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt17384.kt", this::doTest);
            }

            @TestMetadata("kt9022And.kt")
            public void testKt9022And() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt9022And.kt", this::doTest);
            }

            @TestMetadata("kt9022Or.kt")
            public void testKt9022Or() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt9022Or.kt", this::doTest);
            }

            @TestMetadata("pathologicalDoWhile.kt")
            public void testPathologicalDoWhile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/pathologicalDoWhile.kt", this::doTest);
            }

            @TestMetadata("popSizes.kt")
            public void testPopSizes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/popSizes.kt", this::doTest);
            }

            @TestMetadata("tryFinally1.kt")
            public void testTryFinally1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/tryFinally1.kt", this::doTest);
            }

            @TestMetadata("tryFinally2.kt")
            public void testTryFinally2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/tryFinally2.kt", this::doTest);
            }

            @TestMetadata("whileTrueBreak.kt")
            public void testWhileTrueBreak() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/whileTrueBreak.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInArray")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInArray extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInArray() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInArray"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInArraySpecializedToUntil.kt")
            public void testForInArraySpecializedToUntil() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArraySpecializedToUntil.kt", this::doTest);
            }

            @TestMetadata("forInArrayWithArrayPropertyUpdatedInLoopBody.kt")
            public void testForInArrayWithArrayPropertyUpdatedInLoopBody() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayPropertyUpdatedInLoopBody.kt", this::doTest);
            }

            @TestMetadata("forInArrayWithArrayVarUpdatedInLoopBody12.kt")
            public void testForInArrayWithArrayVarUpdatedInLoopBody12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayVarUpdatedInLoopBody12.kt", this::doTest);
            }

            @TestMetadata("forInArrayWithArrayVarUpdatedInLoopBody13.kt")
            public void testForInArrayWithArrayVarUpdatedInLoopBody13() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayVarUpdatedInLoopBody13.kt", this::doTest);
            }

            @TestMetadata("forInDelegatedPropertyUpdatedInLoopBody.kt")
            public void testForInDelegatedPropertyUpdatedInLoopBody() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInDelegatedPropertyUpdatedInLoopBody.kt", this::doTest);
            }

            @TestMetadata("forInFieldUpdatedInLoopBody.kt")
            public void testForInFieldUpdatedInLoopBody() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInFieldUpdatedInLoopBody.kt", this::doTest);
            }

            @TestMetadata("forIntArray.kt")
            public void testForIntArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forIntArray.kt", this::doTest);
            }

            @TestMetadata("forNullableIntArray.kt")
            public void testForNullableIntArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forNullableIntArray.kt", this::doTest);
            }

            @TestMetadata("forPrimitiveIntArray.kt")
            public void testForPrimitiveIntArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArray/forPrimitiveIntArray.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInArrayWithIndex extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInArrayWithIndex() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInArrayWithIndexContinuesAsUnmodified.kt")
            public void testForInArrayWithIndexContinuesAsUnmodified() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexContinuesAsUnmodified.kt", this::doTest);
            }

            @TestMetadata("forInArrrayWithIndexNoElementVar.kt")
            public void testForInArrrayWithIndexNoElementVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrrayWithIndexNoElementVar.kt", this::doTest);
            }

            @TestMetadata("forInArrrayWithIndexNoIndexVar.kt")
            public void testForInArrrayWithIndexNoIndexVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrrayWithIndexNoIndexVar.kt", this::doTest);
            }

            @TestMetadata("forInArrrayWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInArrrayWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrrayWithIndexWithExplicitlyTypedIndexVariable.kt", this::doTest);
            }

            @TestMetadata("forInByteArrayWithIndexWithSmartCast.kt")
            public void testForInByteArrayWithIndexWithSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInByteArrayWithIndexWithSmartCast.kt", this::doTest);
            }

            @TestMetadata("forInByteArrrayWithIndex.kt")
            public void testForInByteArrrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInByteArrrayWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInEmptyArrrayWithIndex.kt")
            public void testForInEmptyArrrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInEmptyArrrayWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInGenericArrayOfIntsWithIndex.kt")
            public void testForInGenericArrayOfIntsWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayOfIntsWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInGenericArrayOfIntsWithIndexWithSmartCast.kt")
            public void testForInGenericArrayOfIntsWithIndexWithSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayOfIntsWithIndexWithSmartCast.kt", this::doTest);
            }

            @TestMetadata("forInGenericArrayWithIndex.kt")
            public void testForInGenericArrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInIntArrayWithIndexWithSmartCast.kt")
            public void testForInIntArrayWithIndexWithSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInIntArrayWithIndexWithSmartCast.kt", this::doTest);
            }

            @TestMetadata("forInIntArrrayWithIndex.kt")
            public void testForInIntArrrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInIntArrrayWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInObjectArrrayWithIndex.kt")
            public void testForInObjectArrrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInObjectArrrayWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInShortArrayWithIndexWithSmartCast.kt")
            public void testForInShortArrayWithIndexWithSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInShortArrayWithIndexWithSmartCast.kt", this::doTest);
            }

            @TestMetadata("forInShortArrrayWithIndex.kt")
            public void testForInShortArrrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInShortArrrayWithIndex.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInCharSequenceWithIndex extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInCharSequenceWithIndex() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInCharSeqWithIndexStops.kt")
            public void testForInCharSeqWithIndexStops() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSeqWithIndexStops.kt", this::doTest);
            }

            @TestMetadata("forInCharSequenceWithIndex.kt")
            public void testForInCharSequenceWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInEmptyStringWithIndex.kt")
            public void testForInEmptyStringWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInEmptyStringWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInStringWithIndex.kt")
            public void testForInStringWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInStringWithIndexNoElementVar.kt")
            public void testForInStringWithIndexNoElementVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoElementVar.kt", this::doTest);
            }

            @TestMetadata("forInStringWithIndexNoIndexVar.kt")
            public void testForInStringWithIndexNoIndexVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoIndexVar.kt", this::doTest);
            }

            @TestMetadata("forInStringWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInStringWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexWithExplicitlyTypedIndexVariable.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInIterableWithIndex extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInIterableWithIndex() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInEmptyListWithIndex.kt")
            public void testForInEmptyListWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInEmptyListWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndex.kt")
            public void testForInListWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndexNoElementVar.kt")
            public void testForInListWithIndexNoElementVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexNoElementVar.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndexNoIndexVar.kt")
            public void testForInListWithIndexNoIndexVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexNoIndexVar.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndexThrowsCME.kt")
            public void testForInListWithIndexThrowsCME() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexThrowsCME.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInListWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexWithExplicitlyTypedIndexVariable.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInSequenceWithIndex extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInSequenceWithIndex() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInEmptySequenceWithIndex.kt")
            public void testForInEmptySequenceWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInEmptySequenceWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndex.kt")
            public void testForInSequenceWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndexNoElementVar.kt")
            public void testForInSequenceWithIndexNoElementVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoElementVar.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndexNoIndexVar.kt")
            public void testForInSequenceWithIndexNoIndexVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoIndexVar.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndexThrowsCME.kt")
            public void testForInSequenceWithIndexThrowsCME() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexThrowsCME.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInSequenceWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/controlStructures/returnsNothing")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ReturnsNothing extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInReturnsNothing() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/returnsNothing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("ifElse.kt")
            public void testIfElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/ifElse.kt", this::doTest);
            }

            @TestMetadata("inlineMethod.kt")
            public void testInlineMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/inlineMethod.kt", this::doTest);
            }

            @TestMetadata("propertyGetter.kt")
            public void testPropertyGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/propertyGetter.kt", this::doTest);
            }

            @TestMetadata("tryCatch.kt")
            public void testTryCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/tryCatch.kt", this::doTest);
            }

            @TestMetadata("when.kt")
            public void testWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/when.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TryCatchInExpressions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInTryCatchInExpressions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("catch.kt")
            public void testCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/catch.kt", this::doTest);
            }

            @TestMetadata("complexChain.kt")
            public void testComplexChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/complexChain.kt", this::doTest);
            }

            @TestMetadata("deadTryCatch.kt")
            public void testDeadTryCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/deadTryCatch.kt", this::doTest);
            }

            @TestMetadata("differentTypes.kt")
            public void testDifferentTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/differentTypes.kt", this::doTest);
            }

            @TestMetadata("expectException.kt")
            public void testExpectException() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/expectException.kt", this::doTest);
            }

            @TestMetadata("finally.kt")
            public void testFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/finally.kt", this::doTest);
            }

            @TestMetadata("inlineTryCatch.kt")
            public void testInlineTryCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryCatch.kt", this::doTest);
            }

            @TestMetadata("inlineTryExpr.kt")
            public void testInlineTryExpr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryExpr.kt", this::doTest);
            }

            @TestMetadata("inlineTryFinally.kt")
            public void testInlineTryFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryFinally.kt", this::doTest);
            }

            @TestMetadata("kt17572.kt")
            public void testKt17572() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572.kt", this::doTest);
            }

            @TestMetadata("kt17572_2.kt")
            public void testKt17572_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_2.kt", this::doTest);
            }

            @TestMetadata("kt17572_2_ext.kt")
            public void testKt17572_2_ext() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_2_ext.kt", this::doTest);
            }

            @TestMetadata("kt17572_ext.kt")
            public void testKt17572_ext() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_ext.kt", this::doTest);
            }

            @TestMetadata("kt17572_nested.kt")
            public void testKt17572_nested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_nested.kt", this::doTest);
            }

            @TestMetadata("kt17573.kt")
            public void testKt17573() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17573.kt", this::doTest);
            }

            @TestMetadata("kt17573_nested.kt")
            public void testKt17573_nested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17573_nested.kt", this::doTest);
            }

            @TestMetadata("kt8608.kt")
            public void testKt8608() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt8608.kt", this::doTest);
            }

            @TestMetadata("kt9644try.kt")
            public void testKt9644try() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt9644try.kt", this::doTest);
            }

            @TestMetadata("multipleCatchBlocks.kt")
            public void testMultipleCatchBlocks() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/multipleCatchBlocks.kt", this::doTest);
            }

            @TestMetadata("splitTry.kt")
            public void testSplitTry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/splitTry.kt", this::doTest);
            }

            @TestMetadata("splitTryCorner1.kt")
            public void testSplitTryCorner1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/splitTryCorner1.kt", this::doTest);
            }

            @TestMetadata("splitTryCorner2.kt")
            public void testSplitTryCorner2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/splitTryCorner2.kt", this::doTest);
            }

            @TestMetadata("try.kt")
            public void testTry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/try.kt", this::doTest);
            }

            @TestMetadata("tryAfterTry.kt")
            public void testTryAfterTry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAfterTry.kt", this::doTest);
            }

            @TestMetadata("tryAndBreak.kt")
            public void testTryAndBreak() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAndBreak.kt", this::doTest);
            }

            @TestMetadata("tryAndContinue.kt")
            public void testTryAndContinue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAndContinue.kt", this::doTest);
            }

            @TestMetadata("tryCatchAfterWhileTrue.kt")
            public void testTryCatchAfterWhileTrue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryCatchAfterWhileTrue.kt", this::doTest);
            }

            @TestMetadata("tryInsideCatch.kt")
            public void testTryInsideCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryInsideCatch.kt", this::doTest);
            }

            @TestMetadata("tryInsideTry.kt")
            public void testTryInsideTry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryInsideTry.kt", this::doTest);
            }

            @TestMetadata("unmatchedInlineMarkers.kt")
            public void testUnmatchedInlineMarkers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/unmatchedInlineMarkers.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Coroutines extends AbstractLightAnalysisModeTest {
        @TestMetadata("32defaultParametersInSuspend.kt")
        public void test32defaultParametersInSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/32defaultParametersInSuspend.kt", this::doTest);
        }

        @TestMetadata("accessorForSuspend.kt")
        public void testAccessorForSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/accessorForSuspend.kt", this::doTest);
        }

        public void testAllFilesPresentInCoroutines() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("asyncIterator.kt")
        public void testAsyncIterator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/asyncIterator.kt", this::doTest);
        }

        @TestMetadata("asyncIteratorNullMerge.kt")
        public void testAsyncIteratorNullMerge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/asyncIteratorNullMerge.kt", this::doTest);
        }

        @TestMetadata("asyncIteratorToList.kt")
        public void testAsyncIteratorToList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/asyncIteratorToList.kt", this::doTest);
        }

        @TestMetadata("await.kt")
        public void testAwait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/await.kt", this::doTest);
        }

        @TestMetadata("beginWithException.kt")
        public void testBeginWithException() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/beginWithException.kt", this::doTest);
        }

        @TestMetadata("beginWithExceptionNoHandleException.kt")
        public void testBeginWithExceptionNoHandleException() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/beginWithExceptionNoHandleException.kt", this::doTest);
        }

        @TestMetadata("coercionToUnit.kt")
        public void testCoercionToUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/coercionToUnit.kt", this::doTest);
        }

        @TestMetadata("controllerAccessFromInnerLambda.kt")
        public void testControllerAccessFromInnerLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controllerAccessFromInnerLambda.kt", this::doTest);
        }

        @TestMetadata("coroutineContextInInlinedLambda.kt")
        public void testCoroutineContextInInlinedLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/coroutineContextInInlinedLambda.kt", this::doTest);
        }

        @TestMetadata("coroutineToString.kt")
        public void testCoroutineToString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/coroutineToString.kt", this::doTest);
        }

        @TestMetadata("createCoroutineSafe.kt")
        public void testCreateCoroutineSafe() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/createCoroutineSafe.kt", this::doTest);
        }

        @TestMetadata("createCoroutinesOnManualInstances.kt")
        public void testCreateCoroutinesOnManualInstances() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/createCoroutinesOnManualInstances.kt", this::doTest);
        }

        @TestMetadata("crossInlineWithCapturedOuterReceiver.kt")
        public void testCrossInlineWithCapturedOuterReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/crossInlineWithCapturedOuterReceiver.kt", this::doTest);
        }

        @TestMetadata("defaultParametersInSuspend.kt")
        public void testDefaultParametersInSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/defaultParametersInSuspend.kt", this::doTest);
        }

        @TestMetadata("dispatchResume.kt")
        public void testDispatchResume() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/dispatchResume.kt", this::doTest);
        }

        @TestMetadata("emptyClosure.kt")
        public void testEmptyClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/emptyClosure.kt", this::doTest);
        }

        @TestMetadata("falseUnitCoercion.kt")
        public void testFalseUnitCoercion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/falseUnitCoercion.kt", this::doTest);
        }

        @TestMetadata("generate.kt")
        public void testGenerate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/generate.kt", this::doTest);
        }

        @TestMetadata("handleException.kt")
        public void testHandleException() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/handleException.kt", this::doTest);
        }

        @TestMetadata("handleResultCallEmptyBody.kt")
        public void testHandleResultCallEmptyBody() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/handleResultCallEmptyBody.kt", this::doTest);
        }

        @TestMetadata("handleResultNonUnitExpression.kt")
        public void testHandleResultNonUnitExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/handleResultNonUnitExpression.kt", this::doTest);
        }

        @TestMetadata("handleResultSuspended.kt")
        public void testHandleResultSuspended() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/handleResultSuspended.kt", this::doTest);
        }

        @TestMetadata("illegalState.kt")
        public void testIllegalState() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/illegalState.kt", this::doTest);
        }

        @TestMetadata("indirectInlineUsedAsNonInline.kt")
        public void testIndirectInlineUsedAsNonInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/indirectInlineUsedAsNonInline.kt", this::doTest);
        }

        @TestMetadata("inlineFunInGenericClass.kt")
        public void testInlineFunInGenericClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/inlineFunInGenericClass.kt", this::doTest);
        }

        @TestMetadata("inlineGenericFunCalledFromSubclass.kt")
        public void testInlineGenericFunCalledFromSubclass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/inlineGenericFunCalledFromSubclass.kt", this::doTest);
        }

        @TestMetadata("inlineSuspendFunction.kt")
        public void testInlineSuspendFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/inlineSuspendFunction.kt", this::doTest);
        }

        @TestMetadata("inlinedTryCatchFinally.kt")
        public void testInlinedTryCatchFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/inlinedTryCatchFinally.kt", this::doTest);
        }

        @TestMetadata("innerSuspensionCalls.kt")
        public void testInnerSuspensionCalls() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/innerSuspensionCalls.kt", this::doTest);
        }

        @TestMetadata("instanceOfContinuation.kt")
        public void testInstanceOfContinuation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/instanceOfContinuation.kt", this::doTest);
        }

        @TestMetadata("iterateOverArray.kt")
        public void testIterateOverArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/iterateOverArray.kt", this::doTest);
        }

        @TestMetadata("kt12958.kt")
        public void testKt12958() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/kt12958.kt", this::doTest);
        }

        @TestMetadata("kt15016.kt")
        public void testKt15016() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/kt15016.kt", this::doTest);
        }

        @TestMetadata("kt15017.kt")
        public void testKt15017() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/kt15017.kt", this::doTest);
        }

        @TestMetadata("kt15930.kt")
        public void testKt15930() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/kt15930.kt", this::doTest);
        }

        @TestMetadata("kt21605.kt")
        public void testKt21605() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/kt21605.kt", this::doTest);
        }

        @TestMetadata("lastExpressionIsLoop.kt")
        public void testLastExpressionIsLoop() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/lastExpressionIsLoop.kt", this::doTest);
        }

        @TestMetadata("lastStatementInc.kt")
        public void testLastStatementInc() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/lastStatementInc.kt", this::doTest);
        }

        @TestMetadata("lastStementAssignment.kt")
        public void testLastStementAssignment() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/lastStementAssignment.kt", this::doTest);
        }

        @TestMetadata("lastUnitExpression.kt")
        public void testLastUnitExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/lastUnitExpression.kt", this::doTest);
        }

        @TestMetadata("localCallableRef.kt")
        public void testLocalCallableRef() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localCallableRef.kt", this::doTest);
        }

        @TestMetadata("localDelegate.kt")
        public void testLocalDelegate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localDelegate.kt", this::doTest);
        }

        @TestMetadata("longRangeInSuspendCall.kt")
        public void testLongRangeInSuspendCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendCall.kt", this::doTest);
        }

        @TestMetadata("longRangeInSuspendFun.kt")
        public void testLongRangeInSuspendFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendFun.kt", this::doTest);
        }

        @TestMetadata("mergeNullAndString.kt")
        public void testMergeNullAndString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/mergeNullAndString.kt", this::doTest);
        }

        @TestMetadata("multipleInvokeCalls.kt")
        public void testMultipleInvokeCalls() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCalls.kt", this::doTest);
        }

        @TestMetadata("multipleInvokeCallsInsideInlineLambda1.kt")
        public void testMultipleInvokeCallsInsideInlineLambda1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda1.kt", this::doTest);
        }

        @TestMetadata("multipleInvokeCallsInsideInlineLambda2.kt")
        public void testMultipleInvokeCallsInsideInlineLambda2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda2.kt", this::doTest);
        }

        @TestMetadata("multipleInvokeCallsInsideInlineLambda3.kt")
        public void testMultipleInvokeCallsInsideInlineLambda3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda3.kt", this::doTest);
        }

        @TestMetadata("nestedTryCatch.kt")
        public void testNestedTryCatch() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/nestedTryCatch.kt", this::doTest);
        }

        @TestMetadata("noSuspensionPoints.kt")
        public void testNoSuspensionPoints() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/noSuspensionPoints.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnFromInlineLambda.kt")
        public void testNonLocalReturnFromInlineLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambda.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturnFromInlineLambdaDeep.kt")
        public void testNonLocalReturnFromInlineLambdaDeep() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambdaDeep.kt", this::doTest);
        }

        @TestMetadata("overrideDefaultArgument.kt")
        public void testOverrideDefaultArgument() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/overrideDefaultArgument.kt", this::doTest);
        }

        @TestMetadata("recursiveSuspend.kt")
        public void testRecursiveSuspend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/recursiveSuspend.kt", this::doTest);
        }

        @TestMetadata("returnByLabel.kt")
        public void testReturnByLabel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/returnByLabel.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/simple.kt", this::doTest);
        }

        @TestMetadata("simpleException.kt")
        public void testSimpleException() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/simpleException.kt", this::doTest);
        }

        @TestMetadata("simpleWithHandleResult.kt")
        public void testSimpleWithHandleResult() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/simpleWithHandleResult.kt", this::doTest);
        }

        @TestMetadata("statementLikeLastExpression.kt")
        public void testStatementLikeLastExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/statementLikeLastExpression.kt", this::doTest);
        }

        @TestMetadata("suspendCoroutineFromStateMachine.kt")
        public void testSuspendCoroutineFromStateMachine() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendCoroutineFromStateMachine.kt", this::doTest);
        }

        @TestMetadata("suspendDefaultImpl.kt")
        public void testSuspendDefaultImpl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendDefaultImpl.kt", this::doTest);
        }

        @TestMetadata("suspendDelegation.kt")
        public void testSuspendDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendDelegation.kt", this::doTest);
        }

        @TestMetadata("suspendFromInlineLambda.kt")
        public void testSuspendFromInlineLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFromInlineLambda.kt", this::doTest);
        }

        @TestMetadata("suspendFunImportedFromObject.kt")
        public void testSuspendFunImportedFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunImportedFromObject.kt", this::doTest);
        }

        @TestMetadata("suspendInCycle.kt")
        public void testSuspendInCycle() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendInCycle.kt", this::doTest);
        }

        @TestMetadata("suspendInTheMiddleOfObjectConstruction.kt")
        public void testSuspendInTheMiddleOfObjectConstruction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstruction.kt", this::doTest);
        }

        @TestMetadata("suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt")
        public void testSuspendInTheMiddleOfObjectConstructionEvaluationOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt", this::doTest);
        }

        @TestMetadata("suspendInTheMiddleOfObjectConstructionWithJumpOut.kt")
        public void testSuspendInTheMiddleOfObjectConstructionWithJumpOut() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionWithJumpOut.kt", this::doTest);
        }

        @TestMetadata("suspensionInsideSafeCall.kt")
        public void testSuspensionInsideSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCall.kt", this::doTest);
        }

        @TestMetadata("suspensionInsideSafeCallWithElvis.kt")
        public void testSuspensionInsideSafeCallWithElvis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCallWithElvis.kt", this::doTest);
        }

        @TestMetadata("tryCatchFinallyWithHandleResult.kt")
        public void testTryCatchFinallyWithHandleResult() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tryCatchFinallyWithHandleResult.kt", this::doTest);
        }

        @TestMetadata("tryCatchWithHandleResult.kt")
        public void testTryCatchWithHandleResult() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tryCatchWithHandleResult.kt", this::doTest);
        }

        @TestMetadata("tryFinallyInsideInlineLambda.kt")
        public void testTryFinallyInsideInlineLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tryFinallyInsideInlineLambda.kt", this::doTest);
        }

        @TestMetadata("tryFinallyWithHandleResult.kt")
        public void testTryFinallyWithHandleResult() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tryFinallyWithHandleResult.kt", this::doTest);
        }

        @TestMetadata("varValueConflictsWithTable.kt")
        public void testVarValueConflictsWithTable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTable.kt", this::doTest);
        }

        @TestMetadata("varValueConflictsWithTableSameSort.kt")
        public void testVarValueConflictsWithTableSameSort() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTableSameSort.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/controlFlow")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ControlFlow extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInControlFlow() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/controlFlow"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("breakFinally.kt")
            public void testBreakFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakFinally.kt", this::doTest);
            }

            @TestMetadata("breakStatement.kt")
            public void testBreakStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakStatement.kt", this::doTest);
            }

            @TestMetadata("doWhileStatement.kt")
            public void testDoWhileStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/doWhileStatement.kt", this::doTest);
            }

            @TestMetadata("forContinue.kt")
            public void testForContinue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/forContinue.kt", this::doTest);
            }

            @TestMetadata("forStatement.kt")
            public void testForStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/forStatement.kt", this::doTest);
            }

            @TestMetadata("forWithStep.kt")
            public void testForWithStep() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/forWithStep.kt", this::doTest);
            }

            @TestMetadata("ifStatement.kt")
            public void testIfStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/ifStatement.kt", this::doTest);
            }

            @TestMetadata("labeledWhile.kt")
            public void testLabeledWhile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/labeledWhile.kt", this::doTest);
            }

            @TestMetadata("returnFromFinally.kt")
            public void testReturnFromFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnFromFinally.kt", this::doTest);
            }

            @TestMetadata("switchLikeWhen.kt")
            public void testSwitchLikeWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/switchLikeWhen.kt", this::doTest);
            }

            @TestMetadata("throwFromCatch.kt")
            public void testThrowFromCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromCatch.kt", this::doTest);
            }

            @TestMetadata("throwInTryWithHandleResult.kt")
            public void testThrowInTryWithHandleResult() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwInTryWithHandleResult.kt", this::doTest);
            }

            @TestMetadata("whileStatement.kt")
            public void testWhileStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/controlFlow/whileStatement.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FeatureIntersection extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInFeatureIntersection() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("breakWithNonEmptyStack.kt")
            public void testBreakWithNonEmptyStack() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/breakWithNonEmptyStack.kt", this::doTest);
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/delegate.kt", this::doTest);
            }

            @TestMetadata("destructuringInLambdas.kt")
            public void testDestructuringInLambdas() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/destructuringInLambdas.kt", this::doTest);
            }

            @TestMetadata("safeCallOnTwoReceivers.kt")
            public void testSafeCallOnTwoReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceivers.kt", this::doTest);
            }

            @TestMetadata("safeCallOnTwoReceiversLong.kt")
            public void testSafeCallOnTwoReceiversLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceiversLong.kt", this::doTest);
            }

            @TestMetadata("suspendDestructuringInLambdas.kt")
            public void testSuspendDestructuringInLambdas() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendDestructuringInLambdas.kt", this::doTest);
            }

            @TestMetadata("suspendOperatorPlus.kt")
            public void testSuspendOperatorPlus() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlus.kt", this::doTest);
            }

            @TestMetadata("suspendOperatorPlusAssign.kt")
            public void testSuspendOperatorPlusAssign() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusAssign.kt", this::doTest);
            }

            @TestMetadata("suspendOperatorPlusCallFromLambda.kt")
            public void testSuspendOperatorPlusCallFromLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusCallFromLambda.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Tailrec extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInTailrec() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("controlFlowIf.kt")
                public void testControlFlowIf() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowIf.kt", this::doTest);
                }

                @TestMetadata("controlFlowWhen.kt")
                public void testControlFlowWhen() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowWhen.kt", this::doTest);
                }

                @TestMetadata("extention.kt")
                public void testExtention() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/extention.kt", this::doTest);
                }

                @TestMetadata("infixCall.kt")
                public void testInfixCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixCall.kt", this::doTest);
                }

                @TestMetadata("infixRecursiveCall.kt")
                public void testInfixRecursiveCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixRecursiveCall.kt", this::doTest);
                }

                @TestMetadata("realIteratorFoldl.kt")
                public void testRealIteratorFoldl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realIteratorFoldl.kt", this::doTest);
                }

                @TestMetadata("realStringEscape.kt")
                public void testRealStringEscape() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringEscape.kt", this::doTest);
                }

                @TestMetadata("realStringRepeat.kt")
                public void testRealStringRepeat() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringRepeat.kt", this::doTest);
                }

                @TestMetadata("returnInParentheses.kt")
                public void testReturnInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/returnInParentheses.kt", this::doTest);
                }

                @TestMetadata("sum.kt")
                public void testSum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/sum.kt", this::doTest);
                }

                @TestMetadata("tailCallInBlockInParentheses.kt")
                public void testTailCallInBlockInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInBlockInParentheses.kt", this::doTest);
                }

                @TestMetadata("tailCallInParentheses.kt")
                public void testTailCallInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInParentheses.kt", this::doTest);
                }

                @TestMetadata("whenWithIs.kt")
                public void testWhenWithIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/whenWithIs.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/intLikeVarSpilling")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IntLikeVarSpilling extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInIntLikeVarSpilling() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intLikeVarSpilling"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("complicatedMerge.kt")
            public void testComplicatedMerge() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/complicatedMerge.kt", this::doTest);
            }

            @TestMetadata("i2bResult.kt")
            public void testI2bResult() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/i2bResult.kt", this::doTest);
            }

            @TestMetadata("loadFromBooleanArray.kt")
            public void testLoadFromBooleanArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromBooleanArray.kt", this::doTest);
            }

            @TestMetadata("loadFromByteArray.kt")
            public void testLoadFromByteArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromByteArray.kt", this::doTest);
            }

            @TestMetadata("noVariableInTable.kt")
            public void testNoVariableInTable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/noVariableInTable.kt", this::doTest);
            }

            @TestMetadata("sameIconst1ManyVars.kt")
            public void testSameIconst1ManyVars() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/sameIconst1ManyVars.kt", this::doTest);
            }

            @TestMetadata("usedInArrayStore.kt")
            public void testUsedInArrayStore() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInArrayStore.kt", this::doTest);
            }

            @TestMetadata("usedInMethodCall.kt")
            public void testUsedInMethodCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInMethodCall.kt", this::doTest);
            }

            @TestMetadata("usedInPutfield.kt")
            public void testUsedInPutfield() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInPutfield.kt", this::doTest);
            }

            @TestMetadata("usedInVarStore.kt")
            public void testUsedInVarStore() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInVarStore.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/intrinsicSemantics")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IntrinsicSemantics extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInIntrinsicSemantics() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intrinsicSemantics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("coroutineContext.kt")
            public void testCoroutineContext() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContext.kt", this::doTest);
            }

            @TestMetadata("coroutineContextReceiver.kt")
            public void testCoroutineContextReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiver.kt", this::doTest);
            }

            @TestMetadata("coroutineContextReceiverNotIntrinsic.kt")
            public void testCoroutineContextReceiverNotIntrinsic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiverNotIntrinsic.kt", this::doTest);
            }

            @TestMetadata("intercepted.kt")
            public void testIntercepted() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/intercepted.kt", this::doTest);
            }

            @TestMetadata("startCoroutine.kt")
            public void testStartCoroutine() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutine.kt", this::doTest);
            }

            @TestMetadata("startCoroutineUninterceptedOrReturn.kt")
            public void testStartCoroutineUninterceptedOrReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturn.kt", this::doTest);
            }

            @TestMetadata("startCoroutineUninterceptedOrReturnInterception.kt")
            public void testStartCoroutineUninterceptedOrReturnInterception() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturnInterception.kt", this::doTest);
            }

            @TestMetadata("suspendCoroutineUninterceptedOrReturn.kt")
            public void testSuspendCoroutineUninterceptedOrReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/suspendCoroutineUninterceptedOrReturn.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LocalFunctions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInLocalFunctions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions/anonymous")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Anonymous extends AbstractLightAnalysisModeTest {
                @TestMetadata("simple.kt")
                public void ignoreSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/anonymous/simple.kt", this::doTest);
                }

                public void testAllFilesPresentInAnonymous() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions/anonymous"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions/named")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Named extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInNamed() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions/named"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("capturedParameters.kt")
                public void testCapturedParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedParameters.kt", this::doTest);
                }

                @TestMetadata("capturedVariables.kt")
                public void testCapturedVariables() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedVariables.kt", this::doTest);
                }

                @TestMetadata("extension.kt")
                public void testExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/extension.kt", this::doTest);
                }

                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/infix.kt", this::doTest);
                }

                @TestMetadata("insideLambda.kt")
                public void testInsideLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/insideLambda.kt", this::doTest);
                }

                @TestMetadata("nestedLocals.kt")
                public void testNestedLocals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/nestedLocals.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simple.kt", this::doTest);
                }

                @TestMetadata("simpleSuspensionPoint.kt")
                public void testSimpleSuspensionPoint() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simpleSuspensionPoint.kt", this::doTest);
                }

                @TestMetadata("stateMachine.kt")
                public void testStateMachine() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/stateMachine.kt", this::doTest);
                }

                @TestMetadata("withArguments.kt")
                public void testWithArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/withArguments.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/multiModule")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MultiModule extends AbstractLightAnalysisModeTest {
            @TestMetadata("inlineMultiModuleOverride.kt")
            public void ignoreInlineMultiModuleOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleOverride.kt", this::doTest);
            }

            public void testAllFilesPresentInMultiModule() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/multiModule"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("inlineFunctionWithOptionalParam.kt")
            public void testInlineFunctionWithOptionalParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineFunctionWithOptionalParam.kt", this::doTest);
            }

            @TestMetadata("inlineMultiModule.kt")
            public void testInlineMultiModule() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModule.kt", this::doTest);
            }

            @TestMetadata("inlineMultiModuleWithController.kt")
            public void testInlineMultiModuleWithController() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithController.kt", this::doTest);
            }

            @TestMetadata("inlineMultiModuleWithInnerInlining.kt")
            public void testInlineMultiModuleWithInnerInlining() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithInnerInlining.kt", this::doTest);
            }

            @TestMetadata("inlineTailCall.kt")
            public void testInlineTailCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineTailCall.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/multiModule/simple.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/redundantLocalsElimination")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class RedundantLocalsElimination extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInRedundantLocalsElimination() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/redundantLocalsElimination"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("ktor_receivedMessage.kt")
            public void testKtor_receivedMessage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/redundantLocalsElimination/ktor_receivedMessage.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/stackUnwinding")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class StackUnwinding extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInStackUnwinding() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/stackUnwinding"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("exception.kt")
            public void testException() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/exception.kt", this::doTest);
            }

            @TestMetadata("inlineSuspendFunction.kt")
            public void testInlineSuspendFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/inlineSuspendFunction.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/simple.kt", this::doTest);
            }

            @TestMetadata("suspendInCycle.kt")
            public void testSuspendInCycle() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/suspendInCycle.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SuspendFunctionAsCoroutine extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInSuspendFunctionAsCoroutine() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("dispatchResume.kt")
            public void testDispatchResume() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/dispatchResume.kt", this::doTest);
            }

            @TestMetadata("handleException.kt")
            public void testHandleException() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/handleException.kt", this::doTest);
            }

            @TestMetadata("inline.kt")
            public void testInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inline.kt", this::doTest);
            }

            @TestMetadata("inlineTwoReceivers.kt")
            public void testInlineTwoReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inlineTwoReceivers.kt", this::doTest);
            }

            @TestMetadata("member.kt")
            public void testMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/member.kt", this::doTest);
            }

            @TestMetadata("noinlineTwoReceivers.kt")
            public void testNoinlineTwoReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/noinlineTwoReceivers.kt", this::doTest);
            }

            @TestMetadata("openFunWithJava.kt")
            public void testOpenFunWithJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/openFunWithJava.kt", this::doTest);
            }

            @TestMetadata("operators.kt")
            public void testOperators() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/operators.kt", this::doTest);
            }

            @TestMetadata("privateFunctions.kt")
            public void testPrivateFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateFunctions.kt", this::doTest);
            }

            @TestMetadata("privateInFile.kt")
            public void testPrivateInFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateInFile.kt", this::doTest);
            }

            @TestMetadata("returnNoSuspend.kt")
            public void testReturnNoSuspend() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/returnNoSuspend.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/simple.kt", this::doTest);
            }

            @TestMetadata("superCall.kt")
            public void testSuperCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCall.kt", this::doTest);
            }

            @TestMetadata("superCallAbstractClass.kt")
            public void testSuperCallAbstractClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallAbstractClass.kt", this::doTest);
            }

            @TestMetadata("superCallInterface.kt")
            public void testSuperCallInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallInterface.kt", this::doTest);
            }

            @TestMetadata("withVariables.kt")
            public void testWithVariables() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/withVariables.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SuspendFunctionTypeCall extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInSuspendFunctionTypeCall() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("localVal.kt")
            public void testLocalVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/localVal.kt", this::doTest);
            }

            @TestMetadata("manyParameters.kt")
            public void testManyParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParameters.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/simple.kt", this::doTest);
            }

            @TestMetadata("suspendModifier.kt")
            public void testSuspendModifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/suspendModifier.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TailCallOptimizations extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInTailCallOptimizations() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("crossinline.kt")
            public void testCrossinline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/crossinline.kt", this::doTest);
            }

            @TestMetadata("inlineWithStateMachine.kt")
            public void testInlineWithStateMachine() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithStateMachine.kt", this::doTest);
            }

            @TestMetadata("inlineWithoutStateMachine.kt")
            public void testInlineWithoutStateMachine() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithoutStateMachine.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/simple.kt", this::doTest);
            }

            @TestMetadata("tryCatch.kt")
            public void testTryCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tryCatch.kt", this::doTest);
            }

            @TestMetadata("unreachable.kt")
            public void testUnreachable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unreachable.kt", this::doTest);
            }

            @TestMetadata("whenUnit.kt")
            public void testWhenUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/whenUnit.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/tailOperations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TailOperations extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInTailOperations() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailOperations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("suspendWithIf.kt")
            public void testSuspendWithIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithIf.kt", this::doTest);
            }

            @TestMetadata("suspendWithTryCatch.kt")
            public void testSuspendWithTryCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithTryCatch.kt", this::doTest);
            }

            @TestMetadata("suspendWithWhen.kt")
            public void testSuspendWithWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithWhen.kt", this::doTest);
            }

            @TestMetadata("tailInlining.kt")
            public void testTailInlining() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/tailOperations/tailInlining.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/unitTypeReturn")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class UnitTypeReturn extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInUnitTypeReturn() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/unitTypeReturn"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("coroutineNonLocalReturn.kt")
            public void testCoroutineNonLocalReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineNonLocalReturn.kt", this::doTest);
            }

            @TestMetadata("coroutineReturn.kt")
            public void testCoroutineReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineReturn.kt", this::doTest);
            }

            @TestMetadata("suspendNonLocalReturn.kt")
            public void testSuspendNonLocalReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendNonLocalReturn.kt", this::doTest);
            }

            @TestMetadata("suspendReturn.kt")
            public void testSuspendReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendReturn.kt", this::doTest);
            }

            @TestMetadata("unitSafeCall.kt")
            public void testUnitSafeCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/unitSafeCall.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class VarSpilling extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInVarSpilling() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("kt19475.kt")
            public void testKt19475() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt19475.kt", this::doTest);
            }

            @TestMetadata("nullSpilling.kt")
            public void testNullSpilling() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/coroutines/varSpilling/nullSpilling.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/dataClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DataClasses extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInDataClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/dataClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("arrayParams.kt")
        public void testArrayParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/arrayParams.kt", this::doTest);
        }

        @TestMetadata("changingVarParam.kt")
        public void testChangingVarParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/changingVarParam.kt", this::doTest);
        }

        @TestMetadata("doubleParam.kt")
        public void testDoubleParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/doubleParam.kt", this::doTest);
        }

        @TestMetadata("floatParam.kt")
        public void testFloatParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/floatParam.kt", this::doTest);
        }

        @TestMetadata("genericParam.kt")
        public void testGenericParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/genericParam.kt", this::doTest);
        }

        @TestMetadata("kt5002.kt")
        public void testKt5002() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/kt5002.kt", this::doTest);
        }

        @TestMetadata("mixedParams.kt")
        public void testMixedParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/mixedParams.kt", this::doTest);
        }

        @TestMetadata("multiDeclaration.kt")
        public void testMultiDeclaration() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/multiDeclaration.kt", this::doTest);
        }

        @TestMetadata("multiDeclarationFor.kt")
        public void testMultiDeclarationFor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/multiDeclarationFor.kt", this::doTest);
        }

        @TestMetadata("nonTrivialFinalMemberInSuperClass.kt")
        public void testNonTrivialFinalMemberInSuperClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/nonTrivialFinalMemberInSuperClass.kt", this::doTest);
        }

        @TestMetadata("nonTrivialMemberInSuperClass.kt")
        public void testNonTrivialMemberInSuperClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/nonTrivialMemberInSuperClass.kt", this::doTest);
        }

        @TestMetadata("privateValParams.kt")
        public void testPrivateValParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/privateValParams.kt", this::doTest);
        }

        @TestMetadata("twoValParams.kt")
        public void testTwoValParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/twoValParams.kt", this::doTest);
        }

        @TestMetadata("twoVarParams.kt")
        public void testTwoVarParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/twoVarParams.kt", this::doTest);
        }

        @TestMetadata("unitComponent.kt")
        public void testUnitComponent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/unitComponent.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/dataClasses/copy")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Copy extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInCopy() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/copy"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("constructorWithDefaultParam.kt")
            public void testConstructorWithDefaultParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/copy/constructorWithDefaultParam.kt", this::doTest);
            }

            @TestMetadata("copyInObjectNestedDataClass.kt")
            public void testCopyInObjectNestedDataClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/copy/copyInObjectNestedDataClass.kt", this::doTest);
            }

            @TestMetadata("kt12708.kt")
            public void testKt12708() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/copy/kt12708.kt", this::doTest);
            }

            @TestMetadata("kt3033.kt")
            public void testKt3033() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/copy/kt3033.kt", this::doTest);
            }

            @TestMetadata("valInConstructorParams.kt")
            public void testValInConstructorParams() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/copy/valInConstructorParams.kt", this::doTest);
            }

            @TestMetadata("varInConstructorParams.kt")
            public void testVarInConstructorParams() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/copy/varInConstructorParams.kt", this::doTest);
            }

            @TestMetadata("withGenericParameter.kt")
            public void testWithGenericParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/copy/withGenericParameter.kt", this::doTest);
            }

            @TestMetadata("withSecondaryConstructor.kt")
            public void testWithSecondaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/copy/withSecondaryConstructor.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/dataClasses/equals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Equals extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInEquals() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/equals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("alreadyDeclared.kt")
            public void testAlreadyDeclared() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/equals/alreadyDeclared.kt", this::doTest);
            }

            @TestMetadata("alreadyDeclaredWrongSignature.kt")
            public void testAlreadyDeclaredWrongSignature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/equals/alreadyDeclaredWrongSignature.kt", this::doTest);
            }

            @TestMetadata("genericarray.kt")
            public void testGenericarray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/equals/genericarray.kt", this::doTest);
            }

            @TestMetadata("intarray.kt")
            public void testIntarray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/equals/intarray.kt", this::doTest);
            }

            @TestMetadata("null.kt")
            public void testNull() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/dataClasses/equals/null.kt");
                doTest(fileName);
            }

            @TestMetadata("nullother.kt")
            public void testNullother() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/equals/nullother.kt", this::doTest);
            }

            @TestMetadata("sameinstance.kt")
            public void testSameinstance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/equals/sameinstance.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/dataClasses/hashCode")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class HashCode extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInHashCode() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/hashCode"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("alreadyDeclared.kt")
            public void testAlreadyDeclared() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/alreadyDeclared.kt", this::doTest);
            }

            @TestMetadata("alreadyDeclaredWrongSignature.kt")
            public void testAlreadyDeclaredWrongSignature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/alreadyDeclaredWrongSignature.kt", this::doTest);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/array.kt", this::doTest);
            }

            @TestMetadata("boolean.kt")
            public void testBoolean() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/boolean.kt", this::doTest);
            }

            @TestMetadata("byte.kt")
            public void testByte() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/byte.kt", this::doTest);
            }

            @TestMetadata("char.kt")
            public void testChar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/char.kt", this::doTest);
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/double.kt", this::doTest);
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/float.kt", this::doTest);
            }

            @TestMetadata("genericNull.kt")
            public void testGenericNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/genericNull.kt", this::doTest);
            }

            @TestMetadata("int.kt")
            public void testInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/int.kt", this::doTest);
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/long.kt", this::doTest);
            }

            @TestMetadata("null.kt")
            public void testNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/null.kt", this::doTest);
            }

            @TestMetadata("short.kt")
            public void testShort() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/hashCode/short.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/dataClasses/toString")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ToString extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInToString() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/toString"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("alreadyDeclared.kt")
            public void testAlreadyDeclared() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/toString/alreadyDeclared.kt", this::doTest);
            }

            @TestMetadata("alreadyDeclaredWrongSignature.kt")
            public void testAlreadyDeclaredWrongSignature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/toString/alreadyDeclaredWrongSignature.kt", this::doTest);
            }

            @TestMetadata("arrayParams.kt")
            public void testArrayParams() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/toString/arrayParams.kt", this::doTest);
            }

            @TestMetadata("changingVarParam.kt")
            public void testChangingVarParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/toString/changingVarParam.kt", this::doTest);
            }

            @TestMetadata("genericParam.kt")
            public void testGenericParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/toString/genericParam.kt", this::doTest);
            }

            @TestMetadata("mixedParams.kt")
            public void testMixedParams() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/toString/mixedParams.kt", this::doTest);
            }

            @TestMetadata("unitComponent.kt")
            public void testUnitComponent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/dataClasses/toString/unitComponent.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/deadCodeElimination")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DeadCodeElimination extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInDeadCodeElimination() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/deadCodeElimination"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("emptyVariableRange.kt")
        public void testEmptyVariableRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/deadCodeElimination/emptyVariableRange.kt", this::doTest);
        }

        @TestMetadata("intersectingVariableRange.kt")
        public void testIntersectingVariableRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/deadCodeElimination/intersectingVariableRange.kt", this::doTest);
        }

        @TestMetadata("intersectingVariableRangeInFinally.kt")
        public void testIntersectingVariableRangeInFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/deadCodeElimination/intersectingVariableRangeInFinally.kt", this::doTest);
        }

        @TestMetadata("kt14357.kt")
        public void testKt14357() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/deadCodeElimination/kt14357.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultArguments extends AbstractLightAnalysisModeTest {
        @TestMetadata("implementedByFake.kt")
        public void ignoreImplementedByFake() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake.kt", this::doTest);
        }

        @TestMetadata("implementedByFake2.kt")
        public void ignoreImplementedByFake2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake2.kt", this::doTest);
        }

        @TestMetadata("implementedByFake3.kt")
        public void ignoreImplementedByFake3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake3.kt", this::doTest);
        }

        public void testAllFilesPresentInDefaultArguments() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("inheritedFromInterfaceViaAbstractSuperclass.kt")
        public void testInheritedFromInterfaceViaAbstractSuperclass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/inheritedFromInterfaceViaAbstractSuperclass.kt", this::doTest);
        }

        @TestMetadata("kt6382.kt")
        public void testKt6382() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/kt6382.kt", this::doTest);
        }

        @TestMetadata("protected.kt")
        public void testProtected() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/protected.kt", this::doTest);
        }

        @TestMetadata("simpleFromOtherFile.kt")
        public void testSimpleFromOtherFile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/simpleFromOtherFile.kt", this::doTest);
        }

        @TestMetadata("superCallCheck.kt")
        public void testSuperCallCheck() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/superCallCheck.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/defaultArguments/constructor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Constructor extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInConstructor() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/constructor"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/annotation.kt", this::doTest);
            }

            @TestMetadata("annotationWithEmptyArray.kt")
            public void testAnnotationWithEmptyArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/annotationWithEmptyArray.kt", this::doTest);
            }

            @TestMetadata("checkIfConstructorIsSynthetic.kt")
            public void testCheckIfConstructorIsSynthetic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/checkIfConstructorIsSynthetic.kt", this::doTest);
            }

            @TestMetadata("defArgs1.kt")
            public void testDefArgs1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1.kt", this::doTest);
            }

            @TestMetadata("defArgs1InnerClass.kt")
            public void testDefArgs1InnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1InnerClass.kt", this::doTest);
            }

            @TestMetadata("defArgs2.kt")
            public void testDefArgs2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs2.kt", this::doTest);
            }

            @TestMetadata("doubleDefArgs1InnerClass.kt")
            public void testDoubleDefArgs1InnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/doubleDefArgs1InnerClass.kt", this::doTest);
            }

            @TestMetadata("enum.kt")
            public void testEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/enum.kt", this::doTest);
            }

            @TestMetadata("enumWithOneDefArg.kt")
            public void testEnumWithOneDefArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithOneDefArg.kt", this::doTest);
            }

            @TestMetadata("enumWithTwoDefArgs.kt")
            public void testEnumWithTwoDefArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDefArgs.kt", this::doTest);
            }

            @TestMetadata("enumWithTwoDoubleDefArgs.kt")
            public void testEnumWithTwoDoubleDefArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDoubleDefArgs.kt", this::doTest);
            }

            @TestMetadata("kt2852.kt")
            public void testKt2852() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt2852.kt", this::doTest);
            }

            @TestMetadata("kt3060.kt")
            public void testKt3060() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt3060.kt", this::doTest);
            }

            @TestMetadata("manyArgs.kt")
            public void testManyArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/constructor/manyArgs.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/defaultArguments/convention")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Convention extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInConvention() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/convention"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("incWithDefaultInGetter.kt")
            public void testIncWithDefaultInGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/convention/incWithDefaultInGetter.kt", this::doTest);
            }

            @TestMetadata("kt9140.kt")
            public void testKt9140() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/convention/kt9140.kt", this::doTest);
            }

            @TestMetadata("plusAssignWithDefaultInGetter.kt")
            public void testPlusAssignWithDefaultInGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/convention/plusAssignWithDefaultInGetter.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/defaultArguments/function")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Function extends AbstractLightAnalysisModeTest {
            @TestMetadata("abstractClass.kt")
            public void testAbstractClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/abstractClass.kt", this::doTest);
            }

            public void testAllFilesPresentInFunction() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/function"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("covariantOverride.kt")
            public void testCovariantOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/covariantOverride.kt", this::doTest);
            }

            @TestMetadata("covariantOverrideGeneric.kt")
            public void testCovariantOverrideGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/covariantOverrideGeneric.kt", this::doTest);
            }

            @TestMetadata("extensionFunctionManyArgs.kt")
            public void testExtensionFunctionManyArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/extensionFunctionManyArgs.kt", this::doTest);
            }

            @TestMetadata("extentionFunction.kt")
            public void testExtentionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunction.kt", this::doTest);
            }

            @TestMetadata("extentionFunctionDouble.kt")
            public void testExtentionFunctionDouble() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDouble.kt", this::doTest);
            }

            @TestMetadata("extentionFunctionDoubleTwoArgs.kt")
            public void testExtentionFunctionDoubleTwoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDoubleTwoArgs.kt", this::doTest);
            }

            @TestMetadata("extentionFunctionInClassObject.kt")
            public void testExtentionFunctionInClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInClassObject.kt", this::doTest);
            }

            @TestMetadata("extentionFunctionInObject.kt")
            public void testExtentionFunctionInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInObject.kt", this::doTest);
            }

            @TestMetadata("extentionFunctionWithOneDefArg.kt")
            public void testExtentionFunctionWithOneDefArg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionWithOneDefArg.kt", this::doTest);
            }

            @TestMetadata("funInTrait.kt")
            public void testFunInTrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/funInTrait.kt", this::doTest);
            }

            @TestMetadata("innerExtentionFunction.kt")
            public void testInnerExtentionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunction.kt", this::doTest);
            }

            @TestMetadata("innerExtentionFunctionDouble.kt")
            public void testInnerExtentionFunctionDouble() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDouble.kt", this::doTest);
            }

            @TestMetadata("innerExtentionFunctionDoubleTwoArgs.kt")
            public void testInnerExtentionFunctionDoubleTwoArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDoubleTwoArgs.kt", this::doTest);
            }

            @TestMetadata("innerExtentionFunctionManyArgs.kt")
            public void testInnerExtentionFunctionManyArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionManyArgs.kt", this::doTest);
            }

            @TestMetadata("kt5232.kt")
            public void testKt5232() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/kt5232.kt", this::doTest);
            }

            @TestMetadata("memberFunctionManyArgs.kt")
            public void testMemberFunctionManyArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/memberFunctionManyArgs.kt", this::doTest);
            }

            @TestMetadata("mixingNamedAndPositioned.kt")
            public void testMixingNamedAndPositioned() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/mixingNamedAndPositioned.kt", this::doTest);
            }

            @TestMetadata("topLevelManyArgs.kt")
            public void testTopLevelManyArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/topLevelManyArgs.kt", this::doTest);
            }

            @TestMetadata("trait.kt")
            public void testTrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/function/trait.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/defaultArguments/private")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Private extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInPrivate() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/private"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("memberExtensionFunction.kt")
            public void testMemberExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/private/memberExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("memberFunction.kt")
            public void testMemberFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/private/memberFunction.kt", this::doTest);
            }

            @TestMetadata("primaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/private/primaryConstructor.kt", this::doTest);
            }

            @TestMetadata("secondaryConstructor.kt")
            public void testSecondaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/private/secondaryConstructor.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/defaultArguments/signature")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Signature extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInSignature() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/signature"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("kt2789.kt")
            public void testKt2789() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/signature/kt2789.kt", this::doTest);
            }

            @TestMetadata("kt9428.kt")
            public void testKt9428() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/signature/kt9428.kt", this::doTest);
            }

            @TestMetadata("kt9924.kt")
            public void testKt9924() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/defaultArguments/signature/kt9924.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegatedProperty extends AbstractLightAnalysisModeTest {
        @TestMetadata("genericDelegateUncheckedCast2.kt")
        public void ignoreGenericDelegateUncheckedCast2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegateUncheckedCast2.kt", this::doTest);
        }

        @TestMetadata("accessTopLevelDelegatedPropertyInClinit.kt")
        public void testAccessTopLevelDelegatedPropertyInClinit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/accessTopLevelDelegatedPropertyInClinit.kt", this::doTest);
        }

        public void testAllFilesPresentInDelegatedProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("capturePropertyInClosure.kt")
        public void testCapturePropertyInClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/capturePropertyInClosure.kt", this::doTest);
        }

        @TestMetadata("castGetReturnType.kt")
        public void testCastGetReturnType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/castGetReturnType.kt", this::doTest);
        }

        @TestMetadata("castSetParameter.kt")
        public void testCastSetParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/castSetParameter.kt", this::doTest);
        }

        @TestMetadata("delegateAsInnerClass.kt")
        public void testDelegateAsInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/delegateAsInnerClass.kt", this::doTest);
        }

        @TestMetadata("delegateByOtherProperty.kt")
        public void testDelegateByOtherProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/delegateByOtherProperty.kt", this::doTest);
        }

        @TestMetadata("delegateByTopLevelFun.kt")
        public void testDelegateByTopLevelFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/delegateByTopLevelFun.kt", this::doTest);
        }

        @TestMetadata("delegateByTopLevelProperty.kt")
        public void testDelegateByTopLevelProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/delegateByTopLevelProperty.kt", this::doTest);
        }

        @TestMetadata("delegateForExtProperty.kt")
        public void testDelegateForExtProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/delegateForExtProperty.kt", this::doTest);
        }

        @TestMetadata("delegateForExtPropertyInClass.kt")
        public void testDelegateForExtPropertyInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/delegateForExtPropertyInClass.kt", this::doTest);
        }

        @TestMetadata("delegateWithPrivateSet.kt")
        public void testDelegateWithPrivateSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/delegateWithPrivateSet.kt", this::doTest);
        }

        @TestMetadata("extensionDelegatesWithSameNames.kt")
        public void testExtensionDelegatesWithSameNames() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/extensionDelegatesWithSameNames.kt", this::doTest);
        }

        @TestMetadata("extensionPropertyAndExtensionGetValue.kt")
        public void testExtensionPropertyAndExtensionGetValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/extensionPropertyAndExtensionGetValue.kt", this::doTest);
        }

        @TestMetadata("genericDelegate.kt")
        public void testGenericDelegate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegate.kt", this::doTest);
        }

        @TestMetadata("genericDelegateUncheckedCast1.kt")
        public void testGenericDelegateUncheckedCast1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegateUncheckedCast1.kt", this::doTest);
        }

        @TestMetadata("genericSetValueViaSyntheticAccessor.kt")
        public void testGenericSetValueViaSyntheticAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/genericSetValueViaSyntheticAccessor.kt", this::doTest);
        }

        @TestMetadata("getAsExtensionFun.kt")
        public void testGetAsExtensionFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/getAsExtensionFun.kt", this::doTest);
        }

        @TestMetadata("getAsExtensionFunInClass.kt")
        public void testGetAsExtensionFunInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/getAsExtensionFunInClass.kt", this::doTest);
        }

        @TestMetadata("getDelegateWithoutReflection.kt")
        public void testGetDelegateWithoutReflection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/getDelegateWithoutReflection.kt", this::doTest);
        }

        @TestMetadata("inClassVal.kt")
        public void testInClassVal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/inClassVal.kt", this::doTest);
        }

        @TestMetadata("inClassVar.kt")
        public void testInClassVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/inClassVar.kt", this::doTest);
        }

        @TestMetadata("inTrait.kt")
        public void testInTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/inTrait.kt", this::doTest);
        }

        @TestMetadata("inferredPropertyType.kt")
        public void testInferredPropertyType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/inferredPropertyType.kt", this::doTest);
        }

        @TestMetadata("kt4138.kt")
        public void testKt4138() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/kt4138.kt", this::doTest);
        }

        @TestMetadata("kt6722.kt")
        public void testKt6722() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/kt6722.kt", this::doTest);
        }

        @TestMetadata("kt9712.kt")
        public void testKt9712() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/kt9712.kt", this::doTest);
        }

        @TestMetadata("privateSetterKPropertyIsNotMutable.kt")
        public void testPrivateSetterKPropertyIsNotMutable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/privateSetterKPropertyIsNotMutable.kt", this::doTest);
        }

        @TestMetadata("privateVar.kt")
        public void testPrivateVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/privateVar.kt", this::doTest);
        }

        @TestMetadata("propertyMetadataShouldBeCached.kt")
        public void testPropertyMetadataShouldBeCached() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/propertyMetadataShouldBeCached.kt", this::doTest);
        }

        @TestMetadata("protectedVarWithPrivateSet.kt")
        public void testProtectedVarWithPrivateSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/protectedVarWithPrivateSet.kt", this::doTest);
        }

        @TestMetadata("setAsExtensionFun.kt")
        public void testSetAsExtensionFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/setAsExtensionFun.kt", this::doTest);
        }

        @TestMetadata("setAsExtensionFunInClass.kt")
        public void testSetAsExtensionFunInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/setAsExtensionFunInClass.kt", this::doTest);
        }

        @TestMetadata("stackOverflowOnCallFromGetValue.kt")
        public void testStackOverflowOnCallFromGetValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/stackOverflowOnCallFromGetValue.kt", this::doTest);
        }

        @TestMetadata("topLevelVal.kt")
        public void testTopLevelVal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/topLevelVal.kt", this::doTest);
        }

        @TestMetadata("topLevelVar.kt")
        public void testTopLevelVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/topLevelVar.kt", this::doTest);
        }

        @TestMetadata("twoPropByOneDelegete.kt")
        public void testTwoPropByOneDelegete() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/twoPropByOneDelegete.kt", this::doTest);
        }

        @TestMetadata("useKPropertyLater.kt")
        public void testUseKPropertyLater() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/useKPropertyLater.kt", this::doTest);
        }

        @TestMetadata("useReflectionOnKProperty.kt")
        public void testUseReflectionOnKProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/useReflectionOnKProperty.kt", this::doTest);
        }

        @TestMetadata("valInInnerClass.kt")
        public void testValInInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/valInInnerClass.kt", this::doTest);
        }

        @TestMetadata("varInInnerClass.kt")
        public void testVarInInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/varInInnerClass.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/delegatedProperty/local")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Local extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInLocal() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/local"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("capturedLocalVal.kt")
            public void testCapturedLocalVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVal.kt", this::doTest);
            }

            @TestMetadata("capturedLocalValNoInline.kt")
            public void testCapturedLocalValNoInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalValNoInline.kt", this::doTest);
            }

            @TestMetadata("capturedLocalVar.kt")
            public void testCapturedLocalVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVar.kt", this::doTest);
            }

            @TestMetadata("capturedLocalVarNoInline.kt")
            public void testCapturedLocalVarNoInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVarNoInline.kt", this::doTest);
            }

            @TestMetadata("inlineGetValue.kt")
            public void testInlineGetValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/inlineGetValue.kt", this::doTest);
            }

            @TestMetadata("inlineOperators.kt")
            public void testInlineOperators() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/inlineOperators.kt", this::doTest);
            }

            @TestMetadata("kt12891.kt")
            public void testKt12891() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/kt12891.kt", this::doTest);
            }

            @TestMetadata("kt13557.kt")
            public void testKt13557() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/kt13557.kt", this::doTest);
            }

            @TestMetadata("kt16864.kt")
            public void testKt16864() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/kt16864.kt", this::doTest);
            }

            @TestMetadata("kt19690.kt")
            public void testKt19690() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/kt19690.kt", this::doTest);
            }

            @TestMetadata("localVal.kt")
            public void testLocalVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/localVal.kt", this::doTest);
            }

            @TestMetadata("localValNoExplicitType.kt")
            public void testLocalValNoExplicitType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/localValNoExplicitType.kt", this::doTest);
            }

            @TestMetadata("localVar.kt")
            public void testLocalVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/localVar.kt", this::doTest);
            }

            @TestMetadata("localVarNoExplicitType.kt")
            public void testLocalVarNoExplicitType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/local/localVarNoExplicitType.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/delegatedProperty/provideDelegate")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ProvideDelegate extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInProvideDelegate() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/provideDelegate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("differentReceivers.kt")
            public void testDifferentReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/differentReceivers.kt", this::doTest);
            }

            @TestMetadata("evaluationOrder.kt")
            public void testEvaluationOrder() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/evaluationOrder.kt", this::doTest);
            }

            @TestMetadata("evaluationOrderVar.kt")
            public void testEvaluationOrderVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/evaluationOrderVar.kt", this::doTest);
            }

            @TestMetadata("extensionDelegated.kt")
            public void testExtensionDelegated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/extensionDelegated.kt", this::doTest);
            }

            @TestMetadata("generic.kt")
            public void testGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/generic.kt", this::doTest);
            }

            @TestMetadata("hostCheck.kt")
            public void testHostCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/hostCheck.kt", this::doTest);
            }

            @TestMetadata("inClass.kt")
            public void testInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inClass.kt", this::doTest);
            }

            @TestMetadata("inlineProvideDelegate.kt")
            public void testInlineProvideDelegate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inlineProvideDelegate.kt", this::doTest);
            }

            @TestMetadata("jvmStaticInObject.kt")
            public void testJvmStaticInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/jvmStaticInObject.kt", this::doTest);
            }

            @TestMetadata("kt15437.kt")
            public void testKt15437() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt15437.kt", this::doTest);
            }

            @TestMetadata("kt16441.kt")
            public void testKt16441() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt16441.kt", this::doTest);
            }

            @TestMetadata("kt18902.kt")
            public void testKt18902() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt18902.kt", this::doTest);
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/local.kt", this::doTest);
            }

            @TestMetadata("localCaptured.kt")
            public void testLocalCaptured() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/localCaptured.kt", this::doTest);
            }

            @TestMetadata("localDifferentReceivers.kt")
            public void testLocalDifferentReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/localDifferentReceivers.kt", this::doTest);
            }

            @TestMetadata("memberExtension.kt")
            public void testMemberExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/memberExtension.kt", this::doTest);
            }

            @TestMetadata("propertyMetadata.kt")
            public void testPropertyMetadata() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/propertyMetadata.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/delegation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Delegation extends AbstractLightAnalysisModeTest {
        @TestMetadata("withDefaultParameters.kt")
        public void ignoreWithDefaultParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegation/withDefaultParameters.kt", this::doTest);
        }

        public void testAllFilesPresentInDelegation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/delegation"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("delegationToVal.kt")
        public void testDelegationToVal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegation/delegationToVal.kt", this::doTest);
        }

        @TestMetadata("delegationWithPrivateConstructor.kt")
        public void testDelegationWithPrivateConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegation/delegationWithPrivateConstructor.kt", this::doTest);
        }

        @TestMetadata("hiddenSuperOverrideIn1.0.kt")
        public void testHiddenSuperOverrideIn1_0() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegation/hiddenSuperOverrideIn1.0.kt", this::doTest);
        }

        @TestMetadata("kt8154.kt")
        public void testKt8154() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/delegation/kt8154.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/destructuringDeclInLambdaParam")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DestructuringDeclInLambdaParam extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInDestructuringDeclInLambdaParam() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/destructuringDeclInLambdaParam"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("extensionComponents.kt")
        public void testExtensionComponents() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/extensionComponents.kt", this::doTest);
        }

        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/generic.kt", this::doTest);
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/inline.kt", this::doTest);
        }

        @TestMetadata("otherParameters.kt")
        public void testOtherParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/otherParameters.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/simple.kt", this::doTest);
        }

        @TestMetadata("stdlibUsages.kt")
        public void testStdlibUsages() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/stdlibUsages.kt", this::doTest);
        }

        @TestMetadata("underscoreNames.kt")
        public void testUnderscoreNames() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/underscoreNames.kt", this::doTest);
        }

        @TestMetadata("withIndexed.kt")
        public void testWithIndexed() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/withIndexed.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Diagnostics extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInDiagnostics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("compiler/testData/codegen/box/diagnostics/functions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Functions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInFunctions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/inference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inference extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInInference() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/inference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("kt6176.kt")
                public void testKt6176() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/inference/kt6176.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Invoke extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInInvoke() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class OnObjects extends AbstractLightAnalysisModeTest {
                    public void testAllFilesPresentInOnObjects() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                    }

                    @TestMetadata("invokeOnClassObject1.kt")
                    public void testInvokeOnClassObject1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnClassObject2.kt")
                    public void testInvokeOnClassObject2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject2.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnClassObjectOfNestedClass1.kt")
                    public void testInvokeOnClassObjectOfNestedClass1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnClassObjectOfNestedClass2.kt")
                    public void testInvokeOnClassObjectOfNestedClass2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass2.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnEnum1.kt")
                    public void testInvokeOnEnum1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnEnum2.kt")
                    public void testInvokeOnEnum2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum2.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnImportedEnum1.kt")
                    public void testInvokeOnImportedEnum1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnImportedEnum2.kt")
                    public void testInvokeOnImportedEnum2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum2.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnObject1.kt")
                    public void testInvokeOnObject1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnObject2.kt")
                    public void testInvokeOnObject2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject2.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TailRecursion extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInTailRecursion() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/tailRecursion"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("defaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs.kt", this::doTest);
                }

                @TestMetadata("defaultArgsOverridden.kt")
                public void testDefaultArgsOverridden() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsOverridden.kt", this::doTest);
                }

                @TestMetadata("extensionTailCall.kt")
                public void testExtensionTailCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/extensionTailCall.kt", this::doTest);
                }

                @TestMetadata("functionWithNoTails.kt")
                public void testFunctionWithNoTails() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNoTails.kt", this::doTest);
                }

                @TestMetadata("functionWithNonTailRecursions.kt")
                public void testFunctionWithNonTailRecursions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNonTailRecursions.kt", this::doTest);
                }

                @TestMetadata("functionWithoutAnnotation.kt")
                public void testFunctionWithoutAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithoutAnnotation.kt", this::doTest);
                }

                @TestMetadata("infixCall.kt")
                public void testInfixCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixCall.kt", this::doTest);
                }

                @TestMetadata("infixRecursiveCall.kt")
                public void testInfixRecursiveCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixRecursiveCall.kt", this::doTest);
                }

                @TestMetadata("insideElvis.kt")
                public void testInsideElvis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/insideElvis.kt", this::doTest);
                }

                @TestMetadata("labeledThisReferences.kt")
                public void testLabeledThisReferences() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/labeledThisReferences.kt", this::doTest);
                }

                @TestMetadata("loops.kt")
                public void testLoops() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/loops.kt", this::doTest);
                }

                @TestMetadata("multilevelBlocks.kt")
                public void testMultilevelBlocks() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/multilevelBlocks.kt", this::doTest);
                }

                @TestMetadata("realIteratorFoldl.kt")
                public void testRealIteratorFoldl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realIteratorFoldl.kt", this::doTest);
                }

                @TestMetadata("realStringEscape.kt")
                public void testRealStringEscape() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringEscape.kt", this::doTest);
                }

                @TestMetadata("realStringRepeat.kt")
                public void testRealStringRepeat() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringRepeat.kt", this::doTest);
                }

                @TestMetadata("recursiveCallInLambda.kt")
                public void testRecursiveCallInLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLambda.kt", this::doTest);
                }

                @TestMetadata("recursiveCallInLocalFunction.kt")
                public void testRecursiveCallInLocalFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLocalFunction.kt", this::doTest);
                }

                @TestMetadata("recursiveInnerFunction.kt")
                public void testRecursiveInnerFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveInnerFunction.kt", this::doTest);
                }

                @TestMetadata("returnIf.kt")
                public void testReturnIf() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnIf.kt", this::doTest);
                }

                @TestMetadata("returnInCatch.kt")
                public void testReturnInCatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInCatch.kt", this::doTest);
                }

                @TestMetadata("returnInFinally.kt")
                public void testReturnInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInFinally.kt", this::doTest);
                }

                @TestMetadata("returnInIfInFinally.kt")
                public void testReturnInIfInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInIfInFinally.kt", this::doTest);
                }

                @TestMetadata("returnInParentheses.kt")
                public void testReturnInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInParentheses.kt", this::doTest);
                }

                @TestMetadata("returnInTry.kt")
                public void testReturnInTry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInTry.kt", this::doTest);
                }

                @TestMetadata("simpleBlock.kt")
                public void testSimpleBlock() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleBlock.kt", this::doTest);
                }

                @TestMetadata("simpleReturn.kt")
                public void testSimpleReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturn.kt", this::doTest);
                }

                @TestMetadata("simpleReturnWithElse.kt")
                public void testSimpleReturnWithElse() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturnWithElse.kt", this::doTest);
                }

                @TestMetadata("sum.kt")
                public void testSum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/sum.kt", this::doTest);
                }

                @TestMetadata("tailCallInBlockInParentheses.kt")
                public void testTailCallInBlockInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInBlockInParentheses.kt", this::doTest);
                }

                @TestMetadata("tailCallInParentheses.kt")
                public void testTailCallInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInParentheses.kt", this::doTest);
                }

                @TestMetadata("tailRecursionInFinally.kt")
                public void testTailRecursionInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailRecursionInFinally.kt", this::doTest);
                }

                @TestMetadata("thisReferences.kt")
                public void testThisReferences() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/thisReferences.kt", this::doTest);
                }

                @TestMetadata("unitBlocks.kt")
                public void testUnitBlocks() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/unitBlocks.kt", this::doTest);
                }

                @TestMetadata("whenWithCondition.kt")
                public void testWhenWithCondition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithCondition.kt", this::doTest);
                }

                @TestMetadata("whenWithInRange.kt")
                public void testWhenWithInRange() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithInRange.kt", this::doTest);
                }

                @TestMetadata("whenWithIs.kt")
                public void testWhenWithIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithIs.kt", this::doTest);
                }

                @TestMetadata("whenWithoutCondition.kt")
                public void testWhenWithoutCondition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithoutCondition.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/diagnostics/vararg")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Vararg extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInVararg() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/vararg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("kt4172.kt")
            public void testKt4172() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/vararg/kt4172.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/elvis")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Elvis extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInElvis() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/elvis"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/elvis/genericNull.kt", this::doTest);
        }

        @TestMetadata("kt6694ExactAnnotationForElvis.kt")
        public void testKt6694ExactAnnotationForElvis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/elvis/kt6694ExactAnnotationForElvis.kt", this::doTest);
        }

        @TestMetadata("nullNullOk.kt")
        public void testNullNullOk() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/elvis/nullNullOk.kt", this::doTest);
        }

        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/elvis/primitive.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/enum")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Enum extends AbstractLightAnalysisModeTest {
        @TestMetadata("abstractMethodInEnum.kt")
        public void testAbstractMethodInEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/abstractMethodInEnum.kt", this::doTest);
        }

        @TestMetadata("abstractNestedClass.kt")
        public void testAbstractNestedClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/abstractNestedClass.kt", this::doTest);
        }

        public void testAllFilesPresentInEnum() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/enum"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("asReturnExpression.kt")
        public void testAsReturnExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/asReturnExpression.kt", this::doTest);
        }

        @TestMetadata("classForEnumEntry.kt")
        public void testClassForEnumEntry() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/classForEnumEntry.kt", this::doTest);
        }

        @TestMetadata("companionObjectInEnum.kt")
        public void testCompanionObjectInEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/companionObjectInEnum.kt", this::doTest);
        }

        @TestMetadata("deepInnerClassInEnumEntryClass.kt")
        public void testDeepInnerClassInEnumEntryClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/deepInnerClassInEnumEntryClass.kt", this::doTest);
        }

        @TestMetadata("deepInnerClassInEnumEntryClass2.kt")
        public void testDeepInnerClassInEnumEntryClass2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/deepInnerClassInEnumEntryClass2.kt", this::doTest);
        }

        @TestMetadata("emptyConstructor.kt")
        public void testEmptyConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/emptyConstructor.kt", this::doTest);
        }

        @TestMetadata("emptyEnumValuesValueOf.kt")
        public void testEmptyEnumValuesValueOf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/emptyEnumValuesValueOf.kt", this::doTest);
        }

        @TestMetadata("enumCompanionInit.kt")
        public void testEnumCompanionInit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/enumCompanionInit.kt", this::doTest);
        }

        @TestMetadata("enumEntryReferenceFromInnerClassConstructor1.kt")
        public void testEnumEntryReferenceFromInnerClassConstructor1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor1.kt", this::doTest);
        }

        @TestMetadata("enumEntryReferenceFromInnerClassConstructor2.kt")
        public void testEnumEntryReferenceFromInnerClassConstructor2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor2.kt", this::doTest);
        }

        @TestMetadata("enumEntryReferenceFromInnerClassConstructor3.kt")
        public void testEnumEntryReferenceFromInnerClassConstructor3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor3.kt", this::doTest);
        }

        @TestMetadata("enumInheritedFromTrait.kt")
        public void testEnumInheritedFromTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/enumInheritedFromTrait.kt", this::doTest);
        }

        @TestMetadata("enumShort.kt")
        public void testEnumShort() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/enumShort.kt", this::doTest);
        }

        @TestMetadata("enumWithLambdaParameter.kt")
        public void testEnumWithLambdaParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/enumWithLambdaParameter.kt", this::doTest);
        }

        @TestMetadata("inPackage.kt")
        public void testInPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/inPackage.kt", this::doTest);
        }

        @TestMetadata("inclassobj.kt")
        public void testInclassobj() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/inclassobj.kt", this::doTest);
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/inner.kt", this::doTest);
        }

        @TestMetadata("innerClassInEnumEntryClass.kt")
        public void testInnerClassInEnumEntryClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/innerClassInEnumEntryClass.kt", this::doTest);
        }

        @TestMetadata("innerClassMethodInEnumEntryClass.kt")
        public void testInnerClassMethodInEnumEntryClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/innerClassMethodInEnumEntryClass.kt", this::doTest);
        }

        @TestMetadata("innerClassMethodInEnumEntryClass2.kt")
        public void testInnerClassMethodInEnumEntryClass2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/innerClassMethodInEnumEntryClass2.kt", this::doTest);
        }

        @TestMetadata("innerWithExistingClassObject.kt")
        public void testInnerWithExistingClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/innerWithExistingClassObject.kt", this::doTest);
        }

        @TestMetadata("kt1119.kt")
        public void testKt1119() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt1119.kt", this::doTest);
        }

        @TestMetadata("kt18731.kt")
        public void testKt18731() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt18731.kt", this::doTest);
        }

        @TestMetadata("kt20651.kt")
        public void testKt20651() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt20651.kt", this::doTest);
        }

        @TestMetadata("kt20651_inlineLambda.kt")
        public void testKt20651_inlineLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt20651_inlineLambda.kt", this::doTest);
        }

        @TestMetadata("kt20651a.kt")
        public void testKt20651a() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt20651a.kt", this::doTest);
        }

        @TestMetadata("kt20651b.kt")
        public void testKt20651b() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt20651b.kt", this::doTest);
        }

        @TestMetadata("kt2350.kt")
        public void testKt2350() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt2350.kt", this::doTest);
        }

        @TestMetadata("kt7257.kt")
        public void testKt7257() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257.kt", this::doTest);
        }

        @TestMetadata("kt7257_anonObjectInit.kt")
        public void testKt7257_anonObjectInit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_anonObjectInit.kt", this::doTest);
        }

        @TestMetadata("kt7257_anonObjectMethod.kt")
        public void testKt7257_anonObjectMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_anonObjectMethod.kt", this::doTest);
        }

        @TestMetadata("kt7257_boundReference1.kt")
        public void testKt7257_boundReference1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_boundReference1.kt", this::doTest);
        }

        @TestMetadata("kt7257_boundReference2.kt")
        public void testKt7257_boundReference2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_boundReference2.kt", this::doTest);
        }

        @TestMetadata("kt7257_boundReferenceWithImplicitReceiver.kt")
        public void testKt7257_boundReferenceWithImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_boundReferenceWithImplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("kt7257_explicitReceiver.kt")
        public void testKt7257_explicitReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_explicitReceiver.kt", this::doTest);
        }

        @TestMetadata("kt7257_fullyQualifiedReceiver.kt")
        public void testKt7257_fullyQualifiedReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_fullyQualifiedReceiver.kt", this::doTest);
        }

        @TestMetadata("kt7257_namedLocalFun.kt")
        public void testKt7257_namedLocalFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_namedLocalFun.kt", this::doTest);
        }

        @TestMetadata("kt7257_notInline.kt")
        public void testKt7257_notInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt7257_notInline.kt", this::doTest);
        }

        @TestMetadata("kt9711.kt")
        public void testKt9711() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt9711.kt", this::doTest);
        }

        @TestMetadata("kt9711_2.kt")
        public void testKt9711_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/kt9711_2.kt", this::doTest);
        }

        @TestMetadata("manyDefaultParameters.kt")
        public void testManyDefaultParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/manyDefaultParameters.kt", this::doTest);
        }

        @TestMetadata("modifierFlags.kt")
        public void testModifierFlags() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/modifierFlags.kt", this::doTest);
        }

        @TestMetadata("noClassForSimpleEnum.kt")
        public void testNoClassForSimpleEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/noClassForSimpleEnum.kt", this::doTest);
        }

        @TestMetadata("objectInEnum.kt")
        public void testObjectInEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/objectInEnum.kt", this::doTest);
        }

        @TestMetadata("ordinal.kt")
        public void testOrdinal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/ordinal.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/simple.kt", this::doTest);
        }

        @TestMetadata("sortEnumEntries.kt")
        public void testSortEnumEntries() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/sortEnumEntries.kt", this::doTest);
        }

        @TestMetadata("superCallInEnumLiteral.kt")
        public void testSuperCallInEnumLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/superCallInEnumLiteral.kt", this::doTest);
        }

        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/toString.kt", this::doTest);
        }

        @TestMetadata("valueof.kt")
        public void testValueof() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/valueof.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/enum/defaultCtor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DefaultCtor extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInDefaultCtor() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/enum/defaultCtor"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("constructorWithDefaultArguments.kt")
            public void testConstructorWithDefaultArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/defaultCtor/constructorWithDefaultArguments.kt", this::doTest);
            }

            @TestMetadata("constructorWithVararg.kt")
            public void testConstructorWithVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/defaultCtor/constructorWithVararg.kt", this::doTest);
            }

            @TestMetadata("entryClassConstructorWithDefaultArguments.kt")
            public void testEntryClassConstructorWithDefaultArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/defaultCtor/entryClassConstructorWithDefaultArguments.kt", this::doTest);
            }

            @TestMetadata("entryClassConstructorWithVarargs.kt")
            public void testEntryClassConstructorWithVarargs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/defaultCtor/entryClassConstructorWithVarargs.kt", this::doTest);
            }

            @TestMetadata("secondaryConstructorWithDefaultArguments.kt")
            public void testSecondaryConstructorWithDefaultArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/defaultCtor/secondaryConstructorWithDefaultArguments.kt", this::doTest);
            }

            @TestMetadata("secondaryConstructorWithVararg.kt")
            public void testSecondaryConstructorWithVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/enum/defaultCtor/secondaryConstructorWithVararg.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/evaluate")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Evaluate extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInEvaluate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/evaluate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/char.kt", this::doTest);
        }

        @TestMetadata("divide.kt")
        public void testDivide() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/divide.kt", this::doTest);
        }

        @TestMetadata("intrinsics.kt")
        public void testIntrinsics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/intrinsics.kt", this::doTest);
        }

        @TestMetadata("kt9443.kt")
        public void testKt9443() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/kt9443.kt", this::doTest);
        }

        @TestMetadata("maxValue.kt")
        public void testMaxValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/maxValue.kt", this::doTest);
        }

        @TestMetadata("maxValueByte.kt")
        public void testMaxValueByte() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/maxValueByte.kt", this::doTest);
        }

        @TestMetadata("maxValueInt.kt")
        public void testMaxValueInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/maxValueInt.kt", this::doTest);
        }

        @TestMetadata("minus.kt")
        public void testMinus() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/minus.kt", this::doTest);
        }

        @TestMetadata("mod.kt")
        public void testMod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/mod.kt", this::doTest);
        }

        @TestMetadata("multiply.kt")
        public void testMultiply() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/multiply.kt", this::doTest);
        }

        @TestMetadata("parenthesized.kt")
        public void testParenthesized() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/parenthesized.kt", this::doTest);
        }

        @TestMetadata("plus.kt")
        public void testPlus() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/plus.kt", this::doTest);
        }

        @TestMetadata("simpleCallBinary.kt")
        public void testSimpleCallBinary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/simpleCallBinary.kt", this::doTest);
        }

        @TestMetadata("unaryMinus.kt")
        public void testUnaryMinus() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/unaryMinus.kt", this::doTest);
        }

        @TestMetadata("unaryPlus.kt")
        public void testUnaryPlus() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/evaluate/unaryPlus.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/exclExcl")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ExclExcl extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInExclExcl() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/exclExcl"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/exclExcl/genericNull.kt", this::doTest);
        }

        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/exclExcl/primitive.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/extensionFunctions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ExtensionFunctions extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInExtensionFunctions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/extensionFunctions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("executionOrder.kt")
        public void testExecutionOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/executionOrder.kt", this::doTest);
        }

        @TestMetadata("kt1061.kt")
        public void testKt1061() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt1061.kt", this::doTest);
        }

        @TestMetadata("kt1249.kt")
        public void testKt1249() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt1249.kt", this::doTest);
        }

        @TestMetadata("kt1290.kt")
        public void testKt1290() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt1290.kt", this::doTest);
        }

        @TestMetadata("kt13312.kt")
        public void testKt13312() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt13312.kt", this::doTest);
        }

        @TestMetadata("kt1776.kt")
        public void testKt1776() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt1776.kt", this::doTest);
        }

        @TestMetadata("kt1953.kt")
        public void testKt1953() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt1953.kt", this::doTest);
        }

        @TestMetadata("kt1953_class.kt")
        public void testKt1953_class() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt1953_class.kt", this::doTest);
        }

        @TestMetadata("kt3285.kt")
        public void testKt3285() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt3285.kt", this::doTest);
        }

        @TestMetadata("kt3298.kt")
        public void testKt3298() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt3298.kt", this::doTest);
        }

        @TestMetadata("kt3646.kt")
        public void testKt3646() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt3646.kt", this::doTest);
        }

        @TestMetadata("kt3969.kt")
        public void testKt3969() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt3969.kt", this::doTest);
        }

        @TestMetadata("kt4228.kt")
        public void testKt4228() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt4228.kt", this::doTest);
        }

        @TestMetadata("kt475.kt")
        public void testKt475() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt475.kt", this::doTest);
        }

        @TestMetadata("kt5467.kt")
        public void testKt5467() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt5467.kt", this::doTest);
        }

        @TestMetadata("kt606.kt")
        public void testKt606() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt606.kt", this::doTest);
        }

        @TestMetadata("kt865.kt")
        public void testKt865() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/kt865.kt", this::doTest);
        }

        @TestMetadata("nested2.kt")
        public void testNested2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/nested2.kt", this::doTest);
        }

        @TestMetadata("shared.kt")
        public void testShared() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/shared.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/simple.kt", this::doTest);
        }

        @TestMetadata("thisMethodInObjectLiteral.kt")
        public void testThisMethodInObjectLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/thisMethodInObjectLiteral.kt", this::doTest);
        }

        @TestMetadata("virtual.kt")
        public void testVirtual() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/virtual.kt", this::doTest);
        }

        @TestMetadata("whenFail.kt")
        public void testWhenFail() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionFunctions/whenFail.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/extensionProperties")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ExtensionProperties extends AbstractLightAnalysisModeTest {
        @TestMetadata("accessorForPrivateSetter.kt")
        public void testAccessorForPrivateSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/accessorForPrivateSetter.kt", this::doTest);
        }

        public void testAllFilesPresentInExtensionProperties() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/extensionProperties"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("genericValForPrimitiveType.kt")
        public void testGenericValForPrimitiveType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/genericValForPrimitiveType.kt", this::doTest);
        }

        @TestMetadata("genericValMultipleUpperBounds.kt")
        public void testGenericValMultipleUpperBounds() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/genericValMultipleUpperBounds.kt", this::doTest);
        }

        @TestMetadata("genericVarForPrimitiveType.kt")
        public void testGenericVarForPrimitiveType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/genericVarForPrimitiveType.kt", this::doTest);
        }

        @TestMetadata("inClass.kt")
        public void testInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/inClass.kt", this::doTest);
        }

        @TestMetadata("inClassLongTypeInReceiver.kt")
        public void testInClassLongTypeInReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/inClassLongTypeInReceiver.kt", this::doTest);
        }

        @TestMetadata("inClassWithGetter.kt")
        public void testInClassWithGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/inClassWithGetter.kt", this::doTest);
        }

        @TestMetadata("inClassWithPrivateGetter.kt")
        public void testInClassWithPrivateGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateGetter.kt", this::doTest);
        }

        @TestMetadata("inClassWithPrivateSetter.kt")
        public void testInClassWithPrivateSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateSetter.kt", this::doTest);
        }

        @TestMetadata("inClassWithSetter.kt")
        public void testInClassWithSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/inClassWithSetter.kt", this::doTest);
        }

        @TestMetadata("kt9897.kt")
        public void testKt9897() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/kt9897.kt", this::doTest);
        }

        @TestMetadata("kt9897_topLevel.kt")
        public void testKt9897_topLevel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/kt9897_topLevel.kt", this::doTest);
        }

        @TestMetadata("nonAbstractInInterface.kt")
        public void testNonAbstractInInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/nonAbstractInInterface.kt", this::doTest);
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/topLevel.kt", this::doTest);
        }

        @TestMetadata("topLevelLongTypeInReceiver.kt")
        public void testTopLevelLongTypeInReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/extensionProperties/topLevelLongTypeInReceiver.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/external")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class External extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInExternal() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/external"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("jvmStaticExternal.kt")
        public void testJvmStaticExternal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/external/jvmStaticExternal.kt", this::doTest);
        }

        @TestMetadata("jvmStaticExternalPrivate.kt")
        public void testJvmStaticExternalPrivate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/external/jvmStaticExternalPrivate.kt", this::doTest);
        }

        @TestMetadata("withDefaultArg.kt")
        public void testWithDefaultArg() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/external/withDefaultArg.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/fakeOverride")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FakeOverride extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInFakeOverride() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/fakeOverride"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("diamondFunction.kt")
        public void testDiamondFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fakeOverride/diamondFunction.kt", this::doTest);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fakeOverride/function.kt", this::doTest);
        }

        @TestMetadata("propertyGetter.kt")
        public void testPropertyGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fakeOverride/propertyGetter.kt", this::doTest);
        }

        @TestMetadata("propertySetter.kt")
        public void testPropertySetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fakeOverride/propertySetter.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/fieldRename")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FieldRename extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInFieldRename() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/fieldRename"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("constructorAndClassObject.kt")
        public void testConstructorAndClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fieldRename/constructorAndClassObject.kt", this::doTest);
        }

        @TestMetadata("delegates.kt")
        public void testDelegates() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fieldRename/delegates.kt", this::doTest);
        }

        @TestMetadata("genericPropertyWithItself.kt")
        public void testGenericPropertyWithItself() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fieldRename/genericPropertyWithItself.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/finally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Finally extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInFinally() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/finally"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("finallyAndFinally.kt")
        public void testFinallyAndFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/finallyAndFinally.kt", this::doTest);
        }

        @TestMetadata("kt3549.kt")
        public void testKt3549() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/kt3549.kt", this::doTest);
        }

        @TestMetadata("kt3706.kt")
        public void testKt3706() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/kt3706.kt", this::doTest);
        }

        @TestMetadata("kt3867.kt")
        public void testKt3867() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/kt3867.kt", this::doTest);
        }

        @TestMetadata("kt3874.kt")
        public void testKt3874() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/kt3874.kt", this::doTest);
        }

        @TestMetadata("kt3894.kt")
        public void testKt3894() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/kt3894.kt", this::doTest);
        }

        @TestMetadata("kt4134.kt")
        public void testKt4134() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/kt4134.kt", this::doTest);
        }

        @TestMetadata("loopAndFinally.kt")
        public void testLoopAndFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/loopAndFinally.kt", this::doTest);
        }

        @TestMetadata("notChainCatch.kt")
        public void testNotChainCatch() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/notChainCatch.kt", this::doTest);
        }

        @TestMetadata("tryFinally.kt")
        public void testTryFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/tryFinally.kt", this::doTest);
        }

        @TestMetadata("tryLoopTry.kt")
        public void testTryLoopTry() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/finally/tryLoopTry.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/fullJdk")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FullJdk extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInFullJdk() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/fullJdk"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("charBuffer.kt")
        public void testCharBuffer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/charBuffer.kt", this::doTest);
        }

        @TestMetadata("ifInWhile.kt")
        public void testIfInWhile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/ifInWhile.kt", this::doTest);
        }

        @TestMetadata("intCountDownLatchExtension.kt")
        public void testIntCountDownLatchExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/intCountDownLatchExtension.kt", this::doTest);
        }

        @TestMetadata("kt434.kt")
        public void testKt434() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/kt434.kt", this::doTest);
        }

        @TestMetadata("platformTypeAssertionStackTrace.kt")
        public void testPlatformTypeAssertionStackTrace() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/platformTypeAssertionStackTrace.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/fullJdk/native")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Native extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInNative() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/fullJdk/native"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("nativePropertyAccessors.kt")
            public void testNativePropertyAccessors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/native/nativePropertyAccessors.kt", this::doTest);
            }

            @TestMetadata("simpleNative.kt")
            public void testSimpleNative() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/native/simpleNative.kt", this::doTest);
            }

            @TestMetadata("topLevel.kt")
            public void testTopLevel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/native/topLevel.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/fullJdk/regressions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Regressions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInRegressions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/fullJdk/regressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("kt15112.kt")
            public void testKt15112() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/regressions/kt15112.kt", this::doTest);
            }

            @TestMetadata("kt1770.kt")
            public void testKt1770() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/fullJdk/regressions/kt1770.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/functions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Functions extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInFunctions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/functions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("coerceVoidToArray.kt")
        public void testCoerceVoidToArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/coerceVoidToArray.kt", this::doTest);
        }

        @TestMetadata("coerceVoidToObject.kt")
        public void testCoerceVoidToObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/coerceVoidToObject.kt", this::doTest);
        }

        @TestMetadata("dataLocalVariable.kt")
        public void testDataLocalVariable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/dataLocalVariable.kt", this::doTest);
        }

        @TestMetadata("defaultargs.kt")
        public void testDefaultargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/defaultargs.kt", this::doTest);
        }

        @TestMetadata("defaultargs1.kt")
        public void testDefaultargs1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/defaultargs1.kt", this::doTest);
        }

        @TestMetadata("defaultargs2.kt")
        public void testDefaultargs2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/defaultargs2.kt", this::doTest);
        }

        @TestMetadata("defaultargs3.kt")
        public void testDefaultargs3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/defaultargs3.kt", this::doTest);
        }

        @TestMetadata("defaultargs4.kt")
        public void testDefaultargs4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/defaultargs4.kt", this::doTest);
        }

        @TestMetadata("defaultargs5.kt")
        public void testDefaultargs5() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/defaultargs5.kt", this::doTest);
        }

        @TestMetadata("defaultargs6.kt")
        public void testDefaultargs6() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/defaultargs6.kt", this::doTest);
        }

        @TestMetadata("defaultargs7.kt")
        public void testDefaultargs7() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/defaultargs7.kt", this::doTest);
        }

        @TestMetadata("ea33909.kt")
        public void testEa33909() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/ea33909.kt", this::doTest);
        }

        @TestMetadata("fakeDescriptorWithSeveralOverridenOne.kt")
        public void testFakeDescriptorWithSeveralOverridenOne() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/fakeDescriptorWithSeveralOverridenOne.kt", this::doTest);
        }

        @TestMetadata("functionNtoString.kt")
        public void testFunctionNtoString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/functionNtoString.kt", this::doTest);
        }

        @TestMetadata("functionNtoStringGeneric.kt")
        public void testFunctionNtoStringGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/functionNtoStringGeneric.kt", this::doTest);
        }

        @TestMetadata("functionNtoStringNoReflect.kt")
        public void testFunctionNtoStringNoReflect() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/functionNtoStringNoReflect.kt", this::doTest);
        }

        @TestMetadata("infixRecursiveCall.kt")
        public void testInfixRecursiveCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/infixRecursiveCall.kt", this::doTest);
        }

        @TestMetadata("kt1038.kt")
        public void testKt1038() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt1038.kt", this::doTest);
        }

        @TestMetadata("kt1199.kt")
        public void testKt1199() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt1199.kt", this::doTest);
        }

        @TestMetadata("kt1413.kt")
        public void testKt1413() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt1413.kt", this::doTest);
        }

        @TestMetadata("kt1649_1.kt")
        public void testKt1649_1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt1649_1.kt", this::doTest);
        }

        @TestMetadata("kt1649_2.kt")
        public void testKt1649_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt1649_2.kt", this::doTest);
        }

        @TestMetadata("kt1739.kt")
        public void testKt1739() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt1739.kt", this::doTest);
        }

        @TestMetadata("kt2270.kt")
        public void testKt2270() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt2270.kt", this::doTest);
        }

        @TestMetadata("kt2271.kt")
        public void testKt2271() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt2271.kt", this::doTest);
        }

        @TestMetadata("kt2280.kt")
        public void testKt2280() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt2280.kt", this::doTest);
        }

        @TestMetadata("kt2481.kt")
        public void testKt2481() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt2481.kt", this::doTest);
        }

        @TestMetadata("kt2716.kt")
        public void testKt2716() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt2716.kt", this::doTest);
        }

        @TestMetadata("kt2739.kt")
        public void testKt2739() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt2739.kt", this::doTest);
        }

        @TestMetadata("kt2929.kt")
        public void testKt2929() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt2929.kt", this::doTest);
        }

        @TestMetadata("kt3214.kt")
        public void testKt3214() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt3214.kt", this::doTest);
        }

        @TestMetadata("kt3313.kt")
        public void testKt3313() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt3313.kt", this::doTest);
        }

        @TestMetadata("kt3573.kt")
        public void testKt3573() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt3573.kt", this::doTest);
        }

        @TestMetadata("kt3724.kt")
        public void testKt3724() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt3724.kt", this::doTest);
        }

        @TestMetadata("kt395.kt")
        public void testKt395() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt395.kt", this::doTest);
        }

        @TestMetadata("kt785.kt")
        public void testKt785() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt785.kt", this::doTest);
        }

        @TestMetadata("kt873.kt")
        public void testKt873() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/kt873.kt", this::doTest);
        }

        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunction.kt", this::doTest);
        }

        @TestMetadata("localReturnInsideFunctionExpression.kt")
        public void testLocalReturnInsideFunctionExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localReturnInsideFunctionExpression.kt", this::doTest);
        }

        @TestMetadata("nothisnoclosure.kt")
        public void testNothisnoclosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/nothisnoclosure.kt", this::doTest);
        }

        @TestMetadata("prefixRecursiveCall.kt")
        public void testPrefixRecursiveCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/prefixRecursiveCall.kt", this::doTest);
        }

        @TestMetadata("recursiveCompareTo.kt")
        public void testRecursiveCompareTo() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/recursiveCompareTo.kt", this::doTest);
        }

        @TestMetadata("recursiveIncrementCall.kt")
        public void testRecursiveIncrementCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/recursiveIncrementCall.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/functions/functionExpression")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FunctionExpression extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInFunctionExpression() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/functions/functionExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("functionExpression.kt")
            public void testFunctionExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpression.kt", this::doTest);
            }

            @TestMetadata("functionExpressionWithThisReference.kt")
            public void testFunctionExpressionWithThisReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpressionWithThisReference.kt", this::doTest);
            }

            @TestMetadata("functionLiteralExpression.kt")
            public void testFunctionLiteralExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/functionExpression/functionLiteralExpression.kt", this::doTest);
            }

            @TestMetadata("underscoreParameters.kt")
            public void testUnderscoreParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/functionExpression/underscoreParameters.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/functions/invoke")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Invoke extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInInvoke() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/functions/invoke"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("castFunctionToExtension.kt")
            public void testCastFunctionToExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/castFunctionToExtension.kt", this::doTest);
            }

            @TestMetadata("extensionInvokeOnExpr.kt")
            public void testExtensionInvokeOnExpr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/extensionInvokeOnExpr.kt", this::doTest);
            }

            @TestMetadata("implicitInvokeInCompanionObjectWithFunctionalArgument.kt")
            public void testImplicitInvokeInCompanionObjectWithFunctionalArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/implicitInvokeInCompanionObjectWithFunctionalArgument.kt", this::doTest);
            }

            @TestMetadata("implicitInvokeWithFunctionLiteralArgument.kt")
            public void testImplicitInvokeWithFunctionLiteralArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/implicitInvokeWithFunctionLiteralArgument.kt", this::doTest);
            }

            @TestMetadata("invoke.kt")
            public void testInvoke() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/invoke.kt", this::doTest);
            }

            @TestMetadata("invokeOnExprByConvention.kt")
            public void testInvokeOnExprByConvention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/invokeOnExprByConvention.kt", this::doTest);
            }

            @TestMetadata("invokeOnSyntheticProperty.kt")
            public void testInvokeOnSyntheticProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/invokeOnSyntheticProperty.kt", this::doTest);
            }

            @TestMetadata("kt3189.kt")
            public void testKt3189() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/kt3189.kt", this::doTest);
            }

            @TestMetadata("kt3190.kt")
            public void testKt3190() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/kt3190.kt", this::doTest);
            }

            @TestMetadata("kt3297.kt")
            public void testKt3297() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/kt3297.kt", this::doTest);
            }

            @TestMetadata("kt3450getAndInvoke.kt")
            public void testKt3450getAndInvoke() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/kt3450getAndInvoke.kt", this::doTest);
            }

            @TestMetadata("kt3631invokeOnString.kt")
            public void testKt3631invokeOnString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/kt3631invokeOnString.kt", this::doTest);
            }

            @TestMetadata("kt3772.kt")
            public void testKt3772() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/kt3772.kt", this::doTest);
            }

            @TestMetadata("kt3821invokeOnThis.kt")
            public void testKt3821invokeOnThis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/kt3821invokeOnThis.kt", this::doTest);
            }

            @TestMetadata("kt3822invokeOnThis.kt")
            public void testKt3822invokeOnThis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/invoke/kt3822invokeOnThis.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/functions/localFunctions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LocalFunctions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInLocalFunctions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/functions/localFunctions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("callInlineLocalInLambda.kt")
            public void testCallInlineLocalInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/callInlineLocalInLambda.kt", this::doTest);
            }

            @TestMetadata("definedWithinLambda.kt")
            public void testDefinedWithinLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambda.kt", this::doTest);
            }

            @TestMetadata("definedWithinLambdaInnerUsage1.kt")
            public void testDefinedWithinLambdaInnerUsage1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambdaInnerUsage1.kt", this::doTest);
            }

            @TestMetadata("definedWithinLambdaInnerUsage2.kt")
            public void testDefinedWithinLambdaInnerUsage2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambdaInnerUsage2.kt", this::doTest);
            }

            @TestMetadata("kt2895.kt")
            public void testKt2895() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt2895.kt", this::doTest);
            }

            @TestMetadata("kt3308.kt")
            public void testKt3308() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt3308.kt", this::doTest);
            }

            @TestMetadata("kt3978.kt")
            public void testKt3978() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt3978.kt", this::doTest);
            }

            @TestMetadata("kt4119.kt")
            public void testKt4119() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt4119.kt", this::doTest);
            }

            @TestMetadata("kt4119_2.kt")
            public void testKt4119_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt4119_2.kt", this::doTest);
            }

            @TestMetadata("kt4514.kt")
            public void testKt4514() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt4514.kt", this::doTest);
            }

            @TestMetadata("kt4777.kt")
            public void testKt4777() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt4777.kt", this::doTest);
            }

            @TestMetadata("kt4783.kt")
            public void testKt4783() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt4783.kt", this::doTest);
            }

            @TestMetadata("kt4784.kt")
            public void testKt4784() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt4784.kt", this::doTest);
            }

            @TestMetadata("kt4989.kt")
            public void testKt4989() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/kt4989.kt", this::doTest);
            }

            @TestMetadata("localExtensionOnNullableParameter.kt")
            public void testLocalExtensionOnNullableParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/localExtensionOnNullableParameter.kt", this::doTest);
            }

            @TestMetadata("localFunctionInConstructor.kt")
            public void testLocalFunctionInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionInConstructor.kt", this::doTest);
            }

            @TestMetadata("localFunctionVsLocalVariable.kt")
            public void testLocalFunctionVsLocalVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionVsLocalVariable.kt", this::doTest);
            }

            @TestMetadata("overloadedLocalFunWithoutClosure.kt")
            public void testOverloadedLocalFunWithoutClosure() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunWithoutClosure.kt", this::doTest);
            }

            @TestMetadata("overloadedLocalFunction.kt")
            public void testOverloadedLocalFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction.kt", this::doTest);
            }

            @TestMetadata("overloadedLocalFunction1.kt")
            public void testOverloadedLocalFunction1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction1.kt", this::doTest);
            }

            @TestMetadata("overloadedLocalFunction2.kt")
            public void testOverloadedLocalFunction2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction2.kt", this::doTest);
            }

            @TestMetadata("overloadedLocalFunction3.kt")
            public void testOverloadedLocalFunction3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction3.kt", this::doTest);
            }

            @TestMetadata("parameterAsDefaultValue.kt")
            public void testParameterAsDefaultValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/functions/localFunctions/parameterAsDefaultValue.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/hashPMap")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class HashPMap extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInHashPMap() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/hashPMap"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("empty.kt")
        public void testEmpty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/hashPMap/empty.kt", this::doTest);
        }

        @TestMetadata("manyNumbers.kt")
        public void testManyNumbers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/hashPMap/manyNumbers.kt", this::doTest);
        }

        @TestMetadata("rewriteWithDifferent.kt")
        public void testRewriteWithDifferent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/hashPMap/rewriteWithDifferent.kt", this::doTest);
        }

        @TestMetadata("rewriteWithEqual.kt")
        public void testRewriteWithEqual() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/hashPMap/rewriteWithEqual.kt", this::doTest);
        }

        @TestMetadata("simplePlusGet.kt")
        public void testSimplePlusGet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/hashPMap/simplePlusGet.kt", this::doTest);
        }

        @TestMetadata("simplePlusMinus.kt")
        public void testSimplePlusMinus() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/hashPMap/simplePlusMinus.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/ieee754")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Ieee754 extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInIeee754() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ieee754"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("anyToReal.kt")
        public void testAnyToReal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/anyToReal.kt", this::doTest);
        }

        @TestMetadata("asComparableToDouble.kt")
        public void testAsComparableToDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/asComparableToDouble.kt", this::doTest);
        }

        @TestMetadata("asComparableToDouble_properIeeeComparisons.kt")
        public void testAsComparableToDouble_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/asComparableToDouble_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("comparableToTWithT_properIeeeComparisons.kt")
        public void testComparableToTWithT_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/comparableToTWithT_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("comparableTypeCast.kt")
        public void testComparableTypeCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/comparableTypeCast.kt", this::doTest);
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/dataClass.kt", this::doTest);
        }

        @TestMetadata("differentTypesComparison.kt")
        public void testDifferentTypesComparison() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/differentTypesComparison.kt", this::doTest);
        }

        @TestMetadata("equalsDouble.kt")
        public void testEqualsDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsDouble.kt", this::doTest);
        }

        @TestMetadata("equalsDouble_properIeeeComparisons.kt")
        public void testEqualsDouble_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsDouble_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("equalsFloat.kt")
        public void testEqualsFloat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsFloat.kt", this::doTest);
        }

        @TestMetadata("equalsFloat_properIeeeComparisons.kt")
        public void testEqualsFloat_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsFloat_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("equalsNaN.kt")
        public void testEqualsNaN() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsNaN.kt", this::doTest);
        }

        @TestMetadata("equalsNaN_properIeeeComparisons.kt")
        public void testEqualsNaN_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsNaN_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("equalsNullableDouble.kt")
        public void testEqualsNullableDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsNullableDouble.kt", this::doTest);
        }

        @TestMetadata("equalsNullableDouble_properIeeeComparisons.kt")
        public void testEqualsNullableDouble_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsNullableDouble_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("equalsNullableFloat.kt")
        public void testEqualsNullableFloat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsNullableFloat.kt", this::doTest);
        }

        @TestMetadata("equalsNullableFloat_properIeeeComparisons.kt")
        public void testEqualsNullableFloat_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/equalsNullableFloat_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("explicitCompareCall.kt")
        public void testExplicitCompareCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/explicitCompareCall.kt", this::doTest);
        }

        @TestMetadata("explicitEqualsCall.kt")
        public void testExplicitEqualsCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/explicitEqualsCall.kt", this::doTest);
        }

        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/generic.kt", this::doTest);
        }

        @TestMetadata("greaterDouble.kt")
        public void testGreaterDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/greaterDouble.kt", this::doTest);
        }

        @TestMetadata("greaterDouble_properIeeeComparisons.kt")
        public void testGreaterDouble_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/greaterDouble_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("greaterFloat.kt")
        public void testGreaterFloat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/greaterFloat.kt", this::doTest);
        }

        @TestMetadata("greaterFloat_properIeeeComparisons.kt")
        public void testGreaterFloat_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/greaterFloat_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/inline.kt", this::doTest);
        }

        @TestMetadata("lessDouble.kt")
        public void testLessDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/lessDouble.kt", this::doTest);
        }

        @TestMetadata("lessDouble_properIeeeComparisons.kt")
        public void testLessDouble_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/lessDouble_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("lessFloat.kt")
        public void testLessFloat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/lessFloat.kt", this::doTest);
        }

        @TestMetadata("lessFloat_properIeeeComparisons.kt")
        public void testLessFloat_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/lessFloat_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("nullableAnyToReal.kt")
        public void testNullableAnyToReal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableAnyToReal.kt", this::doTest);
        }

        @TestMetadata("nullableDoubleEquals.kt")
        public void testNullableDoubleEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEquals.kt", this::doTest);
        }

        @TestMetadata("nullableDoubleEquals10.kt")
        public void testNullableDoubleEquals10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEquals10.kt", this::doTest);
        }

        @TestMetadata("nullableDoubleEqualsLV13.kt")
        public void testNullableDoubleEqualsLV13() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEqualsLV13.kt", this::doTest);
        }

        @TestMetadata("nullableDoubleNotEquals.kt")
        public void testNullableDoubleNotEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableDoubleNotEquals.kt", this::doTest);
        }

        @TestMetadata("nullableDoubleNotEquals10.kt")
        public void testNullableDoubleNotEquals10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableDoubleNotEquals10.kt", this::doTest);
        }

        @TestMetadata("nullableFloatEquals.kt")
        public void testNullableFloatEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableFloatEquals.kt", this::doTest);
        }

        @TestMetadata("nullableFloatEquals10.kt")
        public void testNullableFloatEquals10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableFloatEquals10.kt", this::doTest);
        }

        @TestMetadata("nullableFloatNotEquals.kt")
        public void testNullableFloatNotEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableFloatNotEquals.kt", this::doTest);
        }

        @TestMetadata("nullableFloatNotEquals10.kt")
        public void testNullableFloatNotEquals10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableFloatNotEquals10.kt", this::doTest);
        }

        @TestMetadata("nullableIntEquals.kt")
        public void testNullableIntEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/nullableIntEquals.kt", this::doTest);
        }

        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/safeCall.kt", this::doTest);
        }

        @TestMetadata("smartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons.kt")
        public void testSmartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/smartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("smartCastToDifferentTypes.kt")
        public void testSmartCastToDifferentTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypes.kt", this::doTest);
        }

        @TestMetadata("smartCastToDifferentTypesWithNumericPromotion.kt")
        public void testSmartCastToDifferentTypesWithNumericPromotion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypesWithNumericPromotion.kt", this::doTest);
        }

        @TestMetadata("smartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons.kt")
        public void testSmartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("smartCastToDifferentTypes_properIeeeComparisons.kt")
        public void testSmartCastToDifferentTypes_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypes_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("smartCastToDoubleAndComparableToDouble.kt")
        public void testSmartCastToDoubleAndComparableToDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/smartCastToDoubleAndComparableToDouble.kt", this::doTest);
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/when.kt", this::doTest);
        }

        @TestMetadata("when10.kt")
        public void testWhen10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/when10.kt", this::doTest);
        }

        @TestMetadata("when10_properIeeeComparisons.kt")
        public void testWhen10_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/when10_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("whenNoSubject.kt")
        public void testWhenNoSubject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/whenNoSubject.kt", this::doTest);
        }

        @TestMetadata("whenNoSubject_properIeeeComparisons.kt")
        public void testWhenNoSubject_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/whenNoSubject_properIeeeComparisons.kt", this::doTest);
        }

        @TestMetadata("whenNullableSmartCast.kt")
        public void testWhenNullableSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/whenNullableSmartCast.kt", this::doTest);
        }

        @TestMetadata("whenNullableSmartCast10.kt")
        public void testWhenNullableSmartCast10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/whenNullableSmartCast10.kt", this::doTest);
        }

        @TestMetadata("when_properIeeeComparisons.kt")
        public void testWhen_properIeeeComparisons() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ieee754/when_properIeeeComparisons.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/increment")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Increment extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInIncrement() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/increment"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("arrayElement.kt")
        public void testArrayElement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/arrayElement.kt", this::doTest);
        }

        @TestMetadata("assignPlusOnSmartCast.kt")
        public void testAssignPlusOnSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/assignPlusOnSmartCast.kt", this::doTest);
        }

        @TestMetadata("augmentedAssignmentWithComplexRhs.kt")
        public void testAugmentedAssignmentWithComplexRhs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/augmentedAssignmentWithComplexRhs.kt", this::doTest);
        }

        @TestMetadata("classNaryGetSet.kt")
        public void testClassNaryGetSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/classNaryGetSet.kt", this::doTest);
        }

        @TestMetadata("classWithGetSet.kt")
        public void testClassWithGetSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/classWithGetSet.kt", this::doTest);
        }

        @TestMetadata("extOnLong.kt")
        public void testExtOnLong() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/extOnLong.kt", this::doTest);
        }

        @TestMetadata("genericClassWithGetSet.kt")
        public void testGenericClassWithGetSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/genericClassWithGetSet.kt", this::doTest);
        }

        @TestMetadata("memberExtOnLong.kt")
        public void testMemberExtOnLong() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/memberExtOnLong.kt", this::doTest);
        }

        @TestMetadata("mutableListElement.kt")
        public void testMutableListElement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/mutableListElement.kt", this::doTest);
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/nullable.kt", this::doTest);
        }

        @TestMetadata("postfixIncrementDoubleSmartCast.kt")
        public void testPostfixIncrementDoubleSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/postfixIncrementDoubleSmartCast.kt", this::doTest);
        }

        @TestMetadata("postfixIncrementOnClass.kt")
        public void testPostfixIncrementOnClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/postfixIncrementOnClass.kt", this::doTest);
        }

        @TestMetadata("postfixIncrementOnClassSmartCast.kt")
        public void testPostfixIncrementOnClassSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/postfixIncrementOnClassSmartCast.kt", this::doTest);
        }

        @TestMetadata("postfixIncrementOnShortSmartCast.kt")
        public void testPostfixIncrementOnShortSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/postfixIncrementOnShortSmartCast.kt", this::doTest);
        }

        @TestMetadata("postfixIncrementOnSmartCast.kt")
        public void testPostfixIncrementOnSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/postfixIncrementOnSmartCast.kt", this::doTest);
        }

        @TestMetadata("postfixNullableClassIncrement.kt")
        public void testPostfixNullableClassIncrement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/postfixNullableClassIncrement.kt", this::doTest);
        }

        @TestMetadata("postfixNullableIncrement.kt")
        public void testPostfixNullableIncrement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/postfixNullableIncrement.kt", this::doTest);
        }

        @TestMetadata("prefixIncrementOnClass.kt")
        public void testPrefixIncrementOnClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/prefixIncrementOnClass.kt", this::doTest);
        }

        @TestMetadata("prefixIncrementOnClassSmartCast.kt")
        public void testPrefixIncrementOnClassSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/prefixIncrementOnClassSmartCast.kt", this::doTest);
        }

        @TestMetadata("prefixIncrementOnSmartCast.kt")
        public void testPrefixIncrementOnSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/prefixIncrementOnSmartCast.kt", this::doTest);
        }

        @TestMetadata("prefixNullableClassIncrement.kt")
        public void testPrefixNullableClassIncrement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/prefixNullableClassIncrement.kt", this::doTest);
        }

        @TestMetadata("prefixNullableIncrement.kt")
        public void testPrefixNullableIncrement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/increment/prefixNullableIncrement.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineClasses extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInInlineClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("boxUnboxInlineClassesWithOperatorsGetSet.kt")
        public void testBoxUnboxInlineClassesWithOperatorsGetSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxInlineClassesWithOperatorsGetSet.kt", this::doTest);
        }

        @TestMetadata("boxUnboxOfInlineClassForCapturedVars.kt")
        public void testBoxUnboxOfInlineClassForCapturedVars() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxOfInlineClassForCapturedVars.kt", this::doTest);
        }

        @TestMetadata("callComputablePropertyInsideInlineClass.kt")
        public void testCallComputablePropertyInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/callComputablePropertyInsideInlineClass.kt", this::doTest);
        }

        @TestMetadata("checkBoxUnboxOfArgumentsOnInlinedFunctions.kt")
        public void testCheckBoxUnboxOfArgumentsOnInlinedFunctions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkBoxUnboxOfArgumentsOnInlinedFunctions.kt", this::doTest);
        }

        @TestMetadata("checkBoxingAfterAssertionOperator.kt")
        public void testCheckBoxingAfterAssertionOperator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingAfterAssertionOperator.kt", this::doTest);
        }

        @TestMetadata("checkBoxingForNonLocalAndLabeledReturns.kt")
        public void testCheckBoxingForNonLocalAndLabeledReturns() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForNonLocalAndLabeledReturns.kt", this::doTest);
        }

        @TestMetadata("checkBoxingFromReturnTypeForInlineClasses.kt")
        public void testCheckBoxingFromReturnTypeForInlineClasses() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingFromReturnTypeForInlineClasses.kt", this::doTest);
        }

        @TestMetadata("checkBoxingOnFunctionCalls.kt")
        public void testCheckBoxingOnFunctionCalls() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnFunctionCalls.kt", this::doTest);
        }

        @TestMetadata("checkBoxingOnLocalVariableAssignments.kt")
        public void testCheckBoxingOnLocalVariableAssignments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnLocalVariableAssignments.kt", this::doTest);
        }

        @TestMetadata("checkCallingMembersInsideInlineClass.kt")
        public void testCheckCallingMembersInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkCallingMembersInsideInlineClass.kt", this::doTest);
        }

        @TestMetadata("checkCastToInlineClass.kt")
        public void testCheckCastToInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkCastToInlineClass.kt", this::doTest);
        }

        @TestMetadata("checkForInstanceOfInlineClass.kt")
        public void testCheckForInstanceOfInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkForInstanceOfInlineClass.kt", this::doTest);
        }

        @TestMetadata("checkLambdaWithInlineClassesInFunctionalType.kt")
        public void testCheckLambdaWithInlineClassesInFunctionalType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkLambdaWithInlineClassesInFunctionalType.kt", this::doTest);
        }

        @TestMetadata("checkUnboxingResultFromTypeVariable.kt")
        public void testCheckUnboxingResultFromTypeVariable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/checkUnboxingResultFromTypeVariable.kt", this::doTest);
        }

        @TestMetadata("computablePropertyInsideInlineClass.kt")
        public void testComputablePropertyInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/computablePropertyInsideInlineClass.kt", this::doTest);
        }

        @TestMetadata("createInlineClassInArgumentPosition.kt")
        public void testCreateInlineClassInArgumentPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/createInlineClassInArgumentPosition.kt", this::doTest);
        }

        @TestMetadata("emptyConstructorForInlineClass.kt")
        public void testEmptyConstructorForInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/emptyConstructorForInlineClass.kt", this::doTest);
        }

        @TestMetadata("inlineClassAsLastExpressionInInLambda.kt")
        public void testInlineClassAsLastExpressionInInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/inlineClassAsLastExpressionInInLambda.kt", this::doTest);
        }

        @TestMetadata("noAssertionsOnInlineClassBasedOnNullableType.kt")
        public void testNoAssertionsOnInlineClassBasedOnNullableType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/noAssertionsOnInlineClassBasedOnNullableType.kt", this::doTest);
        }

        @TestMetadata("passInlineClassAsVararg.kt")
        public void testPassInlineClassAsVararg() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassAsVararg.kt", this::doTest);
        }

        @TestMetadata("passInlineClassWithSpreadOperatorToVarargs.kt")
        public void testPassInlineClassWithSpreadOperatorToVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassWithSpreadOperatorToVarargs.kt", this::doTest);
        }

        @TestMetadata("referToPropertyInCompanionObjectOfInlineClass.kt")
        public void testReferToPropertyInCompanionObjectOfInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/referToPropertyInCompanionObjectOfInlineClass.kt", this::doTest);
        }

        @TestMetadata("referToUnderlyingPropertyInsideInlineClass.kt")
        public void testReferToUnderlyingPropertyInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyInsideInlineClass.kt", this::doTest);
        }

        @TestMetadata("referToUnderlyingPropertyOfInlineClass.kt")
        public void testReferToUnderlyingPropertyOfInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyOfInlineClass.kt", this::doTest);
        }

        @TestMetadata("UIntArraySortExample.kt")
        public void testUIntArraySortExample() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/UIntArraySortExample.kt", this::doTest);
        }

        @TestMetadata("useInlineClassesInsideElvisOperator.kt")
        public void testUseInlineClassesInsideElvisOperator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/useInlineClassesInsideElvisOperator.kt", this::doTest);
        }

        @TestMetadata("useInlineFunctionInsideInlineClass.kt")
        public void testUseInlineFunctionInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/useInlineFunctionInsideInlineClass.kt", this::doTest);
        }

        @TestMetadata("useThisInsideInlineClass.kt")
        public void testUseThisInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/inlineClasses/useThisInsideInlineClass.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/innerNested")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InnerNested extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInInnerNested() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/innerNested"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("createNestedClass.kt")
        public void testCreateNestedClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/createNestedClass.kt", this::doTest);
        }

        @TestMetadata("createdNestedInOuterMember.kt")
        public void testCreatedNestedInOuterMember() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/createdNestedInOuterMember.kt", this::doTest);
        }

        @TestMetadata("extensionFun.kt")
        public void testExtensionFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/extensionFun.kt", this::doTest);
        }

        @TestMetadata("extensionToNested.kt")
        public void testExtensionToNested() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/extensionToNested.kt", this::doTest);
        }

        @TestMetadata("importNestedClass.kt")
        public void testImportNestedClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/importNestedClass.kt", this::doTest);
        }

        @TestMetadata("innerGeneric.kt")
        public void testInnerGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/innerGeneric.kt", this::doTest);
        }

        @TestMetadata("innerGenericClassFromJava.kt")
        public void testInnerGenericClassFromJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/innerGenericClassFromJava.kt", this::doTest);
        }

        @TestMetadata("innerJavaClass.kt")
        public void testInnerJavaClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/innerJavaClass.kt", this::doTest);
        }

        @TestMetadata("innerLabeledThis.kt")
        public void testInnerLabeledThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/innerLabeledThis.kt", this::doTest);
        }

        @TestMetadata("innerSimple.kt")
        public void testInnerSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/innerSimple.kt", this::doTest);
        }

        @TestMetadata("kt3132.kt")
        public void testKt3132() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/kt3132.kt", this::doTest);
        }

        @TestMetadata("kt3927.kt")
        public void testKt3927() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/kt3927.kt", this::doTest);
        }

        @TestMetadata("kt5363.kt")
        public void testKt5363() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/kt5363.kt", this::doTest);
        }

        @TestMetadata("kt6804.kt")
        public void testKt6804() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/kt6804.kt", this::doTest);
        }

        @TestMetadata("nestedClassInObject.kt")
        public void testNestedClassInObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/nestedClassInObject.kt", this::doTest);
        }

        @TestMetadata("nestedClassObject.kt")
        public void testNestedClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/nestedClassObject.kt", this::doTest);
        }

        @TestMetadata("nestedEnumConstant.kt")
        public void testNestedEnumConstant() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/nestedEnumConstant.kt", this::doTest);
        }

        @TestMetadata("nestedGeneric.kt")
        public void testNestedGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/nestedGeneric.kt", this::doTest);
        }

        @TestMetadata("nestedInPackage.kt")
        public void testNestedInPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/nestedInPackage.kt", this::doTest);
        }

        @TestMetadata("nestedObjects.kt")
        public void testNestedObjects() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/nestedObjects.kt", this::doTest);
        }

        @TestMetadata("nestedSimple.kt")
        public void testNestedSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/nestedSimple.kt", this::doTest);
        }

        @TestMetadata("passingOuterRef.kt")
        public void testPassingOuterRef() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/passingOuterRef.kt", this::doTest);
        }

        @TestMetadata("protectedNestedClass.kt")
        public void testProtectedNestedClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/protectedNestedClass.kt", this::doTest);
        }

        @TestMetadata("protectedNestedClassFromJava.kt")
        public void testProtectedNestedClassFromJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/protectedNestedClassFromJava.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/innerNested/superConstructorCall")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SuperConstructorCall extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInSuperConstructorCall() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/innerNested/superConstructorCall"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("deepInnerHierarchy.kt")
            public void testDeepInnerHierarchy() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/deepInnerHierarchy.kt", this::doTest);
            }

            @TestMetadata("deepLocalHierarchy.kt")
            public void testDeepLocalHierarchy() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/deepLocalHierarchy.kt", this::doTest);
            }

            @TestMetadata("innerExtendsInnerViaSecondaryConstuctor.kt")
            public void testInnerExtendsInnerViaSecondaryConstuctor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsInnerViaSecondaryConstuctor.kt", this::doTest);
            }

            @TestMetadata("innerExtendsInnerWithProperOuterCapture.kt")
            public void testInnerExtendsInnerWithProperOuterCapture() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsInnerWithProperOuterCapture.kt", this::doTest);
            }

            @TestMetadata("innerExtendsOuter.kt")
            public void testInnerExtendsOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsOuter.kt", this::doTest);
            }

            @TestMetadata("kt11833_1.kt")
            public void testKt11833_1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/kt11833_1.kt", this::doTest);
            }

            @TestMetadata("kt11833_2.kt")
            public void testKt11833_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/kt11833_2.kt", this::doTest);
            }

            @TestMetadata("localClassOuterDiffersFromInnerOuter.kt")
            public void testLocalClassOuterDiffersFromInnerOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localClassOuterDiffersFromInnerOuter.kt", this::doTest);
            }

            @TestMetadata("localExtendsInner.kt")
            public void testLocalExtendsInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localExtendsInner.kt", this::doTest);
            }

            @TestMetadata("localExtendsLocalWithClosure.kt")
            public void testLocalExtendsLocalWithClosure() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localExtendsLocalWithClosure.kt", this::doTest);
            }

            @TestMetadata("localWithClosureExtendsLocalWithClosure.kt")
            public void testLocalWithClosureExtendsLocalWithClosure() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localWithClosureExtendsLocalWithClosure.kt", this::doTest);
            }

            @TestMetadata("objectExtendsClassDefaultArgument.kt")
            public void testObjectExtendsClassDefaultArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsClassDefaultArgument.kt", this::doTest);
            }

            @TestMetadata("objectExtendsClassVararg.kt")
            public void testObjectExtendsClassVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsClassVararg.kt", this::doTest);
            }

            @TestMetadata("objectExtendsInner.kt")
            public void testObjectExtendsInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInner.kt", this::doTest);
            }

            @TestMetadata("objectExtendsInnerDefaultArgument.kt")
            public void testObjectExtendsInnerDefaultArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerDefaultArgument.kt", this::doTest);
            }

            @TestMetadata("objectExtendsInnerOfLocalVarargAndDefault.kt")
            public void testObjectExtendsInnerOfLocalVarargAndDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerOfLocalVarargAndDefault.kt", this::doTest);
            }

            @TestMetadata("objectExtendsInnerOfLocalWithCapture.kt")
            public void testObjectExtendsInnerOfLocalWithCapture() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerOfLocalWithCapture.kt", this::doTest);
            }

            @TestMetadata("objectExtendsLocalCaptureInSuperCall.kt")
            public void testObjectExtendsLocalCaptureInSuperCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocalCaptureInSuperCall.kt", this::doTest);
            }

            @TestMetadata("objectExtendsLocalWithClosure.kt")
            public void testObjectExtendsLocalWithClosure() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocalWithClosure.kt", this::doTest);
            }

            @TestMetadata("objectOuterDiffersFromInnerOuter.kt")
            public void testObjectOuterDiffersFromInnerOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectOuterDiffersFromInnerOuter.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/instructions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Instructions extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInInstructions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/instructions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("compiler/testData/codegen/box/instructions/swap")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Swap extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInSwap() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/instructions/swap"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("swapRefToSharedVarInt.kt")
            public void testSwapRefToSharedVarInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarInt.kt", this::doTest);
            }

            @TestMetadata("swapRefToSharedVarLong.kt")
            public void testSwapRefToSharedVarLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarLong.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/intrinsics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Intrinsics extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInIntrinsics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/intrinsics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("charToInt.kt")
        public void testCharToInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/charToInt.kt", this::doTest);
        }

        @TestMetadata("defaultObjectMapping.kt")
        public void testDefaultObjectMapping() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/defaultObjectMapping.kt", this::doTest);
        }

        @TestMetadata("ea35953.kt")
        public void testEa35953() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/ea35953.kt", this::doTest);
        }

        @TestMetadata("incWithLabel.kt")
        public void testIncWithLabel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/incWithLabel.kt", this::doTest);
        }

        @TestMetadata("javaObjectType.kt")
        public void testJavaObjectType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/javaObjectType.kt", this::doTest);
        }

        @TestMetadata("javaPrimitiveType.kt")
        public void testJavaPrimitiveType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/javaPrimitiveType.kt", this::doTest);
        }

        @TestMetadata("kt10131.kt")
        public void testKt10131() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/kt10131.kt", this::doTest);
        }

        @TestMetadata("kt10131a.kt")
        public void testKt10131a() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/kt10131a.kt", this::doTest);
        }

        @TestMetadata("kt12125.kt")
        public void testKt12125() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/kt12125.kt", this::doTest);
        }

        @TestMetadata("kt12125_2.kt")
        public void testKt12125_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/kt12125_2.kt", this::doTest);
        }

        @TestMetadata("kt12125_inc.kt")
        public void testKt12125_inc() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/kt12125_inc.kt", this::doTest);
        }

        @TestMetadata("kt12125_inc_2.kt")
        public void testKt12125_inc_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/kt12125_inc_2.kt", this::doTest);
        }

        @TestMetadata("kt5937.kt")
        public void testKt5937() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/kt5937.kt", this::doTest);
        }

        @TestMetadata("kt8666.kt")
        public void testKt8666() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/kt8666.kt", this::doTest);
        }

        @TestMetadata("longRangeWithExplicitDot.kt")
        public void testLongRangeWithExplicitDot() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/longRangeWithExplicitDot.kt", this::doTest);
        }

        @TestMetadata("prefixIncDec.kt")
        public void testPrefixIncDec() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/prefixIncDec.kt", this::doTest);
        }

        @TestMetadata("rangeFromCollection.kt")
        public void testRangeFromCollection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/rangeFromCollection.kt", this::doTest);
        }

        @TestMetadata("stringFromCollection.kt")
        public void testStringFromCollection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/stringFromCollection.kt", this::doTest);
        }

        @TestMetadata("throwable.kt")
        public void testThrowable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/throwable.kt", this::doTest);
        }

        @TestMetadata("throwableCallableReference.kt")
        public void testThrowableCallableReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/throwableCallableReference.kt", this::doTest);
        }

        @TestMetadata("throwableParamOrder.kt")
        public void testThrowableParamOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/throwableParamOrder.kt", this::doTest);
        }

        @TestMetadata("tostring.kt")
        public void testTostring() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/intrinsics/tostring.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaInterop extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInJavaInterop() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/javaInterop"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("genericSamProjectedOut.kt")
        public void testGenericSamProjectedOut() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/genericSamProjectedOut.kt", this::doTest);
        }

        @TestMetadata("lambdaInstanceOf.kt")
        public void testLambdaInstanceOf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/lambdaInstanceOf.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/javaInterop/generics")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Generics extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInGenerics() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/generics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("allWildcardsOnClass.kt")
            public void testAllWildcardsOnClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/generics/allWildcardsOnClass.kt", this::doTest);
            }

            @TestMetadata("covariantOverrideWithDeclarationSiteProjection.kt")
            public void testCovariantOverrideWithDeclarationSiteProjection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/generics/covariantOverrideWithDeclarationSiteProjection.kt", this::doTest);
            }

            @TestMetadata("invariantArgumentsNoWildcard.kt")
            public void testInvariantArgumentsNoWildcard() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/generics/invariantArgumentsNoWildcard.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NotNullAssertions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInNotNullAssertions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("destructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12.kt")
            public void testDestructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/destructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12.kt", this::doTest);
            }

            @TestMetadata("extensionReceiverParameter.kt")
            public void testExtensionReceiverParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/extensionReceiverParameter.kt", this::doTest);
            }

            @TestMetadata("incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv11.kt")
            public void testIncWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv11() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv11.kt", this::doTest);
            }

            @TestMetadata("incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv12.kt")
            public void testIncWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv12.kt", this::doTest);
            }

            @TestMetadata("incWithNullabilityAssertionOnExtensionReceiver_lv11.kt")
            public void testIncWithNullabilityAssertionOnExtensionReceiver_lv11() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiver_lv11.kt", this::doTest);
            }

            @TestMetadata("incWithNullabilityAssertionOnExtensionReceiver_lv12.kt")
            public void testIncWithNullabilityAssertionOnExtensionReceiver_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiver_lv12.kt", this::doTest);
            }

            @TestMetadata("mapPut.kt")
            public void testMapPut() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/mapPut.kt", this::doTest);
            }

            @TestMetadata("nullabilityAssertionOnExtensionReceiver_lv11.kt")
            public void testNullabilityAssertionOnExtensionReceiver_lv11() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnExtensionReceiver_lv11.kt", this::doTest);
            }

            @TestMetadata("nullabilityAssertionOnExtensionReceiver_lv12.kt")
            public void testNullabilityAssertionOnExtensionReceiver_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnExtensionReceiver_lv12.kt", this::doTest);
            }

            @TestMetadata("nullabilityAssertionOnInlineFunExtensionReceiver_lv11.kt")
            public void testNullabilityAssertionOnInlineFunExtensionReceiver_lv11() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnInlineFunExtensionReceiver_lv11.kt", this::doTest);
            }

            @TestMetadata("nullabilityAssertionOnInlineFunExtensionReceiver_lv12.kt")
            public void testNullabilityAssertionOnInlineFunExtensionReceiver_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnInlineFunExtensionReceiver_lv12.kt", this::doTest);
            }

            @TestMetadata("nullabilityAssertionOnMemberExtensionReceiver_lv12.kt")
            public void testNullabilityAssertionOnMemberExtensionReceiver_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnMemberExtensionReceiver_lv12.kt", this::doTest);
            }

            @TestMetadata("nullabilityAssertionOnPrivateMemberExtensionReceiver_lv12.kt")
            public void testNullabilityAssertionOnPrivateMemberExtensionReceiver_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnPrivateMemberExtensionReceiver_lv12.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class EnhancedNullability extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInEnhancedNullability() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("inFunctionWithExpressionBody.kt")
                public void testInFunctionWithExpressionBody() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inFunctionWithExpressionBody.kt", this::doTest);
                }

                @TestMetadata("inFunctionWithExpressionBodyWithJavaGeneric.kt")
                public void testInFunctionWithExpressionBodyWithJavaGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inFunctionWithExpressionBodyWithJavaGeneric.kt", this::doTest);
                }

                @TestMetadata("inLocalFunctionWithExpressionBody.kt")
                public void testInLocalFunctionWithExpressionBody() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inLocalFunctionWithExpressionBody.kt", this::doTest);
                }

                @TestMetadata("inLocalVariableInitializer.kt")
                public void testInLocalVariableInitializer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inLocalVariableInitializer.kt", this::doTest);
                }

                @TestMetadata("inMemberPropertyInitializer.kt")
                public void testInMemberPropertyInitializer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inMemberPropertyInitializer.kt", this::doTest);
                }

                @TestMetadata("inPropertyGetterWithExpressionBody.kt")
                public void testInPropertyGetterWithExpressionBody() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inPropertyGetterWithExpressionBody.kt", this::doTest);
                }

                @TestMetadata("inTopLevelPropertyInitializer.kt")
                public void testInTopLevelPropertyInitializer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inTopLevelPropertyInitializer.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/javaInterop/objectMethods")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ObjectMethods extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInObjectMethods() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/objectMethods"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("cloneCallsConstructor.kt")
            public void testCloneCallsConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsConstructor.kt", this::doTest);
            }

            @TestMetadata("cloneCallsSuper.kt")
            public void testCloneCallsSuper() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsSuper.kt", this::doTest);
            }

            @TestMetadata("cloneCallsSuperAndModifies.kt")
            public void testCloneCallsSuperAndModifies() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsSuperAndModifies.kt", this::doTest);
            }

            @TestMetadata("cloneHashSet.kt")
            public void testCloneHashSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneHashSet.kt", this::doTest);
            }

            @TestMetadata("cloneHierarchy.kt")
            public void testCloneHierarchy() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneHierarchy.kt", this::doTest);
            }

            @TestMetadata("cloneableClassWithoutClone.kt")
            public void testCloneableClassWithoutClone() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneableClassWithoutClone.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/jdk")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Jdk extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInJdk() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/jdk"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("arrayList.kt")
        public void testArrayList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jdk/arrayList.kt", this::doTest);
        }

        @TestMetadata("hashMap.kt")
        public void testHashMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jdk/hashMap.kt", this::doTest);
        }

        @TestMetadata("iteratingOverHashMap.kt")
        public void testIteratingOverHashMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jdk/iteratingOverHashMap.kt", this::doTest);
        }

        @TestMetadata("kt1397.kt")
        public void testKt1397() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jdk/kt1397.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/jvmField")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JvmField extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInJvmField() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/jvmField"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("captureClassFields.kt")
        public void testCaptureClassFields() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/captureClassFields.kt", this::doTest);
        }

        @TestMetadata("capturePackageFields.kt")
        public void testCapturePackageFields() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/capturePackageFields.kt", this::doTest);
        }

        @TestMetadata("checkNoAccessors.kt")
        public void testCheckNoAccessors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/checkNoAccessors.kt", this::doTest);
        }

        @TestMetadata("classFieldReference.kt")
        public void testClassFieldReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/classFieldReference.kt", this::doTest);
        }

        @TestMetadata("classFieldReflection.kt")
        public void testClassFieldReflection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/classFieldReflection.kt", this::doTest);
        }

        @TestMetadata("constructorProperty.kt")
        public void testConstructorProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/constructorProperty.kt", this::doTest);
        }

        @TestMetadata("publicField.kt")
        public void testPublicField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/publicField.kt", this::doTest);
        }

        @TestMetadata("simpleMemberProperty.kt")
        public void testSimpleMemberProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/simpleMemberProperty.kt", this::doTest);
        }

        @TestMetadata("superCall.kt")
        public void testSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/superCall.kt", this::doTest);
        }

        @TestMetadata("superCall2.kt")
        public void testSuperCall2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/superCall2.kt", this::doTest);
        }

        @TestMetadata("topLevelFieldReference.kt")
        public void testTopLevelFieldReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/topLevelFieldReference.kt", this::doTest);
        }

        @TestMetadata("topLevelFieldReflection.kt")
        public void testTopLevelFieldReflection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/topLevelFieldReflection.kt", this::doTest);
        }

        @TestMetadata("visibility.kt")
        public void testVisibility() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/visibility.kt", this::doTest);
        }

        @TestMetadata("writeFieldReference.kt")
        public void testWriteFieldReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmField/writeFieldReference.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/jvmName")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JvmName extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInJvmName() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/jvmName"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("callableReference.kt")
        public void testCallableReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/callableReference.kt", this::doTest);
        }

        @TestMetadata("clashingErasure.kt")
        public void testClashingErasure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/clashingErasure.kt", this::doTest);
        }

        @TestMetadata("classMembers.kt")
        public void testClassMembers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/classMembers.kt", this::doTest);
        }

        @TestMetadata("fakeJvmNameInJava.kt")
        public void testFakeJvmNameInJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/fakeJvmNameInJava.kt", this::doTest);
        }

        @TestMetadata("functionName.kt")
        public void testFunctionName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/functionName.kt", this::doTest);
        }

        @TestMetadata("multifileClass.kt")
        public void testMultifileClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/multifileClass.kt", this::doTest);
        }

        @TestMetadata("multifileClassWithLocalClass.kt")
        public void testMultifileClassWithLocalClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/multifileClassWithLocalClass.kt", this::doTest);
        }

        @TestMetadata("multifileClassWithLocalGeneric.kt")
        public void testMultifileClassWithLocalGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/multifileClassWithLocalGeneric.kt", this::doTest);
        }

        @TestMetadata("propertyAccessorsUseSite.kt")
        public void testPropertyAccessorsUseSite() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/propertyAccessorsUseSite.kt", this::doTest);
        }

        @TestMetadata("propertyName.kt")
        public void testPropertyName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/propertyName.kt", this::doTest);
        }

        @TestMetadata("renamedFileClass.kt")
        public void testRenamedFileClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/renamedFileClass.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/jvmName/fileFacades")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FileFacades extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInFileFacades() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/jvmName/fileFacades"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("differentFiles.kt")
            public void testDifferentFiles() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/fileFacades/differentFiles.kt", this::doTest);
            }

            @TestMetadata("javaAnnotationOnFileFacade.kt")
            public void testJavaAnnotationOnFileFacade() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/fileFacades/javaAnnotationOnFileFacade.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmName/fileFacades/simple.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/jvmOverloads")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JvmOverloads extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInJvmOverloads() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/jvmOverloads"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("companionObject.kt")
        public void testCompanionObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/companionObject.kt", this::doTest);
        }

        @TestMetadata("defaultsNotAtEnd.kt")
        public void testDefaultsNotAtEnd() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/defaultsNotAtEnd.kt", this::doTest);
        }

        @TestMetadata("doubleParameters.kt")
        public void testDoubleParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/doubleParameters.kt", this::doTest);
        }

        @TestMetadata("extensionMethod.kt")
        public void testExtensionMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/extensionMethod.kt", this::doTest);
        }

        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/generics.kt", this::doTest);
        }

        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/innerClass.kt", this::doTest);
        }

        @TestMetadata("multipleDefaultParameters.kt")
        public void testMultipleDefaultParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/multipleDefaultParameters.kt", this::doTest);
        }

        @TestMetadata("noRedundantVarargs.kt")
        public void testNoRedundantVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/noRedundantVarargs.kt", this::doTest);
        }

        @TestMetadata("nonDefaultParameter.kt")
        public void testNonDefaultParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/nonDefaultParameter.kt", this::doTest);
        }

        @TestMetadata("primaryConstructor.kt")
        public void testPrimaryConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/primaryConstructor.kt", this::doTest);
        }

        @TestMetadata("privateClass.kt")
        public void testPrivateClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/privateClass.kt", this::doTest);
        }

        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/secondaryConstructor.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/simple.kt", this::doTest);
        }

        @TestMetadata("simpleJavaCall.kt")
        public void testSimpleJavaCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/simpleJavaCall.kt", this::doTest);
        }

        @TestMetadata("varargs.kt")
        public void testVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmOverloads/varargs.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/jvmPackageName")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JvmPackageName extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInJvmPackageName() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/jvmPackageName"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("metadataField.kt")
        public void testMetadataField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmPackageName/metadataField.kt", this::doTest);
        }

        @TestMetadata("rootPackage.kt")
        public void testRootPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmPackageName/rootPackage.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmPackageName/simple.kt", this::doTest);
        }

        @TestMetadata("withJvmName.kt")
        public void testWithJvmName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmPackageName/withJvmName.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/jvmStatic")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JvmStatic extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInJvmStatic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("annotations.kt")
        public void testAnnotations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/annotations.kt", this::doTest);
        }

        @TestMetadata("closure.kt")
        public void testClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/closure.kt", this::doTest);
        }

        @TestMetadata("companionObject.kt")
        public void testCompanionObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/companionObject.kt", this::doTest);
        }

        @TestMetadata("convention.kt")
        public void testConvention() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/convention.kt", this::doTest);
        }

        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/default.kt", this::doTest);
        }

        @TestMetadata("enumCompanion.kt")
        public void testEnumCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/enumCompanion.kt", this::doTest);
        }

        @TestMetadata("explicitObject.kt")
        public void testExplicitObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/explicitObject.kt", this::doTest);
        }

        @TestMetadata("funAccess.kt")
        public void testFunAccess() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/funAccess.kt", this::doTest);
        }

        @TestMetadata("importStaticMemberFromObject.kt")
        public void testImportStaticMemberFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/importStaticMemberFromObject.kt", this::doTest);
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/inline.kt", this::doTest);
        }

        @TestMetadata("inlinePropertyAccessors.kt")
        public void testInlinePropertyAccessors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/inlinePropertyAccessors.kt", this::doTest);
        }

        @TestMetadata("kt21246.kt")
        public void testKt21246() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/kt21246.kt", this::doTest);
        }

        @TestMetadata("kt21246a.kt")
        public void testKt21246a() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/kt21246a.kt", this::doTest);
        }

        @TestMetadata("kt9897_static.kt")
        public void testKt9897_static() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/kt9897_static.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/object.kt", this::doTest);
        }

        @TestMetadata("postfixInc.kt")
        public void testPostfixInc() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/postfixInc.kt", this::doTest);
        }

        @TestMetadata("prefixInc.kt")
        public void testPrefixInc() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/prefixInc.kt", this::doTest);
        }

        @TestMetadata("privateMethod.kt")
        public void testPrivateMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/privateMethod.kt", this::doTest);
        }

        @TestMetadata("privateSetter.kt")
        public void testPrivateSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/privateSetter.kt", this::doTest);
        }

        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/propertyAccess.kt", this::doTest);
        }

        @TestMetadata("propertyAccessorsCompanion.kt")
        public void testPropertyAccessorsCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/propertyAccessorsCompanion.kt", this::doTest);
        }

        @TestMetadata("propertyAccessorsObject.kt")
        public void testPropertyAccessorsObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/propertyAccessorsObject.kt", this::doTest);
        }

        @TestMetadata("propertyAsDefault.kt")
        public void testPropertyAsDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/propertyAsDefault.kt", this::doTest);
        }

        @TestMetadata("propertyGetterDelegatesToAnother.kt")
        public void testPropertyGetterDelegatesToAnother() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/propertyGetterDelegatesToAnother.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/simple.kt", this::doTest);
        }

        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/jvmStatic/syntheticAccessor.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/labels")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Labels extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInLabels() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/labels"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("controlLabelClashesWithFuncitonName.kt")
        public void testControlLabelClashesWithFuncitonName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/labels/controlLabelClashesWithFuncitonName.kt", this::doTest);
        }

        @TestMetadata("infixCallLabelling.kt")
        public void testInfixCallLabelling() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/labels/infixCallLabelling.kt", this::doTest);
        }

        @TestMetadata("labeledDeclarations.kt")
        public void testLabeledDeclarations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/labels/labeledDeclarations.kt", this::doTest);
        }

        @TestMetadata("propertyAccessor.kt")
        public void testPropertyAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/labels/propertyAccessor.kt", this::doTest);
        }

        @TestMetadata("propertyAccessorFunctionLiteral.kt")
        public void testPropertyAccessorFunctionLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/labels/propertyAccessorFunctionLiteral.kt", this::doTest);
        }

        @TestMetadata("propertyAccessorInnerExtensionFun.kt")
        public void testPropertyAccessorInnerExtensionFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/labels/propertyAccessorInnerExtensionFun.kt", this::doTest);
        }

        @TestMetadata("propertyAccessorObject.kt")
        public void testPropertyAccessorObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/labels/propertyAccessorObject.kt", this::doTest);
        }

        @TestMetadata("propertyInClassAccessor.kt")
        public void testPropertyInClassAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/labels/propertyInClassAccessor.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/lazyCodegen")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LazyCodegen extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInLazyCodegen() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/lazyCodegen"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("exceptionInFieldInitializer.kt")
        public void testExceptionInFieldInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/exceptionInFieldInitializer.kt", this::doTest);
        }

        @TestMetadata("ifElse.kt")
        public void testIfElse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/ifElse.kt", this::doTest);
        }

        @TestMetadata("increment.kt")
        public void testIncrement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/increment.kt", this::doTest);
        }

        @TestMetadata("safeAssign.kt")
        public void testSafeAssign() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/safeAssign.kt", this::doTest);
        }

        @TestMetadata("safeAssignComplex.kt")
        public void testSafeAssignComplex() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/safeAssignComplex.kt", this::doTest);
        }

        @TestMetadata("safeCallAndArray.kt")
        public void testSafeCallAndArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/safeCallAndArray.kt", this::doTest);
        }

        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/toString.kt", this::doTest);
        }

        @TestMetadata("tryCatchExpression.kt")
        public void testTryCatchExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/tryCatchExpression.kt", this::doTest);
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/when.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/lazyCodegen/optimizations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Optimizations extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInOptimizations() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/lazyCodegen/optimizations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("negateConstantCompare.kt")
            public void testNegateConstantCompare() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateConstantCompare.kt", this::doTest);
            }

            @TestMetadata("negateFalse.kt")
            public void testNegateFalse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalse.kt", this::doTest);
            }

            @TestMetadata("negateFalseVar.kt")
            public void testNegateFalseVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalseVar.kt", this::doTest);
            }

            @TestMetadata("negateFalseVarChain.kt")
            public void testNegateFalseVarChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalseVarChain.kt", this::doTest);
            }

            @TestMetadata("negateObjectComp.kt")
            public void testNegateObjectComp() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateObjectComp.kt", this::doTest);
            }

            @TestMetadata("negateObjectComp2.kt")
            public void testNegateObjectComp2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateObjectComp2.kt", this::doTest);
            }

            @TestMetadata("negateTrue.kt")
            public void testNegateTrue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateTrue.kt", this::doTest);
            }

            @TestMetadata("negateTrueVar.kt")
            public void testNegateTrueVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateTrueVar.kt", this::doTest);
            }

            @TestMetadata("noOptimization.kt")
            public void testNoOptimization() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/noOptimization.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/localClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LocalClasses extends AbstractLightAnalysisModeTest {
        @TestMetadata("closureOfInnerLocalClass.kt")
        public void ignoreClosureOfInnerLocalClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/closureOfInnerLocalClass.kt", this::doTest);
        }

        @TestMetadata("closureWithSelfInstantiation.kt")
        public void ignoreClosureWithSelfInstantiation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/closureWithSelfInstantiation.kt", this::doTest);
        }

        @TestMetadata("subclassingExtensionReceiverClass.kt")
        public void ignoreSubclassingExtensionReceiverClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/subclassingExtensionReceiverClass.kt", this::doTest);
        }

        public void testAllFilesPresentInLocalClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/localClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("anonymousObjectInInitializer.kt")
        public void testAnonymousObjectInInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInInitializer.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectInParameterInitializer.kt")
        public void testAnonymousObjectInParameterInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInParameterInitializer.kt", this::doTest);
        }

        @TestMetadata("closureOfLambdaInLocalClass.kt")
        public void testClosureOfLambdaInLocalClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/closureOfLambdaInLocalClass.kt", this::doTest);
        }

        @TestMetadata("inExtensionFunction.kt")
        public void testInExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/inExtensionFunction.kt", this::doTest);
        }

        @TestMetadata("inExtensionProperty.kt")
        public void testInExtensionProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/inExtensionProperty.kt", this::doTest);
        }

        @TestMetadata("inLocalExtensionFunction.kt")
        public void testInLocalExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/inLocalExtensionFunction.kt", this::doTest);
        }

        @TestMetadata("inLocalExtensionProperty.kt")
        public void testInLocalExtensionProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/inLocalExtensionProperty.kt", this::doTest);
        }

        @TestMetadata("innerClassInLocalClass.kt")
        public void testInnerClassInLocalClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/innerClassInLocalClass.kt", this::doTest);
        }

        @TestMetadata("innerOfLocalCaptureExtensionReceiver.kt")
        public void testInnerOfLocalCaptureExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/innerOfLocalCaptureExtensionReceiver.kt", this::doTest);
        }

        @TestMetadata("kt2700.kt")
        public void testKt2700() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/kt2700.kt", this::doTest);
        }

        @TestMetadata("kt2873.kt")
        public void testKt2873() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/kt2873.kt", this::doTest);
        }

        @TestMetadata("kt3210.kt")
        public void testKt3210() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/kt3210.kt", this::doTest);
        }

        @TestMetadata("kt3389.kt")
        public void testKt3389() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/kt3389.kt", this::doTest);
        }

        @TestMetadata("kt3584.kt")
        public void testKt3584() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/kt3584.kt", this::doTest);
        }

        @TestMetadata("kt4174.kt")
        public void testKt4174() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/kt4174.kt", this::doTest);
        }

        @TestMetadata("localClass.kt")
        public void testLocalClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/localClass.kt", this::doTest);
        }

        @TestMetadata("localClassCaptureExtensionReceiver.kt")
        public void testLocalClassCaptureExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/localClassCaptureExtensionReceiver.kt", this::doTest);
        }

        @TestMetadata("localClassInInitializer.kt")
        public void testLocalClassInInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/localClassInInitializer.kt", this::doTest);
        }

        @TestMetadata("localClassInParameterInitializer.kt")
        public void testLocalClassInParameterInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/localClassInParameterInitializer.kt", this::doTest);
        }

        @TestMetadata("localDataClass.kt")
        public void testLocalDataClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/localDataClass.kt", this::doTest);
        }

        @TestMetadata("localExtendsInnerAndReferencesOuterMember.kt")
        public void testLocalExtendsInnerAndReferencesOuterMember() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/localExtendsInnerAndReferencesOuterMember.kt", this::doTest);
        }

        @TestMetadata("nameWithWhitespace.kt")
        public void testNameWithWhitespace() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/nameWithWhitespace.kt", this::doTest);
        }

        @TestMetadata("noclosure.kt")
        public void testNoclosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/noclosure.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/object.kt", this::doTest);
        }

        @TestMetadata("ownClosureOfInnerLocalClass.kt")
        public void testOwnClosureOfInnerLocalClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/ownClosureOfInnerLocalClass.kt", this::doTest);
        }

        @TestMetadata("recaptureVarCapturedInLocalClass1.kt")
        public void testRecaptureVarCapturedInLocalClass1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass1.kt", this::doTest);
        }

        @TestMetadata("recaptureVarCapturedInLocalClass2.kt")
        public void testRecaptureVarCapturedInLocalClass2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass2.kt", this::doTest);
        }

        @TestMetadata("recaptureVarCapturedInLocalClass3.kt")
        public void testRecaptureVarCapturedInLocalClass3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass3.kt", this::doTest);
        }

        @TestMetadata("withclosure.kt")
        public void testWithclosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/localClasses/withclosure.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/mangling")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Mangling extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInMangling() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/mangling"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("field.kt")
        public void testField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/mangling/field.kt", this::doTest);
        }

        @TestMetadata("fun.kt")
        public void testFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/mangling/fun.kt", this::doTest);
        }

        @TestMetadata("internal.kt")
        public void testInternal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/mangling/internal.kt", this::doTest);
        }

        @TestMetadata("internalOverride.kt")
        public void testInternalOverride() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/mangling/internalOverride.kt", this::doTest);
        }

        @TestMetadata("internalOverrideSuperCall.kt")
        public void testInternalOverrideSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/mangling/internalOverrideSuperCall.kt", this::doTest);
        }

        @TestMetadata("noOverrideWithJava.kt")
        public void testNoOverrideWithJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/mangling/noOverrideWithJava.kt", this::doTest);
        }

        @TestMetadata("publicOverride.kt")
        public void testPublicOverride() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/mangling/publicOverride.kt", this::doTest);
        }

        @TestMetadata("publicOverrideSuperCall.kt")
        public void testPublicOverrideSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/mangling/publicOverrideSuperCall.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/multiDecl")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiDecl extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInMultiDecl() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("ComplexInitializer.kt")
        public void testComplexInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/ComplexInitializer.kt", this::doTest);
        }

        @TestMetadata("component.kt")
        public void testComponent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/component.kt", this::doTest);
        }

        @TestMetadata("kt9828_hashMap.kt")
        public void testKt9828_hashMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/kt9828_hashMap.kt", this::doTest);
        }

        @TestMetadata("returnInElvis.kt")
        public void testReturnInElvis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/returnInElvis.kt", this::doTest);
        }

        @TestMetadata("SimpleVals.kt")
        public void testSimpleVals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/SimpleVals.kt", this::doTest);
        }

        @TestMetadata("SimpleValsExtensions.kt")
        public void testSimpleValsExtensions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/SimpleValsExtensions.kt", this::doTest);
        }

        @TestMetadata("SimpleVarsExtensions.kt")
        public void testSimpleVarsExtensions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/SimpleVarsExtensions.kt", this::doTest);
        }

        @TestMetadata("UnderscoreNames.kt")
        public void testUnderscoreNames() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/UnderscoreNames.kt", this::doTest);
        }

        @TestMetadata("ValCapturedInFunctionLiteral.kt")
        public void testValCapturedInFunctionLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInFunctionLiteral.kt", this::doTest);
        }

        @TestMetadata("ValCapturedInLocalFunction.kt")
        public void testValCapturedInLocalFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInLocalFunction.kt", this::doTest);
        }

        @TestMetadata("ValCapturedInObjectLiteral.kt")
        public void testValCapturedInObjectLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInObjectLiteral.kt", this::doTest);
        }

        @TestMetadata("VarCapturedInFunctionLiteral.kt")
        public void testVarCapturedInFunctionLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInFunctionLiteral.kt", this::doTest);
        }

        @TestMetadata("VarCapturedInLocalFunction.kt")
        public void testVarCapturedInLocalFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInLocalFunction.kt", this::doTest);
        }

        @TestMetadata("VarCapturedInObjectLiteral.kt")
        public void testVarCapturedInObjectLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInObjectLiteral.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForIterator extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForIterator() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forIterator"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclFor.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentExtensions.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensions.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForValCaptured.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator/longIterator")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class LongIterator extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInLongIterator() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forIterator/longIterator"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForRange extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForRange() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclFor.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentExtensions.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensions.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForValCaptured.kt", this::doTest);
            }

            @TestMetadata("UnderscoreNames.kt")
            public void testUnderscoreNames() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/UnderscoreNames.kt", this::doTest);
            }

            @TestMetadata("UnderscoreNamesDontCallComponent.kt")
            public void testUnderscoreNamesDontCallComponent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/UnderscoreNamesDontCallComponent.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ExplicitRangeTo extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInExplicitRangeTo() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("MultiDeclFor.kt")
                public void testMultiDeclFor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclFor.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForValCaptured.kt")
                public void testMultiDeclForValCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForValCaptured.kt", this::doTest);
                }

                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Int extends AbstractLightAnalysisModeTest {
                    public void testAllFilesPresentInInt() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                    }

                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensions.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                    }
                }

                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Long extends AbstractLightAnalysisModeTest {
                    public void testAllFilesPresentInLong() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                    }

                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensions.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ExplicitRangeToWithDot extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInExplicitRangeToWithDot() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("MultiDeclFor.kt")
                public void testMultiDeclFor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclFor.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForValCaptured.kt")
                public void testMultiDeclForValCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForValCaptured.kt", this::doTest);
                }

                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Int extends AbstractLightAnalysisModeTest {
                    public void testAllFilesPresentInInt() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                    }

                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensions.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                    }
                }

                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Long extends AbstractLightAnalysisModeTest {
                    public void testAllFilesPresentInLong() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                    }

                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensions.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                    }

                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/int")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Int extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInInt() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/int"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/long")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Long extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInLong() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/long"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensionsValCaptured.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensions.kt", this::doTest);
                }

                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt", this::doTest);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/multifileClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultifileClasses extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInMultifileClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("callMultifileClassMemberFromOtherPackage.kt")
        public void testCallMultifileClassMemberFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/callMultifileClassMemberFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("callsToMultifileClassFromOtherPackage.kt")
        public void testCallsToMultifileClassFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/callsToMultifileClassFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("constPropertyReferenceFromMultifileClass.kt")
        public void testConstPropertyReferenceFromMultifileClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/constPropertyReferenceFromMultifileClass.kt", this::doTest);
        }

        @TestMetadata("inlineMultifileClassMemberFromOtherPackage.kt")
        public void testInlineMultifileClassMemberFromOtherPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/inlineMultifileClassMemberFromOtherPackage.kt", this::doTest);
        }

        @TestMetadata("kt16077.kt")
        public void testKt16077() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/kt16077.kt", this::doTest);
        }

        @TestMetadata("multifileClassPartsInitialization.kt")
        public void testMultifileClassPartsInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/multifileClassPartsInitialization.kt", this::doTest);
        }

        @TestMetadata("multifileClassWith2Files.kt")
        public void testMultifileClassWith2Files() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWith2Files.kt", this::doTest);
        }

        @TestMetadata("multifileClassWithCrossCall.kt")
        public void testMultifileClassWithCrossCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWithCrossCall.kt", this::doTest);
        }

        @TestMetadata("multifileClassWithPrivate.kt")
        public void testMultifileClassWithPrivate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWithPrivate.kt", this::doTest);
        }

        @TestMetadata("privateConstVal.kt")
        public void testPrivateConstVal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/privateConstVal.kt", this::doTest);
        }

        @TestMetadata("samePartNameDifferentFacades.kt")
        public void testSamePartNameDifferentFacades() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/samePartNameDifferentFacades.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/multifileClasses/optimized")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Optimized extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInOptimized() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multifileClasses/optimized"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("callableRefToFun.kt")
            public void testCallableRefToFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToFun.kt", this::doTest);
            }

            @TestMetadata("callableRefToInternalValInline.kt")
            public void testCallableRefToInternalValInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToInternalValInline.kt", this::doTest);
            }

            @TestMetadata("callableRefToPrivateVal.kt")
            public void testCallableRefToPrivateVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToPrivateVal.kt", this::doTest);
            }

            @TestMetadata("callableRefToVal.kt")
            public void testCallableRefToVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToVal.kt", this::doTest);
            }

            @TestMetadata("calls.kt")
            public void testCalls() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/calls.kt", this::doTest);
            }

            @TestMetadata("deferredStaticInitialization.kt")
            public void testDeferredStaticInitialization() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/deferredStaticInitialization.kt", this::doTest);
            }

            @TestMetadata("delegatedVal.kt")
            public void testDelegatedVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/delegatedVal.kt", this::doTest);
            }

            @TestMetadata("initializePrivateVal.kt")
            public void testInitializePrivateVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/initializePrivateVal.kt", this::doTest);
            }

            @TestMetadata("initializePublicVal.kt")
            public void testInitializePublicVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/initializePublicVal.kt", this::doTest);
            }

            @TestMetadata("overlappingFuns.kt")
            public void testOverlappingFuns() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/overlappingFuns.kt", this::doTest);
            }

            @TestMetadata("overlappingVals.kt")
            public void testOverlappingVals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/overlappingVals.kt", this::doTest);
            }

            @TestMetadata("valAccessFromInlineFunCalledFromJava.kt")
            public void testValAccessFromInlineFunCalledFromJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/valAccessFromInlineFunCalledFromJava.kt", this::doTest);
            }

            @TestMetadata("valAccessFromInlinedToDifferentPackage.kt")
            public void testValAccessFromInlinedToDifferentPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/valAccessFromInlinedToDifferentPackage.kt", this::doTest);
            }

            @TestMetadata("valWithAccessor.kt")
            public void testValWithAccessor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multifileClasses/optimized/valWithAccessor.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/multiplatform")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Multiplatform extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInMultiplatform() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiplatform"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("compiler/testData/codegen/box/multiplatform/defaultArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DefaultArguments extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInDefaultArguments() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("annotations.kt")
            public void testAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/annotations.kt", this::doTest);
            }

            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/constructor.kt", this::doTest);
            }

            @TestMetadata("function.kt")
            public void testFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/function.kt", this::doTest);
            }

            @TestMetadata("inheritedFromCommonClass.kt")
            public void testInheritedFromCommonClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromCommonClass.kt", this::doTest);
            }

            @TestMetadata("inheritedFromExpectedClass.kt")
            public void testInheritedFromExpectedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedClass.kt", this::doTest);
            }

            @TestMetadata("inheritedFromExpectedMethod.kt")
            public void testInheritedFromExpectedMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedMethod.kt", this::doTest);
            }

            @TestMetadata("inheritedInExpectedDeclarations.kt")
            public void testInheritedInExpectedDeclarations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedInExpectedDeclarations.kt", this::doTest);
            }

            @TestMetadata("inlineFunctionWithDefaultLambda.kt")
            public void testInlineFunctionWithDefaultLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inlineFunctionWithDefaultLambda.kt", this::doTest);
            }

            @TestMetadata("kt23239.kt")
            public void testKt23239() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/kt23239.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/nonLocalReturns")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NonLocalReturns extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInNonLocalReturns() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/nonLocalReturns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("kt6895.kt")
        public void testKt6895() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nonLocalReturns/kt6895.kt", this::doTest);
        }

        @TestMetadata("kt9644let.kt")
        public void testKt9644let() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nonLocalReturns/kt9644let.kt", this::doTest);
        }

        @TestMetadata("localReturnInsideProperty.kt")
        public void testLocalReturnInsideProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nonLocalReturns/localReturnInsideProperty.kt", this::doTest);
        }

        @TestMetadata("returnInsideTwoLambdas.kt")
        public void testReturnInsideTwoLambdas() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nonLocalReturns/returnInsideTwoLambdas.kt", this::doTest);
        }

        @TestMetadata("use.kt")
        public void testUse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nonLocalReturns/use.kt", this::doTest);
        }

        @TestMetadata("useWithException.kt")
        public void testUseWithException() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nonLocalReturns/useWithException.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/nullCheckOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NullCheckOptimization extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInNullCheckOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/nullCheckOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("isNullable.kt")
        public void testIsNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nullCheckOptimization/isNullable.kt", this::doTest);
        }

        @TestMetadata("kt22410.kt")
        public void testKt22410() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nullCheckOptimization/kt22410.kt", this::doTest);
        }

        @TestMetadata("kt7774.kt")
        public void testKt7774() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nullCheckOptimization/kt7774.kt", this::doTest);
        }

        @TestMetadata("trivialInstanceOf.kt")
        public void testTrivialInstanceOf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/nullCheckOptimization/trivialInstanceOf.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/objectIntrinsics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ObjectIntrinsics extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInObjectIntrinsics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/objectIntrinsics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("objects.kt")
        public void testObjects() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objectIntrinsics/objects.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/objects")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Objects extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInObjects() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/objects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("anonymousObjectPropertyInitialization.kt")
        public void testAnonymousObjectPropertyInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/anonymousObjectPropertyInitialization.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectReturnsFromTopLevelFun.kt")
        public void testAnonymousObjectReturnsFromTopLevelFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/anonymousObjectReturnsFromTopLevelFun.kt", this::doTest);
        }

        @TestMetadata("classCallsProtectedInheritedByCompanion.kt")
        public void testClassCallsProtectedInheritedByCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/classCallsProtectedInheritedByCompanion.kt", this::doTest);
        }

        @TestMetadata("classCompanion.kt")
        public void testClassCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/classCompanion.kt", this::doTest);
        }

        @TestMetadata("compoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject.kt")
        public void testCompoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/compoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject.kt", this::doTest);
        }

        @TestMetadata("compoundAssignmentToArrayAccessToPropertyImportedFromObject.kt")
        public void testCompoundAssignmentToArrayAccessToPropertyImportedFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/compoundAssignmentToArrayAccessToPropertyImportedFromObject.kt", this::doTest);
        }

        @TestMetadata("compoundAssignmentToExtensionPropertyImportedFromObject.kt")
        public void testCompoundAssignmentToExtensionPropertyImportedFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/compoundAssignmentToExtensionPropertyImportedFromObject.kt", this::doTest);
        }

        @TestMetadata("compoundAssignmentToObjectFromCall.kt")
        public void testCompoundAssignmentToObjectFromCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/compoundAssignmentToObjectFromCall.kt", this::doTest);
        }

        @TestMetadata("compoundAssignmentToPropertyImportedFromObject.kt")
        public void testCompoundAssignmentToPropertyImportedFromObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/compoundAssignmentToPropertyImportedFromObject.kt", this::doTest);
        }

        @TestMetadata("compoundAssignmentToPropertyWithQualifier.kt")
        public void testCompoundAssignmentToPropertyWithQualifier() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/compoundAssignmentToPropertyWithQualifier.kt", this::doTest);
        }

        @TestMetadata("flist.kt")
        public void testFlist() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/flist.kt", this::doTest);
        }

        @TestMetadata("initializationOrder.kt")
        public void testInitializationOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/initializationOrder.kt", this::doTest);
        }

        @TestMetadata("interfaceCompanion.kt")
        public void testInterfaceCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/interfaceCompanion.kt", this::doTest);
        }

        @TestMetadata("interfaceCompanionObjectReference.kt")
        public void testInterfaceCompanionObjectReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/interfaceCompanionObjectReference.kt", this::doTest);
        }

        @TestMetadata("kt1047.kt")
        public void testKt1047() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt1047.kt", this::doTest);
        }

        @TestMetadata("kt11117.kt")
        public void testKt11117() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt11117.kt", this::doTest);
        }

        @TestMetadata("kt1136.kt")
        public void testKt1136() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt1136.kt", this::doTest);
        }

        @TestMetadata("kt1186.kt")
        public void testKt1186() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt1186.kt", this::doTest);
        }

        @TestMetadata("kt1600.kt")
        public void testKt1600() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt1600.kt", this::doTest);
        }

        @TestMetadata("kt1737.kt")
        public void testKt1737() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt1737.kt", this::doTest);
        }

        @TestMetadata("kt18982.kt")
        public void testKt18982() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt18982.kt", this::doTest);
        }

        @TestMetadata("kt2398.kt")
        public void testKt2398() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt2398.kt", this::doTest);
        }

        @TestMetadata("kt2663.kt")
        public void testKt2663() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt2663.kt", this::doTest);
        }

        @TestMetadata("kt2663_2.kt")
        public void testKt2663_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt2663_2.kt", this::doTest);
        }

        @TestMetadata("kt2675.kt")
        public void testKt2675() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt2675.kt", this::doTest);
        }

        @TestMetadata("kt2719.kt")
        public void testKt2719() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt2719.kt", this::doTest);
        }

        @TestMetadata("kt2822.kt")
        public void testKt2822() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt2822.kt", this::doTest);
        }

        @TestMetadata("kt3238.kt")
        public void testKt3238() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt3238.kt", this::doTest);
        }

        @TestMetadata("kt3684.kt")
        public void testKt3684() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt3684.kt", this::doTest);
        }

        @TestMetadata("kt4086.kt")
        public void testKt4086() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt4086.kt", this::doTest);
        }

        @TestMetadata("kt535.kt")
        public void testKt535() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt535.kt", this::doTest);
        }

        @TestMetadata("kt560.kt")
        public void testKt560() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt560.kt", this::doTest);
        }

        @TestMetadata("kt694.kt")
        public void testKt694() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/kt694.kt", this::doTest);
        }

        @TestMetadata("localFunctionInObjectInitializer_kt4516.kt")
        public void testLocalFunctionInObjectInitializer_kt4516() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/localFunctionInObjectInitializer_kt4516.kt", this::doTest);
        }

        @TestMetadata("methodOnObject.kt")
        public void testMethodOnObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/methodOnObject.kt", this::doTest);
        }

        @TestMetadata("nestedDerivedClassCallsProtectedFromCompanion.kt")
        public void testNestedDerivedClassCallsProtectedFromCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/nestedDerivedClassCallsProtectedFromCompanion.kt", this::doTest);
        }

        @TestMetadata("nestedObjectWithSuperclass.kt")
        public void testNestedObjectWithSuperclass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/nestedObjectWithSuperclass.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/object.kt", this::doTest);
        }

        @TestMetadata("objectExtendsInnerAndReferencesOuterMember.kt")
        public void testObjectExtendsInnerAndReferencesOuterMember() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/objectExtendsInnerAndReferencesOuterMember.kt", this::doTest);
        }

        @TestMetadata("objectInLocalAnonymousObject.kt")
        public void testObjectInLocalAnonymousObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/objectInLocalAnonymousObject.kt", this::doTest);
        }

        @TestMetadata("objectInitialization_kt5523.kt")
        public void testObjectInitialization_kt5523() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/objectInitialization_kt5523.kt", this::doTest);
        }

        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/objectLiteral.kt", this::doTest);
        }

        @TestMetadata("objectLiteralInClosure.kt")
        public void testObjectLiteralInClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/objectLiteralInClosure.kt", this::doTest);
        }

        @TestMetadata("objectVsClassInitialization_kt5291.kt")
        public void testObjectVsClassInitialization_kt5291() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/objectVsClassInitialization_kt5291.kt", this::doTest);
        }

        @TestMetadata("objectWithSuperclass.kt")
        public void testObjectWithSuperclass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/objectWithSuperclass.kt", this::doTest);
        }

        @TestMetadata("objectWithSuperclassAndTrait.kt")
        public void testObjectWithSuperclassAndTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/objectWithSuperclassAndTrait.kt", this::doTest);
        }

        @TestMetadata("privateExtensionFromInitializer_kt4543.kt")
        public void testPrivateExtensionFromInitializer_kt4543() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/privateExtensionFromInitializer_kt4543.kt", this::doTest);
        }

        @TestMetadata("privateFunctionFromClosureInInitializer_kt5582.kt")
        public void testPrivateFunctionFromClosureInInitializer_kt5582() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/privateFunctionFromClosureInInitializer_kt5582.kt", this::doTest);
        }

        @TestMetadata("receiverInConstructor.kt")
        public void testReceiverInConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/receiverInConstructor.kt", this::doTest);
        }

        @TestMetadata("safeAccess.kt")
        public void testSafeAccess() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/safeAccess.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall.kt")
        public void testSelfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToCompanionObjectInInlineLambdaInConstructorBody.kt")
        public void testSelfReferenceToCompanionObjectInInlineLambdaInConstructorBody() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInInlineLambdaInConstructorBody.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToCompanionObjectInLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToCompanionObjectInLambdaInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInLambdaInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall.kt")
        public void testSelfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody.kt")
        public void testSelfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToObjectInAnonymousObjectInSuperConstructorCall.kt")
        public void testSelfReferenceToObjectInAnonymousObjectInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInAnonymousObjectInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToObjectInInlineLambdaInConstructorBody.kt")
        public void testSelfReferenceToObjectInInlineLambdaInConstructorBody() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInInlineLambdaInConstructorBody.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToObjectInInlineLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToObjectInInlineLambdaInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInInlineLambdaInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("selfReferenceToObjectInLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToObjectInLambdaInSuperConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInLambdaInSuperConstructorCall.kt", this::doTest);
        }

        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/simpleObject.kt", this::doTest);
        }

        @TestMetadata("thisInConstructor.kt")
        public void testThisInConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/thisInConstructor.kt", this::doTest);
        }

        @TestMetadata("useAnonymousObjectAsIterator.kt")
        public void testUseAnonymousObjectAsIterator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/useAnonymousObjectAsIterator.kt", this::doTest);
        }

        @TestMetadata("useImportedMember.kt")
        public void testUseImportedMember() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/useImportedMember.kt", this::doTest);
        }

        @TestMetadata("useImportedMemberFromCompanion.kt")
        public void testUseImportedMemberFromCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/objects/useImportedMemberFromCompanion.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/operatorConventions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class OperatorConventions extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInOperatorConventions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/operatorConventions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("annotatedAssignment.kt")
        public void testAnnotatedAssignment() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/annotatedAssignment.kt", this::doTest);
        }

        @TestMetadata("assignmentOperations.kt")
        public void testAssignmentOperations() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/assignmentOperations.kt", this::doTest);
        }

        @TestMetadata("augmentedAssignmentInInitializer.kt")
        public void testAugmentedAssignmentInInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssignmentInInitializer.kt", this::doTest);
        }

        @TestMetadata("augmentedAssignmentWithArrayLHS.kt")
        public void testAugmentedAssignmentWithArrayLHS() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssignmentWithArrayLHS.kt", this::doTest);
        }

        @TestMetadata("incDecOnObject.kt")
        public void testIncDecOnObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/incDecOnObject.kt", this::doTest);
        }

        @TestMetadata("infixFunctionOverBuiltinMember.kt")
        public void testInfixFunctionOverBuiltinMember() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/infixFunctionOverBuiltinMember.kt", this::doTest);
        }

        @TestMetadata("kt14201.kt")
        public void testKt14201() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/kt14201.kt", this::doTest);
        }

        @TestMetadata("kt14201_2.kt")
        public void testKt14201_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/kt14201_2.kt", this::doTest);
        }

        @TestMetadata("kt20387.kt")
        public void testKt20387() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/kt20387.kt", this::doTest);
        }

        @TestMetadata("kt4152.kt")
        public void testKt4152() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/kt4152.kt", this::doTest);
        }

        @TestMetadata("kt4987.kt")
        public void testKt4987() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/kt4987.kt", this::doTest);
        }

        @TestMetadata("nestedMaps.kt")
        public void testNestedMaps() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/nestedMaps.kt", this::doTest);
        }

        @TestMetadata("operatorSetLambda.kt")
        public void testOperatorSetLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/operatorSetLambda.kt", this::doTest);
        }

        @TestMetadata("overloadedSet.kt")
        public void testOverloadedSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/overloadedSet.kt", this::doTest);
        }

        @TestMetadata("percentAsModOnBigIntegerWithoutRem.kt")
        public void testPercentAsModOnBigIntegerWithoutRem() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/percentAsModOnBigIntegerWithoutRem.kt", this::doTest);
        }

        @TestMetadata("plusExplicit.kt")
        public void testPlusExplicit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/plusExplicit.kt", this::doTest);
        }

        @TestMetadata("remAssignmentOperation.kt")
        public void testRemAssignmentOperation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/remAssignmentOperation.kt", this::doTest);
        }

        @TestMetadata("remOverModOperation.kt")
        public void testRemOverModOperation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/remOverModOperation.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/operatorConventions/compareTo")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CompareTo extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInCompareTo() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/operatorConventions/compareTo"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("boolean.kt")
            public void testBoolean() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/boolean.kt", this::doTest);
            }

            @TestMetadata("comparable.kt")
            public void testComparable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/comparable.kt", this::doTest);
            }

            @TestMetadata("doubleInt.kt")
            public void testDoubleInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleInt.kt", this::doTest);
            }

            @TestMetadata("doubleLong.kt")
            public void testDoubleLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleLong.kt", this::doTest);
            }

            @TestMetadata("extensionArray.kt")
            public void testExtensionArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionArray.kt", this::doTest);
            }

            @TestMetadata("extensionObject.kt")
            public void testExtensionObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionObject.kt", this::doTest);
            }

            @TestMetadata("intDouble.kt")
            public void testIntDouble() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/intDouble.kt", this::doTest);
            }

            @TestMetadata("intLong.kt")
            public void testIntLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/intLong.kt", this::doTest);
            }

            @TestMetadata("longDouble.kt")
            public void testLongDouble() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/longDouble.kt", this::doTest);
            }

            @TestMetadata("longInt.kt")
            public void testLongInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/operatorConventions/compareTo/longInt.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/optimizations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Optimizations extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInOptimizations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/optimizations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("kt20844.kt")
        public void testKt20844() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/optimizations/kt20844.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/package")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Package extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInPackage() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/package"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("boxPrimitiveTypeInClinit.kt")
        public void testBoxPrimitiveTypeInClinit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/boxPrimitiveTypeInClinit.kt", this::doTest);
        }

        @TestMetadata("checkCast.kt")
        public void testCheckCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/checkCast.kt", this::doTest);
        }

        @TestMetadata("incrementProperty.kt")
        public void testIncrementProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/incrementProperty.kt", this::doTest);
        }

        @TestMetadata("initializationOrder.kt")
        public void testInitializationOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/initializationOrder.kt", this::doTest);
        }

        @TestMetadata("invokespecial.kt")
        public void testInvokespecial() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/invokespecial.kt", this::doTest);
        }

        @TestMetadata("mainInFiles.kt")
        public void testMainInFiles() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/mainInFiles.kt", this::doTest);
        }

        @TestMetadata("nullablePrimitiveNoFieldInitializer.kt")
        public void testNullablePrimitiveNoFieldInitializer() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/nullablePrimitiveNoFieldInitializer.kt", this::doTest);
        }

        @TestMetadata("packageLocalClassNotImportedWithDefaultImport.kt")
        public void testPackageLocalClassNotImportedWithDefaultImport() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/packageLocalClassNotImportedWithDefaultImport.kt", this::doTest);
        }

        @TestMetadata("packageQualifiedMethod.kt")
        public void testPackageQualifiedMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/packageQualifiedMethod.kt", this::doTest);
        }

        @TestMetadata("privateMembersInImportList.kt")
        public void testPrivateMembersInImportList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/privateMembersInImportList.kt", this::doTest);
        }

        @TestMetadata("privateTopLevelPropAndVarInInner.kt")
        public void testPrivateTopLevelPropAndVarInInner() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/privateTopLevelPropAndVarInInner.kt", this::doTest);
        }

        @TestMetadata("referenceWithTheSameNameAsPackage.kt")
        public void testReferenceWithTheSameNameAsPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/package/referenceWithTheSameNameAsPackage.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/platformTypes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PlatformTypes extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInPlatformTypes() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/platformTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("compiler/testData/codegen/box/platformTypes/primitives")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Primitives extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInPrimitives() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/platformTypes/primitives"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("assign.kt")
            public void testAssign() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/assign.kt", this::doTest);
            }

            @TestMetadata("compareTo.kt")
            public void testCompareTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/compareTo.kt", this::doTest);
            }

            @TestMetadata("dec.kt")
            public void testDec() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/dec.kt", this::doTest);
            }

            @TestMetadata("div.kt")
            public void testDiv() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/div.kt", this::doTest);
            }

            @TestMetadata("equals.kt")
            public void testEquals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/equals.kt", this::doTest);
            }

            @TestMetadata("equalsNull_lv11.kt")
            public void testEqualsNull_lv11() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/equalsNull_lv11.kt", this::doTest);
            }

            @TestMetadata("equalsNull_lv12.kt")
            public void testEqualsNull_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/equalsNull_lv12.kt", this::doTest);
            }

            @TestMetadata("equalsNull_withExplicitFlag.kt")
            public void testEqualsNull_withExplicitFlag() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/equalsNull_withExplicitFlag.kt", this::doTest);
            }

            @TestMetadata("hashCode.kt")
            public void testHashCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/hashCode.kt", this::doTest);
            }

            @TestMetadata("identityEquals.kt")
            public void testIdentityEquals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/identityEquals.kt", this::doTest);
            }

            @TestMetadata("inc.kt")
            public void testInc() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/inc.kt", this::doTest);
            }

            @TestMetadata("minus.kt")
            public void testMinus() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/minus.kt", this::doTest);
            }

            @TestMetadata("mod.kt")
            public void testMod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/mod.kt", this::doTest);
            }

            @TestMetadata("not.kt")
            public void testNot() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/not.kt", this::doTest);
            }

            @TestMetadata("notEquals.kt")
            public void testNotEquals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/notEquals.kt", this::doTest);
            }

            @TestMetadata("plus.kt")
            public void testPlus() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/plus.kt", this::doTest);
            }

            @TestMetadata("plusAssign.kt")
            public void testPlusAssign() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/plusAssign.kt", this::doTest);
            }

            @TestMetadata("rangeTo.kt")
            public void testRangeTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/rangeTo.kt", this::doTest);
            }

            @TestMetadata("times.kt")
            public void testTimes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/times.kt", this::doTest);
            }

            @TestMetadata("toShort.kt")
            public void testToShort() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/toShort.kt", this::doTest);
            }

            @TestMetadata("toString.kt")
            public void testToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/toString.kt", this::doTest);
            }

            @TestMetadata("unaryMinus.kt")
            public void testUnaryMinus() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/unaryMinus.kt", this::doTest);
            }

            @TestMetadata("unaryPlus.kt")
            public void testUnaryPlus() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/platformTypes/primitives/unaryPlus.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/primitiveTypes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PrimitiveTypes extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInPrimitiveTypes() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("comparisonWithNaN.kt")
        public void testComparisonWithNaN() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/comparisonWithNaN.kt", this::doTest);
        }

        @TestMetadata("comparisonWithNullCallsFun.kt")
        public void testComparisonWithNullCallsFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/comparisonWithNullCallsFun.kt", this::doTest);
        }

        @TestMetadata("conversions.kt")
        public void testConversions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/conversions.kt", this::doTest);
        }

        @TestMetadata("ea35963.kt")
        public void testEa35963() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/ea35963.kt", this::doTest);
        }

        @TestMetadata("equalsHashCodeToString.kt")
        public void testEqualsHashCodeToString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalsHashCodeToString.kt", this::doTest);
        }

        @TestMetadata("incrementByteCharShort.kt")
        public void testIncrementByteCharShort() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/incrementByteCharShort.kt", this::doTest);
        }

        @TestMetadata("intLiteralIsNotNull.kt")
        public void testIntLiteralIsNotNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/intLiteralIsNotNull.kt", this::doTest);
        }

        @TestMetadata("kt1054.kt")
        public void testKt1054() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt1054.kt", this::doTest);
        }

        @TestMetadata("kt1055.kt")
        public void testKt1055() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt1055.kt", this::doTest);
        }

        @TestMetadata("kt1093.kt")
        public void testKt1093() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt1093.kt", this::doTest);
        }

        @TestMetadata("kt13023.kt")
        public void testKt13023() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt13023.kt", this::doTest);
        }

        @TestMetadata("kt14868.kt")
        public void testKt14868() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt14868.kt", this::doTest);
        }

        @TestMetadata("kt1508.kt")
        public void testKt1508() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt1508.kt", this::doTest);
        }

        @TestMetadata("kt1634.kt")
        public void testKt1634() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt1634.kt", this::doTest);
        }

        @TestMetadata("kt16732.kt")
        public void testKt16732() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt16732.kt", this::doTest);
        }

        @TestMetadata("kt2251.kt")
        public void testKt2251() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt2251.kt", this::doTest);
        }

        @TestMetadata("kt2269.kt")
        public void testKt2269() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt2269.kt", this::doTest);
        }

        @TestMetadata("kt2275.kt")
        public void testKt2275() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt2275.kt", this::doTest);
        }

        @TestMetadata("kt239.kt")
        public void testKt239() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt239.kt", this::doTest);
        }

        @TestMetadata("kt242.kt")
        public void testKt242() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt242.kt", this::doTest);
        }

        @TestMetadata("kt243.kt")
        public void testKt243() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt243.kt", this::doTest);
        }

        @TestMetadata("kt248.kt")
        public void testKt248() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt248.kt", this::doTest);
        }

        @TestMetadata("kt2768.kt")
        public void testKt2768() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt2768.kt", this::doTest);
        }

        @TestMetadata("kt2794.kt")
        public void testKt2794() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt2794.kt", this::doTest);
        }

        @TestMetadata("kt3078.kt")
        public void testKt3078() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt3078.kt", this::doTest);
        }

        @TestMetadata("kt3517.kt")
        public void testKt3517() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt3517.kt", this::doTest);
        }

        @TestMetadata("kt3576.kt")
        public void testKt3576() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt3576.kt", this::doTest);
        }

        @TestMetadata("kt3613.kt")
        public void testKt3613() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt3613.kt", this::doTest);
        }

        @TestMetadata("kt4097.kt")
        public void testKt4097() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt4097.kt", this::doTest);
        }

        @TestMetadata("kt4098.kt")
        public void testKt4098() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt4098.kt", this::doTest);
        }

        @TestMetadata("kt4210.kt")
        public void testKt4210() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt4210.kt", this::doTest);
        }

        @TestMetadata("kt4251.kt")
        public void testKt4251() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt4251.kt", this::doTest);
        }

        @TestMetadata("kt446.kt")
        public void testKt446() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt446.kt", this::doTest);
        }

        @TestMetadata("kt518.kt")
        public void testKt518() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt518.kt", this::doTest);
        }

        @TestMetadata("kt6590_identityEquals.kt")
        public void testKt6590_identityEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt6590_identityEquals.kt", this::doTest);
        }

        @TestMetadata("kt665.kt")
        public void testKt665() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt665.kt", this::doTest);
        }

        @TestMetadata("kt684.kt")
        public void testKt684() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt684.kt", this::doTest);
        }

        @TestMetadata("kt711.kt")
        public void testKt711() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt711.kt", this::doTest);
        }

        @TestMetadata("kt737.kt")
        public void testKt737() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt737.kt", this::doTest);
        }

        @TestMetadata("kt752.kt")
        public void testKt752() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt752.kt", this::doTest);
        }

        @TestMetadata("kt753.kt")
        public void testKt753() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt753.kt", this::doTest);
        }

        @TestMetadata("kt756.kt")
        public void testKt756() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt756.kt", this::doTest);
        }

        @TestMetadata("kt757.kt")
        public void testKt757() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt757.kt", this::doTest);
        }

        @TestMetadata("kt828.kt")
        public void testKt828() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt828.kt", this::doTest);
        }

        @TestMetadata("kt877.kt")
        public void testKt877() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt877.kt", this::doTest);
        }

        @TestMetadata("kt882.kt")
        public void testKt882() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt882.kt", this::doTest);
        }

        @TestMetadata("kt887.kt")
        public void testKt887() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt887.kt", this::doTest);
        }

        @TestMetadata("kt935.kt")
        public void testKt935() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/kt935.kt", this::doTest);
        }

        @TestMetadata("nullAsNullableIntIsNull.kt")
        public void testNullAsNullableIntIsNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/nullAsNullableIntIsNull.kt", this::doTest);
        }

        @TestMetadata("nullableCharBoolean.kt")
        public void testNullableCharBoolean() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/nullableCharBoolean.kt", this::doTest);
        }

        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/number.kt", this::doTest);
        }

        @TestMetadata("rangeTo.kt")
        public void testRangeTo() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/rangeTo.kt", this::doTest);
        }

        @TestMetadata("substituteIntForGeneric.kt")
        public void testSubstituteIntForGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/substituteIntForGeneric.kt", this::doTest);
        }

        @TestMetadata("unboxComparable.kt")
        public void testUnboxComparable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/unboxComparable.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/primitiveTypes/equalityWithObject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class EqualityWithObject extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInEqualityWithObject() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/equalityWithObject"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("boxedEqPrimitiveEvaluationOrder.kt")
            public void testBoxedEqPrimitiveEvaluationOrder() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/boxedEqPrimitiveEvaluationOrder.kt", this::doTest);
            }

            @TestMetadata("boxedLongEqualsLong.kt")
            public void testBoxedLongEqualsLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/boxedLongEqualsLong.kt", this::doTest);
            }

            @TestMetadata("objectWithAsymmetricEqualsEqPrimitive.kt")
            public void testObjectWithAsymmetricEqualsEqPrimitive() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/objectWithAsymmetricEqualsEqPrimitive.kt", this::doTest);
            }

            @TestMetadata("whenNullableBoxed.kt")
            public void testWhenNullableBoxed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/whenNullableBoxed.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Generated extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInGenerated() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("boxedEqPrimitiveBoolean.kt")
                public void testBoxedEqPrimitiveBoolean() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveBoolean.kt", this::doTest);
                }

                @TestMetadata("boxedEqPrimitiveByte.kt")
                public void testBoxedEqPrimitiveByte() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveByte.kt", this::doTest);
                }

                @TestMetadata("boxedEqPrimitiveChar.kt")
                public void testBoxedEqPrimitiveChar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveChar.kt", this::doTest);
                }

                @TestMetadata("boxedEqPrimitiveInt.kt")
                public void testBoxedEqPrimitiveInt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveInt.kt", this::doTest);
                }

                @TestMetadata("boxedEqPrimitiveLong.kt")
                public void testBoxedEqPrimitiveLong() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveLong.kt", this::doTest);
                }

                @TestMetadata("boxedEqPrimitiveShort.kt")
                public void testBoxedEqPrimitiveShort() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveShort.kt", this::doTest);
                }

                @TestMetadata("primitiveEqBoxedBoolean.kt")
                public void testPrimitiveEqBoxedBoolean() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedBoolean.kt", this::doTest);
                }

                @TestMetadata("primitiveEqBoxedByte.kt")
                public void testPrimitiveEqBoxedByte() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedByte.kt", this::doTest);
                }

                @TestMetadata("primitiveEqBoxedChar.kt")
                public void testPrimitiveEqBoxedChar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedChar.kt", this::doTest);
                }

                @TestMetadata("primitiveEqBoxedInt.kt")
                public void testPrimitiveEqBoxedInt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedInt.kt", this::doTest);
                }

                @TestMetadata("primitiveEqBoxedLong.kt")
                public void testPrimitiveEqBoxedLong() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedLong.kt", this::doTest);
                }

                @TestMetadata("primitiveEqBoxedShort.kt")
                public void testPrimitiveEqBoxedShort() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedShort.kt", this::doTest);
                }

                @TestMetadata("primitiveEqObjectBoolean.kt")
                public void testPrimitiveEqObjectBoolean() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectBoolean.kt", this::doTest);
                }

                @TestMetadata("primitiveEqObjectByte.kt")
                public void testPrimitiveEqObjectByte() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectByte.kt", this::doTest);
                }

                @TestMetadata("primitiveEqObjectChar.kt")
                public void testPrimitiveEqObjectChar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectChar.kt", this::doTest);
                }

                @TestMetadata("primitiveEqObjectInt.kt")
                public void testPrimitiveEqObjectInt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectInt.kt", this::doTest);
                }

                @TestMetadata("primitiveEqObjectLong.kt")
                public void testPrimitiveEqObjectLong() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectLong.kt", this::doTest);
                }

                @TestMetadata("primitiveEqObjectShort.kt")
                public void testPrimitiveEqObjectShort() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectShort.kt", this::doTest);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/private")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Private extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInPrivate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/private"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("arrayConvention.kt")
        public void testArrayConvention() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/private/arrayConvention.kt", this::doTest);
        }

        @TestMetadata("kt9855.kt")
        public void testKt9855() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/private/kt9855.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/privateConstructors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PrivateConstructors extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInPrivateConstructors() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/privateConstructors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/base.kt", this::doTest);
        }

        @TestMetadata("captured.kt")
        public void testCaptured() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/captured.kt", this::doTest);
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/companion.kt", this::doTest);
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/inline.kt", this::doTest);
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/inner.kt", this::doTest);
        }

        @TestMetadata("kt4860.kt")
        public void testKt4860() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/kt4860.kt", this::doTest);
        }

        @TestMetadata("secondary.kt")
        public void testSecondary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/secondary.kt", this::doTest);
        }

        @TestMetadata("synthetic.kt")
        public void testSynthetic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/synthetic.kt", this::doTest);
        }

        @TestMetadata("withArguments.kt")
        public void testWithArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/withArguments.kt", this::doTest);
        }

        @TestMetadata("withDefault.kt")
        public void testWithDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/withDefault.kt", this::doTest);
        }

        @TestMetadata("withLinkedClasses.kt")
        public void testWithLinkedClasses() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/withLinkedClasses.kt", this::doTest);
        }

        @TestMetadata("withLinkedObjects.kt")
        public void testWithLinkedObjects() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/withLinkedObjects.kt", this::doTest);
        }

        @TestMetadata("withVarargs.kt")
        public void testWithVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/privateConstructors/withVarargs.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/properties")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Properties extends AbstractLightAnalysisModeTest {
        @TestMetadata("augmentedAssignmentsAndIncrements.kt")
        public void ignoreAugmentedAssignmentsAndIncrements() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/augmentedAssignmentsAndIncrements.kt", this::doTest);
        }

        @TestMetadata("accessToPrivateProperty.kt")
        public void testAccessToPrivateProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/accessToPrivateProperty.kt", this::doTest);
        }

        @TestMetadata("accessToPrivateSetter.kt")
        public void testAccessToPrivateSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/accessToPrivateSetter.kt", this::doTest);
        }

        public void testAllFilesPresentInProperties() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/properties"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("classArtificialFieldInsideNested.kt")
        public void testClassArtificialFieldInsideNested() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/classArtificialFieldInsideNested.kt", this::doTest);
        }

        @TestMetadata("classFieldInsideLambda.kt")
        public void testClassFieldInsideLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/classFieldInsideLambda.kt", this::doTest);
        }

        @TestMetadata("classFieldInsideLocalInSetter.kt")
        public void testClassFieldInsideLocalInSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/classFieldInsideLocalInSetter.kt", this::doTest);
        }

        @TestMetadata("classFieldInsideNested.kt")
        public void testClassFieldInsideNested() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/classFieldInsideNested.kt", this::doTest);
        }

        @TestMetadata("classObjectProperties.kt")
        public void testClassObjectProperties() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/classObjectProperties.kt", this::doTest);
        }

        @TestMetadata("classPrivateArtificialFieldInsideNested.kt")
        public void testClassPrivateArtificialFieldInsideNested() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/classPrivateArtificialFieldInsideNested.kt", this::doTest);
        }

        @TestMetadata("collectionSize.kt")
        public void testCollectionSize() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/collectionSize.kt", this::doTest);
        }

        @TestMetadata("commonPropertiesKJK.kt")
        public void testCommonPropertiesKJK() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/commonPropertiesKJK.kt", this::doTest);
        }

        @TestMetadata("companionFieldInsideLambda.kt")
        public void testCompanionFieldInsideLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/companionFieldInsideLambda.kt", this::doTest);
        }

        @TestMetadata("companionObjectAccessor.kt")
        public void testCompanionObjectAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/companionObjectAccessor.kt", this::doTest);
        }

        @TestMetadata("companionObjectPropertiesFromJava.kt")
        public void testCompanionObjectPropertiesFromJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/companionObjectPropertiesFromJava.kt", this::doTest);
        }

        @TestMetadata("companionPrivateField.kt")
        public void testCompanionPrivateField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/companionPrivateField.kt", this::doTest);
        }

        @TestMetadata("companionPrivateFieldInsideLambda.kt")
        public void testCompanionPrivateFieldInsideLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/companionPrivateFieldInsideLambda.kt", this::doTest);
        }

        @TestMetadata("field.kt")
        public void testField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/field.kt", this::doTest);
        }

        @TestMetadata("fieldInClass.kt")
        public void testFieldInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/fieldInClass.kt", this::doTest);
        }

        @TestMetadata("fieldInsideField.kt")
        public void testFieldInsideField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/fieldInsideField.kt", this::doTest);
        }

        @TestMetadata("fieldInsideLambda.kt")
        public void testFieldInsideLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/fieldInsideLambda.kt", this::doTest);
        }

        @TestMetadata("fieldInsideNested.kt")
        public void testFieldInsideNested() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/fieldInsideNested.kt", this::doTest);
        }

        @TestMetadata("fieldSimple.kt")
        public void testFieldSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/fieldSimple.kt", this::doTest);
        }

        @TestMetadata("generalAccess.kt")
        public void testGeneralAccess() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/generalAccess.kt", this::doTest);
        }

        @TestMetadata("javaPropertyBoxedGetter.kt")
        public void testJavaPropertyBoxedGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/javaPropertyBoxedGetter.kt", this::doTest);
        }

        @TestMetadata("javaPropertyBoxedSetter.kt")
        public void testJavaPropertyBoxedSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/javaPropertyBoxedSetter.kt", this::doTest);
        }

        @TestMetadata("kt10715.kt")
        public void testKt10715() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt10715.kt", this::doTest);
        }

        @TestMetadata("kt10729.kt")
        public void testKt10729() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt10729.kt", this::doTest);
        }

        @TestMetadata("kt1159.kt")
        public void testKt1159() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1159.kt", this::doTest);
        }

        @TestMetadata("kt1165.kt")
        public void testKt1165() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1165.kt", this::doTest);
        }

        @TestMetadata("kt1168.kt")
        public void testKt1168() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1168.kt", this::doTest);
        }

        @TestMetadata("kt1170.kt")
        public void testKt1170() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1170.kt", this::doTest);
        }

        @TestMetadata("kt12200.kt")
        public void testKt12200() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt12200.kt", this::doTest);
        }

        @TestMetadata("kt1398.kt")
        public void testKt1398() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1398.kt", this::doTest);
        }

        @TestMetadata("kt1417.kt")
        public void testKt1417() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1417.kt", this::doTest);
        }

        @TestMetadata("kt1482_2279.kt")
        public void testKt1482_2279() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1482_2279.kt", this::doTest);
        }

        @TestMetadata("kt1714.kt")
        public void testKt1714() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1714.kt", this::doTest);
        }

        @TestMetadata("kt1714_minimal.kt")
        public void testKt1714_minimal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1714_minimal.kt", this::doTest);
        }

        @TestMetadata("kt1892.kt")
        public void testKt1892() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt1892.kt", this::doTest);
        }

        @TestMetadata("kt2331.kt")
        public void testKt2331() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt2331.kt", this::doTest);
        }

        @TestMetadata("kt257.kt")
        public void testKt257() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt257.kt", this::doTest);
        }

        @TestMetadata("kt2655.kt")
        public void testKt2655() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt2655.kt", this::doTest);
        }

        @TestMetadata("kt2786.kt")
        public void testKt2786() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt2786.kt", this::doTest);
        }

        @TestMetadata("kt2892.kt")
        public void testKt2892() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt2892.kt", this::doTest);
        }

        @TestMetadata("kt3118.kt")
        public void testKt3118() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt3118.kt", this::doTest);
        }

        @TestMetadata("kt3524.kt")
        public void testKt3524() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt3524.kt", this::doTest);
        }

        @TestMetadata("kt3551.kt")
        public void testKt3551() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt3551.kt", this::doTest);
        }

        @TestMetadata("kt3556.kt")
        public void testKt3556() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt3556.kt", this::doTest);
        }

        @TestMetadata("kt3930.kt")
        public void testKt3930() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt3930.kt", this::doTest);
        }

        @TestMetadata("kt4140.kt")
        public void testKt4140() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt4140.kt", this::doTest);
        }

        @TestMetadata("kt4252.kt")
        public void testKt4252() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt4252.kt", this::doTest);
        }

        @TestMetadata("kt4252_2.kt")
        public void testKt4252_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt4252_2.kt", this::doTest);
        }

        @TestMetadata("kt4340.kt")
        public void testKt4340() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt4340.kt", this::doTest);
        }

        @TestMetadata("kt4373.kt")
        public void testKt4373() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt4373.kt", this::doTest);
        }

        @TestMetadata("kt4383.kt")
        public void testKt4383() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt4383.kt", this::doTest);
        }

        @TestMetadata("kt613.kt")
        public void testKt613() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt613.kt", this::doTest);
        }

        @TestMetadata("kt8928.kt")
        public void testKt8928() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt8928.kt", this::doTest);
        }

        @TestMetadata("kt9603.kt")
        public void testKt9603() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/kt9603.kt", this::doTest);
        }

        @TestMetadata("primitiveOverrideDefaultAccessor.kt")
        public void testPrimitiveOverrideDefaultAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/primitiveOverrideDefaultAccessor.kt", this::doTest);
        }

        @TestMetadata("primitiveOverrideDelegateAccessor.kt")
        public void testPrimitiveOverrideDelegateAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/primitiveOverrideDelegateAccessor.kt", this::doTest);
        }

        @TestMetadata("privatePropertyInConstructor.kt")
        public void testPrivatePropertyInConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/privatePropertyInConstructor.kt", this::doTest);
        }

        @TestMetadata("privatePropertyWithoutBackingField.kt")
        public void testPrivatePropertyWithoutBackingField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/privatePropertyWithoutBackingField.kt", this::doTest);
        }

        @TestMetadata("protectedJavaFieldInInline.kt")
        public void testProtectedJavaFieldInInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/protectedJavaFieldInInline.kt", this::doTest);
        }

        @TestMetadata("protectedJavaProperty.kt")
        public void testProtectedJavaProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/protectedJavaProperty.kt", this::doTest);
        }

        @TestMetadata("protectedJavaPropertyInCompanion.kt")
        public void testProtectedJavaPropertyInCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/protectedJavaPropertyInCompanion.kt", this::doTest);
        }

        @TestMetadata("substituteJavaSuperField.kt")
        public void testSubstituteJavaSuperField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/substituteJavaSuperField.kt", this::doTest);
        }

        @TestMetadata("twoAnnotatedExtensionPropertiesWithoutBackingFields.kt")
        public void testTwoAnnotatedExtensionPropertiesWithoutBackingFields() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/twoAnnotatedExtensionPropertiesWithoutBackingFields.kt", this::doTest);
        }

        @TestMetadata("typeInferredFromGetter.kt")
        public void testTypeInferredFromGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/typeInferredFromGetter.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/properties/const")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Const extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInConst() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/properties/const"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("constFlags.kt")
            public void testConstFlags() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/const/constFlags.kt", this::doTest);
            }

            @TestMetadata("constValInAnnotationDefault.kt")
            public void testConstValInAnnotationDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/const/constValInAnnotationDefault.kt", this::doTest);
            }

            @TestMetadata("interfaceCompanion.kt")
            public void testInterfaceCompanion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/const/interfaceCompanion.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/properties/lateinit")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Lateinit extends AbstractLightAnalysisModeTest {
            @TestMetadata("accessor.kt")
            public void testAccessor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/accessor.kt", this::doTest);
            }

            @TestMetadata("accessorException.kt")
            public void testAccessorException() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/accessorException.kt", this::doTest);
            }

            public void testAllFilesPresentInLateinit() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("exceptionField.kt")
            public void testExceptionField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/exceptionField.kt", this::doTest);
            }

            @TestMetadata("exceptionGetter.kt")
            public void testExceptionGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/exceptionGetter.kt", this::doTest);
            }

            @TestMetadata("override.kt")
            public void testOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/override.kt", this::doTest);
            }

            @TestMetadata("overrideException.kt")
            public void testOverrideException() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/overrideException.kt", this::doTest);
            }

            @TestMetadata("privateSetter.kt")
            public void testPrivateSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/privateSetter.kt", this::doTest);
            }

            @TestMetadata("privateSetterFromLambda.kt")
            public void testPrivateSetterFromLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/privateSetterFromLambda.kt", this::doTest);
            }

            @TestMetadata("privateSetterViaSubclass.kt")
            public void testPrivateSetterViaSubclass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/privateSetterViaSubclass.kt", this::doTest);
            }

            @TestMetadata("simpleVar.kt")
            public void testSimpleVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/simpleVar.kt", this::doTest);
            }

            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/visibility.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class IsInitializedAndDeinitialize extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInIsInitializedAndDeinitialize() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("emptyLhs.kt")
                public void testEmptyLhs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/emptyLhs.kt", this::doTest);
                }

                @TestMetadata("innerSubclass.kt")
                public void testInnerSubclass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/innerSubclass.kt", this::doTest);
                }

                @TestMetadata("propertyImportedFromObject.kt")
                public void testPropertyImportedFromObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/propertyImportedFromObject.kt", this::doTest);
                }

                @TestMetadata("sideEffects.kt")
                public void testSideEffects() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/sideEffects.kt", this::doTest);
                }

                @TestMetadata("simpleIsInitialized.kt")
                public void testSimpleIsInitialized() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/simpleIsInitialized.kt", this::doTest);
                }

                @TestMetadata("topLevelProperty.kt")
                public void testTopLevelProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/topLevelProperty.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/properties/lateinit/local")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Local extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInLocal() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/local"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("capturedLocalLateinit.kt")
                public void testCapturedLocalLateinit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/local/capturedLocalLateinit.kt", this::doTest);
                }

                @TestMetadata("localLateinit.kt")
                public void testLocalLateinit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/local/localLateinit.kt", this::doTest);
                }

                @TestMetadata("uninitializedCapturedMemberAccess.kt")
                public void testUninitializedCapturedMemberAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedCapturedMemberAccess.kt", this::doTest);
                }

                @TestMetadata("uninitializedCapturedRead.kt")
                public void testUninitializedCapturedRead() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedCapturedRead.kt", this::doTest);
                }

                @TestMetadata("uninitializedMemberAccess.kt")
                public void testUninitializedMemberAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedMemberAccess.kt", this::doTest);
                }

                @TestMetadata("uninitializedRead.kt")
                public void testUninitializedRead() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedRead.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/properties/lateinit/topLevel")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TopLevel extends AbstractLightAnalysisModeTest {
                @TestMetadata("accessorException.kt")
                public void testAccessorException() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/accessorException.kt", this::doTest);
                }

                @TestMetadata("accessorForTopLevelLateinit.kt")
                public void testAccessorForTopLevelLateinit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/accessorForTopLevelLateinit.kt", this::doTest);
                }

                public void testAllFilesPresentInTopLevel() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/topLevel"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("topLevelLateinit.kt")
                public void testTopLevelLateinit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/topLevelLateinit.kt", this::doTest);
                }

                @TestMetadata("uninitializedMemberAccess.kt")
                public void testUninitializedMemberAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/uninitializedMemberAccess.kt", this::doTest);
                }

                @TestMetadata("uninitializedRead.kt")
                public void testUninitializedRead() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/uninitializedRead.kt", this::doTest);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/publishedApi")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PublishedApi extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInPublishedApi() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/publishedApi"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("noMangling.kt")
        public void testNoMangling() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/publishedApi/noMangling.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/publishedApi/simple.kt", this::doTest);
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/publishedApi/topLevel.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Ranges extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInRanges() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("forByteProgressionWithIntIncrement.kt")
        public void testForByteProgressionWithIntIncrement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forByteProgressionWithIntIncrement.kt", this::doTest);
        }

        @TestMetadata("forInRangeLiteralWithMixedTypeBounds.kt")
        public void testForInRangeLiteralWithMixedTypeBounds() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInRangeLiteralWithMixedTypeBounds.kt", this::doTest);
        }

        @TestMetadata("forInRangeWithImplicitReceiver.kt")
        public void testForInRangeWithImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInRangeWithImplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("forInStringVarUpdatedInLoopBody.kt")
        public void testForInStringVarUpdatedInLoopBody() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInStringVarUpdatedInLoopBody.kt", this::doTest);
        }

        @TestMetadata("forIntRange.kt")
        public void testForIntRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forIntRange.kt", this::doTest);
        }

        @TestMetadata("forNullableIntInRangeWithImplicitReceiver.kt")
        public void testForNullableIntInRangeWithImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forNullableIntInRangeWithImplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("multiAssignmentIterationOverIntRange.kt")
        public void testMultiAssignmentIterationOverIntRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/multiAssignmentIterationOverIntRange.kt", this::doTest);
        }

        @TestMetadata("safeCallRangeTo.kt")
        public void testSafeCallRangeTo() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/safeCallRangeTo.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/contains")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Contains extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInContains() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/contains"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("comparisonWithRangeBoundEliminated.kt")
            public void testComparisonWithRangeBoundEliminated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/comparisonWithRangeBoundEliminated.kt", this::doTest);
            }

            @TestMetadata("evaluationOrderForCollection.kt")
            public void testEvaluationOrderForCollection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForCollection.kt", this::doTest);
            }

            @TestMetadata("evaluationOrderForComparableRange.kt")
            public void testEvaluationOrderForComparableRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForComparableRange.kt", this::doTest);
            }

            @TestMetadata("evaluationOrderForDownTo.kt")
            public void testEvaluationOrderForDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForDownTo.kt", this::doTest);
            }

            @TestMetadata("evaluationOrderForRangeLiteral.kt")
            public void testEvaluationOrderForRangeLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForRangeLiteral.kt", this::doTest);
            }

            @TestMetadata("genericCharInRangeLiteral.kt")
            public void testGenericCharInRangeLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/genericCharInRangeLiteral.kt", this::doTest);
            }

            @TestMetadata("inArray.kt")
            public void testInArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inArray.kt", this::doTest);
            }

            @TestMetadata("inCharSequence.kt")
            public void testInCharSequence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inCharSequence.kt", this::doTest);
            }

            @TestMetadata("inComparableRange.kt")
            public void testInComparableRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inComparableRange.kt", this::doTest);
            }

            @TestMetadata("inCustomObjectRange.kt")
            public void testInCustomObjectRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inCustomObjectRange.kt", this::doTest);
            }

            @TestMetadata("inDoubleRangeLiteralVsComparableRangeLiteral.kt")
            public void testInDoubleRangeLiteralVsComparableRangeLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inDoubleRangeLiteralVsComparableRangeLiteral.kt", this::doTest);
            }

            @TestMetadata("inExtensionRange.kt")
            public void testInExtensionRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inExtensionRange.kt", this::doTest);
            }

            @TestMetadata("inFloatingPointRangeWithNaNBound.kt")
            public void testInFloatingPointRangeWithNaNBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inFloatingPointRangeWithNaNBound.kt", this::doTest);
            }

            @TestMetadata("inIntRange.kt")
            public void testInIntRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inIntRange.kt", this::doTest);
            }

            @TestMetadata("inIterable.kt")
            public void testInIterable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inIterable.kt", this::doTest);
            }

            @TestMetadata("inNonMatchingRange.kt")
            public void testInNonMatchingRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inNonMatchingRange.kt", this::doTest);
            }

            @TestMetadata("inOptimizableDoubleRange.kt")
            public void testInOptimizableDoubleRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableDoubleRange.kt", this::doTest);
            }

            @TestMetadata("inOptimizableFloatRange.kt")
            public void testInOptimizableFloatRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableFloatRange.kt", this::doTest);
            }

            @TestMetadata("inOptimizableIntRange.kt")
            public void testInOptimizableIntRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableIntRange.kt", this::doTest);
            }

            @TestMetadata("inOptimizableLongRange.kt")
            public void testInOptimizableLongRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableLongRange.kt", this::doTest);
            }

            @TestMetadata("inPrimitiveProgression.kt")
            public void testInPrimitiveProgression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inPrimitiveProgression.kt", this::doTest);
            }

            @TestMetadata("inPrimitiveRange.kt")
            public void testInPrimitiveRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inPrimitiveRange.kt", this::doTest);
            }

            @TestMetadata("inRangeLiteralComposition.kt")
            public void testInRangeLiteralComposition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inRangeLiteralComposition.kt", this::doTest);
            }

            @TestMetadata("inRangeWithCustomContains.kt")
            public void testInRangeWithCustomContains() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithCustomContains.kt", this::doTest);
            }

            @TestMetadata("inRangeWithImplicitReceiver.kt")
            public void testInRangeWithImplicitReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithImplicitReceiver.kt", this::doTest);
            }

            @TestMetadata("inRangeWithNonmatchingArguments.kt")
            public void testInRangeWithNonmatchingArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithNonmatchingArguments.kt", this::doTest);
            }

            @TestMetadata("inRangeWithSmartCast.kt")
            public void testInRangeWithSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithSmartCast.kt", this::doTest);
            }

            @TestMetadata("inUntil.kt")
            public void testInUntil() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/inUntil.kt", this::doTest);
            }

            @TestMetadata("kt20106.kt")
            public void testKt20106() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/kt20106.kt", this::doTest);
            }

            @TestMetadata("nullableInPrimitiveRange.kt")
            public void testNullableInPrimitiveRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/nullableInPrimitiveRange.kt", this::doTest);
            }

            @TestMetadata("rangeContainsString.kt")
            public void testRangeContainsString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/rangeContainsString.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/ranges/contains/generated")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Generated extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInGenerated() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/contains/generated"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("arrayIndices.kt")
                public void testArrayIndices() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/arrayIndices.kt", this::doTest);
                }

                @TestMetadata("charDownTo.kt")
                public void testCharDownTo() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/charDownTo.kt", this::doTest);
                }

                @TestMetadata("charRangeLiteral.kt")
                public void testCharRangeLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/charRangeLiteral.kt", this::doTest);
                }

                @TestMetadata("charSequenceIndices.kt")
                public void testCharSequenceIndices() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/charSequenceIndices.kt", this::doTest);
                }

                @TestMetadata("charUntil.kt")
                public void testCharUntil() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/charUntil.kt", this::doTest);
                }

                @TestMetadata("collectionIndices.kt")
                public void testCollectionIndices() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/collectionIndices.kt", this::doTest);
                }

                @TestMetadata("doubleRangeLiteral.kt")
                public void testDoubleRangeLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/doubleRangeLiteral.kt", this::doTest);
                }

                @TestMetadata("floatRangeLiteral.kt")
                public void testFloatRangeLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/floatRangeLiteral.kt", this::doTest);
                }

                @TestMetadata("intDownTo.kt")
                public void testIntDownTo() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/intDownTo.kt", this::doTest);
                }

                @TestMetadata("intRangeLiteral.kt")
                public void testIntRangeLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/intRangeLiteral.kt", this::doTest);
                }

                @TestMetadata("intUntil.kt")
                public void testIntUntil() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/intUntil.kt", this::doTest);
                }

                @TestMetadata("longDownTo.kt")
                public void testLongDownTo() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/longDownTo.kt", this::doTest);
                }

                @TestMetadata("longRangeLiteral.kt")
                public void testLongRangeLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/longRangeLiteral.kt", this::doTest);
                }

                @TestMetadata("longUntil.kt")
                public void testLongUntil() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/contains/generated/longUntil.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/expression")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Expression extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInExpression() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/expression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("emptyDownto.kt")
            public void testEmptyDownto() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/emptyDownto.kt", this::doTest);
            }

            @TestMetadata("emptyRange.kt")
            public void testEmptyRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/emptyRange.kt", this::doTest);
            }

            @TestMetadata("inexactDownToMinValue.kt")
            public void testInexactDownToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/inexactDownToMinValue.kt", this::doTest);
            }

            @TestMetadata("inexactSteppedDownTo.kt")
            public void testInexactSteppedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/inexactSteppedDownTo.kt", this::doTest);
            }

            @TestMetadata("inexactSteppedRange.kt")
            public void testInexactSteppedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/inexactSteppedRange.kt", this::doTest);
            }

            @TestMetadata("inexactToMaxValue.kt")
            public void testInexactToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/inexactToMaxValue.kt", this::doTest);
            }

            @TestMetadata("maxValueMinusTwoToMaxValue.kt")
            public void testMaxValueMinusTwoToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/maxValueMinusTwoToMaxValue.kt", this::doTest);
            }

            @TestMetadata("maxValueToMaxValue.kt")
            public void testMaxValueToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/maxValueToMaxValue.kt", this::doTest);
            }

            @TestMetadata("maxValueToMinValue.kt")
            public void testMaxValueToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/maxValueToMinValue.kt", this::doTest);
            }

            @TestMetadata("oneElementDownTo.kt")
            public void testOneElementDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/oneElementDownTo.kt", this::doTest);
            }

            @TestMetadata("oneElementRange.kt")
            public void testOneElementRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/oneElementRange.kt", this::doTest);
            }

            @TestMetadata("openRange.kt")
            public void testOpenRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/openRange.kt", this::doTest);
            }

            @TestMetadata("progressionDownToMinValue.kt")
            public void testProgressionDownToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/progressionDownToMinValue.kt", this::doTest);
            }

            @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
            public void testProgressionMaxValueMinusTwoToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueMinusTwoToMaxValue.kt", this::doTest);
            }

            @TestMetadata("progressionMaxValueToMaxValue.kt")
            public void testProgressionMaxValueToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueToMaxValue.kt", this::doTest);
            }

            @TestMetadata("progressionMaxValueToMinValue.kt")
            public void testProgressionMaxValueToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueToMinValue.kt", this::doTest);
            }

            @TestMetadata("progressionMinValueToMinValue.kt")
            public void testProgressionMinValueToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/progressionMinValueToMinValue.kt", this::doTest);
            }

            @TestMetadata("reversedBackSequence.kt")
            public void testReversedBackSequence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/reversedBackSequence.kt", this::doTest);
            }

            @TestMetadata("reversedEmptyBackSequence.kt")
            public void testReversedEmptyBackSequence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/reversedEmptyBackSequence.kt", this::doTest);
            }

            @TestMetadata("reversedEmptyRange.kt")
            public void testReversedEmptyRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/reversedEmptyRange.kt", this::doTest);
            }

            @TestMetadata("reversedInexactSteppedDownTo.kt")
            public void testReversedInexactSteppedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/reversedInexactSteppedDownTo.kt", this::doTest);
            }

            @TestMetadata("reversedRange.kt")
            public void testReversedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/reversedRange.kt", this::doTest);
            }

            @TestMetadata("reversedSimpleSteppedRange.kt")
            public void testReversedSimpleSteppedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/reversedSimpleSteppedRange.kt", this::doTest);
            }

            @TestMetadata("simpleDownTo.kt")
            public void testSimpleDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/simpleDownTo.kt", this::doTest);
            }

            @TestMetadata("simpleRange.kt")
            public void testSimpleRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/simpleRange.kt", this::doTest);
            }

            @TestMetadata("simpleRangeWithNonConstantEnds.kt")
            public void testSimpleRangeWithNonConstantEnds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/simpleRangeWithNonConstantEnds.kt", this::doTest);
            }

            @TestMetadata("simpleSteppedDownTo.kt")
            public void testSimpleSteppedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/simpleSteppedDownTo.kt", this::doTest);
            }

            @TestMetadata("simpleSteppedRange.kt")
            public void testSimpleSteppedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/expression/simpleSteppedRange.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/forInDownTo")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInDownTo extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInDownTo() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInDownTo"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forIntInDownTo.kt")
            public void testForIntInDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInDownTo.kt", this::doTest);
            }

            @TestMetadata("forIntInDownToWithNonConstBounds.kt")
            public void testForIntInDownToWithNonConstBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInDownToWithNonConstBounds.kt", this::doTest);
            }

            @TestMetadata("forIntInNonOptimizedDownTo.kt")
            public void testForIntInNonOptimizedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInNonOptimizedDownTo.kt", this::doTest);
            }

            @TestMetadata("forLongInDownTo.kt")
            public void testForLongInDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInDownTo/forLongInDownTo.kt", this::doTest);
            }

            @TestMetadata("forNullableIntInDownTo.kt")
            public void testForNullableIntInDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInDownTo/forNullableIntInDownTo.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/forInIndices")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInIndices extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInIndices() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInIndices"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInCharSequenceIndices.kt")
            public void testForInCharSequenceIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCharSequenceIndices.kt", this::doTest);
            }

            @TestMetadata("forInCollectionImplicitReceiverIndices.kt")
            public void testForInCollectionImplicitReceiverIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionImplicitReceiverIndices.kt", this::doTest);
            }

            @TestMetadata("forInCollectionIndices.kt")
            public void testForInCollectionIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionIndices.kt", this::doTest);
            }

            @TestMetadata("forInNonOptimizedIndices.kt")
            public void testForInNonOptimizedIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/forInNonOptimizedIndices.kt", this::doTest);
            }

            @TestMetadata("forInObjectArrayIndices.kt")
            public void testForInObjectArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/forInObjectArrayIndices.kt", this::doTest);
            }

            @TestMetadata("forInPrimitiveArrayIndices.kt")
            public void testForInPrimitiveArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/forInPrimitiveArrayIndices.kt", this::doTest);
            }

            @TestMetadata("forNullableIntInArrayIndices.kt")
            public void testForNullableIntInArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/forNullableIntInArrayIndices.kt", this::doTest);
            }

            @TestMetadata("forNullableIntInCollectionIndices.kt")
            public void testForNullableIntInCollectionIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/forNullableIntInCollectionIndices.kt", this::doTest);
            }

            @TestMetadata("indexOfLast.kt")
            public void testIndexOfLast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/indexOfLast.kt", this::doTest);
            }

            @TestMetadata("kt12983_forInGenericArrayIndices.kt")
            public void testKt12983_forInGenericArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInGenericArrayIndices.kt", this::doTest);
            }

            @TestMetadata("kt12983_forInGenericCollectionIndices.kt")
            public void testKt12983_forInGenericCollectionIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInGenericCollectionIndices.kt", this::doTest);
            }

            @TestMetadata("kt12983_forInSpecificArrayIndices.kt")
            public void testKt12983_forInSpecificArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInSpecificArrayIndices.kt", this::doTest);
            }

            @TestMetadata("kt12983_forInSpecificCollectionIndices.kt")
            public void testKt12983_forInSpecificCollectionIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInSpecificCollectionIndices.kt", this::doTest);
            }

            @TestMetadata("kt13241_Array.kt")
            public void testKt13241_Array() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_Array.kt", this::doTest);
            }

            @TestMetadata("kt13241_CharSequence.kt")
            public void testKt13241_CharSequence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_CharSequence.kt", this::doTest);
            }

            @TestMetadata("kt13241_Collection.kt")
            public void testKt13241_Collection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_Collection.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/forInReversed")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInReversed extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInReversed() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInReversed"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInReversedArrayIndices.kt")
            public void testForInReversedArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedArrayIndices.kt", this::doTest);
            }

            @TestMetadata("forInReversedCharSequenceIndices.kt")
            public void testForInReversedCharSequenceIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedCharSequenceIndices.kt", this::doTest);
            }

            @TestMetadata("forInReversedCollectionIndices.kt")
            public void testForInReversedCollectionIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedCollectionIndices.kt", this::doTest);
            }

            @TestMetadata("forInReversedDownTo.kt")
            public void testForInReversedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedDownTo.kt", this::doTest);
            }

            @TestMetadata("forInReversedEmptyRange.kt")
            public void testForInReversedEmptyRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRange.kt", this::doTest);
            }

            @TestMetadata("forInReversedEmptyRangeLiteral.kt")
            public void testForInReversedEmptyRangeLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRangeLiteral.kt", this::doTest);
            }

            @TestMetadata("forInReversedEmptyRangeLiteralWithNonConstBounds.kt")
            public void testForInReversedEmptyRangeLiteralWithNonConstBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRangeLiteralWithNonConstBounds.kt", this::doTest);
            }

            @TestMetadata("forInReversedRange.kt")
            public void testForInReversedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRange.kt", this::doTest);
            }

            @TestMetadata("forInReversedRangeLiteral.kt")
            public void testForInReversedRangeLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRangeLiteral.kt", this::doTest);
            }

            @TestMetadata("forInReversedRangeLiteralWithNonConstBounds.kt")
            public void testForInReversedRangeLiteralWithNonConstBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRangeLiteralWithNonConstBounds.kt", this::doTest);
            }

            @TestMetadata("ForInReversedReversedRange.kt")
            public void testForInReversedReversedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/ForInReversedReversedRange.kt", this::doTest);
            }

            @TestMetadata("forInReversedReversedReversedRange.kt")
            public void testForInReversedReversedReversedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedReversedRange.kt", this::doTest);
            }

            @TestMetadata("forInReversedUntil.kt")
            public void testForInReversedUntil() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedUntil.kt", this::doTest);
            }

            @TestMetadata("forInReversedUntilWithNonConstBounds.kt")
            public void testForInReversedUntilWithNonConstBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedUntilWithNonConstBounds.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/ranges/forInReversed/evaluationOrder")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class EvaluationOrder extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInEvaluationOrder() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInReversed/evaluationOrder"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("forInReversedDownToEvaluationOrder.kt")
                public void testForInReversedDownToEvaluationOrder() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/evaluationOrder/forInReversedDownToEvaluationOrder.kt", this::doTest);
                }

                @TestMetadata("forInReversedRangeLiteralEvaluationOrder.kt")
                public void testForInReversedRangeLiteralEvaluationOrder() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/evaluationOrder/forInReversedRangeLiteralEvaluationOrder.kt", this::doTest);
                }

                @TestMetadata("forInReversedUntilEvaluationOrder.kt")
                public void testForInReversedUntilEvaluationOrder() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInReversed/evaluationOrder/forInReversedUntilEvaluationOrder.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/forInUntil")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInUntil extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForInUntil() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInUntil"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInUntilChar.kt")
            public void testForInUntilChar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilChar.kt", this::doTest);
            }

            @TestMetadata("forInUntilChar0.kt")
            public void testForInUntilChar0() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilChar0.kt", this::doTest);
            }

            @TestMetadata("forInUntilInt.kt")
            public void testForInUntilInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilInt.kt", this::doTest);
            }

            @TestMetadata("forInUntilLesserInt.kt")
            public void testForInUntilLesserInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLesserInt.kt", this::doTest);
            }

            @TestMetadata("forInUntilLong.kt")
            public void testForInUntilLong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLong.kt", this::doTest);
            }

            @TestMetadata("forInUntilMaxint.kt")
            public void testForInUntilMaxint() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilMaxint.kt", this::doTest);
            }

            @TestMetadata("forInUntilMinint.kt")
            public void testForInUntilMinint() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilMinint.kt", this::doTest);
            }

            @TestMetadata("forInUntilMinlong.kt")
            public void testForInUntilMinlong() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilMinlong.kt", this::doTest);
            }

            @TestMetadata("forIntInIntUntilSmartcastInt.kt")
            public void testForIntInIntUntilSmartcastInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forInUntil/forIntInIntUntilSmartcastInt.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/forWithPossibleOverflow")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForWithPossibleOverflow extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInForWithPossibleOverflow() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/forWithPossibleOverflow"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("forInDownToCharMinValue.kt")
            public void testForInDownToCharMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToCharMinValue.kt", this::doTest);
            }

            @TestMetadata("forInDownToCharMinValueReversed.kt")
            public void testForInDownToCharMinValueReversed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToCharMinValueReversed.kt", this::doTest);
            }

            @TestMetadata("forInDownToIntMinValue.kt")
            public void testForInDownToIntMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToIntMinValue.kt", this::doTest);
            }

            @TestMetadata("forInDownToIntMinValueReversed.kt")
            public void testForInDownToIntMinValueReversed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToIntMinValueReversed.kt", this::doTest);
            }

            @TestMetadata("forInDownToLongMinValue.kt")
            public void testForInDownToLongMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToLongMinValue.kt", this::doTest);
            }

            @TestMetadata("forInDownToLongMinValueReversed.kt")
            public void testForInDownToLongMinValueReversed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToLongMinValueReversed.kt", this::doTest);
            }

            @TestMetadata("forInRangeToCharMaxValue.kt")
            public void testForInRangeToCharMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToCharMaxValue.kt", this::doTest);
            }

            @TestMetadata("forInRangeToCharMaxValueReversed.kt")
            public void testForInRangeToCharMaxValueReversed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToCharMaxValueReversed.kt", this::doTest);
            }

            @TestMetadata("forInRangeToIntMaxValue.kt")
            public void testForInRangeToIntMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToIntMaxValue.kt", this::doTest);
            }

            @TestMetadata("forInRangeToIntMaxValueReversed.kt")
            public void testForInRangeToIntMaxValueReversed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToIntMaxValueReversed.kt", this::doTest);
            }

            @TestMetadata("forInRangeToLongMaxValue.kt")
            public void testForInRangeToLongMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToLongMaxValue.kt", this::doTest);
            }

            @TestMetadata("forInRangeToLongMaxValueReversed.kt")
            public void testForInRangeToLongMaxValueReversed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToLongMaxValueReversed.kt", this::doTest);
            }

            @TestMetadata("forInUntilIntMinValueReversed.kt")
            public void testForInUntilIntMinValueReversed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInUntilIntMinValueReversed.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/literal")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Literal extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInLiteral() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/literal"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("emptyDownto.kt")
            public void testEmptyDownto() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/emptyDownto.kt", this::doTest);
            }

            @TestMetadata("emptyRange.kt")
            public void testEmptyRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/emptyRange.kt", this::doTest);
            }

            @TestMetadata("inexactDownToMinValue.kt")
            public void testInexactDownToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/inexactDownToMinValue.kt", this::doTest);
            }

            @TestMetadata("inexactSteppedDownTo.kt")
            public void testInexactSteppedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/inexactSteppedDownTo.kt", this::doTest);
            }

            @TestMetadata("inexactSteppedRange.kt")
            public void testInexactSteppedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/inexactSteppedRange.kt", this::doTest);
            }

            @TestMetadata("inexactToMaxValue.kt")
            public void testInexactToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/inexactToMaxValue.kt", this::doTest);
            }

            @TestMetadata("maxValueMinusTwoToMaxValue.kt")
            public void testMaxValueMinusTwoToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/maxValueMinusTwoToMaxValue.kt", this::doTest);
            }

            @TestMetadata("maxValueToMaxValue.kt")
            public void testMaxValueToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/maxValueToMaxValue.kt", this::doTest);
            }

            @TestMetadata("maxValueToMinValue.kt")
            public void testMaxValueToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/maxValueToMinValue.kt", this::doTest);
            }

            @TestMetadata("oneElementDownTo.kt")
            public void testOneElementDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/oneElementDownTo.kt", this::doTest);
            }

            @TestMetadata("oneElementRange.kt")
            public void testOneElementRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/oneElementRange.kt", this::doTest);
            }

            @TestMetadata("openRange.kt")
            public void testOpenRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/openRange.kt", this::doTest);
            }

            @TestMetadata("progressionDownToMinValue.kt")
            public void testProgressionDownToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/progressionDownToMinValue.kt", this::doTest);
            }

            @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
            public void testProgressionMaxValueMinusTwoToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueMinusTwoToMaxValue.kt", this::doTest);
            }

            @TestMetadata("progressionMaxValueToMaxValue.kt")
            public void testProgressionMaxValueToMaxValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueToMaxValue.kt", this::doTest);
            }

            @TestMetadata("progressionMaxValueToMinValue.kt")
            public void testProgressionMaxValueToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueToMinValue.kt", this::doTest);
            }

            @TestMetadata("progressionMinValueToMinValue.kt")
            public void testProgressionMinValueToMinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/progressionMinValueToMinValue.kt", this::doTest);
            }

            @TestMetadata("reversedBackSequence.kt")
            public void testReversedBackSequence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/reversedBackSequence.kt", this::doTest);
            }

            @TestMetadata("reversedEmptyBackSequence.kt")
            public void testReversedEmptyBackSequence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/reversedEmptyBackSequence.kt", this::doTest);
            }

            @TestMetadata("reversedEmptyRange.kt")
            public void testReversedEmptyRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/reversedEmptyRange.kt", this::doTest);
            }

            @TestMetadata("reversedInexactSteppedDownTo.kt")
            public void testReversedInexactSteppedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/reversedInexactSteppedDownTo.kt", this::doTest);
            }

            @TestMetadata("reversedRange.kt")
            public void testReversedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/reversedRange.kt", this::doTest);
            }

            @TestMetadata("reversedSimpleSteppedRange.kt")
            public void testReversedSimpleSteppedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/reversedSimpleSteppedRange.kt", this::doTest);
            }

            @TestMetadata("simpleDownTo.kt")
            public void testSimpleDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/simpleDownTo.kt", this::doTest);
            }

            @TestMetadata("simpleRange.kt")
            public void testSimpleRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/simpleRange.kt", this::doTest);
            }

            @TestMetadata("simpleRangeWithNonConstantEnds.kt")
            public void testSimpleRangeWithNonConstantEnds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/simpleRangeWithNonConstantEnds.kt", this::doTest);
            }

            @TestMetadata("simpleSteppedDownTo.kt")
            public void testSimpleSteppedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/simpleSteppedDownTo.kt", this::doTest);
            }

            @TestMetadata("simpleSteppedRange.kt")
            public void testSimpleSteppedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/literal/simpleSteppedRange.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/nullableLoopParameter")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NullableLoopParameter extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInNullableLoopParameter() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/ranges/nullableLoopParameter"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("progressionExpression.kt")
            public void testProgressionExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/progressionExpression.kt", this::doTest);
            }

            @TestMetadata("rangeExpression.kt")
            public void testRangeExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/rangeExpression.kt", this::doTest);
            }

            @TestMetadata("rangeLiteral.kt")
            public void testRangeLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/rangeLiteral.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reflection extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInReflection() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/annotations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Annotations extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInAnnotations() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("annotationRetentionAnnotation.kt")
            public void testAnnotationRetentionAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/annotationRetentionAnnotation.kt", this::doTest);
            }

            @TestMetadata("annotationsOnJavaMembers.kt")
            public void testAnnotationsOnJavaMembers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/annotationsOnJavaMembers.kt", this::doTest);
            }

            @TestMetadata("findAnnotation.kt")
            public void testFindAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/findAnnotation.kt", this::doTest);
            }

            @TestMetadata("openSuspendFun.kt")
            public void testOpenSuspendFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/openSuspendFun.kt", this::doTest);
            }

            @TestMetadata("privateAnnotation.kt")
            public void testPrivateAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/privateAnnotation.kt", this::doTest);
            }

            @TestMetadata("propertyAccessors.kt")
            public void testPropertyAccessors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/propertyAccessors.kt", this::doTest);
            }

            @TestMetadata("propertyWithoutBackingField.kt")
            public void testPropertyWithoutBackingField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/propertyWithoutBackingField.kt", this::doTest);
            }

            @TestMetadata("retentions.kt")
            public void testRetentions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/retentions.kt", this::doTest);
            }

            @TestMetadata("simpleClassAnnotation.kt")
            public void testSimpleClassAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/simpleClassAnnotation.kt", this::doTest);
            }

            @TestMetadata("simpleConstructorAnnotation.kt")
            public void testSimpleConstructorAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/simpleConstructorAnnotation.kt", this::doTest);
            }

            @TestMetadata("simpleFunAnnotation.kt")
            public void testSimpleFunAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/simpleFunAnnotation.kt", this::doTest);
            }

            @TestMetadata("simpleParamAnnotation.kt")
            public void testSimpleParamAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/simpleParamAnnotation.kt", this::doTest);
            }

            @TestMetadata("simpleValAnnotation.kt")
            public void testSimpleValAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/annotations/simpleValAnnotation.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/call")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Call extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInCall() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/call"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("callInstanceJavaMethod.kt")
            public void testCallInstanceJavaMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/callInstanceJavaMethod.kt", this::doTest);
            }

            @TestMetadata("callPrivateJavaMethod.kt")
            public void testCallPrivateJavaMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/callPrivateJavaMethod.kt", this::doTest);
            }

            @TestMetadata("callStaticJavaMethod.kt")
            public void testCallStaticJavaMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/callStaticJavaMethod.kt", this::doTest);
            }

            @TestMetadata("cannotCallEnumConstructor.kt")
            public void testCannotCallEnumConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/cannotCallEnumConstructor.kt", this::doTest);
            }

            @TestMetadata("disallowNullValueForNotNullField.kt")
            public void testDisallowNullValueForNotNullField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/disallowNullValueForNotNullField.kt", this::doTest);
            }

            @TestMetadata("equalsHashCodeToString.kt")
            public void testEqualsHashCodeToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/equalsHashCodeToString.kt", this::doTest);
            }

            @TestMetadata("exceptionHappened.kt")
            public void testExceptionHappened() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/exceptionHappened.kt", this::doTest);
            }

            @TestMetadata("fakeOverride.kt")
            public void testFakeOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/fakeOverride.kt", this::doTest);
            }

            @TestMetadata("fakeOverrideSubstituted.kt")
            public void testFakeOverrideSubstituted() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/fakeOverrideSubstituted.kt", this::doTest);
            }

            @TestMetadata("incorrectNumberOfArguments.kt")
            public void testIncorrectNumberOfArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/incorrectNumberOfArguments.kt", this::doTest);
            }

            @TestMetadata("innerClassConstructor.kt")
            public void testInnerClassConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/innerClassConstructor.kt", this::doTest);
            }

            @TestMetadata("jvmStatic.kt")
            public void testJvmStatic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/jvmStatic.kt", this::doTest);
            }

            @TestMetadata("jvmStaticInObjectIncorrectReceiver.kt")
            public void testJvmStaticInObjectIncorrectReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/jvmStaticInObjectIncorrectReceiver.kt", this::doTest);
            }

            @TestMetadata("localClassMember.kt")
            public void testLocalClassMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/localClassMember.kt", this::doTest);
            }

            @TestMetadata("memberOfGenericClass.kt")
            public void testMemberOfGenericClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/memberOfGenericClass.kt", this::doTest);
            }

            @TestMetadata("privateProperty.kt")
            public void testPrivateProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/privateProperty.kt", this::doTest);
            }

            @TestMetadata("propertyAccessors.kt")
            public void testPropertyAccessors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/propertyAccessors.kt", this::doTest);
            }

            @TestMetadata("propertyGetterAndGetFunctionDifferentReturnType.kt")
            public void testPropertyGetterAndGetFunctionDifferentReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/propertyGetterAndGetFunctionDifferentReturnType.kt", this::doTest);
            }

            @TestMetadata("protectedMembers.kt")
            public void testProtectedMembers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/protectedMembers.kt", this::doTest);
            }

            @TestMetadata("returnUnit.kt")
            public void testReturnUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/returnUnit.kt", this::doTest);
            }

            @TestMetadata("simpleConstructor.kt")
            public void testSimpleConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/simpleConstructor.kt", this::doTest);
            }

            @TestMetadata("simpleMemberFunction.kt")
            public void testSimpleMemberFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/simpleMemberFunction.kt", this::doTest);
            }

            @TestMetadata("simpleTopLevelFunctions.kt")
            public void testSimpleTopLevelFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/simpleTopLevelFunctions.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/call/bound")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Bound extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInBound() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/bound"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("companionObjectPropertyAccessors.kt")
                public void testCompanionObjectPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/companionObjectPropertyAccessors.kt", this::doTest);
                }

                @TestMetadata("extensionFunction.kt")
                public void testExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/extensionFunction.kt", this::doTest);
                }

                @TestMetadata("extensionPropertyAccessors.kt")
                public void testExtensionPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/extensionPropertyAccessors.kt", this::doTest);
                }

                @TestMetadata("innerClassConstructor.kt")
                public void testInnerClassConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/innerClassConstructor.kt", this::doTest);
                }

                @TestMetadata("javaInstanceField.kt")
                public void testJavaInstanceField() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/javaInstanceField.kt", this::doTest);
                }

                @TestMetadata("javaInstanceMethod.kt")
                public void testJavaInstanceMethod() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/javaInstanceMethod.kt", this::doTest);
                }

                @TestMetadata("jvmStaticCompanionObjectPropertyAccessors.kt")
                public void testJvmStaticCompanionObjectPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticCompanionObjectPropertyAccessors.kt", this::doTest);
                }

                @TestMetadata("jvmStaticObjectFunction.kt")
                public void testJvmStaticObjectFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticObjectFunction.kt", this::doTest);
                }

                @TestMetadata("jvmStaticObjectPropertyAccessors.kt")
                public void testJvmStaticObjectPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticObjectPropertyAccessors.kt", this::doTest);
                }

                @TestMetadata("memberFunction.kt")
                public void testMemberFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/memberFunction.kt", this::doTest);
                }

                @TestMetadata("memberPropertyAccessors.kt")
                public void testMemberPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/memberPropertyAccessors.kt", this::doTest);
                }

                @TestMetadata("objectFunction.kt")
                public void testObjectFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/objectFunction.kt", this::doTest);
                }

                @TestMetadata("objectPropertyAccessors.kt")
                public void testObjectPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/call/bound/objectPropertyAccessors.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/callBy")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CallBy extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInCallBy() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("boundExtensionFunction.kt")
            public void testBoundExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/boundExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("boundExtensionPropertyAcessor.kt")
            public void testBoundExtensionPropertyAcessor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/boundExtensionPropertyAcessor.kt", this::doTest);
            }

            @TestMetadata("boundJvmStaticInObject.kt")
            public void testBoundJvmStaticInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/boundJvmStaticInObject.kt", this::doTest);
            }

            @TestMetadata("companionObject.kt")
            public void testCompanionObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/companionObject.kt", this::doTest);
            }

            @TestMetadata("defaultAndNonDefaultIntertwined.kt")
            public void testDefaultAndNonDefaultIntertwined() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/defaultAndNonDefaultIntertwined.kt", this::doTest);
            }

            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/extensionFunction.kt", this::doTest);
            }

            @TestMetadata("jvmStaticInCompanionObject.kt")
            public void testJvmStaticInCompanionObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/jvmStaticInCompanionObject.kt", this::doTest);
            }

            @TestMetadata("jvmStaticInObject.kt")
            public void testJvmStaticInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/jvmStaticInObject.kt", this::doTest);
            }

            @TestMetadata("manyArgumentsNoneDefaultConstructor.kt")
            public void testManyArgumentsNoneDefaultConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsNoneDefaultConstructor.kt", this::doTest);
            }

            @TestMetadata("manyArgumentsNoneDefaultFunction.kt")
            public void testManyArgumentsNoneDefaultFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsNoneDefaultFunction.kt", this::doTest);
            }

            @TestMetadata("manyArgumentsOnlyOneDefault.kt")
            public void testManyArgumentsOnlyOneDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsOnlyOneDefault.kt", this::doTest);
            }

            @TestMetadata("manyMaskArguments.kt")
            public void testManyMaskArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/manyMaskArguments.kt", this::doTest);
            }

            @TestMetadata("nonDefaultParameterOmitted.kt")
            public void testNonDefaultParameterOmitted() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/nonDefaultParameterOmitted.kt", this::doTest);
            }

            @TestMetadata("nullValue.kt")
            public void testNullValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/nullValue.kt", this::doTest);
            }

            @TestMetadata("ordinaryMethodIsInvokedWhenNoDefaultValuesAreUsed.kt")
            public void testOrdinaryMethodIsInvokedWhenNoDefaultValuesAreUsed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/ordinaryMethodIsInvokedWhenNoDefaultValuesAreUsed.kt", this::doTest);
            }

            @TestMetadata("primitiveDefaultValues.kt")
            public void testPrimitiveDefaultValues() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/primitiveDefaultValues.kt", this::doTest);
            }

            @TestMetadata("privateMemberFunction.kt")
            public void testPrivateMemberFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/privateMemberFunction.kt", this::doTest);
            }

            @TestMetadata("simpleConstructor.kt")
            public void testSimpleConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/simpleConstructor.kt", this::doTest);
            }

            @TestMetadata("simpleMemberFunciton.kt")
            public void testSimpleMemberFunciton() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/simpleMemberFunciton.kt", this::doTest);
            }

            @TestMetadata("simpleTopLevelFunction.kt")
            public void testSimpleTopLevelFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/callBy/simpleTopLevelFunction.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/classLiterals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClassLiterals extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInClassLiterals() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/classLiterals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("annotationClassLiteral.kt")
            public void testAnnotationClassLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classLiterals/annotationClassLiteral.kt", this::doTest);
            }

            @TestMetadata("arrays.kt")
            public void testArrays() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classLiterals/arrays.kt", this::doTest);
            }

            @TestMetadata("builtinClassLiterals.kt")
            public void testBuiltinClassLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classLiterals/builtinClassLiterals.kt", this::doTest);
            }

            @TestMetadata("genericArrays.kt")
            public void testGenericArrays() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classLiterals/genericArrays.kt", this::doTest);
            }

            @TestMetadata("genericClass.kt")
            public void testGenericClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classLiterals/genericClass.kt", this::doTest);
            }

            @TestMetadata("reifiedTypeClassLiteral.kt")
            public void testReifiedTypeClassLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classLiterals/reifiedTypeClassLiteral.kt", this::doTest);
            }

            @TestMetadata("simpleClassLiteral.kt")
            public void testSimpleClassLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classLiterals/simpleClassLiteral.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/classes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Classes extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInClasses() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/classes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("classSimpleName.kt")
            public void testClassSimpleName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/classSimpleName.kt", this::doTest);
            }

            @TestMetadata("companionObject.kt")
            public void testCompanionObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/companionObject.kt", this::doTest);
            }

            @TestMetadata("createInstance.kt")
            public void testCreateInstance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/createInstance.kt", this::doTest);
            }

            @TestMetadata("declaredMembers.kt")
            public void testDeclaredMembers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/declaredMembers.kt", this::doTest);
            }

            @TestMetadata("javaVoid.kt")
            public void testJavaVoid() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/javaVoid.kt", this::doTest);
            }

            @TestMetadata("jvmName.kt")
            public void testJvmName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/jvmName.kt", this::doTest);
            }

            @TestMetadata("localClassSimpleName.kt")
            public void testLocalClassSimpleName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/localClassSimpleName.kt", this::doTest);
            }

            @TestMetadata("nestedClasses.kt")
            public void testNestedClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/nestedClasses.kt", this::doTest);
            }

            @TestMetadata("nestedClassesJava.kt")
            public void testNestedClassesJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/nestedClassesJava.kt", this::doTest);
            }

            @TestMetadata("objectInstance.kt")
            public void testObjectInstance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/objectInstance.kt", this::doTest);
            }

            @TestMetadata("primitiveKClassEquality.kt")
            public void testPrimitiveKClassEquality() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/primitiveKClassEquality.kt", this::doTest);
            }

            @TestMetadata("qualifiedName.kt")
            public void testQualifiedName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/qualifiedName.kt", this::doTest);
            }

            @TestMetadata("starProjectedType.kt")
            public void testStarProjectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/classes/starProjectedType.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/constructors")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Constructors extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInConstructors() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/constructors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("annotationClass.kt")
            public void testAnnotationClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/constructors/annotationClass.kt", this::doTest);
            }

            @TestMetadata("classesWithoutConstructors.kt")
            public void testClassesWithoutConstructors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/constructors/classesWithoutConstructors.kt", this::doTest);
            }

            @TestMetadata("constructorName.kt")
            public void testConstructorName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/constructors/constructorName.kt", this::doTest);
            }

            @TestMetadata("primaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/constructors/primaryConstructor.kt", this::doTest);
            }

            @TestMetadata("simpleGetConstructors.kt")
            public void testSimpleGetConstructors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/constructors/simpleGetConstructors.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/createAnnotation")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateAnnotation extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInCreateAnnotation() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/createAnnotation"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("annotationType.kt")
            public void testAnnotationType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/annotationType.kt", this::doTest);
            }

            @TestMetadata("arrayOfKClasses.kt")
            public void testArrayOfKClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/arrayOfKClasses.kt", this::doTest);
            }

            @TestMetadata("callByJava.kt")
            public void testCallByJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByJava.kt", this::doTest);
            }

            @TestMetadata("callByKotlin.kt")
            public void testCallByKotlin() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByKotlin.kt", this::doTest);
            }

            @TestMetadata("callJava.kt")
            public void testCallJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/callJava.kt", this::doTest);
            }

            @TestMetadata("callKotlin.kt")
            public void testCallKotlin() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/callKotlin.kt", this::doTest);
            }

            @TestMetadata("createJdkAnnotationInstance.kt")
            public void testCreateJdkAnnotationInstance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/createJdkAnnotationInstance.kt", this::doTest);
            }

            @TestMetadata("enumKClassAnnotation.kt")
            public void testEnumKClassAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/enumKClassAnnotation.kt", this::doTest);
            }

            @TestMetadata("equalsHashCodeToString.kt")
            public void testEqualsHashCodeToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/equalsHashCodeToString.kt", this::doTest);
            }

            @TestMetadata("floatingPointParameters.kt")
            public void testFloatingPointParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/floatingPointParameters.kt", this::doTest);
            }

            @TestMetadata("parameterNamedEquals.kt")
            public void testParameterNamedEquals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/parameterNamedEquals.kt", this::doTest);
            }

            @TestMetadata("primitivesAndArrays.kt")
            public void testPrimitivesAndArrays() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/createAnnotation/primitivesAndArrays.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/enclosing")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Enclosing extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInEnclosing() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/enclosing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("anonymousObjectInInlinedLambda.kt")
            public void testAnonymousObjectInInlinedLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/anonymousObjectInInlinedLambda.kt", this::doTest);
            }

            @TestMetadata("classInLambda.kt")
            public void testClassInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/classInLambda.kt", this::doTest);
            }

            @TestMetadata("functionExpressionInProperty.kt")
            public void testFunctionExpressionInProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/functionExpressionInProperty.kt", this::doTest);
            }

            @TestMetadata("kt11969.kt")
            public void testKt11969() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/kt11969.kt", this::doTest);
            }

            @TestMetadata("kt6368.kt")
            public void testKt6368() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/kt6368.kt", this::doTest);
            }

            @TestMetadata("kt6691_lambdaInSamConstructor.kt")
            public void testKt6691_lambdaInSamConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/kt6691_lambdaInSamConstructor.kt", this::doTest);
            }

            @TestMetadata("lambdaInClassObject.kt")
            public void testLambdaInClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInClassObject.kt", this::doTest);
            }

            @TestMetadata("lambdaInConstructor.kt")
            public void testLambdaInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInConstructor.kt", this::doTest);
            }

            @TestMetadata("lambdaInFunction.kt")
            public void testLambdaInFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInFunction.kt", this::doTest);
            }

            @TestMetadata("lambdaInLambda.kt")
            public void testLambdaInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLambda.kt", this::doTest);
            }

            @TestMetadata("lambdaInLocalClassConstructor.kt")
            public void testLambdaInLocalClassConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalClassConstructor.kt", this::doTest);
            }

            @TestMetadata("lambdaInLocalClassSuperCall.kt")
            public void testLambdaInLocalClassSuperCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalClassSuperCall.kt", this::doTest);
            }

            @TestMetadata("lambdaInLocalFunction.kt")
            public void testLambdaInLocalFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalFunction.kt", this::doTest);
            }

            @TestMetadata("lambdaInMemberFunction.kt")
            public void testLambdaInMemberFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunction.kt", this::doTest);
            }

            @TestMetadata("lambdaInMemberFunctionInLocalClass.kt")
            public void testLambdaInMemberFunctionInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunctionInLocalClass.kt", this::doTest);
            }

            @TestMetadata("lambdaInMemberFunctionInNestedClass.kt")
            public void testLambdaInMemberFunctionInNestedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunctionInNestedClass.kt", this::doTest);
            }

            @TestMetadata("lambdaInObjectDeclaration.kt")
            public void testLambdaInObjectDeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectDeclaration.kt", this::doTest);
            }

            @TestMetadata("lambdaInObjectExpression.kt")
            public void testLambdaInObjectExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectExpression.kt", this::doTest);
            }

            @TestMetadata("lambdaInObjectLiteralSuperCall.kt")
            public void testLambdaInObjectLiteralSuperCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectLiteralSuperCall.kt", this::doTest);
            }

            @TestMetadata("lambdaInPackage.kt")
            public void testLambdaInPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPackage.kt", this::doTest);
            }

            @TestMetadata("lambdaInPropertyGetter.kt")
            public void testLambdaInPropertyGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPropertyGetter.kt", this::doTest);
            }

            @TestMetadata("lambdaInPropertySetter.kt")
            public void testLambdaInPropertySetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPropertySetter.kt", this::doTest);
            }

            @TestMetadata("localClassInTopLevelFunction.kt")
            public void testLocalClassInTopLevelFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/localClassInTopLevelFunction.kt", this::doTest);
            }

            @TestMetadata("objectInLambda.kt")
            public void testObjectInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/enclosing/objectInLambda.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/functions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Functions extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInFunctions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/functions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("declaredVsInheritedFunctions.kt")
            public void testDeclaredVsInheritedFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/declaredVsInheritedFunctions.kt", this::doTest);
            }

            @TestMetadata("functionFromStdlib.kt")
            public void testFunctionFromStdlib() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/functionFromStdlib.kt", this::doTest);
            }

            @TestMetadata("functionReferenceErasedToKFunction.kt")
            public void testFunctionReferenceErasedToKFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/functionReferenceErasedToKFunction.kt", this::doTest);
            }

            @TestMetadata("genericOverriddenFunction.kt")
            public void testGenericOverriddenFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/genericOverriddenFunction.kt", this::doTest);
            }

            @TestMetadata("instanceOfFunction.kt")
            public void testInstanceOfFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/instanceOfFunction.kt", this::doTest);
            }

            @TestMetadata("javaClassGetFunctions.kt")
            public void testJavaClassGetFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/javaClassGetFunctions.kt", this::doTest);
            }

            @TestMetadata("javaMethodsSmokeTest.kt")
            public void testJavaMethodsSmokeTest() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/javaMethodsSmokeTest.kt", this::doTest);
            }

            @TestMetadata("platformName.kt")
            public void testPlatformName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/platformName.kt", this::doTest);
            }

            @TestMetadata("privateMemberFunction.kt")
            public void testPrivateMemberFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/privateMemberFunction.kt", this::doTest);
            }

            @TestMetadata("simpleGetFunctions.kt")
            public void testSimpleGetFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/simpleGetFunctions.kt", this::doTest);
            }

            @TestMetadata("simpleNames.kt")
            public void testSimpleNames() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/functions/simpleNames.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/genericSignature")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class GenericSignature extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInGenericSignature() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/genericSignature"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("covariantOverride.kt")
            public void testCovariantOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/covariantOverride.kt", this::doTest);
            }

            @TestMetadata("defaultImplsGenericSignature.kt")
            public void testDefaultImplsGenericSignature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/defaultImplsGenericSignature.kt", this::doTest);
            }

            @TestMetadata("functionLiteralGenericSignature.kt")
            public void testFunctionLiteralGenericSignature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/functionLiteralGenericSignature.kt", this::doTest);
            }

            @TestMetadata("genericBackingFieldSignature.kt")
            public void testGenericBackingFieldSignature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/genericBackingFieldSignature.kt", this::doTest);
            }

            @TestMetadata("genericMethodSignature.kt")
            public void testGenericMethodSignature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/genericMethodSignature.kt", this::doTest);
            }

            @TestMetadata("kt11121.kt")
            public void testKt11121() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/kt11121.kt", this::doTest);
            }

            @TestMetadata("kt5112.kt")
            public void testKt5112() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/kt5112.kt", this::doTest);
            }

            @TestMetadata("kt6106.kt")
            public void testKt6106() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/kt6106.kt", this::doTest);
            }

            @TestMetadata("signatureOfDeepGenericInner.kt")
            public void testSignatureOfDeepGenericInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepGenericInner.kt", this::doTest);
            }

            @TestMetadata("signatureOfDeepInner.kt")
            public void testSignatureOfDeepInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepInner.kt", this::doTest);
            }

            @TestMetadata("signatureOfDeepInnerLastGeneric.kt")
            public void testSignatureOfDeepInnerLastGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepInnerLastGeneric.kt", this::doTest);
            }

            @TestMetadata("signatureOfGenericInnerGenericOuter.kt")
            public void testSignatureOfGenericInnerGenericOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfGenericInnerGenericOuter.kt", this::doTest);
            }

            @TestMetadata("signatureOfGenericInnerSimpleOuter.kt")
            public void testSignatureOfGenericInnerSimpleOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfGenericInnerSimpleOuter.kt", this::doTest);
            }

            @TestMetadata("signatureOfSimpleInnerSimpleOuter.kt")
            public void testSignatureOfSimpleInnerSimpleOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfSimpleInnerSimpleOuter.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/isInstance")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IsInstance extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInIsInstance() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/isInstance"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("isInstanceCastAndSafeCast.kt")
            public void testIsInstanceCastAndSafeCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/isInstance/isInstanceCastAndSafeCast.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/kClassInAnnotation")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class KClassInAnnotation extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInKClassInAnnotation() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/kClassInAnnotation"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/array.kt", this::doTest);
            }

            @TestMetadata("arrayInJava.kt")
            public void testArrayInJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/arrayInJava.kt", this::doTest);
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/basic.kt", this::doTest);
            }

            @TestMetadata("basicInJava.kt")
            public void testBasicInJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/basicInJava.kt", this::doTest);
            }

            @TestMetadata("checkcast.kt")
            public void testCheckcast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/checkcast.kt", this::doTest);
            }

            @TestMetadata("forceWrapping.kt")
            public void testForceWrapping() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/forceWrapping.kt", this::doTest);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/vararg.kt", this::doTest);
            }

            @TestMetadata("varargInJava.kt")
            public void testVarargInJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/varargInJava.kt", this::doTest);
            }

            @TestMetadata("wrappingForCallableReferences.kt")
            public void testWrappingForCallableReferences() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/wrappingForCallableReferences.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/lambdaClasses")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LambdaClasses extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInLambdaClasses() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/lambdaClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("parameterNamesAndNullability.kt")
            public void testParameterNamesAndNullability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/lambdaClasses/parameterNamesAndNullability.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/mapping")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Mapping extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInMapping() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/constructor.kt", this::doTest);
            }

            @TestMetadata("extensionProperty.kt")
            public void testExtensionProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/extensionProperty.kt", this::doTest);
            }

            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/functions.kt", this::doTest);
            }

            @TestMetadata("inlineReifiedFun.kt")
            public void testInlineReifiedFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/inlineReifiedFun.kt", this::doTest);
            }

            @TestMetadata("mappedClassIsEqualToClassLiteral.kt")
            public void testMappedClassIsEqualToClassLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/mappedClassIsEqualToClassLiteral.kt", this::doTest);
            }

            @TestMetadata("memberProperty.kt")
            public void testMemberProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/memberProperty.kt", this::doTest);
            }

            @TestMetadata("openSuspendFun.kt")
            public void testOpenSuspendFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/openSuspendFun.kt", this::doTest);
            }

            @TestMetadata("propertyAccessors.kt")
            public void testPropertyAccessors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/propertyAccessors.kt", this::doTest);
            }

            @TestMetadata("propertyAccessorsWithJvmName.kt")
            public void testPropertyAccessorsWithJvmName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/propertyAccessorsWithJvmName.kt", this::doTest);
            }

            @TestMetadata("syntheticFields.kt")
            public void testSyntheticFields() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/syntheticFields.kt", this::doTest);
            }

            @TestMetadata("topLevelFunctionOtherFile.kt")
            public void testTopLevelFunctionOtherFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/topLevelFunctionOtherFile.kt", this::doTest);
            }

            @TestMetadata("topLevelProperty.kt")
            public void testTopLevelProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/topLevelProperty.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/mapping/fakeOverrides")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FakeOverrides extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInFakeOverrides() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/fakeOverrides"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("javaFieldGetterSetter.kt")
                public void testJavaFieldGetterSetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/fakeOverrides/javaFieldGetterSetter.kt", this::doTest);
                }

                @TestMetadata("javaMethod.kt")
                public void testJavaMethod() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/fakeOverrides/javaMethod.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/mapping/jvmStatic")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class JvmStatic extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInJvmStatic() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("companionObjectFunction.kt")
                public void testCompanionObjectFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/jvmStatic/companionObjectFunction.kt", this::doTest);
                }

                @TestMetadata("objectFunction.kt")
                public void testObjectFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/jvmStatic/objectFunction.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/mapping/types")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Types extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInTypes() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/types"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("annotationConstructorParameters.kt")
                public void testAnnotationConstructorParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/annotationConstructorParameters.kt", this::doTest);
                }

                @TestMetadata("array.kt")
                public void testArray() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/array.kt", this::doTest);
                }

                @TestMetadata("constructors.kt")
                public void testConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/constructors.kt", this::doTest);
                }

                @TestMetadata("genericArrayElementType.kt")
                public void testGenericArrayElementType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/genericArrayElementType.kt", this::doTest);
                }

                @TestMetadata("innerGenericTypeArgument.kt")
                public void testInnerGenericTypeArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/innerGenericTypeArgument.kt", this::doTest);
                }

                @TestMetadata("memberFunctions.kt")
                public void testMemberFunctions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/memberFunctions.kt", this::doTest);
                }

                @TestMetadata("overrideAnyWithPrimitive.kt")
                public void testOverrideAnyWithPrimitive() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/overrideAnyWithPrimitive.kt", this::doTest);
                }

                @TestMetadata("parameterizedTypeArgument.kt")
                public void testParameterizedTypeArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/parameterizedTypeArgument.kt", this::doTest);
                }

                @TestMetadata("parameterizedTypes.kt")
                public void testParameterizedTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/parameterizedTypes.kt", this::doTest);
                }

                @TestMetadata("propertyAccessors.kt")
                public void testPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/propertyAccessors.kt", this::doTest);
                }

                @TestMetadata("rawTypeArgument.kt")
                public void testRawTypeArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/rawTypeArgument.kt", this::doTest);
                }

                @TestMetadata("supertypes.kt")
                public void testSupertypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/supertypes.kt", this::doTest);
                }

                @TestMetadata("topLevelFunctions.kt")
                public void testTopLevelFunctions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/topLevelFunctions.kt", this::doTest);
                }

                @TestMetadata("typeParameters.kt")
                public void testTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/typeParameters.kt", this::doTest);
                }

                @TestMetadata("unit.kt")
                public void testUnit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/unit.kt", this::doTest);
                }

                @TestMetadata("withNullability.kt")
                public void testWithNullability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/mapping/types/withNullability.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/methodsFromAny")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MethodsFromAny extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInMethodsFromAny() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/methodsFromAny"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("callableReferencesEqualToCallablesFromAPI.kt")
            public void testCallableReferencesEqualToCallablesFromAPI() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/callableReferencesEqualToCallablesFromAPI.kt", this::doTest);
            }

            @TestMetadata("classToString.kt")
            public void testClassToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/classToString.kt", this::doTest);
            }

            @TestMetadata("extensionPropertyReceiverToString.kt")
            public void testExtensionPropertyReceiverToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/extensionPropertyReceiverToString.kt", this::doTest);
            }

            @TestMetadata("functionEqualsHashCode.kt")
            public void testFunctionEqualsHashCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionEqualsHashCode.kt", this::doTest);
            }

            @TestMetadata("functionFromStdlibMultiFileFacade.kt")
            public void testFunctionFromStdlibMultiFileFacade() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionFromStdlibMultiFileFacade.kt", this::doTest);
            }

            @TestMetadata("functionFromStdlibSingleFileFacade.kt")
            public void testFunctionFromStdlibSingleFileFacade() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionFromStdlibSingleFileFacade.kt", this::doTest);
            }

            @TestMetadata("functionToString.kt")
            public void testFunctionToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionToString.kt", this::doTest);
            }

            @TestMetadata("memberExtensionToString.kt")
            public void testMemberExtensionToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/memberExtensionToString.kt", this::doTest);
            }

            @TestMetadata("parametersEqualsHashCode.kt")
            public void testParametersEqualsHashCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersEqualsHashCode.kt", this::doTest);
            }

            @TestMetadata("parametersToString.kt")
            public void testParametersToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersToString.kt", this::doTest);
            }

            @TestMetadata("propertyEqualsHashCode.kt")
            public void testPropertyEqualsHashCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyEqualsHashCode.kt", this::doTest);
            }

            @TestMetadata("propertyToString.kt")
            public void testPropertyToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyToString.kt", this::doTest);
            }

            @TestMetadata("typeEqualsHashCode.kt")
            public void testTypeEqualsHashCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeEqualsHashCode.kt", this::doTest);
            }

            @TestMetadata("typeParametersEqualsHashCode.kt")
            public void testTypeParametersEqualsHashCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersEqualsHashCode.kt", this::doTest);
            }

            @TestMetadata("typeParametersToString.kt")
            public void testTypeParametersToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersToString.kt", this::doTest);
            }

            @TestMetadata("typeToString.kt")
            public void testTypeToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeToString.kt", this::doTest);
            }

            @TestMetadata("typeToStringInnerGeneric.kt")
            public void testTypeToStringInnerGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeToStringInnerGeneric.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/modifiers")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Modifiers extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInModifiers() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/modifiers"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("callableModality.kt")
            public void testCallableModality() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/callableModality.kt", this::doTest);
            }

            @TestMetadata("callableVisibility.kt")
            public void testCallableVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/callableVisibility.kt", this::doTest);
            }

            @TestMetadata("classModality.kt")
            public void testClassModality() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/classModality.kt", this::doTest);
            }

            @TestMetadata("classVisibility.kt")
            public void testClassVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/classVisibility.kt", this::doTest);
            }

            @TestMetadata("classes.kt")
            public void testClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/classes.kt", this::doTest);
            }

            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/functions.kt", this::doTest);
            }

            @TestMetadata("javaVisibility.kt")
            public void testJavaVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/javaVisibility.kt", this::doTest);
            }

            @TestMetadata("properties.kt")
            public void testProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/properties.kt", this::doTest);
            }

            @TestMetadata("typeParameters.kt")
            public void testTypeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/modifiers/typeParameters.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/multifileClasses")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MultifileClasses extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInMultifileClasses() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("callFunctionsInMultifileClass.kt")
            public void testCallFunctionsInMultifileClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/multifileClasses/callFunctionsInMultifileClass.kt", this::doTest);
            }

            @TestMetadata("callPropertiesInMultifileClass.kt")
            public void testCallPropertiesInMultifileClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/multifileClasses/callPropertiesInMultifileClass.kt", this::doTest);
            }

            @TestMetadata("javaFieldForVarAndConstVal.kt")
            public void testJavaFieldForVarAndConstVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/multifileClasses/javaFieldForVarAndConstVal.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NoReflectAtRuntime extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInNoReflectAtRuntime() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("javaClass.kt")
            public void testJavaClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/javaClass.kt", this::doTest);
            }

            @TestMetadata("javaVoid.kt")
            public void testJavaVoid() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/javaVoid.kt", this::doTest);
            }

            @TestMetadata("primitiveJavaClass.kt")
            public void testPrimitiveJavaClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/primitiveJavaClass.kt", this::doTest);
            }

            @TestMetadata("propertyGetSetName.kt")
            public void testPropertyGetSetName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyGetSetName.kt", this::doTest);
            }

            @TestMetadata("propertyInstanceof.kt")
            public void testPropertyInstanceof() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyInstanceof.kt", this::doTest);
            }

            @TestMetadata("reifiedTypeJavaClass.kt")
            public void testReifiedTypeJavaClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/reifiedTypeJavaClass.kt", this::doTest);
            }

            @TestMetadata("simpleClassLiterals.kt")
            public void testSimpleClassLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/simpleClassLiterals.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class MethodsFromAny extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInMethodsFromAny() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("callableReferences.kt")
                public void testCallableReferences() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/callableReferences.kt", this::doTest);
                }

                @TestMetadata("classReference.kt")
                public void testClassReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/classReference.kt", this::doTest);
                }

                @TestMetadata("delegatedProperty.kt")
                public void testDelegatedProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/delegatedProperty.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/parameters")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Parameters extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInParameters() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/parameters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("boundInnerClassConstructor.kt")
            public void testBoundInnerClassConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/boundInnerClassConstructor.kt", this::doTest);
            }

            @TestMetadata("boundObjectMemberReferences.kt")
            public void testBoundObjectMemberReferences() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/boundObjectMemberReferences.kt", this::doTest);
            }

            @TestMetadata("boundReferences.kt")
            public void testBoundReferences() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/boundReferences.kt", this::doTest);
            }

            @TestMetadata("findParameterByName.kt")
            public void testFindParameterByName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/findParameterByName.kt", this::doTest);
            }

            @TestMetadata("functionParameterNameAndIndex.kt")
            public void testFunctionParameterNameAndIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/functionParameterNameAndIndex.kt", this::doTest);
            }

            @TestMetadata("instanceExtensionReceiverAndValueParameters.kt")
            public void testInstanceExtensionReceiverAndValueParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/instanceExtensionReceiverAndValueParameters.kt", this::doTest);
            }

            @TestMetadata("isMarkedNullable.kt")
            public void testIsMarkedNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/isMarkedNullable.kt", this::doTest);
            }

            @TestMetadata("isOptional.kt")
            public void testIsOptional() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/isOptional.kt", this::doTest);
            }

            @TestMetadata("javaAnnotationConstructor.kt")
            public void testJavaAnnotationConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/javaAnnotationConstructor.kt", this::doTest);
            }

            @TestMetadata("kinds.kt")
            public void testKinds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/kinds.kt", this::doTest);
            }

            @TestMetadata("propertySetter.kt")
            public void testPropertySetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/parameters/propertySetter.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/properties")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Properties extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInProperties() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("allVsDeclared.kt")
            public void testAllVsDeclared() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/allVsDeclared.kt", this::doTest);
            }

            @TestMetadata("callPrivatePropertyFromGetProperties.kt")
            public void testCallPrivatePropertyFromGetProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/callPrivatePropertyFromGetProperties.kt", this::doTest);
            }

            @TestMetadata("declaredVsInheritedProperties.kt")
            public void testDeclaredVsInheritedProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/declaredVsInheritedProperties.kt", this::doTest);
            }

            @TestMetadata("fakeOverridesInSubclass.kt")
            public void testFakeOverridesInSubclass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/fakeOverridesInSubclass.kt", this::doTest);
            }

            @TestMetadata("genericClassLiteralPropertyReceiverIsStar.kt")
            public void testGenericClassLiteralPropertyReceiverIsStar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/genericClassLiteralPropertyReceiverIsStar.kt", this::doTest);
            }

            @TestMetadata("genericOverriddenProperty.kt")
            public void testGenericOverriddenProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/genericOverriddenProperty.kt", this::doTest);
            }

            @TestMetadata("genericProperty.kt")
            public void testGenericProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/genericProperty.kt", this::doTest);
            }

            @TestMetadata("getExtensionPropertiesMutableVsReadonly.kt")
            public void testGetExtensionPropertiesMutableVsReadonly() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getExtensionPropertiesMutableVsReadonly.kt", this::doTest);
            }

            @TestMetadata("getPropertiesMutableVsReadonly.kt")
            public void testGetPropertiesMutableVsReadonly() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getPropertiesMutableVsReadonly.kt", this::doTest);
            }

            @TestMetadata("invokeKProperty.kt")
            public void testInvokeKProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/invokeKProperty.kt", this::doTest);
            }

            @TestMetadata("javaPropertyInheritedInKotlin.kt")
            public void testJavaPropertyInheritedInKotlin() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/javaPropertyInheritedInKotlin.kt", this::doTest);
            }

            @TestMetadata("javaStaticField.kt")
            public void testJavaStaticField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/javaStaticField.kt", this::doTest);
            }

            @TestMetadata("kotlinPropertyInheritedInJava.kt")
            public void testKotlinPropertyInheritedInJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/kotlinPropertyInheritedInJava.kt", this::doTest);
            }

            @TestMetadata("memberAndMemberExtensionWithSameName.kt")
            public void testMemberAndMemberExtensionWithSameName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/memberAndMemberExtensionWithSameName.kt", this::doTest);
            }

            @TestMetadata("mutatePrivateJavaInstanceField.kt")
            public void testMutatePrivateJavaInstanceField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/mutatePrivateJavaInstanceField.kt", this::doTest);
            }

            @TestMetadata("mutatePrivateJavaStaticField.kt")
            public void testMutatePrivateJavaStaticField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/mutatePrivateJavaStaticField.kt", this::doTest);
            }

            @TestMetadata("noConflictOnKotlinGetterAndJavaField.kt")
            public void testNoConflictOnKotlinGetterAndJavaField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/noConflictOnKotlinGetterAndJavaField.kt", this::doTest);
            }

            @TestMetadata("overrideKotlinPropertyByJavaMethod.kt")
            public void testOverrideKotlinPropertyByJavaMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/overrideKotlinPropertyByJavaMethod.kt", this::doTest);
            }

            @TestMetadata("privateClassVal.kt")
            public void testPrivateClassVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/privateClassVal.kt", this::doTest);
            }

            @TestMetadata("privateClassVar.kt")
            public void testPrivateClassVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/privateClassVar.kt", this::doTest);
            }

            @TestMetadata("privateFakeOverrideFromSuperclass.kt")
            public void testPrivateFakeOverrideFromSuperclass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/privateFakeOverrideFromSuperclass.kt", this::doTest);
            }

            @TestMetadata("privateJvmStaticVarInObject.kt")
            public void testPrivateJvmStaticVarInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/privateJvmStaticVarInObject.kt", this::doTest);
            }

            @TestMetadata("privatePropertyCallIsAccessibleOnAccessors.kt")
            public void testPrivatePropertyCallIsAccessibleOnAccessors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/privatePropertyCallIsAccessibleOnAccessors.kt", this::doTest);
            }

            @TestMetadata("privateToThisAccessors.kt")
            public void testPrivateToThisAccessors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/privateToThisAccessors.kt", this::doTest);
            }

            @TestMetadata("propertyOfNestedClassAndArrayType.kt")
            public void testPropertyOfNestedClassAndArrayType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/propertyOfNestedClassAndArrayType.kt", this::doTest);
            }

            @TestMetadata("protectedClassVar.kt")
            public void testProtectedClassVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/protectedClassVar.kt", this::doTest);
            }

            @TestMetadata("publicClassValAccessible.kt")
            public void testPublicClassValAccessible() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/publicClassValAccessible.kt", this::doTest);
            }

            @TestMetadata("referenceToJavaFieldOfKotlinSubclass.kt")
            public void testReferenceToJavaFieldOfKotlinSubclass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/referenceToJavaFieldOfKotlinSubclass.kt", this::doTest);
            }

            @TestMetadata("simpleGetProperties.kt")
            public void testSimpleGetProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/simpleGetProperties.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/properties/accessors")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Accessors extends AbstractLightAnalysisModeTest {
                @TestMetadata("accessorNames.kt")
                public void testAccessorNames() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/accessors/accessorNames.kt", this::doTest);
                }

                public void testAllFilesPresentInAccessors() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/accessors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("extensionPropertyAccessors.kt")
                public void testExtensionPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/accessors/extensionPropertyAccessors.kt", this::doTest);
                }

                @TestMetadata("memberExtensions.kt")
                public void testMemberExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/accessors/memberExtensions.kt", this::doTest);
                }

                @TestMetadata("memberPropertyAccessors.kt")
                public void testMemberPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/accessors/memberPropertyAccessors.kt", this::doTest);
                }

                @TestMetadata("topLevelPropertyAccessors.kt")
                public void testTopLevelPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/accessors/topLevelPropertyAccessors.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/properties/getDelegate")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class GetDelegate extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInGetDelegate() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/getDelegate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("booleanPropertyNameStartsWithIs.kt")
                public void testBooleanPropertyNameStartsWithIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/booleanPropertyNameStartsWithIs.kt", this::doTest);
                }

                @TestMetadata("boundExtensionProperty.kt")
                public void testBoundExtensionProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/boundExtensionProperty.kt", this::doTest);
                }

                @TestMetadata("boundMemberProperty.kt")
                public void testBoundMemberProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/boundMemberProperty.kt", this::doTest);
                }

                @TestMetadata("extensionProperty.kt")
                public void testExtensionProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/extensionProperty.kt", this::doTest);
                }

                @TestMetadata("fakeOverride.kt")
                public void testFakeOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/fakeOverride.kt", this::doTest);
                }

                @TestMetadata("getExtensionDelegate.kt")
                public void testGetExtensionDelegate() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/getExtensionDelegate.kt", this::doTest);
                }

                @TestMetadata("kPropertyForDelegatedProperty.kt")
                public void testKPropertyForDelegatedProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/kPropertyForDelegatedProperty.kt", this::doTest);
                }

                @TestMetadata("memberExtensionProperty.kt")
                public void testMemberExtensionProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/memberExtensionProperty.kt", this::doTest);
                }

                @TestMetadata("memberProperty.kt")
                public void testMemberProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/memberProperty.kt", this::doTest);
                }

                @TestMetadata("nameClashClassAndCompanion.kt")
                public void testNameClashClassAndCompanion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/nameClashClassAndCompanion.kt", this::doTest);
                }

                @TestMetadata("nameClashExtensionProperties.kt")
                public void testNameClashExtensionProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/nameClashExtensionProperties.kt", this::doTest);
                }

                @TestMetadata("noSetAccessibleTrue.kt")
                public void testNoSetAccessibleTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/noSetAccessibleTrue.kt", this::doTest);
                }

                @TestMetadata("notDelegatedProperty.kt")
                public void testNotDelegatedProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/notDelegatedProperty.kt", this::doTest);
                }

                @TestMetadata("overrideDelegatedByDelegated.kt")
                public void testOverrideDelegatedByDelegated() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/overrideDelegatedByDelegated.kt", this::doTest);
                }

                @TestMetadata("topLevelProperty.kt")
                public void testTopLevelProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/topLevelProperty.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/properties/localDelegated")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class LocalDelegated extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInLocalDelegated() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/localDelegated"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("defaultImpls.kt")
                public void testDefaultImpls() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/defaultImpls.kt", this::doTest);
                }

                @TestMetadata("inlineFun.kt")
                public void testInlineFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inlineFun.kt", this::doTest);
                }

                @TestMetadata("localDelegatedProperty.kt")
                public void testLocalDelegatedProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/localDelegatedProperty.kt", this::doTest);
                }

                @TestMetadata("multiFileClass.kt")
                public void testMultiFileClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/multiFileClass.kt", this::doTest);
                }

                @TestMetadata("variableOfGenericType.kt")
                public void testVariableOfGenericType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/variableOfGenericType.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/specialBuiltIns")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SpecialBuiltIns extends AbstractLightAnalysisModeTest {
            @TestMetadata("getMembersOfStandardJavaClasses.kt")
            public void ignoreGetMembersOfStandardJavaClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/specialBuiltIns/getMembersOfStandardJavaClasses.kt", this::doTest);
            }

            public void testAllFilesPresentInSpecialBuiltIns() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/specialBuiltIns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/supertypes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Supertypes extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInSupertypes() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/supertypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("builtInClassSupertypes.kt")
            public void testBuiltInClassSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/supertypes/builtInClassSupertypes.kt", this::doTest);
            }

            @TestMetadata("genericSubstitution.kt")
            public void testGenericSubstitution() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/supertypes/genericSubstitution.kt", this::doTest);
            }

            @TestMetadata("isSubclassOfIsSuperclassOf.kt")
            public void testIsSubclassOfIsSuperclassOf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/supertypes/isSubclassOfIsSuperclassOf.kt", this::doTest);
            }

            @TestMetadata("primitives.kt")
            public void testPrimitives() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/supertypes/primitives.kt", this::doTest);
            }

            @TestMetadata("simpleSupertypes.kt")
            public void testSimpleSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/supertypes/simpleSupertypes.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/typeParameters")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TypeParameters extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInTypeParameters() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeParameters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("declarationSiteVariance.kt")
            public void testDeclarationSiteVariance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/typeParameters/declarationSiteVariance.kt", this::doTest);
            }

            @TestMetadata("typeParametersAndNames.kt")
            public void testTypeParametersAndNames() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/typeParameters/typeParametersAndNames.kt", this::doTest);
            }

            @TestMetadata("upperBounds.kt")
            public void testUpperBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/typeParameters/upperBounds.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/types")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Types extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInTypes() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/types"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("classifierIsClass.kt")
            public void testClassifierIsClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/classifierIsClass.kt", this::doTest);
            }

            @TestMetadata("classifierIsTypeParameter.kt")
            public void testClassifierIsTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/classifierIsTypeParameter.kt", this::doTest);
            }

            @TestMetadata("classifiersOfBuiltInTypes.kt")
            public void testClassifiersOfBuiltInTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/classifiersOfBuiltInTypes.kt", this::doTest);
            }

            @TestMetadata("innerGenericArguments.kt")
            public void testInnerGenericArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/innerGenericArguments.kt", this::doTest);
            }

            @TestMetadata("jvmErasureOfClass.kt")
            public void testJvmErasureOfClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/jvmErasureOfClass.kt", this::doTest);
            }

            @TestMetadata("jvmErasureOfTypeParameter.kt")
            public void testJvmErasureOfTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/jvmErasureOfTypeParameter.kt", this::doTest);
            }

            @TestMetadata("platformTypeClassifier.kt")
            public void testPlatformTypeClassifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/platformTypeClassifier.kt", this::doTest);
            }

            @TestMetadata("platformTypeNotEqualToKotlinType.kt")
            public void testPlatformTypeNotEqualToKotlinType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/platformTypeNotEqualToKotlinType.kt", this::doTest);
            }

            @TestMetadata("platformTypeToString.kt")
            public void testPlatformTypeToString() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/platformTypeToString.kt", this::doTest);
            }

            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/typeArguments.kt", this::doTest);
            }

            @TestMetadata("useSiteVariance.kt")
            public void testUseSiteVariance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/useSiteVariance.kt", this::doTest);
            }

            @TestMetadata("withNullability.kt")
            public void testWithNullability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/withNullability.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/types/createType")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CreateType extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInCreateType() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/createType"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("equality.kt")
                public void testEquality() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/createType/equality.kt", this::doTest);
                }

                @TestMetadata("innerGeneric.kt")
                public void testInnerGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/createType/innerGeneric.kt", this::doTest);
                }

                @TestMetadata("simpleCreateType.kt")
                public void testSimpleCreateType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/createType/simpleCreateType.kt", this::doTest);
                }

                @TestMetadata("typeParameter.kt")
                public void testTypeParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/createType/typeParameter.kt", this::doTest);
                }

                @TestMetadata("wrongNumberOfArguments.kt")
                public void testWrongNumberOfArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/createType/wrongNumberOfArguments.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/reflection/types/subtyping")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Subtyping extends AbstractLightAnalysisModeTest {
                public void testAllFilesPresentInSubtyping() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/subtyping"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
                }

                @TestMetadata("platformType.kt")
                public void testPlatformType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/subtyping/platformType.kt", this::doTest);
                }

                @TestMetadata("simpleGenericTypes.kt")
                public void testSimpleGenericTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/subtyping/simpleGenericTypes.kt", this::doTest);
                }

                @TestMetadata("simpleSubtypeSupertype.kt")
                public void testSimpleSubtypeSupertype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/subtyping/simpleSubtypeSupertype.kt", this::doTest);
                }

                @TestMetadata("typeProjection.kt")
                public void testTypeProjection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/reflection/types/subtyping/typeProjection.kt", this::doTest);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/regressions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Regressions extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInRegressions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/regressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("approximateIntersectionType.kt")
        public void testApproximateIntersectionType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/approximateIntersectionType.kt", this::doTest);
        }

        @TestMetadata("arrayLengthNPE.kt")
        public void testArrayLengthNPE() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/arrayLengthNPE.kt", this::doTest);
        }

        @TestMetadata("collections.kt")
        public void testCollections() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/collections.kt", this::doTest);
        }

        @TestMetadata("commonSupertypeContravariant.kt")
        public void testCommonSupertypeContravariant() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/commonSupertypeContravariant.kt", this::doTest);
        }

        @TestMetadata("commonSupertypeContravariant2.kt")
        public void testCommonSupertypeContravariant2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/commonSupertypeContravariant2.kt", this::doTest);
        }

        @TestMetadata("dontCaptureTypesWithTypeVariables.kt")
        public void testDontCaptureTypesWithTypeVariables() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/dontCaptureTypesWithTypeVariables.kt", this::doTest);
        }

        @TestMetadata("doubleMerge.kt")
        public void testDoubleMerge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/doubleMerge.kt", this::doTest);
        }

        @TestMetadata("floatMerge.kt")
        public void testFloatMerge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/floatMerge.kt", this::doTest);
        }

        @TestMetadata("functionLiteralAsLastExpressionInBlock.kt")
        public void testFunctionLiteralAsLastExpressionInBlock() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/functionLiteralAsLastExpressionInBlock.kt", this::doTest);
        }

        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/generic.kt", this::doTest);
        }

        @TestMetadata("getGenericInterfaces.kt")
        public void testGetGenericInterfaces() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/getGenericInterfaces.kt", this::doTest);
        }

        @TestMetadata("hashCodeNPE.kt")
        public void testHashCodeNPE() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/hashCodeNPE.kt", this::doTest);
        }

        @TestMetadata("internalTopLevelOtherPackage.kt")
        public void testInternalTopLevelOtherPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/internalTopLevelOtherPackage.kt", this::doTest);
        }

        @TestMetadata("intersectionAsLastLambda.kt")
        public void testIntersectionAsLastLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/intersectionAsLastLambda.kt", this::doTest);
        }

        @TestMetadata("intersectionOfEqualTypes.kt")
        public void testIntersectionOfEqualTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/intersectionOfEqualTypes.kt", this::doTest);
        }

        @TestMetadata("kt10143.kt")
        public void testKt10143() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt10143.kt", this::doTest);
        }

        @TestMetadata("kt10934.kt")
        public void testKt10934() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt10934.kt", this::doTest);
        }

        @TestMetadata("Kt1149.kt")
        public void testKt1149() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/Kt1149.kt", this::doTest);
        }

        @TestMetadata("kt1172.kt")
        public void testKt1172() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1172.kt", this::doTest);
        }

        @TestMetadata("kt1202.kt")
        public void testKt1202() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1202.kt", this::doTest);
        }

        @TestMetadata("kt13381.kt")
        public void testKt13381() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt13381.kt", this::doTest);
        }

        @TestMetadata("kt1406.kt")
        public void testKt1406() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1406.kt", this::doTest);
        }

        @TestMetadata("kt14447.kt")
        public void testKt14447() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt14447.kt", this::doTest);
        }

        @TestMetadata("kt1515.kt")
        public void testKt1515() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1515.kt", this::doTest);
        }

        @TestMetadata("kt15196.kt")
        public void testKt15196() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt15196.kt", this::doTest);
        }

        @TestMetadata("kt1528.kt")
        public void testKt1528() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1528.kt", this::doTest);
        }

        @TestMetadata("kt1568.kt")
        public void testKt1568() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1568.kt", this::doTest);
        }

        @TestMetadata("Kt1619Test.kt")
        public void testKt1619Test() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/Kt1619Test.kt", this::doTest);
        }

        @TestMetadata("kt1779.kt")
        public void testKt1779() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1779.kt", this::doTest);
        }

        @TestMetadata("kt1800.kt")
        public void testKt1800() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1800.kt", this::doTest);
        }

        @TestMetadata("kt1845.kt")
        public void testKt1845() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1845.kt", this::doTest);
        }

        @TestMetadata("kt18779.kt")
        public void testKt18779() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt18779.kt", this::doTest);
        }

        @TestMetadata("kt1932.kt")
        public void testKt1932() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt1932.kt", this::doTest);
        }

        @TestMetadata("kt2017.kt")
        public void testKt2017() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt2017.kt", this::doTest);
        }

        @TestMetadata("kt2060.kt")
        public void testKt2060() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt2060.kt", this::doTest);
        }

        @TestMetadata("kt2210.kt")
        public void testKt2210() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt2210.kt", this::doTest);
        }

        @TestMetadata("kt2246.kt")
        public void testKt2246() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt2246.kt", this::doTest);
        }

        @TestMetadata("kt2318.kt")
        public void testKt2318() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt2318.kt", this::doTest);
        }

        @TestMetadata("Kt2495Test.kt")
        public void testKt2495Test() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/Kt2495Test.kt", this::doTest);
        }

        @TestMetadata("kt2509.kt")
        public void testKt2509() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt2509.kt", this::doTest);
        }

        @TestMetadata("kt2593.kt")
        public void testKt2593() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt2593.kt", this::doTest);
        }

        @TestMetadata("kt274.kt")
        public void testKt274() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt274.kt", this::doTest);
        }

        @TestMetadata("kt3046.kt")
        public void testKt3046() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt3046.kt", this::doTest);
        }

        @TestMetadata("kt3107.kt")
        public void testKt3107() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt3107.kt", this::doTest);
        }

        @TestMetadata("kt3421.kt")
        public void testKt3421() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt3421.kt", this::doTest);
        }

        @TestMetadata("kt344.kt")
        public void testKt344() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt344.kt", this::doTest);
        }

        @TestMetadata("kt3442.kt")
        public void testKt3442() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt3442.kt", this::doTest);
        }

        @TestMetadata("kt3587.kt")
        public void testKt3587() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt3587.kt", this::doTest);
        }

        @TestMetadata("kt3850.kt")
        public void testKt3850() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt3850.kt", this::doTest);
        }

        @TestMetadata("kt3903.kt")
        public void testKt3903() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt3903.kt", this::doTest);
        }

        @TestMetadata("kt4142.kt")
        public void testKt4142() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt4142.kt", this::doTest);
        }

        @TestMetadata("kt4259.kt")
        public void testKt4259() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt4259.kt", this::doTest);
        }

        @TestMetadata("kt4262.kt")
        public void testKt4262() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt4262.kt", this::doTest);
        }

        @TestMetadata("kt4281.kt")
        public void testKt4281() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt4281.kt", this::doTest);
        }

        @TestMetadata("kt5056.kt")
        public void testKt5056() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt5056.kt", this::doTest);
        }

        @TestMetadata("kt528.kt")
        public void testKt528() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt528.kt", this::doTest);
        }

        @TestMetadata("kt529.kt")
        public void testKt529() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt529.kt", this::doTest);
        }

        @TestMetadata("kt533.kt")
        public void testKt533() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt533.kt", this::doTest);
        }

        @TestMetadata("kt5395.kt")
        public void testKt5395() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt5395.kt", this::doTest);
        }

        @TestMetadata("kt5445.kt")
        public void testKt5445() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt5445.kt", this::doTest);
        }

        @TestMetadata("kt5445_2.kt")
        public void testKt5445_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt5445_2.kt", this::doTest);
        }

        @TestMetadata("kt5786_privateWithDefault.kt")
        public void testKt5786_privateWithDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt5786_privateWithDefault.kt", this::doTest);
        }

        @TestMetadata("kt5953.kt")
        public void testKt5953() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt5953.kt", this::doTest);
        }

        @TestMetadata("kt6153.kt")
        public void testKt6153() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt6153.kt", this::doTest);
        }

        @TestMetadata("kt6434.kt")
        public void testKt6434() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt6434.kt", this::doTest);
        }

        @TestMetadata("kt6434_2.kt")
        public void testKt6434_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt6434_2.kt", this::doTest);
        }

        @TestMetadata("kt6485.kt")
        public void testKt6485() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt6485.kt", this::doTest);
        }

        @TestMetadata("kt715.kt")
        public void testKt715() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt715.kt", this::doTest);
        }

        @TestMetadata("kt7401.kt")
        public void testKt7401() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt7401.kt", this::doTest);
        }

        @TestMetadata("kt789.kt")
        public void testKt789() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt789.kt", this::doTest);
        }

        @TestMetadata("kt864.kt")
        public void testKt864() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt864.kt", this::doTest);
        }

        @TestMetadata("kt998.kt")
        public void testKt998() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/kt998.kt", this::doTest);
        }

        @TestMetadata("lambdaAsLastExpressionInLambda.kt")
        public void testLambdaAsLastExpressionInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/lambdaAsLastExpressionInLambda.kt", this::doTest);
        }

        @TestMetadata("lambdaPostponeConstruction.kt")
        public void testLambdaPostponeConstruction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/lambdaPostponeConstruction.kt", this::doTest);
        }

        @TestMetadata("lambdaWrongReturnType.kt")
        public void testLambdaWrongReturnType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/lambdaWrongReturnType.kt", this::doTest);
        }

        @TestMetadata("nestedIntersection.kt")
        public void testNestedIntersection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/nestedIntersection.kt", this::doTest);
        }

        @TestMetadata("noAssertionsWhenNullableTypeParameterReplacedWithIntersectionType.kt")
        public void testNoAssertionsWhenNullableTypeParameterReplacedWithIntersectionType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/noAssertionsWhenNullableTypeParameterReplacedWithIntersectionType.kt", this::doTest);
        }

        @TestMetadata("noCapturingForTypesWithTypeVariables.kt")
        public void testNoCapturingForTypesWithTypeVariables() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/noCapturingForTypesWithTypeVariables.kt", this::doTest);
        }

        @TestMetadata("noResolutionRecursion.kt")
        public void testNoResolutionRecursion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/noResolutionRecursion.kt", this::doTest);
        }

        @TestMetadata("nullabilityForCommonCapturedSupertypes.kt")
        public void testNullabilityForCommonCapturedSupertypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/nullabilityForCommonCapturedSupertypes.kt", this::doTest);
        }

        @TestMetadata("nullableAfterExclExcl.kt")
        public void testNullableAfterExclExcl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/nullableAfterExclExcl.kt", this::doTest);
        }

        @TestMetadata("objectCaptureOuterConstructorProperty.kt")
        public void testObjectCaptureOuterConstructorProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/objectCaptureOuterConstructorProperty.kt", this::doTest);
        }

        @TestMetadata("objectInsideDelegation.kt")
        public void testObjectInsideDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/objectInsideDelegation.kt", this::doTest);
        }

        @TestMetadata("referenceToSelfInLocal.kt")
        public void testReferenceToSelfInLocal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/referenceToSelfInLocal.kt", this::doTest);
        }

        @TestMetadata("resolvedCallForGetOperator.kt")
        public void testResolvedCallForGetOperator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/resolvedCallForGetOperator.kt", this::doTest);
        }

        @TestMetadata("supertypeDepth.kt")
        public void testSupertypeDepth() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/supertypeDepth.kt", this::doTest);
        }

        @TestMetadata("typeCastException.kt")
        public void testTypeCastException() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/regressions/typeCastException.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/reified")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reified extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInReified() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reified"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("anonymousObject.kt")
        public void testAnonymousObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/anonymousObject.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectNoPropagate.kt")
        public void testAnonymousObjectNoPropagate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/anonymousObjectNoPropagate.kt", this::doTest);
        }

        @TestMetadata("anonymousObjectReifiedSupertype.kt")
        public void testAnonymousObjectReifiedSupertype() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/anonymousObjectReifiedSupertype.kt", this::doTest);
        }

        @TestMetadata("approximateCapturedTypes.kt")
        public void testApproximateCapturedTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/approximateCapturedTypes.kt", this::doTest);
        }

        @TestMetadata("asOnPlatformType.kt")
        public void testAsOnPlatformType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/asOnPlatformType.kt", this::doTest);
        }

        @TestMetadata("checkcast.kt")
        public void testCheckcast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/checkcast.kt", this::doTest);
        }

        @TestMetadata("copyToArray.kt")
        public void testCopyToArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/copyToArray.kt", this::doTest);
        }

        @TestMetadata("DIExample.kt")
        public void testDIExample() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/DIExample.kt", this::doTest);
        }

        @TestMetadata("defaultJavaClass.kt")
        public void testDefaultJavaClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/defaultJavaClass.kt", this::doTest);
        }

        @TestMetadata("expectedTypeFromCast.kt")
        public void testExpectedTypeFromCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/expectedTypeFromCast.kt", this::doTest);
        }

        @TestMetadata("filterIsInstance.kt")
        public void testFilterIsInstance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/filterIsInstance.kt", this::doTest);
        }

        @TestMetadata("innerAnonymousObject.kt")
        public void testInnerAnonymousObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/innerAnonymousObject.kt", this::doTest);
        }

        @TestMetadata("instanceof.kt")
        public void testInstanceof() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/instanceof.kt", this::doTest);
        }

        @TestMetadata("isOnPlatformType.kt")
        public void testIsOnPlatformType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/isOnPlatformType.kt", this::doTest);
        }

        @TestMetadata("javaClass.kt")
        public void testJavaClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/javaClass.kt", this::doTest);
        }

        @TestMetadata("nestedReified.kt")
        public void testNestedReified() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/nestedReified.kt", this::doTest);
        }

        @TestMetadata("nestedReifiedSignature.kt")
        public void testNestedReifiedSignature() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/nestedReifiedSignature.kt", this::doTest);
        }

        @TestMetadata("newArrayInt.kt")
        public void testNewArrayInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/newArrayInt.kt", this::doTest);
        }

        @TestMetadata("nonInlineableLambdaInReifiedFunction.kt")
        public void testNonInlineableLambdaInReifiedFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/nonInlineableLambdaInReifiedFunction.kt", this::doTest);
        }

        @TestMetadata("recursiveInnerAnonymousObject.kt")
        public void testRecursiveInnerAnonymousObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/recursiveInnerAnonymousObject.kt", this::doTest);
        }

        @TestMetadata("recursiveNewArray.kt")
        public void testRecursiveNewArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/recursiveNewArray.kt", this::doTest);
        }

        @TestMetadata("recursiveNonInlineableLambda.kt")
        public void testRecursiveNonInlineableLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/recursiveNonInlineableLambda.kt", this::doTest);
        }

        @TestMetadata("reifiedChain.kt")
        public void testReifiedChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/reifiedChain.kt", this::doTest);
        }

        @TestMetadata("reifiedInlineFunOfObject.kt")
        public void testReifiedInlineFunOfObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/reifiedInlineFunOfObject.kt", this::doTest);
        }

        @TestMetadata("reifiedInlineFunOfObjectWithinReified.kt")
        public void testReifiedInlineFunOfObjectWithinReified() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/reifiedInlineFunOfObjectWithinReified.kt", this::doTest);
        }

        @TestMetadata("reifiedInlineIntoNonInlineableLambda.kt")
        public void testReifiedInlineIntoNonInlineableLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/reifiedInlineIntoNonInlineableLambda.kt", this::doTest);
        }

        @TestMetadata("safecast.kt")
        public void testSafecast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/safecast.kt", this::doTest);
        }

        @TestMetadata("sameIndexRecursive.kt")
        public void testSameIndexRecursive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/sameIndexRecursive.kt", this::doTest);
        }

        @TestMetadata("spreads.kt")
        public void testSpreads() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/spreads.kt", this::doTest);
        }

        @TestMetadata("varargs.kt")
        public void testVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/varargs.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/reified/arraysReification")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ArraysReification extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInArraysReification() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/reified/arraysReification"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("instanceOf.kt")
            public void testInstanceOf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/arraysReification/instanceOf.kt", this::doTest);
            }

            @TestMetadata("instanceOfArrays.kt")
            public void testInstanceOfArrays() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/arraysReification/instanceOfArrays.kt", this::doTest);
            }

            @TestMetadata("jClass.kt")
            public void testJClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/arraysReification/jClass.kt", this::doTest);
            }

            @TestMetadata("jaggedArray.kt")
            public void testJaggedArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedArray.kt", this::doTest);
            }

            @TestMetadata("jaggedArrayOfNulls.kt")
            public void testJaggedArrayOfNulls() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedArrayOfNulls.kt", this::doTest);
            }

            @TestMetadata("jaggedDeep.kt")
            public void testJaggedDeep() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedDeep.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/safeCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SafeCall extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSafeCall() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/safeCall"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/genericNull.kt", this::doTest);
        }

        @TestMetadata("kt1572.kt")
        public void testKt1572() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/kt1572.kt", this::doTest);
        }

        @TestMetadata("kt232.kt")
        public void testKt232() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/kt232.kt", this::doTest);
        }

        @TestMetadata("kt245.kt")
        public void testKt245() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/kt245.kt", this::doTest);
        }

        @TestMetadata("kt247.kt")
        public void testKt247() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/kt247.kt", this::doTest);
        }

        @TestMetadata("kt3430.kt")
        public void testKt3430() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/kt3430.kt", this::doTest);
        }

        @TestMetadata("kt4733.kt")
        public void testKt4733() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/kt4733.kt", this::doTest);
        }

        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/primitive.kt", this::doTest);
        }

        @TestMetadata("primitiveEqSafeCall.kt")
        public void testPrimitiveEqSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/primitiveEqSafeCall.kt", this::doTest);
        }

        @TestMetadata("primitiveNotEqSafeCall.kt")
        public void testPrimitiveNotEqSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/primitiveNotEqSafeCall.kt", this::doTest);
        }

        @TestMetadata("safeCallEqPrimitive.kt")
        public void testSafeCallEqPrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/safeCallEqPrimitive.kt", this::doTest);
        }

        @TestMetadata("safeCallNotEqPrimitive.kt")
        public void testSafeCallNotEqPrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/safeCallNotEqPrimitive.kt", this::doTest);
        }

        @TestMetadata("safeCallOnLong.kt")
        public void testSafeCallOnLong() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/safeCall/safeCallOnLong.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/sam")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Sam extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSam() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/sam"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("kt17091.kt")
        public void testKt17091() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/kt17091.kt", this::doTest);
        }

        @TestMetadata("kt17091_2.kt")
        public void testKt17091_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/kt17091_2.kt", this::doTest);
        }

        @TestMetadata("kt17091_3.kt")
        public void testKt17091_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/kt17091_3.kt", this::doTest);
        }

        @TestMetadata("kt17091_4.kt")
        public void testKt17091_4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/kt17091_4.kt", this::doTest);
        }

        @TestMetadata("kt22906.kt")
        public void testKt22906() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/kt22906.kt", this::doTest);
        }

        @TestMetadata("kt22906_2.kt")
        public void testKt22906_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/kt22906_2.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/sam/constructors")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Constructors extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInConstructors() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/sam/constructors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("comparator.kt")
            public void testComparator() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/comparator.kt", this::doTest);
            }

            @TestMetadata("filenameFilter.kt")
            public void testFilenameFilter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/filenameFilter.kt", this::doTest);
            }

            @TestMetadata("kt19251.kt")
            public void testKt19251() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/kt19251.kt", this::doTest);
            }

            @TestMetadata("kt19251_child.kt")
            public void testKt19251_child() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/kt19251_child.kt", this::doTest);
            }

            @TestMetadata("nonLiteralComparator.kt")
            public void testNonLiteralComparator() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralComparator.kt", this::doTest);
            }

            @TestMetadata("nonLiteralFilenameFilter.kt")
            public void testNonLiteralFilenameFilter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralFilenameFilter.kt", this::doTest);
            }

            @TestMetadata("nonLiteralRunnable.kt")
            public void testNonLiteralRunnable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralRunnable.kt", this::doTest);
            }

            @TestMetadata("nonTrivialRunnable.kt")
            public void testNonTrivialRunnable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/nonTrivialRunnable.kt", this::doTest);
            }

            @TestMetadata("runnable.kt")
            public void testRunnable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/runnable.kt", this::doTest);
            }

            @TestMetadata("runnableAccessingClosure1.kt")
            public void testRunnableAccessingClosure1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/runnableAccessingClosure1.kt", this::doTest);
            }

            @TestMetadata("runnableAccessingClosure2.kt")
            public void testRunnableAccessingClosure2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/runnableAccessingClosure2.kt", this::doTest);
            }

            @TestMetadata("samWrappersDifferentFiles.kt")
            public void testSamWrappersDifferentFiles() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/samWrappersDifferentFiles.kt", this::doTest);
            }

            @TestMetadata("sameWrapperClass.kt")
            public void testSameWrapperClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/sameWrapperClass.kt", this::doTest);
            }

            @TestMetadata("syntheticVsReal.kt")
            public void testSyntheticVsReal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/sam/constructors/syntheticVsReal.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/sealed")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Sealed extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSealed() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/sealed"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("objects.kt")
        public void testObjects() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/sealed/objects.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/sealed/simple.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/secondaryConstructors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SecondaryConstructors extends AbstractLightAnalysisModeTest {
        @TestMetadata("accessToCompanion.kt")
        public void testAccessToCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/accessToCompanion.kt", this::doTest);
        }

        @TestMetadata("accessToNestedObject.kt")
        public void testAccessToNestedObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/accessToNestedObject.kt", this::doTest);
        }

        public void testAllFilesPresentInSecondaryConstructors() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/secondaryConstructors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("basicNoPrimaryManySinks.kt")
        public void testBasicNoPrimaryManySinks() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/basicNoPrimaryManySinks.kt", this::doTest);
        }

        @TestMetadata("basicNoPrimaryOneSink.kt")
        public void testBasicNoPrimaryOneSink() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/basicNoPrimaryOneSink.kt", this::doTest);
        }

        @TestMetadata("basicPrimary.kt")
        public void testBasicPrimary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/basicPrimary.kt", this::doTest);
        }

        @TestMetadata("callFromLocalSubClass.kt")
        public void testCallFromLocalSubClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/callFromLocalSubClass.kt", this::doTest);
        }

        @TestMetadata("callFromPrimaryWithNamedArgs.kt")
        public void testCallFromPrimaryWithNamedArgs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/callFromPrimaryWithNamedArgs.kt", this::doTest);
        }

        @TestMetadata("callFromPrimaryWithOptionalArgs.kt")
        public void testCallFromPrimaryWithOptionalArgs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/callFromPrimaryWithOptionalArgs.kt", this::doTest);
        }

        @TestMetadata("callFromSubClass.kt")
        public void testCallFromSubClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/callFromSubClass.kt", this::doTest);
        }

        @TestMetadata("clashingDefaultConstructors.kt")
        public void testClashingDefaultConstructors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/clashingDefaultConstructors.kt", this::doTest);
        }

        @TestMetadata("dataClasses.kt")
        public void testDataClasses() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/dataClasses.kt", this::doTest);
        }

        @TestMetadata("defaultArgs.kt")
        public void testDefaultArgs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/defaultArgs.kt", this::doTest);
        }

        @TestMetadata("defaultParametersNotDuplicated.kt")
        public void testDefaultParametersNotDuplicated() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/defaultParametersNotDuplicated.kt", this::doTest);
        }

        @TestMetadata("delegateWithComplexExpression.kt")
        public void testDelegateWithComplexExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/delegateWithComplexExpression.kt", this::doTest);
        }

        @TestMetadata("delegatedThisWithLambda.kt")
        public void testDelegatedThisWithLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/delegatedThisWithLambda.kt", this::doTest);
        }

        @TestMetadata("delegationWithPrimary.kt")
        public void testDelegationWithPrimary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/delegationWithPrimary.kt", this::doTest);
        }

        @TestMetadata("enums.kt")
        public void testEnums() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/enums.kt", this::doTest);
        }

        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/generics.kt", this::doTest);
        }

        @TestMetadata("innerClasses.kt")
        public void testInnerClasses() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/innerClasses.kt", this::doTest);
        }

        @TestMetadata("innerClassesInheritance.kt")
        public void testInnerClassesInheritance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/innerClassesInheritance.kt", this::doTest);
        }

        @TestMetadata("localClasses.kt")
        public void testLocalClasses() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/localClasses.kt", this::doTest);
        }

        @TestMetadata("superCallPrimary.kt")
        public void testSuperCallPrimary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/superCallPrimary.kt", this::doTest);
        }

        @TestMetadata("superCallSecondary.kt")
        public void testSuperCallSecondary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/superCallSecondary.kt", this::doTest);
        }

        @TestMetadata("varargs.kt")
        public void testVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/varargs.kt", this::doTest);
        }

        @TestMetadata("withGenerics.kt")
        public void testWithGenerics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/withGenerics.kt", this::doTest);
        }

        @TestMetadata("withNonLocalReturn.kt")
        public void testWithNonLocalReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/withNonLocalReturn.kt", this::doTest);
        }

        @TestMetadata("withPrimary.kt")
        public void testWithPrimary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/withPrimary.kt", this::doTest);
        }

        @TestMetadata("withReturn.kt")
        public void testWithReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/withReturn.kt", this::doTest);
        }

        @TestMetadata("withReturnUnit.kt")
        public void testWithReturnUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/withReturnUnit.kt", this::doTest);
        }

        @TestMetadata("withVarargs.kt")
        public void testWithVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/withVarargs.kt", this::doTest);
        }

        @TestMetadata("withoutPrimary.kt")
        public void testWithoutPrimary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/secondaryConstructors/withoutPrimary.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/signatureAnnotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SignatureAnnotations extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSignatureAnnotations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/signatureAnnotations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("defaultAndNamedCombination.kt")
        public void testDefaultAndNamedCombination() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultAndNamedCombination.kt", this::doTest);
        }

        @TestMetadata("defaultBoxTypes.kt")
        public void testDefaultBoxTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultBoxTypes.kt", this::doTest);
        }

        @TestMetadata("defaultEnumType.kt")
        public void testDefaultEnumType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultEnumType.kt", this::doTest);
        }

        @TestMetadata("defaultLongLiteral.kt")
        public void testDefaultLongLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultLongLiteral.kt", this::doTest);
        }

        @TestMetadata("defaultMultipleParams.kt")
        public void testDefaultMultipleParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultMultipleParams.kt", this::doTest);
        }

        @TestMetadata("defaultNull.kt")
        public void testDefaultNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultNull.kt", this::doTest);
        }

        @TestMetadata("defaultNullableBoxTypes.kt")
        public void testDefaultNullableBoxTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultNullableBoxTypes.kt", this::doTest);
        }

        @TestMetadata("defaultOverrides.kt")
        public void testDefaultOverrides() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultOverrides.kt", this::doTest);
        }

        @TestMetadata("defaultPrimitiveTypes.kt")
        public void testDefaultPrimitiveTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultPrimitiveTypes.kt", this::doTest);
        }

        @TestMetadata("defaultValueInConstructor.kt")
        public void testDefaultValueInConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultValueInConstructor.kt", this::doTest);
        }

        @TestMetadata("defaultWithJavaBase.kt")
        public void testDefaultWithJavaBase() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultWithJavaBase.kt", this::doTest);
        }

        @TestMetadata("defaultWithKotlinBase.kt")
        public void testDefaultWithKotlinBase() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/defaultWithKotlinBase.kt", this::doTest);
        }

        @TestMetadata("reorderedParameterNames.kt")
        public void testReorderedParameterNames() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/signatureAnnotations/reorderedParameterNames.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/smap")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Smap extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSmap() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/smap"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("chainCalls.kt")
        public void testChainCalls() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smap/chainCalls.kt", this::doTest);
        }

        @TestMetadata("infixCalls.kt")
        public void testInfixCalls() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smap/infixCalls.kt", this::doTest);
        }

        @TestMetadata("simpleCallWithParams.kt")
        public void testSimpleCallWithParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smap/simpleCallWithParams.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/smartCasts")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SmartCasts extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSmartCasts() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/smartCasts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("falseSmartCast.kt")
        public void testFalseSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/falseSmartCast.kt", this::doTest);
        }

        @TestMetadata("genericIntersection.kt")
        public void testGenericIntersection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/genericIntersection.kt", this::doTest);
        }

        @TestMetadata("genericSet.kt")
        public void testGenericSet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/genericSet.kt", this::doTest);
        }

        @TestMetadata("implicitExtensionReceiver.kt")
        public void testImplicitExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/implicitExtensionReceiver.kt", this::doTest);
        }

        @TestMetadata("implicitMemberReceiver.kt")
        public void testImplicitMemberReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/implicitMemberReceiver.kt", this::doTest);
        }

        @TestMetadata("implicitReceiver.kt")
        public void testImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/implicitReceiver.kt", this::doTest);
        }

        @TestMetadata("implicitReceiverInWhen.kt")
        public void testImplicitReceiverInWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/implicitReceiverInWhen.kt", this::doTest);
        }

        @TestMetadata("implicitToGrandSon.kt")
        public void testImplicitToGrandSon() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/implicitToGrandSon.kt", this::doTest);
        }

        @TestMetadata("kt17725.kt")
        public void testKt17725() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/kt17725.kt", this::doTest);
        }

        @TestMetadata("kt19058.kt")
        public void testKt19058() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/kt19058.kt", this::doTest);
        }

        @TestMetadata("kt19100.kt")
        public void testKt19100() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/kt19100.kt", this::doTest);
        }

        @TestMetadata("lambdaArgumentWithoutType.kt")
        public void testLambdaArgumentWithoutType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/lambdaArgumentWithoutType.kt", this::doTest);
        }

        @TestMetadata("nullSmartCast.kt")
        public void testNullSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/nullSmartCast.kt", this::doTest);
        }

        @TestMetadata("smartCastInsideIf.kt")
        public void testSmartCastInsideIf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/smartCastInsideIf.kt", this::doTest);
        }

        @TestMetadata("whenSmartCast.kt")
        public void testWhenSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/smartCasts/whenSmartCast.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/specialBuiltins")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SpecialBuiltins extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSpecialBuiltins() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/specialBuiltins"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("bridgeNotEmptyMap.kt")
        public void testBridgeNotEmptyMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/bridgeNotEmptyMap.kt", this::doTest);
        }

        @TestMetadata("bridges.kt")
        public void testBridges() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/bridges.kt", this::doTest);
        }

        @TestMetadata("collectionImpl.kt")
        public void testCollectionImpl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/collectionImpl.kt", this::doTest);
        }

        @TestMetadata("commonBridgesTarget.kt")
        public void testCommonBridgesTarget() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/commonBridgesTarget.kt", this::doTest);
        }

        @TestMetadata("emptyList.kt")
        public void testEmptyList() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/emptyList.kt", this::doTest);
        }

        @TestMetadata("emptyMap.kt")
        public void testEmptyMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/emptyMap.kt", this::doTest);
        }

        @TestMetadata("emptyStringMap.kt")
        public void testEmptyStringMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/emptyStringMap.kt", this::doTest);
        }

        @TestMetadata("entrySetSOE.kt")
        public void testEntrySetSOE() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/entrySetSOE.kt", this::doTest);
        }

        @TestMetadata("enumAsOrdinaled.kt")
        public void testEnumAsOrdinaled() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/enumAsOrdinaled.kt", this::doTest);
        }

        @TestMetadata("exceptionCause.kt")
        public void testExceptionCause() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/exceptionCause.kt", this::doTest);
        }

        @TestMetadata("explicitSuperCall.kt")
        public void testExplicitSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/explicitSuperCall.kt", this::doTest);
        }

        @TestMetadata("irrelevantRemoveAtOverride.kt")
        public void testIrrelevantRemoveAtOverride() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/irrelevantRemoveAtOverride.kt", this::doTest);
        }

        @TestMetadata("maps.kt")
        public void testMaps() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/maps.kt", this::doTest);
        }

        @TestMetadata("noSpecialBridgeInSuperClass.kt")
        public void testNoSpecialBridgeInSuperClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/noSpecialBridgeInSuperClass.kt", this::doTest);
        }

        @TestMetadata("notEmptyListAny.kt")
        public void testNotEmptyListAny() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/notEmptyListAny.kt", this::doTest);
        }

        @TestMetadata("notEmptyMap.kt")
        public void testNotEmptyMap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/notEmptyMap.kt", this::doTest);
        }

        @TestMetadata("redundantStubForSize.kt")
        public void testRedundantStubForSize() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/redundantStubForSize.kt", this::doTest);
        }

        @TestMetadata("removeAtTwoSpecialBridges.kt")
        public void testRemoveAtTwoSpecialBridges() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/removeAtTwoSpecialBridges.kt", this::doTest);
        }

        @TestMetadata("removeSetInt.kt")
        public void testRemoveSetInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/removeSetInt.kt", this::doTest);
        }

        @TestMetadata("throwable.kt")
        public void testThrowable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/throwable.kt", this::doTest);
        }

        @TestMetadata("throwableCause.kt")
        public void testThrowableCause() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/throwableCause.kt", this::doTest);
        }

        @TestMetadata("throwableImpl.kt")
        public void testThrowableImpl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/throwableImpl.kt", this::doTest);
        }

        @TestMetadata("throwableImplWithSecondaryConstructor.kt")
        public void testThrowableImplWithSecondaryConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/throwableImplWithSecondaryConstructor.kt", this::doTest);
        }

        @TestMetadata("valuesInsideEnum.kt")
        public void testValuesInsideEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/specialBuiltins/valuesInsideEnum.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/statics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Statics extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInStatics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/statics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("anonymousInitializerIObject.kt")
        public void testAnonymousInitializerIObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/anonymousInitializerIObject.kt", this::doTest);
        }

        @TestMetadata("anonymousInitializerInClassObject.kt")
        public void testAnonymousInitializerInClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/anonymousInitializerInClassObject.kt", this::doTest);
        }

        @TestMetadata("fields.kt")
        public void testFields() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/fields.kt", this::doTest);
        }

        @TestMetadata("functions.kt")
        public void testFunctions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/functions.kt", this::doTest);
        }

        @TestMetadata("hidePrivateByPublic.kt")
        public void testHidePrivateByPublic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/hidePrivateByPublic.kt", this::doTest);
        }

        @TestMetadata("incInClassObject.kt")
        public void testIncInClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/incInClassObject.kt", this::doTest);
        }

        @TestMetadata("incInObject.kt")
        public void testIncInObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/incInObject.kt", this::doTest);
        }

        @TestMetadata("inheritedPropertyInClassObject.kt")
        public void testInheritedPropertyInClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/inheritedPropertyInClassObject.kt", this::doTest);
        }

        @TestMetadata("inheritedPropertyInObject.kt")
        public void testInheritedPropertyInObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/inheritedPropertyInObject.kt", this::doTest);
        }

        @TestMetadata("inlineCallsStaticMethod.kt")
        public void testInlineCallsStaticMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/inlineCallsStaticMethod.kt", this::doTest);
        }

        @TestMetadata("kt8089.kt")
        public void testKt8089() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/kt8089.kt", this::doTest);
        }

        @TestMetadata("protectedSamConstructor.kt")
        public void testProtectedSamConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/protectedSamConstructor.kt", this::doTest);
        }

        @TestMetadata("protectedStatic.kt")
        public void testProtectedStatic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/protectedStatic.kt", this::doTest);
        }

        @TestMetadata("protectedStatic2.kt")
        public void testProtectedStatic2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/protectedStatic2.kt", this::doTest);
        }

        @TestMetadata("protectedStaticAndInline.kt")
        public void testProtectedStaticAndInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/protectedStaticAndInline.kt", this::doTest);
        }

        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/statics/syntheticAccessor.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/storeStackBeforeInline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StoreStackBeforeInline extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInStoreStackBeforeInline() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/storeStackBeforeInline"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("differentTypes.kt")
        public void testDifferentTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/storeStackBeforeInline/differentTypes.kt", this::doTest);
        }

        @TestMetadata("primitiveMerge.kt")
        public void testPrimitiveMerge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/storeStackBeforeInline/primitiveMerge.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/storeStackBeforeInline/simple.kt", this::doTest);
        }

        @TestMetadata("unreachableMarker.kt")
        public void testUnreachableMarker() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/storeStackBeforeInline/unreachableMarker.kt", this::doTest);
        }

        @TestMetadata("withLambda.kt")
        public void testWithLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/storeStackBeforeInline/withLambda.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/strings")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Strings extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInStrings() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/strings"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("constInStringTemplate.kt")
        public void testConstInStringTemplate() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/constInStringTemplate.kt", this::doTest);
        }

        @TestMetadata("ea35743.kt")
        public void testEa35743() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/ea35743.kt", this::doTest);
        }

        @TestMetadata("forInString.kt")
        public void testForInString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/forInString.kt", this::doTest);
        }

        @TestMetadata("interpolation.kt")
        public void testInterpolation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/interpolation.kt", this::doTest);
        }

        @TestMetadata("kt2592.kt")
        public void testKt2592() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/kt2592.kt", this::doTest);
        }

        @TestMetadata("kt3571.kt")
        public void testKt3571() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/kt3571.kt", this::doTest);
        }

        @TestMetadata("kt3652.kt")
        public void testKt3652() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/kt3652.kt", this::doTest);
        }

        @TestMetadata("kt5389_stringBuilderGet.kt")
        public void testKt5389_stringBuilderGet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/kt5389_stringBuilderGet.kt", this::doTest);
        }

        @TestMetadata("kt5956.kt")
        public void testKt5956() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/kt5956.kt", this::doTest);
        }

        @TestMetadata("kt881.kt")
        public void testKt881() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/kt881.kt", this::doTest);
        }

        @TestMetadata("kt889.kt")
        public void testKt889() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/kt889.kt", this::doTest);
        }

        @TestMetadata("kt894.kt")
        public void testKt894() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/kt894.kt", this::doTest);
        }

        @TestMetadata("multilineStringsWithTemplates.kt")
        public void testMultilineStringsWithTemplates() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/multilineStringsWithTemplates.kt", this::doTest);
        }

        @TestMetadata("nestedConcat.kt")
        public void testNestedConcat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/nestedConcat.kt", this::doTest);
        }

        @TestMetadata("rawStrings.kt")
        public void testRawStrings() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/rawStrings.kt", this::doTest);
        }

        @TestMetadata("rawStringsWithManyQuotes.kt")
        public void testRawStringsWithManyQuotes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/rawStringsWithManyQuotes.kt", this::doTest);
        }

        @TestMetadata("stringBuilderAppend.kt")
        public void testStringBuilderAppend() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/stringBuilderAppend.kt", this::doTest);
        }

        @TestMetadata("stringPlusOnlyWorksOnString.kt")
        public void testStringPlusOnlyWorksOnString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/strings/stringPlusOnlyWorksOnString.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/super")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Super extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSuper() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/super"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("basicmethodSuperClass.kt")
        public void testBasicmethodSuperClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/basicmethodSuperClass.kt", this::doTest);
        }

        @TestMetadata("basicmethodSuperTrait.kt")
        public void testBasicmethodSuperTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/basicmethodSuperTrait.kt", this::doTest);
        }

        @TestMetadata("basicproperty.kt")
        public void testBasicproperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/basicproperty.kt", this::doTest);
        }

        @TestMetadata("enclosedFun.kt")
        public void testEnclosedFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/enclosedFun.kt", this::doTest);
        }

        @TestMetadata("enclosedVar.kt")
        public void testEnclosedVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/enclosedVar.kt", this::doTest);
        }

        @TestMetadata("innerClassLabeledSuper.kt")
        public void testInnerClassLabeledSuper() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/innerClassLabeledSuper.kt", this::doTest);
        }

        @TestMetadata("innerClassLabeledSuper2.kt")
        public void testInnerClassLabeledSuper2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/innerClassLabeledSuper2.kt", this::doTest);
        }

        @TestMetadata("innerClassLabeledSuperProperty.kt")
        public void testInnerClassLabeledSuperProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty.kt", this::doTest);
        }

        @TestMetadata("innerClassLabeledSuperProperty2.kt")
        public void testInnerClassLabeledSuperProperty2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty2.kt", this::doTest);
        }

        @TestMetadata("innerClassQualifiedFunctionCall.kt")
        public void testInnerClassQualifiedFunctionCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/innerClassQualifiedFunctionCall.kt", this::doTest);
        }

        @TestMetadata("innerClassQualifiedPropertyAccess.kt")
        public void testInnerClassQualifiedPropertyAccess() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/innerClassQualifiedPropertyAccess.kt", this::doTest);
        }

        @TestMetadata("kt14243.kt")
        public void testKt14243() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt14243.kt", this::doTest);
        }

        @TestMetadata("kt14243_2.kt")
        public void testKt14243_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt14243_2.kt", this::doTest);
        }

        @TestMetadata("kt14243_class.kt")
        public void testKt14243_class() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt14243_class.kt", this::doTest);
        }

        @TestMetadata("kt14243_prop.kt")
        public void testKt14243_prop() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt14243_prop.kt", this::doTest);
        }

        @TestMetadata("kt3492ClassFun.kt")
        public void testKt3492ClassFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt3492ClassFun.kt", this::doTest);
        }

        @TestMetadata("kt3492ClassProperty.kt")
        public void testKt3492ClassProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt3492ClassProperty.kt", this::doTest);
        }

        @TestMetadata("kt3492TraitFun.kt")
        public void testKt3492TraitFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt3492TraitFun.kt", this::doTest);
        }

        @TestMetadata("kt3492TraitProperty.kt")
        public void testKt3492TraitProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt3492TraitProperty.kt", this::doTest);
        }

        @TestMetadata("kt4173.kt")
        public void testKt4173() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt4173.kt", this::doTest);
        }

        @TestMetadata("kt4173_2.kt")
        public void testKt4173_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt4173_2.kt", this::doTest);
        }

        @TestMetadata("kt4173_3.kt")
        public void testKt4173_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt4173_3.kt", this::doTest);
        }

        @TestMetadata("kt4982.kt")
        public void testKt4982() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/kt4982.kt", this::doTest);
        }

        @TestMetadata("multipleSuperTraits.kt")
        public void testMultipleSuperTraits() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/multipleSuperTraits.kt", this::doTest);
        }

        @TestMetadata("traitproperty.kt")
        public void testTraitproperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/traitproperty.kt", this::doTest);
        }

        @TestMetadata("unqualifiedSuper.kt")
        public void testUnqualifiedSuper() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/unqualifiedSuper.kt", this::doTest);
        }

        @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
        public void testUnqualifiedSuperWithDeeperHierarchies() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/unqualifiedSuperWithDeeperHierarchies.kt", this::doTest);
        }

        @TestMetadata("unqualifiedSuperWithMethodsOfAny.kt")
        public void testUnqualifiedSuperWithMethodsOfAny() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/super/unqualifiedSuperWithMethodsOfAny.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/super/superConstructor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SuperConstructor extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInSuperConstructor() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/super/superConstructor"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("kt17464_arrayOf.kt")
            public void testKt17464_arrayOf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/super/superConstructor/kt17464_arrayOf.kt", this::doTest);
            }

            @TestMetadata("kt17464_linkedMapOf.kt")
            public void testKt17464_linkedMapOf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/super/superConstructor/kt17464_linkedMapOf.kt", this::doTest);
            }

            @TestMetadata("kt18356.kt")
            public void testKt18356() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/super/superConstructor/kt18356.kt", this::doTest);
            }

            @TestMetadata("kt18356_2.kt")
            public void testKt18356_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/super/superConstructor/kt18356_2.kt", this::doTest);
            }

            @TestMetadata("objectExtendsInner.kt")
            public void testObjectExtendsInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/super/superConstructor/objectExtendsInner.kt", this::doTest);
            }

            @TestMetadata("objectExtendsLocalInner.kt")
            public void testObjectExtendsLocalInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/super/superConstructor/objectExtendsLocalInner.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/synchronized")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Synchronized extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInSynchronized() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/synchronized"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("changeMonitor.kt")
        public void testChangeMonitor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/changeMonitor.kt", this::doTest);
        }

        @TestMetadata("exceptionInMonitorExpression.kt")
        public void testExceptionInMonitorExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/exceptionInMonitorExpression.kt", this::doTest);
        }

        @TestMetadata("finally.kt")
        public void testFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/finally.kt", this::doTest);
        }

        @TestMetadata("longValue.kt")
        public void testLongValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/longValue.kt", this::doTest);
        }

        @TestMetadata("nestedDifferentObjects.kt")
        public void testNestedDifferentObjects() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/nestedDifferentObjects.kt", this::doTest);
        }

        @TestMetadata("nestedSameObject.kt")
        public void testNestedSameObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/nestedSameObject.kt", this::doTest);
        }

        @TestMetadata("nonLocalReturn.kt")
        public void testNonLocalReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/nonLocalReturn.kt", this::doTest);
        }

        @TestMetadata("objectValue.kt")
        public void testObjectValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/objectValue.kt", this::doTest);
        }

        @TestMetadata("sync.kt")
        public void testSync() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/sync.kt", this::doTest);
        }

        @TestMetadata("value.kt")
        public void testValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/value.kt", this::doTest);
        }

        @TestMetadata("wait.kt")
        public void testWait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/synchronized/wait.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/syntheticAccessors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SyntheticAccessors extends AbstractLightAnalysisModeTest {
        @TestMetadata("accessorForGenericConstructor.kt")
        public void testAccessorForGenericConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericConstructor.kt", this::doTest);
        }

        @TestMetadata("accessorForGenericMethod.kt")
        public void testAccessorForGenericMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericMethod.kt", this::doTest);
        }

        @TestMetadata("accessorForGenericMethodWithDefaults.kt")
        public void testAccessorForGenericMethodWithDefaults() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericMethodWithDefaults.kt", this::doTest);
        }

        @TestMetadata("accessorForProtected.kt")
        public void testAccessorForProtected() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtected.kt", this::doTest);
        }

        @TestMetadata("accessorForProtectedInvokeVirtual.kt")
        public void testAccessorForProtectedInvokeVirtual() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtectedInvokeVirtual.kt", this::doTest);
        }

        public void testAllFilesPresentInSyntheticAccessors() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/syntheticAccessors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("jvmNameForAccessors.kt")
        public void testJvmNameForAccessors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/jvmNameForAccessors.kt", this::doTest);
        }

        @TestMetadata("kt10047.kt")
        public void testKt10047() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/kt10047.kt", this::doTest);
        }

        @TestMetadata("kt21258_indirect.kt")
        public void testKt21258_indirect() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/kt21258_indirect.kt", this::doTest);
        }

        @TestMetadata("kt21258_simple.kt")
        public void testKt21258_simple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/kt21258_simple.kt", this::doTest);
        }

        @TestMetadata("kt9717.kt")
        public void testKt9717() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/kt9717.kt", this::doTest);
        }

        @TestMetadata("kt9717DifferentPackages.kt")
        public void testKt9717DifferentPackages() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/kt9717DifferentPackages.kt", this::doTest);
        }

        @TestMetadata("kt9958.kt")
        public void testKt9958() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/kt9958.kt", this::doTest);
        }

        @TestMetadata("kt9958Interface.kt")
        public void testKt9958Interface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/kt9958Interface.kt", this::doTest);
        }

        @TestMetadata("protectedFromLambda.kt")
        public void testProtectedFromLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/protectedFromLambda.kt", this::doTest);
        }

        @TestMetadata("syntheticAccessorNames.kt")
        public void testSyntheticAccessorNames() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/syntheticAccessors/syntheticAccessorNames.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/toArray")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ToArray extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInToArray() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/toArray"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("kt3177-toTypedArray.kt")
        public void testKt3177_toTypedArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/toArray/kt3177-toTypedArray.kt", this::doTest);
        }

        @TestMetadata("returnToTypedArray.kt")
        public void testReturnToTypedArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/toArray/returnToTypedArray.kt", this::doTest);
        }

        @TestMetadata("toArray.kt")
        public void testToArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/toArray/toArray.kt", this::doTest);
        }

        @TestMetadata("toArrayAlreadyPresent.kt")
        public void testToArrayAlreadyPresent() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/toArray/toArrayAlreadyPresent.kt", this::doTest);
        }

        @TestMetadata("toArrayShouldBePublic.kt")
        public void testToArrayShouldBePublic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/toArray/toArrayShouldBePublic.kt", this::doTest);
        }

        @TestMetadata("toArrayShouldBePublicWithJava.kt")
        public void testToArrayShouldBePublicWithJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/toArray/toArrayShouldBePublicWithJava.kt", this::doTest);
        }

        @TestMetadata("toTypedArray.kt")
        public void testToTypedArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/toArray/toTypedArray.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/topLevelPrivate")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TopLevelPrivate extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInTopLevelPrivate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/topLevelPrivate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("noPrivateNoAccessorsInMultiFileFacade.kt")
        public void testNoPrivateNoAccessorsInMultiFileFacade() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/topLevelPrivate/noPrivateNoAccessorsInMultiFileFacade.kt", this::doTest);
        }

        @TestMetadata("noPrivateNoAccessorsInMultiFileFacade2.kt")
        public void testNoPrivateNoAccessorsInMultiFileFacade2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/topLevelPrivate/noPrivateNoAccessorsInMultiFileFacade2.kt", this::doTest);
        }

        @TestMetadata("privateInInlineNested.kt")
        public void testPrivateInInlineNested() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/topLevelPrivate/privateInInlineNested.kt", this::doTest);
        }

        @TestMetadata("privateVisibility.kt")
        public void testPrivateVisibility() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/topLevelPrivate/privateVisibility.kt", this::doTest);
        }

        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/topLevelPrivate/syntheticAccessor.kt", this::doTest);
        }

        @TestMetadata("syntheticAccessorInMultiFile.kt")
        public void testSyntheticAccessorInMultiFile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/topLevelPrivate/syntheticAccessorInMultiFile.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/traits")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Traits extends AbstractLightAnalysisModeTest {
        @TestMetadata("abstractClassInheritsFromInterface.kt")
        public void testAbstractClassInheritsFromInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/abstractClassInheritsFromInterface.kt", this::doTest);
        }

        public void testAllFilesPresentInTraits() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/traits"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("diamondPropertyAccessors.kt")
        public void testDiamondPropertyAccessors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/diamondPropertyAccessors.kt", this::doTest);
        }

        @TestMetadata("genericMethod.kt")
        public void testGenericMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/genericMethod.kt", this::doTest);
        }

        @TestMetadata("indirectlyInheritPropertyGetter.kt")
        public void testIndirectlyInheritPropertyGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/indirectlyInheritPropertyGetter.kt", this::doTest);
        }

        @TestMetadata("inheritJavaInterface.kt")
        public void testInheritJavaInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/inheritJavaInterface.kt", this::doTest);
        }

        @TestMetadata("inheritedFun.kt")
        public void testInheritedFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/inheritedFun.kt", this::doTest);
        }

        @TestMetadata("inheritedVar.kt")
        public void testInheritedVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/inheritedVar.kt", this::doTest);
        }

        @TestMetadata("interfaceDefaultImpls.kt")
        public void testInterfaceDefaultImpls() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/interfaceDefaultImpls.kt", this::doTest);
        }

        @TestMetadata("interfaceWithNonAbstractFunIndirect.kt")
        public void testInterfaceWithNonAbstractFunIndirect() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/interfaceWithNonAbstractFunIndirect.kt", this::doTest);
        }

        @TestMetadata("interfaceWithNonAbstractFunIndirectGeneric.kt")
        public void testInterfaceWithNonAbstractFunIndirectGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/interfaceWithNonAbstractFunIndirectGeneric.kt", this::doTest);
        }

        @TestMetadata("kt1936.kt")
        public void testKt1936() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt1936.kt", this::doTest);
        }

        @TestMetadata("kt1936_1.kt")
        public void testKt1936_1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt1936_1.kt", this::doTest);
        }

        @TestMetadata("kt2260.kt")
        public void testKt2260() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt2260.kt", this::doTest);
        }

        @TestMetadata("kt2399.kt")
        public void testKt2399() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt2399.kt", this::doTest);
        }

        @TestMetadata("kt2541.kt")
        public void testKt2541() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt2541.kt", this::doTest);
        }

        @TestMetadata("kt3315.kt")
        public void testKt3315() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt3315.kt", this::doTest);
        }

        @TestMetadata("kt3500.kt")
        public void testKt3500() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt3500.kt", this::doTest);
        }

        @TestMetadata("kt3579.kt")
        public void testKt3579() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt3579.kt", this::doTest);
        }

        @TestMetadata("kt3579_2.kt")
        public void testKt3579_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt3579_2.kt", this::doTest);
        }

        @TestMetadata("kt5393.kt")
        public void testKt5393() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt5393.kt", this::doTest);
        }

        @TestMetadata("kt5393_property.kt")
        public void testKt5393_property() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/kt5393_property.kt", this::doTest);
        }

        @TestMetadata("multiple.kt")
        public void testMultiple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/multiple.kt", this::doTest);
        }

        @TestMetadata("noPrivateDelegation.kt")
        public void testNoPrivateDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/noPrivateDelegation.kt", this::doTest);
        }

        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/syntheticAccessor.kt", this::doTest);
        }

        @TestMetadata("traitImplDelegationWithCovariantOverride.kt")
        public void testTraitImplDelegationWithCovariantOverride() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/traitImplDelegationWithCovariantOverride.kt", this::doTest);
        }

        @TestMetadata("traitImplDiamond.kt")
        public void testTraitImplDiamond() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/traitImplDiamond.kt", this::doTest);
        }

        @TestMetadata("traitImplGenericDelegation.kt")
        public void testTraitImplGenericDelegation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/traitImplGenericDelegation.kt", this::doTest);
        }

        @TestMetadata("traitWithPrivateExtension.kt")
        public void testTraitWithPrivateExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/traitWithPrivateExtension.kt", this::doTest);
        }

        @TestMetadata("traitWithPrivateMember.kt")
        public void testTraitWithPrivateMember() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/traitWithPrivateMember.kt", this::doTest);
        }

        @TestMetadata("traitWithPrivateMemberAccessFromLambda.kt")
        public void testTraitWithPrivateMemberAccessFromLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/traits/traitWithPrivateMemberAccessFromLambda.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/typeInfo")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeInfo extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInTypeInfo() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/typeInfo"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("asInLoop.kt")
        public void testAsInLoop() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeInfo/asInLoop.kt", this::doTest);
        }

        @TestMetadata("ifOrWhenSpecialCall.kt")
        public void testIfOrWhenSpecialCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeInfo/ifOrWhenSpecialCall.kt", this::doTest);
        }

        @TestMetadata("implicitSmartCastThis.kt")
        public void testImplicitSmartCastThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeInfo/implicitSmartCastThis.kt", this::doTest);
        }

        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeInfo/inheritance.kt", this::doTest);
        }

        @TestMetadata("kt2811.kt")
        public void testKt2811() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeInfo/kt2811.kt", this::doTest);
        }

        @TestMetadata("primitiveTypeInfo.kt")
        public void testPrimitiveTypeInfo() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeInfo/primitiveTypeInfo.kt", this::doTest);
        }

        @TestMetadata("smartCastThis.kt")
        public void testSmartCastThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeInfo/smartCastThis.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/typeMapping")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeMapping extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInTypeMapping() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/typeMapping"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("enhancedPrimitives.kt")
        public void testEnhancedPrimitives() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/enhancedPrimitives.kt", this::doTest);
        }

        @TestMetadata("genericTypeWithNothing.kt")
        public void testGenericTypeWithNothing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/genericTypeWithNothing.kt", this::doTest);
        }

        @TestMetadata("kt2831.kt")
        public void testKt2831() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/kt2831.kt", this::doTest);
        }

        @TestMetadata("kt309.kt")
        public void testKt309() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/kt309.kt", this::doTest);
        }

        @TestMetadata("kt3286.kt")
        public void testKt3286() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/kt3286.kt", this::doTest);
        }

        @TestMetadata("kt3863.kt")
        public void testKt3863() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/kt3863.kt", this::doTest);
        }

        @TestMetadata("kt3976.kt")
        public void testKt3976() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/kt3976.kt", this::doTest);
        }

        @TestMetadata("nothing.kt")
        public void testNothing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/nothing.kt", this::doTest);
        }

        @TestMetadata("nullableNothing.kt")
        public void testNullableNothing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/nullableNothing.kt", this::doTest);
        }

        @TestMetadata("typeParameterMultipleBounds.kt")
        public void testTypeParameterMultipleBounds() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typeMapping/typeParameterMultipleBounds.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/typealias")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Typealias extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInTypealias() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/typealias"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("enumEntryQualifier.kt")
        public void testEnumEntryQualifier() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/enumEntryQualifier.kt", this::doTest);
        }

        @TestMetadata("genericTypeAliasConstructor.kt")
        public void testGenericTypeAliasConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/genericTypeAliasConstructor.kt", this::doTest);
        }

        @TestMetadata("genericTypeAliasConstructor2.kt")
        public void testGenericTypeAliasConstructor2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/genericTypeAliasConstructor2.kt", this::doTest);
        }

        @TestMetadata("innerClassTypeAliasConstructor.kt")
        public void testInnerClassTypeAliasConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/innerClassTypeAliasConstructor.kt", this::doTest);
        }

        @TestMetadata("innerClassTypeAliasConstructorInSupertypes.kt")
        public void testInnerClassTypeAliasConstructorInSupertypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/innerClassTypeAliasConstructorInSupertypes.kt", this::doTest);
        }

        @TestMetadata("kt15109.kt")
        public void testKt15109() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/kt15109.kt", this::doTest);
        }

        @TestMetadata("objectLiteralConstructor.kt")
        public void testObjectLiteralConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/objectLiteralConstructor.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/simple.kt", this::doTest);
        }

        @TestMetadata("typeAliasAsBareType.kt")
        public void testTypeAliasAsBareType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasAsBareType.kt", this::doTest);
        }

        @TestMetadata("typeAliasCompanion.kt")
        public void testTypeAliasCompanion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasCompanion.kt", this::doTest);
        }

        @TestMetadata("typeAliasConstructor.kt")
        public void testTypeAliasConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasConstructor.kt", this::doTest);
        }

        @TestMetadata("typeAliasConstructorAccessor.kt")
        public void testTypeAliasConstructorAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorAccessor.kt", this::doTest);
        }

        @TestMetadata("typeAliasConstructorForArray.kt")
        public void testTypeAliasConstructorForArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorForArray.kt", this::doTest);
        }

        @TestMetadata("typeAliasConstructorInSuperCall.kt")
        public void testTypeAliasConstructorInSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorInSuperCall.kt", this::doTest);
        }

        @TestMetadata("typeAliasInAnonymousObjectType.kt")
        public void testTypeAliasInAnonymousObjectType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasInAnonymousObjectType.kt", this::doTest);
        }

        @TestMetadata("typeAliasObject.kt")
        public void testTypeAliasObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasObject.kt", this::doTest);
        }

        @TestMetadata("typeAliasObjectCallable.kt")
        public void testTypeAliasObjectCallable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasObjectCallable.kt", this::doTest);
        }

        @TestMetadata("typeAliasSecondaryConstructor.kt")
        public void testTypeAliasSecondaryConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/typealias/typeAliasSecondaryConstructor.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/unaryOp")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnaryOp extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInUnaryOp() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/unaryOp"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unaryOp/call.kt", this::doTest);
        }

        @TestMetadata("callNullable.kt")
        public void testCallNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unaryOp/callNullable.kt", this::doTest);
        }

        @TestMetadata("callWithCommonType.kt")
        public void testCallWithCommonType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unaryOp/callWithCommonType.kt", this::doTest);
        }

        @TestMetadata("intrinsic.kt")
        public void testIntrinsic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unaryOp/intrinsic.kt", this::doTest);
        }

        @TestMetadata("intrinsicNullable.kt")
        public void testIntrinsicNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unaryOp/intrinsicNullable.kt", this::doTest);
        }

        @TestMetadata("longOverflow.kt")
        public void testLongOverflow() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unaryOp/longOverflow.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/unit")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Unit extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInUnit() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/unit"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("closureReturnsNullableUnit.kt")
        public void testClosureReturnsNullableUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/closureReturnsNullableUnit.kt", this::doTest);
        }

        @TestMetadata("ifElse.kt")
        public void testIfElse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/ifElse.kt", this::doTest);
        }

        @TestMetadata("kt3634.kt")
        public void testKt3634() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/kt3634.kt", this::doTest);
        }

        @TestMetadata("kt4212.kt")
        public void testKt4212() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/kt4212.kt", this::doTest);
        }

        @TestMetadata("kt4265.kt")
        public void testKt4265() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/kt4265.kt", this::doTest);
        }

        @TestMetadata("nullableUnit.kt")
        public void testNullableUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/nullableUnit.kt", this::doTest);
        }

        @TestMetadata("nullableUnitInWhen1.kt")
        public void testNullableUnitInWhen1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen1.kt", this::doTest);
        }

        @TestMetadata("nullableUnitInWhen2.kt")
        public void testNullableUnitInWhen2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen2.kt", this::doTest);
        }

        @TestMetadata("nullableUnitInWhen3.kt")
        public void testNullableUnitInWhen3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen3.kt", this::doTest);
        }

        @TestMetadata("unitClassObject.kt")
        public void testUnitClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/unitClassObject.kt", this::doTest);
        }

        @TestMetadata("UnitValue.kt")
        public void testUnitValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/unit/UnitValue.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/vararg")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Vararg extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInVararg() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/vararg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("assigningArrayToVarargInAnnotation.kt")
        public void testAssigningArrayToVarargInAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/assigningArrayToVarargInAnnotation.kt", this::doTest);
        }

        @TestMetadata("doNotCopyImmediatelyCreatedArrays.kt")
        public void testDoNotCopyImmediatelyCreatedArrays() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/doNotCopyImmediatelyCreatedArrays.kt", this::doTest);
        }

        @TestMetadata("kt1978.kt")
        public void testKt1978() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/kt1978.kt", this::doTest);
        }

        @TestMetadata("kt581.kt")
        public void testKt581() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/kt581.kt", this::doTest);
        }

        @TestMetadata("kt6192.kt")
        public void testKt6192() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/kt6192.kt", this::doTest);
        }

        @TestMetadata("kt796_797.kt")
        public void testKt796_797() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/kt796_797.kt", this::doTest);
        }

        @TestMetadata("spreadCopiesArray.kt")
        public void testSpreadCopiesArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/spreadCopiesArray.kt", this::doTest);
        }

        @TestMetadata("varargInFunParam.kt")
        public void testVarargInFunParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/varargInFunParam.kt", this::doTest);
        }

        @TestMetadata("varargInJava.kt")
        public void testVarargInJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/varargInJava.kt", this::doTest);
        }

        @TestMetadata("varargsAndFunctionLiterals.kt")
        public void testVarargsAndFunctionLiterals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/vararg/varargsAndFunctionLiterals.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/when")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class When extends AbstractLightAnalysisModeTest {
        public void testAllFilesPresentInWhen() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/when"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("callProperty.kt")
        public void testCallProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/callProperty.kt", this::doTest);
        }

        @TestMetadata("emptyWhen.kt")
        public void testEmptyWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/emptyWhen.kt", this::doTest);
        }

        @TestMetadata("exceptionOnNoMatch.kt")
        public void testExceptionOnNoMatch() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/exceptionOnNoMatch.kt", this::doTest);
        }

        @TestMetadata("exhaustiveBoolean.kt")
        public void testExhaustiveBoolean() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/exhaustiveBoolean.kt", this::doTest);
        }

        @TestMetadata("exhaustiveBreakContinue.kt")
        public void testExhaustiveBreakContinue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/exhaustiveBreakContinue.kt", this::doTest);
        }

        @TestMetadata("exhaustiveWhenInitialization.kt")
        public void testExhaustiveWhenInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/exhaustiveWhenInitialization.kt", this::doTest);
        }

        @TestMetadata("exhaustiveWhenReturn.kt")
        public void testExhaustiveWhenReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/exhaustiveWhenReturn.kt", this::doTest);
        }

        @TestMetadata("implicitExhaustiveAndReturn.kt")
        public void testImplicitExhaustiveAndReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/implicitExhaustiveAndReturn.kt", this::doTest);
        }

        @TestMetadata("integralWhenWithNoInlinedConstants.kt")
        public void testIntegralWhenWithNoInlinedConstants() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/integralWhenWithNoInlinedConstants.kt", this::doTest);
        }

        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/is.kt", this::doTest);
        }

        @TestMetadata("kt2457.kt")
        public void testKt2457() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/kt2457.kt", this::doTest);
        }

        @TestMetadata("kt2466.kt")
        public void testKt2466() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/kt2466.kt", this::doTest);
        }

        @TestMetadata("kt5307.kt")
        public void testKt5307() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/kt5307.kt", this::doTest);
        }

        @TestMetadata("kt5448.kt")
        public void testKt5448() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/kt5448.kt", this::doTest);
        }

        @TestMetadata("longInRange.kt")
        public void testLongInRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/longInRange.kt", this::doTest);
        }

        @TestMetadata("matchNotNullAgainstNullable.kt")
        public void testMatchNotNullAgainstNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/matchNotNullAgainstNullable.kt", this::doTest);
        }

        @TestMetadata("multipleEntries.kt")
        public void testMultipleEntries() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/multipleEntries.kt", this::doTest);
        }

        @TestMetadata("noElseExhaustive.kt")
        public void testNoElseExhaustive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/noElseExhaustive.kt", this::doTest);
        }

        @TestMetadata("noElseExhaustiveStatement.kt")
        public void testNoElseExhaustiveStatement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/noElseExhaustiveStatement.kt", this::doTest);
        }

        @TestMetadata("noElseExhaustiveUnitExpected.kt")
        public void testNoElseExhaustiveUnitExpected() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/noElseExhaustiveUnitExpected.kt", this::doTest);
        }

        @TestMetadata("noElseInStatement.kt")
        public void testNoElseInStatement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/noElseInStatement.kt", this::doTest);
        }

        @TestMetadata("noElseNoMatch.kt")
        public void testNoElseNoMatch() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/noElseNoMatch.kt", this::doTest);
        }

        @TestMetadata("nullableWhen.kt")
        public void testNullableWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/nullableWhen.kt", this::doTest);
        }

        @TestMetadata("range.kt")
        public void testRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/range.kt", this::doTest);
        }

        @TestMetadata("sealedWhenInitialization.kt")
        public void testSealedWhenInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/sealedWhenInitialization.kt", this::doTest);
        }

        @TestMetadata("switchOptimizationDense.kt")
        public void testSwitchOptimizationDense() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/switchOptimizationDense.kt", this::doTest);
        }

        @TestMetadata("switchOptimizationMultipleConditions.kt")
        public void testSwitchOptimizationMultipleConditions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/switchOptimizationMultipleConditions.kt", this::doTest);
        }

        @TestMetadata("switchOptimizationSingleStatementCase.kt")
        public void testSwitchOptimizationSingleStatementCase() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/switchOptimizationSingleStatementCase.kt", this::doTest);
        }

        @TestMetadata("switchOptimizationSparse.kt")
        public void testSwitchOptimizationSparse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/switchOptimizationSparse.kt", this::doTest);
        }

        @TestMetadata("switchOptimizationStatement.kt")
        public void testSwitchOptimizationStatement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/switchOptimizationStatement.kt", this::doTest);
        }

        @TestMetadata("switchOptimizationTypes.kt")
        public void testSwitchOptimizationTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/switchOptimizationTypes.kt", this::doTest);
        }

        @TestMetadata("switchOptimizationUnordered.kt")
        public void testSwitchOptimizationUnordered() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/switchOptimizationUnordered.kt", this::doTest);
        }

        @TestMetadata("switchOptimizationWithGap.kt")
        public void testSwitchOptimizationWithGap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/switchOptimizationWithGap.kt", this::doTest);
        }

        @TestMetadata("typeDisjunction.kt")
        public void testTypeDisjunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/typeDisjunction.kt", this::doTest);
        }

        @TestMetadata("whenArgumentIsEvaluatedOnlyOnce.kt")
        public void testWhenArgumentIsEvaluatedOnlyOnce() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/whenArgumentIsEvaluatedOnlyOnce.kt", this::doTest);
        }

        @TestMetadata("whenSafeCallSubjectEvaluatedOnce.kt")
        public void testWhenSafeCallSubjectEvaluatedOnce() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/box/when/whenSafeCallSubjectEvaluatedOnce.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/box/when/enumOptimization")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class EnumOptimization extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInEnumOptimization() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/when/enumOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("bigEnum.kt")
            public void testBigEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/bigEnum.kt", this::doTest);
            }

            @TestMetadata("duplicatingItems.kt")
            public void testDuplicatingItems() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/duplicatingItems.kt", this::doTest);
            }

            @TestMetadata("enumInsideClassObject.kt")
            public void testEnumInsideClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/enumInsideClassObject.kt", this::doTest);
            }

            @TestMetadata("expression.kt")
            public void testExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/expression.kt", this::doTest);
            }

            @TestMetadata("functionLiteralInTopLevel.kt")
            public void testFunctionLiteralInTopLevel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/functionLiteralInTopLevel.kt", this::doTest);
            }

            @TestMetadata("kt14597.kt")
            public void testKt14597() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/kt14597.kt", this::doTest);
            }

            @TestMetadata("kt14597_full.kt")
            public void testKt14597_full() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/kt14597_full.kt", this::doTest);
            }

            @TestMetadata("kt14802.kt")
            public void testKt14802() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/kt14802.kt", this::doTest);
            }

            @TestMetadata("kt15806.kt")
            public void testKt15806() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/kt15806.kt", this::doTest);
            }

            @TestMetadata("manyWhensWithinClass.kt")
            public void testManyWhensWithinClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/manyWhensWithinClass.kt", this::doTest);
            }

            @TestMetadata("nonConstantEnum.kt")
            public void testNonConstantEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/nonConstantEnum.kt", this::doTest);
            }

            @TestMetadata("nullability.kt")
            public void testNullability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/nullability.kt", this::doTest);
            }

            @TestMetadata("nullableEnum.kt")
            public void testNullableEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/nullableEnum.kt", this::doTest);
            }

            @TestMetadata("subjectAny.kt")
            public void testSubjectAny() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/subjectAny.kt", this::doTest);
            }

            @TestMetadata("withoutElse.kt")
            public void testWithoutElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/enumOptimization/withoutElse.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/box/when/stringOptimization")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class StringOptimization extends AbstractLightAnalysisModeTest {
            public void testAllFilesPresentInStringOptimization() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/when/stringOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
            }

            @TestMetadata("duplicatingItems.kt")
            public void testDuplicatingItems() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItems.kt", this::doTest);
            }

            @TestMetadata("duplicatingItemsSameHashCode.kt")
            public void testDuplicatingItemsSameHashCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode.kt", this::doTest);
            }

            @TestMetadata("expression.kt")
            public void testExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/stringOptimization/expression.kt", this::doTest);
            }

            @TestMetadata("nullability.kt")
            public void testNullability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/stringOptimization/nullability.kt", this::doTest);
            }

            @TestMetadata("sameHashCode.kt")
            public void testSameHashCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/stringOptimization/sameHashCode.kt", this::doTest);
            }

            @TestMetadata("statement.kt")
            public void testStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/when/stringOptimization/statement.kt", this::doTest);
            }
        }
    }
}
