/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class LineNumberTestGenerated extends AbstractLineNumberTest {
    @TestMetadata("compiler/testData/lineNumber")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LineNumber extends AbstractLineNumberTest {
        public void testAllFilesPresentInLineNumber() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/lineNumber"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, false);
        }

        @TestMetadata("anonymousFunction.kt")
        public void testAnonymousFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/anonymousFunction.kt", this::doTest);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/class.kt", this::doTest);
        }

        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/classObject.kt", this::doTest);
        }

        @TestMetadata("defaultParameter.kt")
        public void testDefaultParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/defaultParameter.kt", this::doTest);
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/enum.kt", this::doTest);
        }

        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/for.kt", this::doTest);
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/if.kt", this::doTest);
        }

        @TestMetadata("inlineSimpleCall.kt")
        public void testInlineSimpleCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/inlineSimpleCall.kt", this::doTest);
        }

        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/localFunction.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/object.kt", this::doTest);
        }

        @TestMetadata("propertyAccessor.kt")
        public void testPropertyAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/propertyAccessor.kt", this::doTest);
        }

        @TestMetadata("psvm.kt")
        public void testPsvm() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/psvm.kt", this::doTest);
        }

        @TestMetadata("simpleSmap.kt")
        public void testSimpleSmap() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/simpleSmap.kt", this::doTest);
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/topLevel.kt", this::doTest);
        }

        @TestMetadata("trait.kt")
        public void testTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/trait.kt", this::doTest);
        }

        @TestMetadata("tryCatch.kt")
        public void testTryCatch() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/tryCatch.kt", this::doTest);
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/while.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/lineNumber/custom")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Custom extends AbstractLineNumberTest {
        public void testAllFilesPresentInCustom() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/lineNumber/custom"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("beforeGotoToWhileStart.kt")
        public void testBeforeGotoToWhileStart() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/beforeGotoToWhileStart.kt", this::doTestCustom);
        }

        @TestMetadata("callWithCallInArguments.kt")
        public void testCallWithCallInArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/callWithCallInArguments.kt", this::doTestCustom);
        }

        @TestMetadata("callWithReceiver.kt")
        public void testCallWithReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/callWithReceiver.kt", this::doTestCustom);
        }

        @TestMetadata("chainCall.kt")
        public void testChainCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/chainCall.kt", this::doTestCustom);
        }

        @TestMetadata("compileTimeConstant.kt")
        public void testCompileTimeConstant() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/compileTimeConstant.kt", this::doTestCustom);
        }

        @TestMetadata("functionCallWithDefault.kt")
        public void testFunctionCallWithDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/functionCallWithDefault.kt", this::doTestCustom);
        }

        @TestMetadata("functionCallWithInlinedLambdaParam.kt")
        public void testFunctionCallWithInlinedLambdaParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/functionCallWithInlinedLambdaParam.kt", this::doTestCustom);
        }

        @TestMetadata("functionCallWithLambdaParam.kt")
        public void testFunctionCallWithLambdaParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/functionCallWithLambdaParam.kt", this::doTestCustom);
        }

        @TestMetadata("ifThen.kt")
        public void testIfThen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/ifThen.kt", this::doTestCustom);
        }

        @TestMetadata("ifThenElse.kt")
        public void testIfThenElse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/ifThenElse.kt", this::doTestCustom);
        }

        @TestMetadata("inTheEndOfLambdaArgumentOfInlineCall.kt")
        public void testInTheEndOfLambdaArgumentOfInlineCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/inTheEndOfLambdaArgumentOfInlineCall.kt", this::doTestCustom);
        }

        @TestMetadata("multilineFunctionCall.kt")
        public void testMultilineFunctionCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/multilineFunctionCall.kt", this::doTestCustom);
        }

        @TestMetadata("multilineInfixCall.kt")
        public void testMultilineInfixCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/multilineInfixCall.kt", this::doTestCustom);
        }

        @TestMetadata("noParametersArgumentCallInExpression.kt")
        public void testNoParametersArgumentCallInExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/noParametersArgumentCallInExpression.kt", this::doTestCustom);
        }

        @TestMetadata("smapInlineAsArgument.kt")
        public void testSmapInlineAsArgument() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/smapInlineAsArgument.kt", this::doTestCustom);
        }

        @TestMetadata("smapInlineAsInfixArgument.kt")
        public void testSmapInlineAsInfixArgument() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/smapInlineAsInfixArgument.kt", this::doTestCustom);
        }

        @TestMetadata("smapInlineAsInlineArgument.kt")
        public void testSmapInlineAsInlineArgument() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/smapInlineAsInlineArgument.kt", this::doTestCustom);
        }

        @TestMetadata("smapInlineInIntrinsicArgument.kt")
        public void testSmapInlineInIntrinsicArgument() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/smapInlineInIntrinsicArgument.kt", this::doTestCustom);
        }

        @TestMetadata("tryCatchExpression.kt")
        public void testTryCatchExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/tryCatchExpression.kt", this::doTestCustom);
        }

        @TestMetadata("tryCatchFinally.kt")
        public void testTryCatchFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/tryCatchFinally.kt", this::doTestCustom);
        }

        @TestMetadata("tryFinally.kt")
        public void testTryFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/tryFinally.kt", this::doTestCustom);
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/when.kt", this::doTestCustom);
        }

        @TestMetadata("whenSubject.kt")
        public void testWhenSubject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/lineNumber/custom/whenSubject.kt", this::doTestCustom);
        }
    }
}
