/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen.ir;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/ir/box")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IrOnlyBoxCodegenTestGenerated extends AbstractIrBlackBoxCodegenTest {
    public void testAllFilesPresentInBox() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/ir/box"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
    }

    @TestMetadata("classInitializers.kt")
    public void testClassInitializers() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/ir/box/classInitializers.kt", this::doTest);
    }

    @TestMetadata("enumClass.kt")
    public void testEnumClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/ir/box/enumClass.kt", this::doTest);
    }

    @TestMetadata("enumClass2.kt")
    public void testEnumClass2() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/ir/box/enumClass2.kt", this::doTest);
    }

    @TestMetadata("enumClass3.kt")
    public void testEnumClass3() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/ir/box/enumClass3.kt", this::doTest);
    }

    @TestMetadata("fileClassInitializers.kt")
    public void testFileClassInitializers() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/ir/box/fileClassInitializers.kt", this::doTest);
    }

    @TestMetadata("objectClass.kt")
    public void testObjectClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/ir/box/objectClass.kt", this::doTest);
    }

    @TestMetadata("simple.kt")
    public void testSimple() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/ir/box/simple.kt", this::doTest);
    }

    @TestMetadata("compiler/testData/ir/box/closureConversion")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClosureConversion extends AbstractIrBlackBoxCodegenTest {
        public void testAllFilesPresentInClosureConversion() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/ir/box/closureConversion"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("closureConversion1.kt")
        public void testClosureConversion1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/closureConversion/closureConversion1.kt", this::doTest);
        }

        @TestMetadata("closureConversion2.kt")
        public void testClosureConversion2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/closureConversion/closureConversion2.kt", this::doTest);
        }

        @TestMetadata("closureConversion3.kt")
        public void testClosureConversion3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/closureConversion/closureConversion3.kt", this::doTest);
        }

        @TestMetadata("closureConversion4.kt")
        public void testClosureConversion4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/closureConversion/closureConversion4.kt", this::doTest);
        }

        @TestMetadata("innerClass1.kt")
        public void testInnerClass1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/closureConversion/innerClass1.kt", this::doTest);
        }

        @TestMetadata("innerClass2.kt")
        public void testInnerClass2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/closureConversion/innerClass2.kt", this::doTest);
        }

        @TestMetadata("mutable1.kt")
        public void testMutable1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/closureConversion/mutable1.kt", this::doTest);
        }

        @TestMetadata("mutablePrimitives.kt")
        public void testMutablePrimitives() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/closureConversion/mutablePrimitives.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/ir/box/primitiveNumberComparisons")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PrimitiveNumberComparisons extends AbstractIrBlackBoxCodegenTest {
        public void testAllFilesPresentInPrimitiveNumberComparisons() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/ir/box/primitiveNumberComparisons"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.JVM, true);
        }

        @TestMetadata("comparableToDouble.kt")
        public void testComparableToDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/primitiveNumberComparisons/comparableToDouble.kt", this::doTest);
        }

        @TestMetadata("doubleEqeq.kt")
        public void testDoubleEqeq() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/primitiveNumberComparisons/doubleEqeq.kt", this::doTest);
        }

        @TestMetadata("floatEqeq.kt")
        public void testFloatEqeq() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/primitiveNumberComparisons/floatEqeq.kt", this::doTest);
        }

        @TestMetadata("mixedNumberTypes.kt")
        public void testMixedNumberTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/ir/box/primitiveNumberComparisons/mixedNumberTypes.kt", this::doTest);
        }
    }
}
