/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/checkLocalVariablesTable")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class CheckLocalVariablesTableTestGenerated extends AbstractCheckLocalVariablesTableTest {
    public void testAllFilesPresentInCheckLocalVariablesTable() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/checkLocalVariablesTable"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("catchClause.kt")
    public void testCatchClause() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/catchClause.kt");
    }

    @TestMetadata("copyFunction.kt")
    public void testCopyFunction() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/copyFunction.kt");
    }

    @TestMetadata("destructuringInLambdas.kt")
    public void testDestructuringInLambdas() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/destructuringInLambdas.kt");
    }

    @TestMetadata("destructuringInlineLambda.kt")
    public void testDestructuringInlineLambda() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/destructuringInlineLambda.kt");
    }

    @TestMetadata("inlineLambdaWithItParam.kt")
    public void testInlineLambdaWithItParam() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/inlineLambdaWithItParam.kt");
    }

    @TestMetadata("inlineLambdaWithParam.kt")
    public void testInlineLambdaWithParam() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/inlineLambdaWithParam.kt");
    }

    @TestMetadata("inlineProperty.kt")
    public void testInlineProperty() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/inlineProperty.kt");
    }

    @TestMetadata("inlineSimple.kt")
    public void testInlineSimple() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/inlineSimple.kt");
    }

    @TestMetadata("inlineSimpleChain.kt")
    public void testInlineSimpleChain() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/inlineSimpleChain.kt");
    }

    @TestMetadata("itInLambda.kt")
    public void testItInLambda() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/itInLambda.kt");
    }

    @TestMetadata("itInReturnedLambda.kt")
    public void testItInReturnedLambda() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/itInReturnedLambda.kt");
    }

    @TestMetadata("jvmOverloads.kt")
    public void testJvmOverloads() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/jvmOverloads.kt");
    }

    @TestMetadata("kt11117.kt")
    public void testKt11117() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/kt11117.kt");
    }

    @TestMetadata("lambdaAsVar.kt")
    public void testLambdaAsVar() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/lambdaAsVar.kt");
    }

    @TestMetadata("localFun.kt")
    public void testLocalFun() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/localFun.kt");
    }

    @TestMetadata("underscoreNames.kt")
    public void testUnderscoreNames() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "compiler/testData/checkLocalVariablesTable/underscoreNames.kt");
    }
}
