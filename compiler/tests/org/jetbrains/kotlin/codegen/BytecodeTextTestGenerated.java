/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/bytecodeText")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class BytecodeTextTestGenerated extends AbstractBytecodeTextTest {
    @TestMetadata("accessorForOverridenVal.kt")
    public void testAccessorForOverridenVal() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/accessorForOverridenVal.kt", this::doTest);
    }

    @TestMetadata("accessorForProtected.kt")
    public void testAccessorForProtected() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/accessorForProtected.kt", this::doTest);
    }

    @TestMetadata("accessorNaming.kt")
    public void testAccessorNaming() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/accessorNaming.kt", this::doTest);
    }

    public void testAllFilesPresentInBytecodeText() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("annotationDefaultValue.kt")
    public void testAnnotationDefaultValue() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/annotationDefaultValue.kt", this::doTest);
    }

    @TestMetadata("annotationJavaRetentionPolicyRuntime.kt")
    public void testAnnotationJavaRetentionPolicyRuntime() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/annotationJavaRetentionPolicyRuntime.kt", this::doTest);
    }

    @TestMetadata("annotationRetentionPolicyClass.kt")
    public void testAnnotationRetentionPolicyClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/annotationRetentionPolicyClass.kt", this::doTest);
    }

    @TestMetadata("annotationRetentionPolicyRuntime.kt")
    public void testAnnotationRetentionPolicyRuntime() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/annotationRetentionPolicyRuntime.kt", this::doTest);
    }

    @TestMetadata("annotationRetentionPolicySource.kt")
    public void testAnnotationRetentionPolicySource() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/annotationRetentionPolicySource.kt", this::doTest);
    }

    @TestMetadata("boxedNotNumberTypeOnUnboxing.kt")
    public void testBoxedNotNumberTypeOnUnboxing() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxedNotNumberTypeOnUnboxing.kt", this::doTest);
    }

    @TestMetadata("bridgeForFakeOverride.kt")
    public void testBridgeForFakeOverride() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/bridgeForFakeOverride.kt", this::doTest);
    }

    @TestMetadata("charConstant.kt")
    public void testCharConstant() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/charConstant.kt", this::doTest);
    }

    @TestMetadata("componentEvaluatesOnlyOnce.kt")
    public void testComponentEvaluatesOnlyOnce() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/componentEvaluatesOnlyOnce.kt", this::doTest);
    }

    @TestMetadata("constClosureOptimization.kt")
    public void testConstClosureOptimization() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constClosureOptimization.kt", this::doTest);
    }

    @TestMetadata("constCoroutine.kt")
    public void testConstCoroutine() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constCoroutine.kt", this::doTest);
    }

    @TestMetadata("defaultMethodBody.kt")
    public void testDefaultMethodBody() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/defaultMethodBody.kt", this::doTest);
    }

    @TestMetadata("doNotStoreNullForTmpInDestructuring.kt")
    public void testDoNotStoreNullForTmpInDestructuring() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/doNotStoreNullForTmpInDestructuring.kt", this::doTest);
    }

    @TestMetadata("doNotStoreNullsForCapturedVars.kt")
    public void testDoNotStoreNullsForCapturedVars() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/doNotStoreNullsForCapturedVars.kt", this::doTest);
    }

    @TestMetadata("falseSmartCast.kt")
    public void testFalseSmartCast() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/falseSmartCast.kt", this::doTest);
    }

    @TestMetadata("inlineFromOtherModule.kt")
    public void testInlineFromOtherModule() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineFromOtherModule.kt", this::doTest);
    }

    @TestMetadata("inlineJavaConstantFromSubclass.kt")
    public void testInlineJavaConstantFromSubclass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineJavaConstantFromSubclass.kt", this::doTest);
    }

    @TestMetadata("inlineJavaStaticFields.kt")
    public void testInlineJavaStaticFields() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineJavaStaticFields.kt", this::doTest);
    }

    @TestMetadata("inlineProtectedJavaConstantFromOtherPackage.kt")
    public void testInlineProtectedJavaConstantFromOtherPackage() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineProtectedJavaConstantFromOtherPackage.kt", this::doTest);
    }

    @TestMetadata("intConstantNotNull.kt")
    public void testIntConstantNotNull() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intConstantNotNull.kt", this::doTest);
    }

    @TestMetadata("intConstantNullable.kt")
    public void testIntConstantNullable() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intConstantNullable.kt", this::doTest);
    }

    @TestMetadata("intConstantNullableSafeCall.kt")
    public void testIntConstantNullableSafeCall() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intConstantNullableSafeCall.kt", this::doTest);
    }

    @TestMetadata("intConstantSafeCall.kt")
    public void testIntConstantSafeCall() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intConstantSafeCall.kt", this::doTest);
    }

    @TestMetadata("intRangeNoBoxing.kt")
    public void testIntRangeNoBoxing() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intRangeNoBoxing.kt", this::doTest);
    }

    @TestMetadata("interfaceDefaultImpl.kt")
    public void testInterfaceDefaultImpl() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/interfaceDefaultImpl.kt", this::doTest);
    }

    @TestMetadata("isArrayOf.kt")
    public void testIsArrayOf() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/isArrayOf.kt", this::doTest);
    }

    @TestMetadata("javaExtensionPropertyIntrinsic.kt")
    public void testJavaExtensionPropertyIntrinsic() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/javaExtensionPropertyIntrinsic.kt", this::doTest);
    }

    @TestMetadata("javaStatics.kt")
    public void testJavaStatics() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/javaStatics.kt", this::doTest);
    }

    @TestMetadata("jvmField.kt")
    public void testJvmField() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/jvmField.kt", this::doTest);
    }

    @TestMetadata("kt10259.kt")
    public void testKt10259() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt10259.kt", this::doTest);
    }

    @TestMetadata("kt10259_2.kt")
    public void testKt10259_2() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt10259_2.kt", this::doTest);
    }

    @TestMetadata("kt10259_3.kt")
    public void testKt10259_3() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt10259_3.kt", this::doTest);
    }

    @TestMetadata("kt2202.kt")
    public void testKt2202() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt2202.kt", this::doTest);
    }

    @TestMetadata("kt2887.kt")
    public void testKt2887() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt2887.kt", this::doTest);
    }

    @TestMetadata("kt3845.kt")
    public void testKt3845() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt3845.kt", this::doTest);
    }

    @TestMetadata("kt5016.kt")
    public void testKt5016() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt5016.kt", this::doTest);
    }

    @TestMetadata("kt5016int.kt")
    public void testKt5016int() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt5016int.kt", this::doTest);
    }

    @TestMetadata("kt5016intOrNull.kt")
    public void testKt5016intOrNull() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt5016intOrNull.kt", this::doTest);
    }

    @TestMetadata("kt7188.kt")
    public void testKt7188() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt7188.kt", this::doTest);
    }

    @TestMetadata("kt7769.kt")
    public void testKt7769() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt7769.kt", this::doTest);
    }

    @TestMetadata("kt9603.kt")
    public void testKt9603() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/kt9603.kt", this::doTest);
    }

    @TestMetadata("maxStackAfterOptimizations.kt")
    public void testMaxStackAfterOptimizations() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/maxStackAfterOptimizations.kt", this::doTest);
    }

    @TestMetadata("noFlagAnnotations.kt")
    public void testNoFlagAnnotations() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/noFlagAnnotations.kt", this::doTest);
    }

    @TestMetadata("noInlineJavaProtectedConstants.kt")
    public void testNoInlineJavaProtectedConstants() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/noInlineJavaProtectedConstants.kt", this::doTest);
    }

    @TestMetadata("noNumberCheckCast.kt")
    public void testNoNumberCheckCast() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/noNumberCheckCast.kt", this::doTest);
    }

    @TestMetadata("noSuperCheckInDefaultConstuctor.kt")
    public void testNoSuperCheckInDefaultConstuctor() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/noSuperCheckInDefaultConstuctor.kt", this::doTest);
    }

    @TestMetadata("noWrapperForMethodReturningPrimitive.kt")
    public void testNoWrapperForMethodReturningPrimitive() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/noWrapperForMethodReturningPrimitive.kt", this::doTest);
    }

    @TestMetadata("nopsInDoWhile.kt")
    public void testNopsInDoWhile() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nopsInDoWhile.kt", this::doTest);
    }

    @TestMetadata("partMembersCall.kt")
    public void testPartMembersCall() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/partMembersCall.kt", this::doTest);
    }

    @TestMetadata("partMembersInline.kt")
    public void testPartMembersInline() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/partMembersInline.kt", this::doTest);
    }

    @TestMetadata("preEvaluateInlineJavaStaticFields.kt")
    public void testPreEvaluateInlineJavaStaticFields() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/preEvaluateInlineJavaStaticFields.kt", this::doTest);
    }

    @TestMetadata("prefixIntVarIncrement.kt")
    public void testPrefixIntVarIncrement() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/prefixIntVarIncrement.kt", this::doTest);
    }

    @TestMetadata("privateDefaultArgs.kt")
    public void testPrivateDefaultArgs() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/privateDefaultArgs.kt", this::doTest);
    }

    @TestMetadata("redundantGotoRemoving.kt")
    public void testRedundantGotoRemoving() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/redundantGotoRemoving.kt", this::doTest);
    }

    @TestMetadata("redundantInitializer.kt")
    public void testRedundantInitializer() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/redundantInitializer.kt", this::doTest);
    }

    @TestMetadata("redundantInitializerNumber.kt")
    public void testRedundantInitializerNumber() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/redundantInitializerNumber.kt", this::doTest);
    }

    @TestMetadata("reifiedAsCheck.kt")
    public void testReifiedAsCheck() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/reifiedAsCheck.kt", this::doTest);
    }

    @TestMetadata("reifiedAsCheckWithNullable.kt")
    public void testReifiedAsCheckWithNullable() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/reifiedAsCheckWithNullable.kt", this::doTest);
    }

    @TestMetadata("reifiedIsCheck.kt")
    public void testReifiedIsCheck() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/reifiedIsCheck.kt", this::doTest);
    }

    @TestMetadata("reifiedIsCheckWithNullable.kt")
    public void testReifiedIsCheckWithNullable() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/reifiedIsCheckWithNullable.kt", this::doTest);
    }

    @TestMetadata("safeAsWithMutable.kt")
    public void testSafeAsWithMutable() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/safeAsWithMutable.kt", this::doTest);
    }

    @TestMetadata("superFlagInMultiFileFacade.kt")
    public void testSuperFlagInMultiFileFacade() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/superFlagInMultiFileFacade.kt", this::doTest);
    }

    @TestMetadata("topLevelFunWithDefaultArgs.kt")
    public void testTopLevelFunWithDefaultArgs() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/topLevelFunWithDefaultArgs.kt", this::doTest);
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/argumentOrder")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ArgumentOrder extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInArgumentOrder() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/argumentOrder"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("argumentReorder.kt")
        public void testArgumentReorder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/argumentOrder/argumentReorder.kt", this::doTest);
        }

        @TestMetadata("argumentReorderWithDefault.kt")
        public void testArgumentReorderWithDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/argumentOrder/argumentReorderWithDefault.kt", this::doTest);
        }

        @TestMetadata("sameOrder.kt")
        public void testSameOrder() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/argumentOrder/sameOrder.kt", this::doTest);
        }

        @TestMetadata("sameOrderWithDefault.kt")
        public void testSameOrderWithDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/argumentOrder/sameOrderWithDefault.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/boxingOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BoxingOptimization extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInBoxingOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/boxingOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("boxingAndEquals.kt")
        public void testBoxingAndEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/boxingAndEquals.kt", this::doTest);
        }

        @TestMetadata("casts.kt")
        public void testCasts() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/casts.kt", this::doTest);
        }

        @TestMetadata("checkcastAndInstanceOf.kt")
        public void testCheckcastAndInstanceOf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/checkcastAndInstanceOf.kt", this::doTest);
        }

        @TestMetadata("fold.kt")
        public void testFold() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/fold.kt", this::doTest);
        }

        @TestMetadata("intCompareTo.kt")
        public void testIntCompareTo() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/intCompareTo.kt", this::doTest);
        }

        @TestMetadata("kClassInAnnotation.kt")
        public void testKClassInAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/kClassInAnnotation.kt", this::doTest);
        }

        @TestMetadata("kClassInAnnotationEscaping.kt")
        public void testKClassInAnnotationEscaping() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/kClassInAnnotationEscaping.kt", this::doTest);
        }

        @TestMetadata("kt15862.kt")
        public void testKt15862() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/kt15862.kt", this::doTest);
        }

        @TestMetadata("kt15862_2.kt")
        public void testKt15862_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/kt15862_2.kt", this::doTest);
        }

        @TestMetadata("kt6842.kt")
        public void testKt6842() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/kt6842.kt", this::doTest);
        }

        @TestMetadata("kt7224.kt")
        public void testKt7224() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/kt7224.kt", this::doTest);
        }

        @TestMetadata("maxMinBy.kt")
        public void testMaxMinBy() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/maxMinBy.kt", this::doTest);
        }

        @TestMetadata("nullCheck.kt")
        public void testNullCheck() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/nullCheck.kt", this::doTest);
        }

        @TestMetadata("progressions.kt")
        public void testProgressions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/progressions.kt", this::doTest);
        }

        @TestMetadata("safeCallToPrimitiveEquality.kt")
        public void testSafeCallToPrimitiveEquality() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/safeCallToPrimitiveEquality.kt", this::doTest);
        }

        @TestMetadata("safeCallWithElvis.kt")
        public void testSafeCallWithElvis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/safeCallWithElvis.kt", this::doTest);
        }

        @TestMetadata("severalInlines.kt")
        public void testSeveralInlines() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/severalInlines.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/simple.kt", this::doTest);
        }

        @TestMetadata("simpleUninitializedMerge.kt")
        public void testSimpleUninitializedMerge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/simpleUninitializedMerge.kt", this::doTest);
        }

        @TestMetadata("unsafeRemoving.kt")
        public void testUnsafeRemoving() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/unsafeRemoving.kt", this::doTest);
        }

        @TestMetadata("variableClash.kt")
        public void testVariableClash() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/variableClash.kt", this::doTest);
        }

        @TestMetadata("variables.kt")
        public void testVariables() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/boxingOptimization/variables.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/builtinFunctions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BuiltinFunctions extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInBuiltinFunctions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/builtinFunctions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("charSequence.kt")
        public void testCharSequence() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/charSequence.kt", this::doTest);
        }

        @TestMetadata("contains.kt")
        public void testContains() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/contains.kt", this::doTest);
        }

        @TestMetadata("removeAt.kt")
        public void testRemoveAt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/removeAt.kt", this::doTest);
        }

        @TestMetadata("size.kt")
        public void testSize() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/size.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class GenericParameterBridge extends AbstractBytecodeTextTest {
            @TestMetadata("abstractList.kt")
            public void testAbstractList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge/abstractList.kt", this::doTest);
            }

            public void testAllFilesPresentInGenericParameterBridge() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("IntMC.kt")
            public void testIntMC() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge/IntMC.kt", this::doTest);
            }

            @TestMetadata("mutableCollection.kt")
            public void testMutableCollection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge/mutableCollection.kt", this::doTest);
            }

            @TestMetadata("mutableSetInterfaces.kt")
            public void testMutableSetInterfaces() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge/mutableSetInterfaces.kt", this::doTest);
            }

            @TestMetadata("notNullAnyMC.kt")
            public void testNotNullAnyMC() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge/notNullAnyMC.kt", this::doTest);
            }

            @TestMetadata("notNullParamMC.kt")
            public void testNotNullParamMC() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge/notNullParamMC.kt", this::doTest);
            }

            @TestMetadata("nullableAnyMC.kt")
            public void testNullableAnyMC() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/builtinFunctions/genericParameterBridge/nullableAnyMC.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReference extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInCallableReference() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/callableReference/inline.kt", this::doTest);
        }

        @TestMetadata("nameIntrinsicWithImplicitThis.kt")
        public void testNameIntrinsicWithImplicitThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/callableReference/nameIntrinsicWithImplicitThis.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/capturedVarsOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CapturedVarsOptimization extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInCapturedVarsOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/capturedVarsOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("capturedInChainOfInlineFuns.kt")
        public void testCapturedInChainOfInlineFuns() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/capturedVarsOptimization/capturedInChainOfInlineFuns.kt", this::doTest);
        }

        @TestMetadata("capturedInInlineOnly.kt")
        public void testCapturedInInlineOnly() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/capturedVarsOptimization/capturedInInlineOnly.kt", this::doTest);
        }

        @TestMetadata("capturedInLocalObject.kt")
        public void testCapturedInLocalObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/capturedVarsOptimization/capturedInLocalObject.kt", this::doTest);
        }

        @TestMetadata("capturedInNoInlineOnly.kt")
        public void testCapturedInNoInlineOnly() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/capturedVarsOptimization/capturedInNoInlineOnly.kt", this::doTest);
        }

        @TestMetadata("capturedInNoInlneInsideChainOfInlineFuns.kt")
        public void testCapturedInNoInlneInsideChainOfInlineFuns() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/capturedVarsOptimization/capturedInNoInlneInsideChainOfInlineFuns.kt", this::doTest);
        }

        @TestMetadata("capturedVarsOfSize2.kt")
        public void testCapturedVarsOfSize2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/capturedVarsOptimization/capturedVarsOfSize2.kt", this::doTest);
        }

        @TestMetadata("sharedSlotsWithCapturedVars.kt")
        public void testSharedSlotsWithCapturedVars() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/capturedVarsOptimization/sharedSlotsWithCapturedVars.kt", this::doTest);
        }

        @TestMetadata("withStackNormalization.kt")
        public void testWithStackNormalization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/capturedVarsOptimization/withStackNormalization.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/checkcast")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Checkcast extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInCheckcast() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/checkcast"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt14811.kt")
        public void testKt14811() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/checkcast/kt14811.kt", this::doTest);
        }

        @TestMetadata("kt14963.kt")
        public void testKt14963() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/checkcast/kt14963.kt", this::doTest);
        }

        @TestMetadata("kt15411.kt")
        public void testKt15411() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/checkcast/kt15411.kt", this::doTest);
        }

        @TestMetadata("kt22714.kt")
        public void testKt22714() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/checkcast/kt22714.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CoercionToUnitOptimization extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInCoercionToUnitOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("inRangeCheckWithConst.kt")
        public void testInRangeCheckWithConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/inRangeCheckWithConst.kt", this::doTest);
        }

        @TestMetadata("kt14360.kt")
        public void testKt14360() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/kt14360.kt", this::doTest);
        }

        @TestMetadata("largeMethodWithCoercionToUnit.kt")
        public void testLargeMethodWithCoercionToUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/largeMethodWithCoercionToUnit.kt", this::doTest);
        }

        @TestMetadata("nopInlineFuns.kt")
        public void testNopInlineFuns() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/nopInlineFuns.kt", this::doTest);
        }

        @TestMetadata("returnsUnit.kt")
        public void testReturnsUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/returnsUnit.kt", this::doTest);
        }

        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/safeCall.kt", this::doTest);
        }

        @TestMetadata("safeCallWithReturnValue.kt")
        public void testSafeCallWithReturnValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/safeCallWithReturnValue.kt", this::doTest);
        }

        @TestMetadata("safeLet.kt")
        public void testSafeLet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/safeLet.kt", this::doTest);
        }

        @TestMetadata("tryInlined.kt")
        public void testTryInlined() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coercionToUnitOptimization/tryInlined.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/companion")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Companion extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInCompanion() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/companion"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt14258_1.kt")
        public void testKt14258_1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/companion/kt14258_1.kt", this::doTest);
        }

        @TestMetadata("kt14258_2.kt")
        public void testKt14258_2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/companion/kt14258_2.kt", this::doTest);
        }

        @TestMetadata("kt14258_3.kt")
        public void testKt14258_3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/companion/kt14258_3.kt", this::doTest);
        }

        @TestMetadata("kt14258_4.kt")
        public void testKt14258_4() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/companion/kt14258_4.kt", this::doTest);
        }

        @TestMetadata("kt14258_5.kt")
        public void testKt14258_5() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/companion/kt14258_5.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/conditions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Conditions extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInConditions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/conditions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("conjuction.kt")
        public void testConjuction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/conjuction.kt", this::doTest);
        }

        @TestMetadata("disjunction.kt")
        public void testDisjunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/disjunction.kt", this::doTest);
        }

        @TestMetadata("negatedConjuction.kt")
        public void testNegatedConjuction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/negatedConjuction.kt", this::doTest);
        }

        @TestMetadata("negatedDisjunction.kt")
        public void testNegatedDisjunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/negatedDisjunction.kt", this::doTest);
        }

        @TestMetadata("negatedNullCompare.kt")
        public void testNegatedNullCompare() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/negatedNullCompare.kt", this::doTest);
        }

        @TestMetadata("negatedZeroCompare.kt")
        public void testNegatedZeroCompare() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/negatedZeroCompare.kt", this::doTest);
        }

        @TestMetadata("noBoxingForBoxedEqPrimitive.kt")
        public void testNoBoxingForBoxedEqPrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/noBoxingForBoxedEqPrimitive.kt", this::doTest);
        }

        @TestMetadata("noBoxingForPrimitiveEqBoxed.kt")
        public void testNoBoxingForPrimitiveEqBoxed() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/noBoxingForPrimitiveEqBoxed.kt", this::doTest);
        }

        @TestMetadata("noBoxingForPrimitiveEqObject.kt")
        public void testNoBoxingForPrimitiveEqObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/noBoxingForPrimitiveEqObject.kt", this::doTest);
        }

        @TestMetadata("nullCompare.kt")
        public void testNullCompare() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/nullCompare.kt", this::doTest);
        }

        @TestMetadata("zeroCompare.kt")
        public void testZeroCompare() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/conditions/zeroCompare.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/constProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConstProperty extends AbstractBytecodeTextTest {
        @TestMetadata("accessorsForPrivateConstants.kt")
        public void testAccessorsForPrivateConstants() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constProperty/accessorsForPrivateConstants.kt", this::doTest);
        }

        public void testAllFilesPresentInConstProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/constProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("noAccessorsForPrivateConstants.kt")
        public void testNoAccessorsForPrivateConstants() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constProperty/noAccessorsForPrivateConstants.kt", this::doTest);
        }

        @TestMetadata("noInline.kt")
        public void testNoInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constProperty/noInline.kt", this::doTest);
        }

        @TestMetadata("noInlineInCmp.kt")
        public void testNoInlineInCmp() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constProperty/noInlineInCmp.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/constantConditions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConstantConditions extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInConstantConditions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/constantConditions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("cmpIntWith0.kt")
        public void testCmpIntWith0() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constantConditions/cmpIntWith0.kt", this::doTest);
        }

        @TestMetadata("constantFlag.kt")
        public void testConstantFlag() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constantConditions/constantFlag.kt", this::doTest);
        }

        @TestMetadata("constantInt.kt")
        public void testConstantInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constantConditions/constantInt.kt", this::doTest);
        }

        @TestMetadata("inlineIfFalse.kt")
        public void testInlineIfFalse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constantConditions/inlineIfFalse.kt", this::doTest);
        }

        @TestMetadata("kt3098.kt")
        public void testKt3098() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constantConditions/kt3098.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/constants")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constants extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInConstants() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/constants"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("byte.kt")
        public void testByte() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/byte.kt", this::doTest);
        }

        @TestMetadata("kt9532.kt")
        public void testKt9532() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/kt9532.kt", this::doTest);
        }

        @TestMetadata("noInlineNonConst.kt")
        public void testNoInlineNonConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/noInlineNonConst.kt", this::doTest);
        }

        @TestMetadata("noInlineNonStaticJavaField.kt")
        public void testNoInlineNonStaticJavaField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/noInlineNonStaticJavaField.kt", this::doTest);
        }

        @TestMetadata("noInlineNonStaticJavaField_lv10.kt")
        public void testNoInlineNonStaticJavaField_lv10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/noInlineNonStaticJavaField_lv10.kt", this::doTest);
        }

        @TestMetadata("noInlineNonStaticJavaField_lv11.kt")
        public void testNoInlineNonStaticJavaField_lv11() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/noInlineNonStaticJavaField_lv11.kt", this::doTest);
        }

        @TestMetadata("nullableByteAndShort.kt")
        public void testNullableByteAndShort() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/nullableByteAndShort.kt", this::doTest);
        }

        @TestMetadata("partialString.kt")
        public void testPartialString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/partialString.kt", this::doTest);
        }

        @TestMetadata("short.kt")
        public void testShort() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/short.kt", this::doTest);
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/constants/string.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/controlStructures")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ControlStructures extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInControlStructures() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/controlStructures"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt17110.kt")
        public void testKt17110() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/controlStructures/kt17110.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Coroutines extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInCoroutines() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/coroutines"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("doNotReassignContinuation.kt")
        public void testDoNotReassignContinuation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/doNotReassignContinuation.kt", this::doTest);
        }

        @TestMetadata("returnUnitInLambda.kt")
        public void testReturnUnitInLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/returnUnitInLambda.kt", this::doTest);
        }

        @TestMetadata("varValueConflictsWithTable.kt")
        public void testVarValueConflictsWithTable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/varValueConflictsWithTable.kt", this::doTest);
        }

        @TestMetadata("varValueConflictsWithTableSameSort.kt")
        public void testVarValueConflictsWithTableSameSort() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/varValueConflictsWithTableSameSort.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IntLikeVarSpilling extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInIntLikeVarSpilling() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("complicatedMerge.kt")
            public void testComplicatedMerge() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/complicatedMerge.kt", this::doTest);
            }

            @TestMetadata("i2bResult.kt")
            public void testI2bResult() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/i2bResult.kt", this::doTest);
            }

            @TestMetadata("loadFromBooleanArray.kt")
            public void testLoadFromBooleanArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/loadFromBooleanArray.kt", this::doTest);
            }

            @TestMetadata("loadFromByteArray.kt")
            public void testLoadFromByteArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/loadFromByteArray.kt", this::doTest);
            }

            @TestMetadata("noVariableInTable.kt")
            public void testNoVariableInTable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/noVariableInTable.kt", this::doTest);
            }

            @TestMetadata("sameIconst1ManyVars.kt")
            public void testSameIconst1ManyVars() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/sameIconst1ManyVars.kt", this::doTest);
            }

            @TestMetadata("usedInArrayStore.kt")
            public void testUsedInArrayStore() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/usedInArrayStore.kt", this::doTest);
            }

            @TestMetadata("usedInMethodCall.kt")
            public void testUsedInMethodCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/usedInMethodCall.kt", this::doTest);
            }

            @TestMetadata("usedInPutfield.kt")
            public void testUsedInPutfield() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/usedInPutfield.kt", this::doTest);
            }

            @TestMetadata("usedInVarStore.kt")
            public void testUsedInVarStore() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/coroutines/intLikeVarSpilling/usedInVarStore.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/dataClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DataClasses extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInDataClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/dataClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt12330.kt")
        public void testKt12330() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/dataClasses/kt12330.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/deadCodeElimination")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DeadCodeElimination extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInDeadCodeElimination() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/deadCodeElimination"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("arrayConstructor.kt")
        public void testArrayConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/deadCodeElimination/arrayConstructor.kt", this::doTest);
        }

        @TestMetadata("boxing.kt")
        public void testBoxing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/deadCodeElimination/boxing.kt", this::doTest);
        }

        @TestMetadata("emptyVariableRange.kt")
        public void testEmptyVariableRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/deadCodeElimination/emptyVariableRange.kt", this::doTest);
        }

        @TestMetadata("kt14357.kt")
        public void testKt14357() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/deadCodeElimination/kt14357.kt", this::doTest);
        }

        @TestMetadata("lastReturn.kt")
        public void testLastReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/deadCodeElimination/lastReturn.kt", this::doTest);
        }

        @TestMetadata("literal.kt")
        public void testLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/deadCodeElimination/literal.kt", this::doTest);
        }

        @TestMetadata("simpleConstructor.kt")
        public void testSimpleConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/deadCodeElimination/simpleConstructor.kt", this::doTest);
        }

        @TestMetadata("simpleConstructorNotRedundant.kt")
        public void testSimpleConstructorNotRedundant() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/deadCodeElimination/simpleConstructorNotRedundant.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultArguments extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInDefaultArguments() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt11962.kt")
        public void testKt11962() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/defaultArguments/kt11962.kt", this::doTest);
        }

        @TestMetadata("maskAndArgumentElimination.kt")
        public void testMaskAndArgumentElimination() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/defaultArguments/maskAndArgumentElimination.kt", this::doTest);
        }

        @TestMetadata("methodHandlerElimination.kt")
        public void testMethodHandlerElimination() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/defaultArguments/methodHandlerElimination.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/directInvoke")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DirectInvoke extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInDirectInvoke() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/directInvoke"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("callableReference.kt")
        public void testCallableReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/directInvoke/callableReference.kt", this::doTest);
        }

        @TestMetadata("inplaceClosure.kt")
        public void testInplaceClosure() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/directInvoke/inplaceClosure.kt", this::doTest);
        }

        @TestMetadata("localFun.kt")
        public void testLocalFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/directInvoke/localFun.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/enum")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Enum extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInEnum() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/enum"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kt18731.kt")
        public void testKt18731() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/enum/kt18731.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/forLoop")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForLoop extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInForLoop() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/forLoop"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("forInCharSequence.kt")
        public void testForInCharSequence() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequence.kt", this::doTest);
        }

        @TestMetadata("forInRangeSpecializedToUntil.kt")
        public void testForInRangeSpecializedToUntil() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInRangeSpecializedToUntil.kt", this::doTest);
        }

        @TestMetadata("forInRangeToCharConst.kt")
        public void testForInRangeToCharConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInRangeToCharConst.kt", this::doTest);
        }

        @TestMetadata("forInRangeToConst.kt")
        public void testForInRangeToConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInRangeToConst.kt", this::doTest);
        }

        @TestMetadata("forInRangeToLongConst.kt")
        public void testForInRangeToLongConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInRangeToLongConst.kt", this::doTest);
        }

        @TestMetadata("forInRangeToQualifiedConst.kt")
        public void testForInRangeToQualifiedConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInRangeToQualifiedConst.kt", this::doTest);
        }

        @TestMetadata("forInRangeWithImplicitReceiver.kt")
        public void testForInRangeWithImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInRangeWithImplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("forInStringSpecialized.kt")
        public void testForInStringSpecialized() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInStringSpecialized.kt", this::doTest);
        }

        @TestMetadata("forInUntil.kt")
        public void testForInUntil() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInUntil.kt", this::doTest);
        }

        @TestMetadata("forIntInDownTo.kt")
        public void testForIntInDownTo() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forIntInDownTo.kt", this::doTest);
        }

        @TestMetadata("intrinsicArrayConstructorsUseCounterLoop.kt")
        public void testIntrinsicArrayConstructorsUseCounterLoop() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/intrinsicArrayConstructorsUseCounterLoop.kt", this::doTest);
        }

        @TestMetadata("loopVarInterval.kt")
        public void testLoopVarInterval() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/loopVarInterval.kt", this::doTest);
        }

        @TestMetadata("primitiveLiteralRange1.kt")
        public void testPrimitiveLiteralRange1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/primitiveLiteralRange1.kt", this::doTest);
        }

        @TestMetadata("primitiveLiteralRange2.kt")
        public void testPrimitiveLiteralRange2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/primitiveLiteralRange2.kt", this::doTest);
        }

        @TestMetadata("primitiveProgression.kt")
        public void testPrimitiveProgression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/primitiveProgression.kt", this::doTest);
        }

        @TestMetadata("primitiveRange.kt")
        public void testPrimitiveRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/primitiveRange.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/forLoop/forInArrayWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInArrayWithIndex extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInForInArrayWithIndex() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/forLoop/forInArrayWithIndex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("forInArrrayWithIndexNoElementVar.kt")
            public void testForInArrrayWithIndexNoElementVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInArrayWithIndex/forInArrrayWithIndexNoElementVar.kt", this::doTest);
            }

            @TestMetadata("forInArrrayWithIndexNoIndexVar.kt")
            public void testForInArrrayWithIndexNoIndexVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInArrayWithIndex/forInArrrayWithIndexNoIndexVar.kt", this::doTest);
            }

            @TestMetadata("forInEmptyArrrayWithIndex.kt")
            public void testForInEmptyArrrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInArrayWithIndex/forInEmptyArrrayWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInIntArrrayWithIndex.kt")
            public void testForInIntArrrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInArrayWithIndex/forInIntArrrayWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInObjectArrrayWithIndex.kt")
            public void testForInObjectArrrayWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInArrayWithIndex/forInObjectArrrayWithIndex.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequenceWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInCharSequenceWithIndex extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInForInCharSequenceWithIndex() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequenceWithIndex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("forInCharSequenceWithIndex.kt")
            public void testForInCharSequenceWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequenceWithIndex/forInCharSequenceWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInEmptyStringWithIndex.kt")
            public void testForInEmptyStringWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequenceWithIndex/forInEmptyStringWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInStringWithIndex.kt")
            public void testForInStringWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequenceWithIndex/forInStringWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInStringWithIndexNoElementVar.kt")
            public void testForInStringWithIndexNoElementVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequenceWithIndex/forInStringWithIndexNoElementVar.kt", this::doTest);
            }

            @TestMetadata("forInStringWithIndexNoIndexVar.kt")
            public void testForInStringWithIndexNoIndexVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequenceWithIndex/forInStringWithIndexNoIndexVar.kt", this::doTest);
            }

            @TestMetadata("forInStringWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInStringWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInCharSequenceWithIndex/forInStringWithIndexWithExplicitlyTypedIndexVariable.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/forLoop/forInIndices")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInIndices extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInForInIndices() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/forLoop/forInIndices"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("forInCharSequenceIndices.kt")
            public void testForInCharSequenceIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIndices/forInCharSequenceIndices.kt", this::doTest);
            }

            @TestMetadata("forInCollectionImplicitReceiverIndices.kt")
            public void testForInCollectionImplicitReceiverIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIndices/forInCollectionImplicitReceiverIndices.kt", this::doTest);
            }

            @TestMetadata("forInCollectionIndices.kt")
            public void testForInCollectionIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIndices/forInCollectionIndices.kt", this::doTest);
            }

            @TestMetadata("forInNonOptimizedIndices.kt")
            public void testForInNonOptimizedIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIndices/forInNonOptimizedIndices.kt", this::doTest);
            }

            @TestMetadata("forInObjectArrayIndices.kt")
            public void testForInObjectArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIndices/forInObjectArrayIndices.kt", this::doTest);
            }

            @TestMetadata("forInPrimitiveArrayIndices.kt")
            public void testForInPrimitiveArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIndices/forInPrimitiveArrayIndices.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/forLoop/forInIterableWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInIterableWithIndex extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInForInIterableWithIndex() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/forLoop/forInIterableWithIndex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("forInEmptyListWithIndex.kt")
            public void testForInEmptyListWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIterableWithIndex/forInEmptyListWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndex.kt")
            public void testForInListWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIterableWithIndex/forInListWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndexNoElementVar.kt")
            public void testForInListWithIndexNoElementVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIterableWithIndex/forInListWithIndexNoElementVar.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndexNoIndexVar.kt")
            public void testForInListWithIndexNoIndexVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIterableWithIndex/forInListWithIndexNoIndexVar.kt", this::doTest);
            }

            @TestMetadata("forInListWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInListWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInIterableWithIndex/forInListWithIndexWithExplicitlyTypedIndexVariable.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/forLoop/forInReversed")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInReversed extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInForInReversed() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/forLoop/forInReversed"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("forInReversedArrayIndices.kt")
            public void testForInReversedArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedArrayIndices.kt", this::doTest);
            }

            @TestMetadata("forInReversedCharSequenceIndices.kt")
            public void testForInReversedCharSequenceIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedCharSequenceIndices.kt", this::doTest);
            }

            @TestMetadata("forInReversedCollectionIndices.kt")
            public void testForInReversedCollectionIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedCollectionIndices.kt", this::doTest);
            }

            @TestMetadata("forInReversedDownTo.kt")
            public void testForInReversedDownTo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedDownTo.kt", this::doTest);
            }

            @TestMetadata("forInReversedEmptyRangeLiteral.kt")
            public void testForInReversedEmptyRangeLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedEmptyRangeLiteral.kt", this::doTest);
            }

            @TestMetadata("forInReversedRange.kt")
            public void testForInReversedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedRange.kt", this::doTest);
            }

            @TestMetadata("forInReversedRangeLiteral.kt")
            public void testForInReversedRangeLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedRangeLiteral.kt", this::doTest);
            }

            @TestMetadata("ForInReversedReversedRange.kt")
            public void testForInReversedReversedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/ForInReversedReversedRange.kt", this::doTest);
            }

            @TestMetadata("forInReversedReversedReversedRange.kt")
            public void testForInReversedReversedReversedRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedReversedReversedRange.kt", this::doTest);
            }

            @TestMetadata("forInReversedUntil.kt")
            public void testForInReversedUntil() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInReversed/forInReversedUntil.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/forLoop/forInSequenceWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInSequenceWithIndex extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInForInSequenceWithIndex() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/forLoop/forInSequenceWithIndex"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("forInEmptySequenceWithIndex.kt")
            public void testForInEmptySequenceWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInSequenceWithIndex/forInEmptySequenceWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndex.kt")
            public void testForInSequenceWithIndex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInSequenceWithIndex/forInSequenceWithIndex.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndexNoElementVar.kt")
            public void testForInSequenceWithIndexNoElementVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInSequenceWithIndex/forInSequenceWithIndexNoElementVar.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndexNoIndexVar.kt")
            public void testForInSequenceWithIndexNoIndexVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInSequenceWithIndex/forInSequenceWithIndexNoIndexVar.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndexThrowsCME.kt")
            public void testForInSequenceWithIndexThrowsCME() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInSequenceWithIndex/forInSequenceWithIndexThrowsCME.kt", this::doTest);
            }

            @TestMetadata("forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInSequenceWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/forLoop/forInSequenceWithIndex/forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/hashCode")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class HashCode extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInHashCode() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/hashCode"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("hashCode.kt")
        public void testHashCode() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/hashCode/hashCode.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/ieee754")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Ieee754 extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInIeee754() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/ieee754"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("nullableDoubleEquals.kt")
        public void testNullableDoubleEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/nullableDoubleEquals.kt", this::doTest);
        }

        @TestMetadata("nullableDoubleEquals10.kt")
        public void testNullableDoubleEquals10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/nullableDoubleEquals10.kt", this::doTest);
        }

        @TestMetadata("nullableDoubleNotEquals.kt")
        public void testNullableDoubleNotEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/nullableDoubleNotEquals.kt", this::doTest);
        }

        @TestMetadata("nullableDoubleNotEquals10.kt")
        public void testNullableDoubleNotEquals10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/nullableDoubleNotEquals10.kt", this::doTest);
        }

        @TestMetadata("nullableFloatEquals.kt")
        public void testNullableFloatEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/nullableFloatEquals.kt", this::doTest);
        }

        @TestMetadata("nullableFloatEquals10.kt")
        public void testNullableFloatEquals10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/nullableFloatEquals10.kt", this::doTest);
        }

        @TestMetadata("nullableFloatNotEquals.kt")
        public void testNullableFloatNotEquals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/nullableFloatNotEquals.kt", this::doTest);
        }

        @TestMetadata("nullableFloatNotEquals10.kt")
        public void testNullableFloatNotEquals10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/nullableFloatNotEquals10.kt", this::doTest);
        }

        @TestMetadata("smartCastsForDouble.kt")
        public void testSmartCastsForDouble() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/smartCastsForDouble.kt", this::doTest);
        }

        @TestMetadata("smartCastsForDouble10.kt")
        public void testSmartCastsForDouble10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/smartCastsForDouble10.kt", this::doTest);
        }

        @TestMetadata("smartCastsForFloat.kt")
        public void testSmartCastsForFloat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/smartCastsForFloat.kt", this::doTest);
        }

        @TestMetadata("smartCastsForFloat10.kt")
        public void testSmartCastsForFloat10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/smartCastsForFloat10.kt", this::doTest);
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/when.kt", this::doTest);
        }

        @TestMetadata("when10.kt")
        public void testWhen10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/when10.kt", this::doTest);
        }

        @TestMetadata("whenNullableSmartCast.kt")
        public void testWhenNullableSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/whenNullableSmartCast.kt", this::doTest);
        }

        @TestMetadata("whenNullableSmartCast10.kt")
        public void testWhenNullableSmartCast10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ieee754/whenNullableSmartCast10.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/inline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inline extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInInline() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/inline"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("deleteClassOnTransfromation.kt")
        public void testDeleteClassOnTransfromation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/deleteClassOnTransfromation.kt", this::doTest);
        }

        @TestMetadata("finallyMarkers.kt")
        public void testFinallyMarkers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/finallyMarkers.kt", this::doTest);
        }

        @TestMetadata("inlineReturnsNothing1.kt")
        public void testInlineReturnsNothing1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/inlineReturnsNothing1.kt", this::doTest);
        }

        @TestMetadata("inlineReturnsNothing2.kt")
        public void testInlineReturnsNothing2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/inlineReturnsNothing2.kt", this::doTest);
        }

        @TestMetadata("inlineReturnsNothing3.kt")
        public void testInlineReturnsNothing3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/inlineReturnsNothing3.kt", this::doTest);
        }

        @TestMetadata("linenumberForOneParametersArgumentCall.kt")
        public void testLinenumberForOneParametersArgumentCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/linenumberForOneParametersArgumentCall.kt", this::doTest);
        }

        @TestMetadata("noSynAccessor.kt")
        public void testNoSynAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/noSynAccessor.kt", this::doTest);
        }

        @TestMetadata("noSynAccessorToDirectFieldAccess.kt")
        public void testNoSynAccessorToDirectFieldAccess() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/noSynAccessorToDirectFieldAccess.kt", this::doTest);
        }

        @TestMetadata("noSynAccessorToSuper.kt")
        public void testNoSynAccessorToSuper() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/noSynAccessorToSuper.kt", this::doTest);
        }

        @TestMetadata("notSplitedExceptionTable.kt")
        public void testNotSplitedExceptionTable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/notSplitedExceptionTable.kt", this::doTest);
        }

        @TestMetadata("reifiedSafeAsWithMutable.kt")
        public void testReifiedSafeAsWithMutable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/reifiedSafeAsWithMutable.kt", this::doTest);
        }

        @TestMetadata("remappedLocalVar.kt")
        public void testRemappedLocalVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/remappedLocalVar.kt", this::doTest);
        }

        @TestMetadata("removedFinallyMarkers.kt")
        public void testRemovedFinallyMarkers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/removedFinallyMarkers.kt", this::doTest);
        }

        @TestMetadata("specialEnumFunction.kt")
        public void testSpecialEnumFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/specialEnumFunction.kt", this::doTest);
        }

        @TestMetadata("splitedExceptionTable.kt")
        public void testSplitedExceptionTable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/splitedExceptionTable.kt", this::doTest);
        }

        @TestMetadata("whenMappingOnCallSite.kt")
        public void testWhenMappingOnCallSite() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/whenMappingOnCallSite.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/inline/property")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Property extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInProperty() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/inline/property"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inline/property/simple.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineClasses extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInInlineClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("asCastForInlineClass.kt")
        public void testAsCastForInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/asCastForInlineClass.kt", this::doTest);
        }

        @TestMetadata("assertionsForParametersOfInlineClassTypes.kt")
        public void testAssertionsForParametersOfInlineClassTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/assertionsForParametersOfInlineClassTypes.kt", this::doTest);
        }

        @TestMetadata("boxInlineClassesOnPassingToVarargs.kt")
        public void testBoxInlineClassesOnPassingToVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxInlineClassesOnPassingToVarargs.kt", this::doTest);
        }

        @TestMetadata("boxResultAfterConstructorCall.kt")
        public void testBoxResultAfterConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxResultAfterConstructorCall.kt", this::doTest);
        }

        @TestMetadata("boxResultInlineClassOfConstructorCall.kt")
        public void testBoxResultInlineClassOfConstructorCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxResultInlineClassOfConstructorCall.kt", this::doTest);
        }

        @TestMetadata("boxThisOfInlineClass.kt")
        public void testBoxThisOfInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxThisOfInlineClass.kt", this::doTest);
        }

        @TestMetadata("boxUnboxInlineClassFromMethodReturnType.kt")
        public void testBoxUnboxInlineClassFromMethodReturnType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxUnboxInlineClassFromMethodReturnType.kt", this::doTest);
        }

        @TestMetadata("boxUnboxInsideLambdaAsLastExpression.kt")
        public void testBoxUnboxInsideLambdaAsLastExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxUnboxInsideLambdaAsLastExpression.kt", this::doTest);
        }

        @TestMetadata("boxUnboxOfInlineClassesWithFunctionalTypes.kt")
        public void testBoxUnboxOfInlineClassesWithFunctionalTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxUnboxOfInlineClassesWithFunctionalTypes.kt", this::doTest);
        }

        @TestMetadata("boxUnboxOnInlinedParameters.kt")
        public void testBoxUnboxOnInlinedParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxUnboxOnInlinedParameters.kt", this::doTest);
        }

        @TestMetadata("boxingForNonLocalAndLabeledReturnsOfInlineClasses.kt")
        public void testBoxingForNonLocalAndLabeledReturnsOfInlineClasses() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/boxingForNonLocalAndLabeledReturnsOfInlineClasses.kt", this::doTest);
        }

        @TestMetadata("callMemberMethodsInsideInlineClass.kt")
        public void testCallMemberMethodsInsideInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/callMemberMethodsInsideInlineClass.kt", this::doTest);
        }

        @TestMetadata("checkOuterInlineFunctionCall.kt")
        public void testCheckOuterInlineFunctionCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/checkOuterInlineFunctionCall.kt", this::doTest);
        }

        @TestMetadata("generationOfAccessorToUnderlyingValue.kt")
        public void testGenerationOfAccessorToUnderlyingValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/generationOfAccessorToUnderlyingValue.kt", this::doTest);
        }

        @TestMetadata("inlineClassBoxingOnAssignment.kt")
        public void testInlineClassBoxingOnAssignment() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/inlineClassBoxingOnAssignment.kt", this::doTest);
        }

        @TestMetadata("inlineClassBoxingOnFunctionCall.kt")
        public void testInlineClassBoxingOnFunctionCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/inlineClassBoxingOnFunctionCall.kt", this::doTest);
        }

        @TestMetadata("inlineClassBoxingUnboxingInsideInlinedLambda.kt")
        public void testInlineClassBoxingUnboxingInsideInlinedLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/inlineClassBoxingUnboxingInsideInlinedLambda.kt", this::doTest);
        }

        @TestMetadata("inlineClassesUnboxingAfterAssertionOperator.kt")
        public void testInlineClassesUnboxingAfterAssertionOperator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/inlineClassesUnboxingAfterAssertionOperator.kt", this::doTest);
        }

        @TestMetadata("isCheckForInlineClass.kt")
        public void testIsCheckForInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/isCheckForInlineClass.kt", this::doTest);
        }

        @TestMetadata("noAssertionsForInlineClassesBasedOnNullableTypes.kt")
        public void testNoAssertionsForInlineClassesBasedOnNullableTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/noAssertionsForInlineClassesBasedOnNullableTypes.kt", this::doTest);
        }

        @TestMetadata("passInlineClassesWithSpreadOperatorToVarargs.kt")
        public void testPassInlineClassesWithSpreadOperatorToVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/passInlineClassesWithSpreadOperatorToVarargs.kt", this::doTest);
        }

        @TestMetadata("skipCallToUnderlyingValueOfInlineClass.kt")
        public void testSkipCallToUnderlyingValueOfInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/skipCallToUnderlyingValueOfInlineClass.kt", this::doTest);
        }

        @TestMetadata("uIntArrayIteratorWithoutBoxing.kt")
        public void testUIntArrayIteratorWithoutBoxing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/uIntArrayIteratorWithoutBoxing.kt", this::doTest);
        }

        @TestMetadata("uIntArraySwapBoxing.kt")
        public void testUIntArraySwapBoxing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/uIntArraySwapBoxing.kt", this::doTest);
        }

        @TestMetadata("unboxInlineClassAfterElvis.kt")
        public void testUnboxInlineClassAfterElvis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/unboxInlineClassAfterElvis.kt", this::doTest);
        }

        @TestMetadata("unboxInlineClassAfterSafeCall.kt")
        public void testUnboxInlineClassAfterSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/unboxInlineClassAfterSafeCall.kt", this::doTest);
        }

        @TestMetadata("unboxInlineClassFromParameterizedType.kt")
        public void testUnboxInlineClassFromParameterizedType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/unboxInlineClassFromParameterizedType.kt", this::doTest);
        }

        @TestMetadata("unboxInlineClassesAfterSmartCasts.kt")
        public void testUnboxInlineClassesAfterSmartCasts() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/inlineClasses/unboxInlineClassesAfterSmartCasts.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/interfaces")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Interfaces extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInInterfaces() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/interfaces"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("firstInheritedMethodIsAbstract.kt")
        public void testFirstInheritedMethodIsAbstract() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/interfaces/firstInheritedMethodIsAbstract.kt", this::doTest);
        }

        @TestMetadata("noAnyMethodsOnInterfaceInheritance.kt")
        public void testNoAnyMethodsOnInterfaceInheritance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/interfaces/noAnyMethodsOnInterfaceInheritance.kt", this::doTest);
        }

        @TestMetadata("noPrivateMemberInJavaInterface.kt")
        public void testNoPrivateMemberInJavaInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/interfaces/noPrivateMemberInJavaInterface.kt", this::doTest);
        }

        @TestMetadata("traitImplGeneratedOnce.kt")
        public void testTraitImplGeneratedOnce() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/interfaces/traitImplGeneratedOnce.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/intrinsics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Intrinsics extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInIntrinsics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/intrinsics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("javaObjectType.kt")
        public void testJavaObjectType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intrinsics/javaObjectType.kt", this::doTest);
        }

        @TestMetadata("javaPrimitiveType.kt")
        public void testJavaPrimitiveType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intrinsics/javaPrimitiveType.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/intrinsicsCompare")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IntrinsicsCompare extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInIntrinsicsCompare() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/intrinsicsCompare"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("byteSmartCast.kt")
        public void testByteSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intrinsicsCompare/byteSmartCast.kt", this::doTest);
        }

        @TestMetadata("charSmartCast.kt")
        public void testCharSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intrinsicsCompare/charSmartCast.kt", this::doTest);
        }

        @TestMetadata("differentTypes.kt")
        public void testDifferentTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intrinsicsCompare/differentTypes.kt", this::doTest);
        }

        @TestMetadata("intSmartCast.kt")
        public void testIntSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intrinsicsCompare/intSmartCast.kt", this::doTest);
        }

        @TestMetadata("longSmartCast.kt")
        public void testLongSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intrinsicsCompare/longSmartCast.kt", this::doTest);
        }

        @TestMetadata("shortSmartCast.kt")
        public void testShortSmartCast() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/intrinsicsCompare/shortSmartCast.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/jackAndJill")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JackAndJill extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInJackAndJill() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/jackAndJill"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("inlineDefaultBodyInClass.kt")
        public void testInlineDefaultBodyInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/jackAndJill/inlineDefaultBodyInClass.kt", this::doTest);
        }

        @TestMetadata("inlinedConstuctor.kt")
        public void testInlinedConstuctor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/jackAndJill/inlinedConstuctor.kt", this::doTest);
        }

        @TestMetadata("inlinedConstuctorWithSuperCallParams.kt")
        public void testInlinedConstuctorWithSuperCallParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/jackAndJill/inlinedConstuctorWithSuperCallParams.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/lazyCodegen")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LazyCodegen extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInLazyCodegen() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/lazyCodegen"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("inlineConstInsideComparison.kt")
        public void testInlineConstInsideComparison() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lazyCodegen/inlineConstInsideComparison.kt", this::doTest);
        }

        @TestMetadata("negateConst.kt")
        public void testNegateConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lazyCodegen/negateConst.kt", this::doTest);
        }

        @TestMetadata("negateConstantCompare.kt")
        public void testNegateConstantCompare() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lazyCodegen/negateConstantCompare.kt", this::doTest);
        }

        @TestMetadata("negateObjectComp.kt")
        public void testNegateObjectComp() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lazyCodegen/negateObjectComp.kt", this::doTest);
        }

        @TestMetadata("negateObjectCompChaing.kt")
        public void testNegateObjectCompChaing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lazyCodegen/negateObjectCompChaing.kt", this::doTest);
        }

        @TestMetadata("negateVar.kt")
        public void testNegateVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lazyCodegen/negateVar.kt", this::doTest);
        }

        @TestMetadata("negateVarChain.kt")
        public void testNegateVarChain() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lazyCodegen/negateVarChain.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/lineNumbers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LineNumbers extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInLineNumbers() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/lineNumbers"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ifElse.kt")
        public void testIfElse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lineNumbers/ifElse.kt", this::doTest);
        }

        @TestMetadata("singleThen.kt")
        public void testSingleThen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lineNumbers/singleThen.kt", this::doTest);
        }

        @TestMetadata("tryCatch.kt")
        public void testTryCatch() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lineNumbers/tryCatch.kt", this::doTest);
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/lineNumbers/when.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/multifileClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultifileClasses extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInMultifileClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("optimizedMultifileClassFacadeMethods.kt")
        public void testOptimizedMultifileClassFacadeMethods() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/multifileClasses/optimizedMultifileClassFacadeMethods.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/nullCheckOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NullCheckOptimization extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInNullCheckOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/nullCheckOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("alreadyCheckedForIs.kt")
        public void testAlreadyCheckedForIs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/alreadyCheckedForIs.kt", this::doTest);
        }

        @TestMetadata("alreadyCheckedForNull.kt")
        public void testAlreadyCheckedForNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/alreadyCheckedForNull.kt", this::doTest);
        }

        @TestMetadata("expressionValueIsNotNull.kt")
        public void testExpressionValueIsNotNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/expressionValueIsNotNull.kt", this::doTest);
        }

        @TestMetadata("expressionValueIsNotNullAfterExclExcl.kt")
        public void testExpressionValueIsNotNullAfterExclExcl() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/expressionValueIsNotNullAfterExclExcl.kt", this::doTest);
        }

        @TestMetadata("expressionValueIsNotNullTwice.kt")
        public void testExpressionValueIsNotNullTwice() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/expressionValueIsNotNullTwice.kt", this::doTest);
        }

        @TestMetadata("ifNullEqualsNull.kt")
        public void testIfNullEqualsNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/ifNullEqualsNull.kt", this::doTest);
        }

        @TestMetadata("ifNullEqualsNullInline.kt")
        public void testIfNullEqualsNullInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/ifNullEqualsNullInline.kt", this::doTest);
        }

        @TestMetadata("ifUnitEqualsNull.kt")
        public void testIfUnitEqualsNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/ifUnitEqualsNull.kt", this::doTest);
        }

        @TestMetadata("ifUnitEqualsNullInline.kt")
        public void testIfUnitEqualsNullInline() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/ifUnitEqualsNullInline.kt", this::doTest);
        }

        @TestMetadata("kt12839.kt")
        public void testKt12839() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/kt12839.kt", this::doTest);
        }

        @TestMetadata("notNullAsNotNullable.kt")
        public void testNotNullAsNotNullable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/notNullAsNotNullable.kt", this::doTest);
        }

        @TestMetadata("redundantSafeCall.kt")
        public void testRedundantSafeCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/redundantSafeCall.kt", this::doTest);
        }

        @TestMetadata("reifiedIs.kt")
        public void testReifiedIs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/reifiedIs.kt", this::doTest);
        }

        @TestMetadata("reifiedNullIs.kt")
        public void testReifiedNullIs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/reifiedNullIs.kt", this::doTest);
        }

        @TestMetadata("trivialInstanceOf.kt")
        public void testTrivialInstanceOf() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/trivialInstanceOf.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/codegen/bytecodeText/nullCheckOptimization/localLateinit")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LocalLateinit extends AbstractBytecodeTextTest {
            public void testAllFilesPresentInLocalLateinit() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/nullCheckOptimization/localLateinit"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("checkedAlways.kt")
            public void testCheckedAlways() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/localLateinit/checkedAlways.kt", this::doTest);
            }

            @TestMetadata("checkedOnce.kt")
            public void testCheckedOnce() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/localLateinit/checkedOnce.kt", this::doTest);
            }

            @TestMetadata("initialized.kt")
            public void testInitialized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/nullCheckOptimization/localLateinit/initialized.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/ranges")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Ranges extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInRanges() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/ranges"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ifNotInRange.kt")
        public void testIfNotInRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/ifNotInRange.kt", this::doTest);
        }

        @TestMetadata("inArrayIndices.kt")
        public void testInArrayIndices() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/inArrayIndices.kt", this::doTest);
        }

        @TestMetadata("inCharSequenceIndices.kt")
        public void testInCharSequenceIndices() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/inCharSequenceIndices.kt", this::doTest);
        }

        @TestMetadata("inCollectionIndices.kt")
        public void testInCollectionIndices() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/inCollectionIndices.kt", this::doTest);
        }

        @TestMetadata("inComparableRangeLiteral.kt")
        public void testInComparableRangeLiteral() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/inComparableRangeLiteral.kt", this::doTest);
        }

        @TestMetadata("inNonMatchingRangeIntrinsified.kt")
        public void testInNonMatchingRangeIntrinsified() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/inNonMatchingRangeIntrinsified.kt", this::doTest);
        }

        @TestMetadata("inNonMatchingRangeNotIntrinsified.kt")
        public void testInNonMatchingRangeNotIntrinsified() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/inNonMatchingRangeNotIntrinsified.kt", this::doTest);
        }

        @TestMetadata("inOptimizableRange.kt")
        public void testInOptimizableRange() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/inOptimizableRange.kt", this::doTest);
        }

        @TestMetadata("inUntil.kt")
        public void testInUntil() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/inUntil.kt", this::doTest);
        }

        @TestMetadata("noDupXForLiteralRangeContains.kt")
        public void testNoDupXForLiteralRangeContains() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/ranges/noDupXForLiteralRangeContains.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/sam")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Sam extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInSam() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/sam"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("samWrapperForNullInitialization.kt")
        public void testSamWrapperForNullInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/sam/samWrapperForNullInitialization.kt", this::doTest);
        }

        @TestMetadata("samWrapperForNullableInitialization.kt")
        public void testSamWrapperForNullableInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/sam/samWrapperForNullableInitialization.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/statements")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Statements extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInStatements() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/statements"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ifSingleBranch.kt")
        public void testIfSingleBranch() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/statements/ifSingleBranch.kt", this::doTest);
        }

        @TestMetadata("ifThenElse.kt")
        public void testIfThenElse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/statements/ifThenElse.kt", this::doTest);
        }

        @TestMetadata("ifThenElseEmpty.kt")
        public void testIfThenElseEmpty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/statements/ifThenElseEmpty.kt", this::doTest);
        }

        @TestMetadata("labeled.kt")
        public void testLabeled() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/statements/labeled.kt", this::doTest);
        }

        @TestMetadata("statementsComposition.kt")
        public void testStatementsComposition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/statements/statementsComposition.kt", this::doTest);
        }

        @TestMetadata("tryCatchFinally.kt")
        public void testTryCatchFinally() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/statements/tryCatchFinally.kt", this::doTest);
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/statements/when.kt", this::doTest);
        }

        @TestMetadata("whenSubject.kt")
        public void testWhenSubject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/statements/whenSubject.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/staticFields")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StaticFields extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInStaticFields() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/staticFields"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/staticFields/classObject.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/staticFields/object.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/storeStackBeforeInline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StoreStackBeforeInline extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInStoreStackBeforeInline() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/storeStackBeforeInline"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("differentTypes.kt")
        public void testDifferentTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/storeStackBeforeInline/differentTypes.kt", this::doTest);
        }

        @TestMetadata("primitiveMerge.kt")
        public void testPrimitiveMerge() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/storeStackBeforeInline/primitiveMerge.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/storeStackBeforeInline/simple.kt", this::doTest);
        }

        @TestMetadata("unreachableMarker.kt")
        public void testUnreachableMarker() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/storeStackBeforeInline/unreachableMarker.kt", this::doTest);
        }

        @TestMetadata("withLambda.kt")
        public void testWithLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/storeStackBeforeInline/withLambda.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/stringOperations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StringOperations extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInStringOperations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/stringOperations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("concat.kt")
        public void testConcat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/concat.kt", this::doTest);
        }

        @TestMetadata("interpolation.kt")
        public void testInterpolation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/interpolation.kt", this::doTest);
        }

        @TestMetadata("kt15235.kt")
        public void testKt15235() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/kt15235.kt", this::doTest);
        }

        @TestMetadata("kt19037.kt")
        public void testKt19037() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/kt19037.kt", this::doTest);
        }

        @TestMetadata("nestedConcat.kt")
        public void testNestedConcat() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/nestedConcat.kt", this::doTest);
        }

        @TestMetadata("nonNullableStringPlus.kt")
        public void testNonNullableStringPlus() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/nonNullableStringPlus.kt", this::doTest);
        }

        @TestMetadata("nullableStringPlus.kt")
        public void testNullableStringPlus() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/nullableStringPlus.kt", this::doTest);
        }

        @TestMetadata("plusAssign.kt")
        public void testPlusAssign() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/plusAssign.kt", this::doTest);
        }

        @TestMetadata("primitiveToString.kt")
        public void testPrimitiveToString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/stringOperations/primitiveToString.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/varargs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Varargs extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInVarargs() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/varargs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("doNotCopyImmediatelyCreatedArrays.kt")
        public void testDoNotCopyImmediatelyCreatedArrays() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/varargs/doNotCopyImmediatelyCreatedArrays.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/when")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class When extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInWhen() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/when"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("exhaustiveWhenInitialization.kt")
        public void testExhaustiveWhenInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/exhaustiveWhenInitialization.kt", this::doTest);
        }

        @TestMetadata("exhaustiveWhenReturn.kt")
        public void testExhaustiveWhenReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/exhaustiveWhenReturn.kt", this::doTest);
        }

        @TestMetadata("exhaustiveWhenUnit.kt")
        public void testExhaustiveWhenUnit() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/exhaustiveWhenUnit.kt", this::doTest);
        }

        @TestMetadata("exhaustiveWhenUnitStatement.kt")
        public void testExhaustiveWhenUnitStatement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/exhaustiveWhenUnitStatement.kt", this::doTest);
        }

        @TestMetadata("inlineConstValsInsideWhen.kt")
        public void testInlineConstValsInsideWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/inlineConstValsInsideWhen.kt", this::doTest);
        }

        @TestMetadata("integralWhenWithNoInlinedConstants.kt")
        public void testIntegralWhenWithNoInlinedConstants() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/integralWhenWithNoInlinedConstants.kt", this::doTest);
        }

        @TestMetadata("kt18818.kt")
        public void testKt18818() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/kt18818.kt", this::doTest);
        }

        @TestMetadata("noBoxingInDefaultWhenWithSpecialCases.kt")
        public void testNoBoxingInDefaultWhenWithSpecialCases() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/noBoxingInDefaultWhenWithSpecialCases.kt", this::doTest);
        }

        @TestMetadata("qualifiedConstValsInsideWhen.kt")
        public void testQualifiedConstValsInsideWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/qualifiedConstValsInsideWhen.kt", this::doTest);
        }

        @TestMetadata("sealedWhenInitialization.kt")
        public void testSealedWhenInitialization() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/sealedWhenInitialization.kt", this::doTest);
        }

        @TestMetadata("simpleConstValsInsideWhen.kt")
        public void testSimpleConstValsInsideWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/simpleConstValsInsideWhen.kt", this::doTest);
        }

        @TestMetadata("whenNull.kt")
        public void testWhenNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/whenNull.kt", this::doTest);
        }

        @TestMetadata("whenZero.kt")
        public void testWhenZero() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/when/whenZero.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/whenEnumOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WhenEnumOptimization extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInWhenEnumOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/whenEnumOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("bigEnum.kt")
        public void testBigEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/bigEnum.kt", this::doTest);
        }

        @TestMetadata("duplicatingItems.kt")
        public void testDuplicatingItems() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/duplicatingItems.kt", this::doTest);
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/expression.kt", this::doTest);
        }

        @TestMetadata("functionLiteralInTopLevel.kt")
        public void testFunctionLiteralInTopLevel() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/functionLiteralInTopLevel.kt", this::doTest);
        }

        @TestMetadata("importedEnumEntry.kt")
        public void testImportedEnumEntry() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/importedEnumEntry.kt", this::doTest);
        }

        @TestMetadata("kt14597_full.kt")
        public void testKt14597_full() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/kt14597_full.kt", this::doTest);
        }

        @TestMetadata("kt14802.kt")
        public void testKt14802() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/kt14802.kt", this::doTest);
        }

        @TestMetadata("kt15806.kt")
        public void testKt15806() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/kt15806.kt", this::doTest);
        }

        @TestMetadata("manyWhensWithinClass.kt")
        public void testManyWhensWithinClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/manyWhensWithinClass.kt", this::doTest);
        }

        @TestMetadata("nonConstantEnum.kt")
        public void testNonConstantEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/nonConstantEnum.kt", this::doTest);
        }

        @TestMetadata("nullability.kt")
        public void testNullability() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/nullability.kt", this::doTest);
        }

        @TestMetadata("subjectAny.kt")
        public void testSubjectAny() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/subjectAny.kt", this::doTest);
        }

        @TestMetadata("withoutElse.kt")
        public void testWithoutElse() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenEnumOptimization/withoutElse.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/codegen/bytecodeText/whenStringOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WhenStringOptimization extends AbstractBytecodeTextTest {
        public void testAllFilesPresentInWhenStringOptimization() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/bytecodeText/whenStringOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("denseHashCode.kt")
        public void testDenseHashCode() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/denseHashCode.kt", this::doTest);
        }

        @TestMetadata("duplicatingItems.kt")
        public void testDuplicatingItems() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/duplicatingItems.kt", this::doTest);
        }

        @TestMetadata("duplicatingItemsSameHashCode.kt")
        public void testDuplicatingItemsSameHashCode() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/duplicatingItemsSameHashCode.kt", this::doTest);
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/expression.kt", this::doTest);
        }

        @TestMetadata("inlineStringConstInsideWhen.kt")
        public void testInlineStringConstInsideWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/inlineStringConstInsideWhen.kt", this::doTest);
        }

        @TestMetadata("nonInlinedConst.kt")
        public void testNonInlinedConst() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/nonInlinedConst.kt", this::doTest);
        }

        @TestMetadata("nullability.kt")
        public void testNullability() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/nullability.kt", this::doTest);
        }

        @TestMetadata("sameHashCode.kt")
        public void testSameHashCode() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/sameHashCode.kt", this::doTest);
        }

        @TestMetadata("statement.kt")
        public void testStatement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/codegen/bytecodeText/whenStringOptimization/statement.kt", this::doTest);
        }
    }
}
