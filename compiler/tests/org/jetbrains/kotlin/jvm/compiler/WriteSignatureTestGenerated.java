/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.jvm.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/writeSignature")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class WriteSignatureTestGenerated extends AbstractWriteSignatureTest {
    public void testAllFilesPresentInWriteSignature() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("ArrayOfCharSequence.kt")
    public void testArrayOfCharSequence() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/ArrayOfCharSequence.kt", this::doTest);
    }

    @TestMetadata("ArrayOfInt.kt")
    public void testArrayOfInt() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/ArrayOfInt.kt", this::doTest);
    }

    @TestMetadata("backingFieldForGenericDelegated.kt")
    public void testBackingFieldForGenericDelegated() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/backingFieldForGenericDelegated.kt", this::doTest);
    }

    @TestMetadata("Comparable.kt")
    public void testComparable() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/Comparable.kt", this::doTest);
    }

    @TestMetadata("DeepGenericInnerClass.kt")
    public void testDeepGenericInnerClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/DeepGenericInnerClass.kt", this::doTest);
    }

    @TestMetadata("GenericInnerClass.kt")
    public void testGenericInnerClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/GenericInnerClass.kt", this::doTest);
    }

    @TestMetadata("GenericInnerClassWithSimpleOuter.kt")
    public void testGenericInnerClassWithSimpleOuter() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/GenericInnerClassWithSimpleOuter.kt", this::doTest);
    }

    @TestMetadata("Int.kt")
    public void testInt() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/Int.kt", this::doTest);
    }

    @TestMetadata("IntArray.kt")
    public void testIntArray() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/IntArray.kt", this::doTest);
    }

    @TestMetadata("IntQ.kt")
    public void testIntQ() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/IntQ.kt", this::doTest);
    }

    @TestMetadata("jlString.kt")
    public void testJlString() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/jlString.kt", this::doTest);
    }

    @TestMetadata("ListOfCharSequence.kt")
    public void testListOfCharSequence() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/ListOfCharSequence.kt", this::doTest);
    }

    @TestMetadata("ListOfStar.kt")
    public void testListOfStar() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/ListOfStar.kt", this::doTest);
    }

    @TestMetadata("MapEntry.kt")
    public void testMapEntry() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/MapEntry.kt", this::doTest);
    }

    @TestMetadata("MutableMapEntry.kt")
    public void testMutableMapEntry() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/MutableMapEntry.kt", this::doTest);
    }

    @TestMetadata("NonGeneric.kt")
    public void testNonGeneric() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/NonGeneric.kt", this::doTest);
    }

    @TestMetadata("StarProjectionInClass.kt")
    public void testStarProjectionInClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/StarProjectionInClass.kt", this::doTest);
    }

    @TestMetadata("StarProjectionInSuper.kt")
    public void testStarProjectionInSuper() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/StarProjectionInSuper.kt", this::doTest);
    }

    @TestMetadata("StarProjectionOutsideClass.kt")
    public void testStarProjectionOutsideClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/StarProjectionOutsideClass.kt", this::doTest);
    }

    @TestMetadata("syntheticAccessorForGeneric.kt")
    public void testSyntheticAccessorForGeneric() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/syntheticAccessorForGeneric.kt", this::doTest);
    }

    @TestMetadata("VarargCharSequence.kt")
    public void testVarargCharSequence() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/VarargCharSequence.kt", this::doTest);
    }

    @TestMetadata("VarargGeneric.kt")
    public void testVarargGeneric() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/writeSignature/VarargGeneric.kt", this::doTest);
    }

    @TestMetadata("compiler/testData/writeSignature/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotations extends AbstractWriteSignatureTest {
        public void testAllFilesPresentInAnnotations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/annotations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kArrayClassOfJClass.kt")
        public void testKArrayClassOfJClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/annotations/kArrayClassOfJClass.kt", this::doTest);
        }

        @TestMetadata("kArrayClassOfKClass.kt")
        public void testKArrayClassOfKClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/annotations/kArrayClassOfKClass.kt", this::doTest);
        }

        @TestMetadata("kClassBasic.kt")
        public void testKClassBasic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/annotations/kClassBasic.kt", this::doTest);
        }

        @TestMetadata("kClassInt.kt")
        public void testKClassInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/annotations/kClassInt.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeSignature/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReference extends AbstractWriteSignatureTest {
        public void testAllFilesPresentInCallableReference() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("constructorReferenceInReturnType.kt")
        public void testConstructorReferenceInReturnType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/callableReference/constructorReferenceInReturnType.kt", this::doTest);
        }

        @TestMetadata("functionReferenceInvoke.kt")
        public void testFunctionReferenceInvoke() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/callableReference/functionReferenceInvoke.kt", this::doTest);
        }

        @TestMetadata("propertyReferenceGet.kt")
        public void testPropertyReferenceGet() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/callableReference/propertyReferenceGet.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeSignature/constructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constructor extends AbstractWriteSignatureTest {
        public void testAllFilesPresentInConstructor() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/constructor"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("Constructor0.kt")
        public void testConstructor0() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/constructor/Constructor0.kt", this::doTest);
        }

        @TestMetadata("ConstructorCollectionParameter.kt")
        public void testConstructorCollectionParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/constructor/ConstructorCollectionParameter.kt", this::doTest);
        }

        @TestMetadata("ConstructorWithTypeParameter.kt")
        public void testConstructorWithTypeParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/constructor/ConstructorWithTypeParameter.kt", this::doTest);
        }

        @TestMetadata("ConstructorWithTypeParameterAndValueParameterP.kt")
        public void testConstructorWithTypeParameterAndValueParameterP() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/constructor/ConstructorWithTypeParameterAndValueParameterP.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeSignature/declarationSiteVariance")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DeclarationSiteVariance extends AbstractWriteSignatureTest {
        public void testAllFilesPresentInDeclarationSiteVariance() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/declarationSiteVariance"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("FunctionTwoTypeParameters.kt")
        public void testFunctionTwoTypeParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/FunctionTwoTypeParameters.kt", this::doTest);
        }

        @TestMetadata("GenericOverrides.kt")
        public void testGenericOverrides() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/GenericOverrides.kt", this::doTest);
        }

        @TestMetadata("InInInPosition.kt")
        public void testInInInPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/InInInPosition.kt", this::doTest);
        }

        @TestMetadata("InInOutPosition.kt")
        public void testInInOutPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/InInOutPosition.kt", this::doTest);
        }

        @TestMetadata("InOfInInInPosition.kt")
        public void testInOfInInInPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/InOfInInInPosition.kt", this::doTest);
        }

        @TestMetadata("InOfInInOutPosition.kt")
        public void testInOfInInOutPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/InOfInInOutPosition.kt", this::doTest);
        }

        @TestMetadata("InOfOutInInPosition.kt")
        public void testInOfOutInInPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/InOfOutInInPosition.kt", this::doTest);
        }

        @TestMetadata("InOfOutInOutPosition.kt")
        public void testInOfOutInOutPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/InOfOutInOutPosition.kt", this::doTest);
        }

        @TestMetadata("MappedSupertypeWithVariance.kt")
        public void testMappedSupertypeWithVariance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/MappedSupertypeWithVariance.kt", this::doTest);
        }

        @TestMetadata("OpenMembersReturnType.kt")
        public void testOpenMembersReturnType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OpenMembersReturnType.kt", this::doTest);
        }

        @TestMetadata("OpenMembersValueParameter.kt")
        public void testOpenMembersValueParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OpenMembersValueParameter.kt", this::doTest);
        }

        @TestMetadata("OutInField.kt")
        public void testOutInField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OutInField.kt", this::doTest);
        }

        @TestMetadata("OutInInPosition.kt")
        public void testOutInInPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OutInInPosition.kt", this::doTest);
        }

        @TestMetadata("OutInOutPosition.kt")
        public void testOutInOutPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OutInOutPosition.kt", this::doTest);
        }

        @TestMetadata("OutOfInInInPosition.kt")
        public void testOutOfInInInPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OutOfInInInPosition.kt", this::doTest);
        }

        @TestMetadata("OutOfInInOutPosition.kt")
        public void testOutOfInInOutPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OutOfInInOutPosition.kt", this::doTest);
        }

        @TestMetadata("OutOfOutInInPosition.kt")
        public void testOutOfOutInInPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OutOfOutInInPosition.kt", this::doTest);
        }

        @TestMetadata("OutOfOutInOutPosition.kt")
        public void testOutOfOutInOutPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/OutOfOutInOutPosition.kt", this::doTest);
        }

        @TestMetadata("PropertyGetterIn.kt")
        public void testPropertyGetterIn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/PropertyGetterIn.kt", this::doTest);
        }

        @TestMetadata("PropertyGetterOut.kt")
        public void testPropertyGetterOut() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/PropertyGetterOut.kt", this::doTest);
        }

        @TestMetadata("PropertyGetterTwoParams.kt")
        public void testPropertyGetterTwoParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/PropertyGetterTwoParams.kt", this::doTest);
        }

        @TestMetadata("PropertySetterIn.kt")
        public void testPropertySetterIn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/PropertySetterIn.kt", this::doTest);
        }

        @TestMetadata("PropertySetterOut.kt")
        public void testPropertySetterOut() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/PropertySetterOut.kt", this::doTest);
        }

        @TestMetadata("RedundantProjections.kt")
        public void testRedundantProjections() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/RedundantProjections.kt", this::doTest);
        }

        @TestMetadata("SuperClassWithVariance.kt")
        public void testSuperClassWithVariance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/SuperClassWithVariance.kt", this::doTest);
        }

        @TestMetadata("SuperTraitWithVariance.kt")
        public void testSuperTraitWithVariance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/SuperTraitWithVariance.kt", this::doTest);
        }

        @TestMetadata("SuperTypeWithVarianceInArguments.kt")
        public void testSuperTypeWithVarianceInArguments() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/SuperTypeWithVarianceInArguments.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/writeSignature/declarationSiteVariance/jvmWildcardAnnotations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class JvmWildcardAnnotations extends AbstractWriteSignatureTest {
            public void testAllFilesPresentInJvmWildcardAnnotations() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/declarationSiteVariance/jvmWildcardAnnotations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("onFunction.kt")
            public void testOnFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/jvmWildcardAnnotations/onFunction.kt", this::doTest);
            }

            @TestMetadata("onTypes.kt")
            public void testOnTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/jvmWildcardAnnotations/onTypes.kt", this::doTest);
            }

            @TestMetadata("primitiveTypes.kt")
            public void testPrimitiveTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/jvmWildcardAnnotations/primitiveTypes.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WildcardOptimization extends AbstractWriteSignatureTest {
            public void testAllFilesPresentInWildcardOptimization() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("argumentOverridability.kt")
            public void testArgumentOverridability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/argumentOverridability.kt", this::doTest);
            }

            @TestMetadata("arrays.kt")
            public void testArrays() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/arrays.kt", this::doTest);
            }

            @TestMetadata("complicatedInBounds.kt")
            public void testComplicatedInBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/complicatedInBounds.kt", this::doTest);
            }

            @TestMetadata("deepOut.kt")
            public void testDeepOut() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/deepOut.kt", this::doTest);
            }

            @TestMetadata("fields.kt")
            public void testFields() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/fields.kt", this::doTest);
            }

            @TestMetadata("finalReturnType.kt")
            public void testFinalReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/finalReturnType.kt", this::doTest);
            }

            @TestMetadata("outIn.kt")
            public void testOutIn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/outIn.kt", this::doTest);
            }

            @TestMetadata("outInv.kt")
            public void testOutInv() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/outInv.kt", this::doTest);
            }

            @TestMetadata("topLevelIn.kt")
            public void testTopLevelIn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/topLevelIn.kt", this::doTest);
            }

            @TestMetadata("topLevelInv.kt")
            public void testTopLevelInv() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/topLevelInv.kt", this::doTest);
            }

            @TestMetadata("typeParameter.kt")
            public void testTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/writeSignature/declarationSiteVariance/wildcardOptimization/typeParameter.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/writeSignature/defaultImpls")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultImpls extends AbstractWriteSignatureTest {
        public void testAllFilesPresentInDefaultImpls() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/defaultImpls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("functionTypeParameterClash.kt")
        public void testFunctionTypeParameterClash() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/defaultImpls/functionTypeParameterClash.kt", this::doTest);
        }

        @TestMetadata("functionTypeParameterClashWith_I.kt")
        public void testFunctionTypeParameterClashWith_I() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/defaultImpls/functionTypeParameterClashWith_I.kt", this::doTest);
        }

        @TestMetadata("propertyTypeParameterClash.kt")
        public void testPropertyTypeParameterClash() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/defaultImpls/propertyTypeParameterClash.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeSignature/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineClasses extends AbstractWriteSignatureTest {
        public void testAllFilesPresentInInlineClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("basicInlineClassDeclarationCodegen.kt")
        public void testBasicInlineClassDeclarationCodegen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/basicInlineClassDeclarationCodegen.kt", this::doTest);
        }

        @TestMetadata("genericInlineClassBasedOnGenericType.kt")
        public void testGenericInlineClassBasedOnGenericType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/genericInlineClassBasedOnGenericType.kt", this::doTest);
        }

        @TestMetadata("genericInlineClassWithDefaultTypeParameter.kt")
        public void testGenericInlineClassWithDefaultTypeParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/genericInlineClassWithDefaultTypeParameter.kt", this::doTest);
        }

        @TestMetadata("genericInlineClassWithNotNullTypeParameter.kt")
        public void testGenericInlineClassWithNotNullTypeParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/genericInlineClassWithNotNullTypeParameter.kt", this::doTest);
        }

        @TestMetadata("inlineClassAsGenericArgument.kt")
        public void testInlineClassAsGenericArgument() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/inlineClassAsGenericArgument.kt", this::doTest);
        }

        @TestMetadata("inlineClassBasedOnOtherInlineClass.kt")
        public void testInlineClassBasedOnOtherInlineClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/inlineClassBasedOnOtherInlineClass.kt", this::doTest);
        }

        @TestMetadata("inlineClassWithComplexSubstitutedType.kt")
        public void testInlineClassWithComplexSubstitutedType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/inlineClassWithComplexSubstitutedType.kt", this::doTest);
        }

        @TestMetadata("inlineClassesInsideFunctionalTypes.kt")
        public void testInlineClassesInsideFunctionalTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/inlineClassesInsideFunctionalTypes.kt", this::doTest);
        }

        @TestMetadata("nullableInlineClassType.kt")
        public void testNullableInlineClassType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/nullableInlineClassType.kt", this::doTest);
        }

        @TestMetadata("simpleSignatureWithInlineClassTypesAsPrimitive.kt")
        public void testSimpleSignatureWithInlineClassTypesAsPrimitive() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/simpleSignatureWithInlineClassTypesAsPrimitive.kt", this::doTest);
        }

        @TestMetadata("simpleSignatureWithInlineClassTypesAsReference.kt")
        public void testSimpleSignatureWithInlineClassTypesAsReference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/inlineClasses/simpleSignatureWithInlineClassTypesAsReference.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/writeSignature/nothing")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Nothing extends AbstractWriteSignatureTest {
        public void testAllFilesPresentInNothing() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/writeSignature/nothing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("nothing.kt")
        public void testNothing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/nothing/nothing.kt", this::doTest);
        }

        @TestMetadata("nullableNothing.kt")
        public void testNullableNothing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/writeSignature/nothing/nullableNothing.kt", this::doTest);
        }
    }
}
