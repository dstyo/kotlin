/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.jvm.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/loadJava/compiledJava")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class LoadJavaWithFastClassReadingTestGenerated extends AbstractLoadJavaWithFastClassReadingTest {
    public void testAllFilesPresentInCompiledJava() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
    }

    @TestMetadata("ArrayTypeVariance.java")
    public void testArrayTypeVariance() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ArrayTypeVariance.java", this::doTestCompiledJava);
    }

    @TestMetadata("ClassDoesNotOverrideMethod.java")
    public void testClassDoesNotOverrideMethod() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ClassDoesNotOverrideMethod.java", this::doTestCompiledJava);
    }

    @TestMetadata("ClassWithConstVal.java")
    public void testClassWithConstVal() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ClassWithConstVal.java", this::doTestCompiledJava);
    }

    @TestMetadata("ClassWithTypeP.java")
    public void testClassWithTypeP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ClassWithTypeP.java", this::doTestCompiledJava);
    }

    @TestMetadata("ClassWithTypePExtendsIterableP.java")
    public void testClassWithTypePExtendsIterableP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ClassWithTypePExtendsIterableP.java", this::doTestCompiledJava);
    }

    @TestMetadata("ClassWithTypePP.java")
    public void testClassWithTypePP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ClassWithTypePP.java", this::doTestCompiledJava);
    }

    @TestMetadata("ClassWithTypePRefNext.java")
    public void testClassWithTypePRefNext() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ClassWithTypePRefNext.java", this::doTestCompiledJava);
    }

    @TestMetadata("ClassWithTypePRefSelf.java")
    public void testClassWithTypePRefSelf() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ClassWithTypePRefSelf.java", this::doTestCompiledJava);
    }

    @TestMetadata("ClassWithTypePRefSelfAndClass.java")
    public void testClassWithTypePRefSelfAndClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/ClassWithTypePRefSelfAndClass.java", this::doTestCompiledJava);
    }

    @TestMetadata("FieldAsVar.java")
    public void testFieldAsVar() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/FieldAsVar.java", this::doTestCompiledJava);
    }

    @TestMetadata("FieldOfArrayType.java")
    public void testFieldOfArrayType() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/FieldOfArrayType.java", this::doTestCompiledJava);
    }

    @TestMetadata("FinalFieldAsVal.java")
    public void testFinalFieldAsVal() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/FinalFieldAsVal.java", this::doTestCompiledJava);
    }

    @TestMetadata("InheritMethodsDifferentReturnTypes.java")
    public void testInheritMethodsDifferentReturnTypes() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/InheritMethodsDifferentReturnTypes.java", this::doTestCompiledJava);
    }

    @TestMetadata("InheritMethodsDifferentReturnTypesGeneric.java")
    public void testInheritMethodsDifferentReturnTypesGeneric() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/InheritMethodsDifferentReturnTypesGeneric.java", this::doTestCompiledJava);
    }

    @TestMetadata("InnerClass.java")
    public void testInnerClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/InnerClass.java", this::doTestCompiledJava);
    }

    @TestMetadata("InnerClassReferencesOuterTP.java")
    public void testInnerClassReferencesOuterTP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/InnerClassReferencesOuterTP.java", this::doTestCompiledJava);
    }

    @TestMetadata("InnerClassTypeMultipleGeneric.java")
    public void testInnerClassTypeMultipleGeneric() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/InnerClassTypeMultipleGeneric.java", this::doTestCompiledJava);
    }

    @TestMetadata("InnerClassesInGeneric.java")
    public void testInnerClassesInGeneric() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/InnerClassesInGeneric.java", this::doTestCompiledJava);
    }

    @TestMetadata("InnerOfGeneric.java")
    public void testInnerOfGeneric() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/InnerOfGeneric.java", this::doTestCompiledJava);
    }

    @TestMetadata("IntrinsicCompanionObject.java")
    public void testIntrinsicCompanionObject() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/IntrinsicCompanionObject.java", this::doTestCompiledJava);
    }

    @TestMetadata("MethodReferencesOuterClassTP.java")
    public void testMethodReferencesOuterClassTP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/MethodReferencesOuterClassTP.java", this::doTestCompiledJava);
    }

    @TestMetadata("MethodTypePOneUpperBound.java")
    public void testMethodTypePOneUpperBound() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/MethodTypePOneUpperBound.java", this::doTestCompiledJava);
    }

    @TestMetadata("MethodTypePTwoUpperBounds.java")
    public void testMethodTypePTwoUpperBounds() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/MethodTypePTwoUpperBounds.java", this::doTestCompiledJava);
    }

    @TestMetadata("MethodWithTypeP.java")
    public void testMethodWithTypeP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/MethodWithTypeP.java", this::doTestCompiledJava);
    }

    @TestMetadata("MethodWithTypePP.java")
    public void testMethodWithTypePP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/MethodWithTypePP.java", this::doTestCompiledJava);
    }

    @TestMetadata("MethodWithTypePRefClassP.java")
    public void testMethodWithTypePRefClassP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/MethodWithTypePRefClassP.java", this::doTestCompiledJava);
    }

    @TestMetadata("MethosWithPRefTP.java")
    public void testMethosWithPRefTP() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/MethosWithPRefTP.java", this::doTestCompiledJava);
    }

    @TestMetadata("MyException.java")
    public void testMyException() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/MyException.java", this::doTestCompiledJava);
    }

    @TestMetadata("NestedClass.java")
    public void testNestedClass() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/NestedClass.java", this::doTestCompiledJava);
    }

    @TestMetadata("OverrideMethod.java")
    public void testOverrideMethod() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/OverrideMethod.java", this::doTestCompiledJava);
    }

    @TestMetadata("PackageLocalVisibility.java")
    public void testPackageLocalVisibility() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/PackageLocalVisibility.java", this::doTestCompiledJava);
    }

    @TestMetadata("PrivateMembers.java")
    public void testPrivateMembers() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/PrivateMembers.java", this::doTestCompiledJava);
    }

    @TestMetadata("PrivateMembersInHierarchy.java")
    public void testPrivateMembersInHierarchy() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/PrivateMembersInHierarchy.java", this::doTestCompiledJava);
    }

    @TestMetadata("RawOverrides.java")
    public void testRawOverrides() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/RawOverrides.java", this::doTestCompiledJava);
    }

    @TestMetadata("RawTypeWithUpperBound.java")
    public void testRawTypeWithUpperBound() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/RawTypeWithUpperBound.java", this::doTestCompiledJava);
    }

    @TestMetadata("RawUpperBound.java")
    public void testRawUpperBound() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/RawUpperBound.java", this::doTestCompiledJava);
    }

    @TestMetadata("RecursiveRawUpperBound.java")
    public void testRecursiveRawUpperBound() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/RecursiveRawUpperBound.java", this::doTestCompiledJava);
    }

    @TestMetadata("RecursiveWildcardUpperBound.java")
    public void testRecursiveWildcardUpperBound() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/RecursiveWildcardUpperBound.java", this::doTestCompiledJava);
    }

    @TestMetadata("RemoveRedundantProjectionKind.java")
    public void testRemoveRedundantProjectionKind() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/RemoveRedundantProjectionKind.java", this::doTestCompiledJava);
    }

    @TestMetadata("Simple.java")
    public void testSimple() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/Simple.java", this::doTestCompiledJava);
    }

    @TestMetadata("SubclassFromNested.java")
    public void testSubclassFromNested() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/SubclassFromNested.java", this::doTestCompiledJava);
    }

    @TestMetadata("TopLevel$Class.java")
    public void testTopLevel$Class() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/TopLevel$Class.java", this::doTestCompiledJava);
    }

    @TestMetadata("TwoFields.java")
    public void testTwoFields() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/TwoFields.java", this::doTestCompiledJava);
    }

    @TestMetadata("UnboundWildcard.java")
    public void testUnboundWildcard() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/UnboundWildcard.java", this::doTestCompiledJava);
    }

    @TestMetadata("WildcardBounds.java")
    public void testWildcardBounds() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/WildcardBounds.java", this::doTestCompiledJava);
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotations extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInAnnotations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/annotations"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("AnnotatedAnnotation.java")
        public void testAnnotatedAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotatedAnnotation.java", this::doTestCompiledJava);
        }

        @TestMetadata("AnnotatedConstructor.java")
        public void testAnnotatedConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotatedConstructor.java", this::doTestCompiledJava);
        }

        @TestMetadata("AnnotatedEnumEntry.java")
        public void testAnnotatedEnumEntry() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotatedEnumEntry.java", this::doTestCompiledJava);
        }

        @TestMetadata("AnnotatedField.java")
        public void testAnnotatedField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotatedField.java", this::doTestCompiledJava);
        }

        @TestMetadata("AnnotatedMethod.java")
        public void testAnnotatedMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotatedMethod.java", this::doTestCompiledJava);
        }

        @TestMetadata("AnnotatedValueParameter.java")
        public void testAnnotatedValueParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotatedValueParameter.java", this::doTestCompiledJava);
        }

        @TestMetadata("AnnotationInParam.java")
        public void testAnnotationInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotationInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("AnnotationRetentions.java")
        public void testAnnotationRetentions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotationRetentions.java", this::doTestCompiledJava);
        }

        @TestMetadata("AnnotationTargets.java")
        public void testAnnotationTargets() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/AnnotationTargets.java", this::doTestCompiledJava);
        }

        @TestMetadata("ArithmeticExpressionInParam.java")
        public void testArithmeticExpressionInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/ArithmeticExpressionInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("ArrayOfEnumInParam.java")
        public void testArrayOfEnumInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/ArrayOfEnumInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("ArrayOfStringInParam.java")
        public void testArrayOfStringInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/ArrayOfStringInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("ClassObjectArrayInParam.java")
        public void testClassObjectArrayInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/ClassObjectArrayInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("ClassObjectInParam.java")
        public void testClassObjectInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/ClassObjectInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("ClassObjectInParamRaw.java")
        public void testClassObjectInParamRaw() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/ClassObjectInParamRaw.java", this::doTestCompiledJava);
        }

        @TestMetadata("ClassObjectInParamVariance.java")
        public void testClassObjectInParamVariance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/ClassObjectInParamVariance.java", this::doTestCompiledJava);
        }

        @TestMetadata("CustomAnnotation.java")
        public void testCustomAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/CustomAnnotation.java", this::doTestCompiledJava);
        }

        @TestMetadata("CustomAnnotationWithDefaultParameter.java")
        public void testCustomAnnotationWithDefaultParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/CustomAnnotationWithDefaultParameter.java", this::doTestCompiledJava);
        }

        @TestMetadata("EmptyArrayInParam.java")
        public void testEmptyArrayInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/EmptyArrayInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("EnumArgumentWithCustomToString.java")
        public void testEnumArgumentWithCustomToString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/EnumArgumentWithCustomToString.java", this::doTestCompiledJava);
        }

        @TestMetadata("EnumConstructorParameter.java")
        public void testEnumConstructorParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/EnumConstructorParameter.java", this::doTestCompiledJava);
        }

        @TestMetadata("EnumInParam.java")
        public void testEnumInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/EnumInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("JavaDocDeprecated.java")
        public void testJavaDocDeprecated() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/JavaDocDeprecated.java", this::doTestCompiledJava);
        }

        @TestMetadata("NestedEnumArgument.java")
        public void testNestedEnumArgument() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/NestedEnumArgument.java", this::doTestCompiledJava);
        }

        @TestMetadata("PrimitiveValueInParam.java")
        public void testPrimitiveValueInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/PrimitiveValueInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("RecursiveAnnotation.java")
        public void testRecursiveAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/RecursiveAnnotation.java", this::doTestCompiledJava);
        }

        @TestMetadata("RecursiveAnnotation2.java")
        public void testRecursiveAnnotation2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/RecursiveAnnotation2.java", this::doTestCompiledJava);
        }

        @TestMetadata("SimpleAnnotation.java")
        public void testSimpleAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/SimpleAnnotation.java", this::doTestCompiledJava);
        }

        @TestMetadata("StringConcatenationInParam.java")
        public void testStringConcatenationInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/StringConcatenationInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("StringConstantInParam.java")
        public void testStringConstantInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/StringConstantInParam.java", this::doTestCompiledJava);
        }

        @TestMetadata("StringInParam.java")
        public void testStringInParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/annotations/StringInParam.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/constructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constructor extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInConstructor() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/constructor"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ConstructorGenericDeep.java")
        public void testConstructorGenericDeep() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/constructor/ConstructorGenericDeep.java", this::doTestCompiledJava);
        }

        @TestMetadata("ConstructorGenericSimple.java")
        public void testConstructorGenericSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/constructor/ConstructorGenericSimple.java", this::doTestCompiledJava);
        }

        @TestMetadata("ConstructorGenericUpperBound.java")
        public void testConstructorGenericUpperBound() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/constructor/ConstructorGenericUpperBound.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/enum")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Enum extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInEnum() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/enum"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("EnumMembers.java")
        public void testEnumMembers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/enum/EnumMembers.java", this::doTestCompiledJava);
        }

        @TestMetadata("EnumWithSpecializedEntry.java")
        public void testEnumWithSpecializedEntry() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/enum/EnumWithSpecializedEntry.java", this::doTestCompiledJava);
        }

        @TestMetadata("JavaEnum.java")
        public void testJavaEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/enum/JavaEnum.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/javaBean")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaBean extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInJavaBean() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/javaBean"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("DifferentGetterAndSetter.java")
        public void testDifferentGetterAndSetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/javaBean/DifferentGetterAndSetter.java", this::doTestCompiledJava);
        }

        @TestMetadata("JavaBeanAbstractGetter.java")
        public void testJavaBeanAbstractGetter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/javaBean/JavaBeanAbstractGetter.java", this::doTestCompiledJava);
        }

        @TestMetadata("JavaBeanVal.java")
        public void testJavaBeanVal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/javaBean/JavaBeanVal.java", this::doTestCompiledJava);
        }

        @TestMetadata("JavaBeanVar.java")
        public void testJavaBeanVar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/javaBean/JavaBeanVar.java", this::doTestCompiledJava);
        }

        @TestMetadata("JavaBeanVarOfGenericType.java")
        public void testJavaBeanVarOfGenericType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/javaBean/JavaBeanVarOfGenericType.java", this::doTestCompiledJava);
        }

        @TestMetadata("TwoSetters.java")
        public void testTwoSetters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/javaBean/TwoSetters.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class KotlinSignature extends AbstractLoadJavaWithFastClassReadingTest {
        @TestMetadata("AllBoundsInWhen.java")
        public void testAllBoundsInWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/AllBoundsInWhen.java", this::doTestCompiledJava);
        }

        public void testAllFilesPresentInKotlinSignature() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/kotlinSignature"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ArrayType.java")
        public void testArrayType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/ArrayType.java", this::doTestCompiledJava);
        }

        @TestMetadata("ConstructorWithNewTypeParams.java")
        public void testConstructorWithNewTypeParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/ConstructorWithNewTypeParams.java", this::doTestCompiledJava);
        }

        @TestMetadata("ConstructorWithParentTypeParams.java")
        public void testConstructorWithParentTypeParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/ConstructorWithParentTypeParams.java", this::doTestCompiledJava);
        }

        @TestMetadata("ConstructorWithSeveralParams.java")
        public void testConstructorWithSeveralParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/ConstructorWithSeveralParams.java", this::doTestCompiledJava);
        }

        @TestMetadata("ConstructorWithoutParams.java")
        public void testConstructorWithoutParams() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/ConstructorWithoutParams.java", this::doTestCompiledJava);
        }

        @TestMetadata("CustomProjectionKind.java")
        public void testCustomProjectionKind() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/CustomProjectionKind.java", this::doTestCompiledJava);
        }

        @TestMetadata("MethodWithFunctionTypes.java")
        public void testMethodWithFunctionTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithFunctionTypes.java", this::doTestCompiledJava);
        }

        @TestMetadata("MethodWithGenerics.java")
        public void testMethodWithGenerics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithGenerics.java", this::doTestCompiledJava);
        }

        @TestMetadata("MethodWithMappedClasses.java")
        public void testMethodWithMappedClasses() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithMappedClasses.java", this::doTestCompiledJava);
        }

        @TestMetadata("MethodWithTypeParameters.java")
        public void testMethodWithTypeParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithTypeParameters.java", this::doTestCompiledJava);
        }

        @TestMetadata("MethodWithVararg.java")
        public void testMethodWithVararg() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithVararg.java", this::doTestCompiledJava);
        }

        @TestMetadata("PropertyArrayTypes.java")
        public void testPropertyArrayTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/PropertyArrayTypes.java", this::doTestCompiledJava);
        }

        @TestMetadata("PropertyComplexTypes.java")
        public void testPropertyComplexTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/PropertyComplexTypes.java", this::doTestCompiledJava);
        }

        @TestMetadata("PropertySimpleType.java")
        public void testPropertySimpleType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/PropertySimpleType.java", this::doTestCompiledJava);
        }

        @TestMetadata("StarProjection.java")
        public void testStarProjection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/StarProjection.java", this::doTestCompiledJava);
        }

        @TestMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/error")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Error extends AbstractLoadJavaWithFastClassReadingTest {
            public void testAllFilesPresentInError() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/kotlinSignature/error"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
            }

            @TestMetadata("WrongProjectionKind.java")
            public void testWrongProjectionKind() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/error/WrongProjectionKind.java", this::doTestCompiledJava);
            }

            @TestMetadata("WrongReturnTypeStructure.java")
            public void testWrongReturnTypeStructure() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/error/WrongReturnTypeStructure.java", this::doTestCompiledJava);
            }

            @TestMetadata("WrongTypeParameterBoundStructure1.java")
            public void testWrongTypeParameterBoundStructure1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/error/WrongTypeParameterBoundStructure1.java", this::doTestCompiledJava);
            }

            @TestMetadata("WrongValueParameterStructure1.java")
            public void testWrongValueParameterStructure1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/error/WrongValueParameterStructure1.java", this::doTestCompiledJava);
            }
        }

        @TestMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Propagation extends AbstractLoadJavaWithFastClassReadingTest {
            public void testAllFilesPresentInPropagation() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
            }

            @TestMetadata("PropagateTypeArgumentNullable.java")
            public void testPropagateTypeArgumentNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/PropagateTypeArgumentNullable.java", this::doTestCompiledJava);
            }

            @TestMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Parameter extends AbstractLoadJavaWithFastClassReadingTest {
                public void testAllFilesPresentInParameter() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
                }

                @TestMetadata("ChangeProjectionKind1.java")
                public void testChangeProjectionKind1() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/ChangeProjectionKind1.java", this::doTestCompiledJava);
                }

                @TestMetadata("DeeplySubstitutedClassParameter.java")
                public void testDeeplySubstitutedClassParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/DeeplySubstitutedClassParameter.java", this::doTestCompiledJava);
                }

                @TestMetadata("DeeplySubstitutedClassParameter2.java")
                public void testDeeplySubstitutedClassParameter2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/DeeplySubstitutedClassParameter2.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNotVararg.java")
                public void testInheritNotVararg() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritNotVararg.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNotVarargInteger.java")
                public void testInheritNotVarargInteger() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritNotVarargInteger.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNotVarargNotNull.java")
                public void testInheritNotVarargNotNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritNotVarargNotNull.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNotVarargPrimitive.java")
                public void testInheritNotVarargPrimitive() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritNotVarargPrimitive.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNullability.java")
                public void testInheritNullability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritNullability.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritVararg.java")
                public void testInheritVararg() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritVararg.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritVarargInteger.java")
                public void testInheritVarargInteger() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritVarargInteger.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritVarargNotNull.java")
                public void testInheritVarargNotNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritVarargNotNull.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritVarargPrimitive.java")
                public void testInheritVarargPrimitive() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/InheritVarargPrimitive.java", this::doTestCompiledJava);
                }

                @TestMetadata("Kt3302.java")
                public void testKt3302() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/Kt3302.java", this::doTestCompiledJava);
                }

                @TestMetadata("MutableToReadOnly.java")
                public void testMutableToReadOnly() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/MutableToReadOnly.java", this::doTestCompiledJava);
                }

                @TestMetadata("NotNullToNullable.java")
                public void testNotNullToNullable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/NotNullToNullable.java", this::doTestCompiledJava);
                }

                @TestMetadata("NullableToNotNull.java")
                public void testNullableToNotNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/NullableToNotNull.java", this::doTestCompiledJava);
                }

                @TestMetadata("NullableToNotNullKotlinSignature.java")
                public void testNullableToNotNullKotlinSignature() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/NullableToNotNullKotlinSignature.java", this::doTestCompiledJava);
                }

                @TestMetadata("OverrideWithErasedParameter.java")
                public void testOverrideWithErasedParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/OverrideWithErasedParameter.java", this::doTestCompiledJava);
                }

                @TestMetadata("ReadOnlyToMutable.java")
                public void testReadOnlyToMutable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/ReadOnlyToMutable.java", this::doTestCompiledJava);
                }

                @TestMetadata("SubclassFromGenericAndNot.java")
                public void testSubclassFromGenericAndNot() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/SubclassFromGenericAndNot.java", this::doTestCompiledJava);
                }

                @TestMetadata("SubstitutedClassParameter.java")
                public void testSubstitutedClassParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/SubstitutedClassParameter.java", this::doTestCompiledJava);
                }

                @TestMetadata("SubstitutedClassParameters.java")
                public void testSubstitutedClassParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/parameter/SubstitutedClassParameters.java", this::doTestCompiledJava);
                }
            }

            @TestMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Return extends AbstractLoadJavaWithFastClassReadingTest {
                @TestMetadata("AddNotNullJavaSubtype.java")
                public void testAddNotNullJavaSubtype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/AddNotNullJavaSubtype.java", this::doTestCompiledJava);
                }

                @TestMetadata("AddNotNullSameJavaType.java")
                public void testAddNotNullSameJavaType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/AddNotNullSameJavaType.java", this::doTestCompiledJava);
                }

                @TestMetadata("AddNullabilityJavaSubtype.java")
                public void testAddNullabilityJavaSubtype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/AddNullabilityJavaSubtype.java", this::doTestCompiledJava);
                }

                @TestMetadata("AddNullabilitySameGenericType1.java")
                public void testAddNullabilitySameGenericType1() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/AddNullabilitySameGenericType1.java", this::doTestCompiledJava);
                }

                @TestMetadata("AddNullabilitySameGenericType2.java")
                public void testAddNullabilitySameGenericType2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/AddNullabilitySameGenericType2.java", this::doTestCompiledJava);
                }

                @TestMetadata("AddNullabilitySameJavaType.java")
                public void testAddNullabilitySameJavaType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/AddNullabilitySameJavaType.java", this::doTestCompiledJava);
                }

                public void testAllFilesPresentInReturn() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
                }

                @TestMetadata("CantMakeImmutableInSubclass.java")
                public void testCantMakeImmutableInSubclass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/CantMakeImmutableInSubclass.java", this::doTestCompiledJava);
                }

                @TestMetadata("DeeplySubstitutedClassParameter.java")
                public void testDeeplySubstitutedClassParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/DeeplySubstitutedClassParameter.java", this::doTestCompiledJava);
                }

                @TestMetadata("DeeplySubstitutedClassParameter2.java")
                public void testDeeplySubstitutedClassParameter2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/DeeplySubstitutedClassParameter2.java", this::doTestCompiledJava);
                }

                @TestMetadata("HalfSubstitutedTypeParameters.java")
                public void testHalfSubstitutedTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/HalfSubstitutedTypeParameters.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNullabilityGenericSubclassSimple.java")
                public void testInheritNullabilityGenericSubclassSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/InheritNullabilityGenericSubclassSimple.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNullabilityJavaSubtype.java")
                public void testInheritNullabilityJavaSubtype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/InheritNullabilityJavaSubtype.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNullabilitySameGenericType.java")
                public void testInheritNullabilitySameGenericType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/InheritNullabilitySameGenericType.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritNullabilitySameJavaType.java")
                public void testInheritNullabilitySameJavaType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/InheritNullabilitySameJavaType.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritProjectionKind.java")
                public void testInheritProjectionKind() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/InheritProjectionKind.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritReadOnlinessOfArgument.java")
                public void testInheritReadOnlinessOfArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/InheritReadOnlinessOfArgument.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritReadOnlinessSameClass.java")
                public void testInheritReadOnlinessSameClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/InheritReadOnlinessSameClass.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritReadOnlinessSubclass.java")
                public void testInheritReadOnlinessSubclass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/InheritReadOnlinessSubclass.java", this::doTestCompiledJava);
                }

                @TestMetadata("SameProjectionKind.java")
                public void testSameProjectionKind() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/SameProjectionKind.java", this::doTestCompiledJava);
                }

                @TestMetadata("SubclassFromGenericAndNot.java")
                public void testSubclassFromGenericAndNot() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/SubclassFromGenericAndNot.java", this::doTestCompiledJava);
                }

                @TestMetadata("SubclassOfCollection.java")
                public void testSubclassOfCollection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/SubclassOfCollection.java", this::doTestCompiledJava);
                }

                @TestMetadata("SubclassOfMapEntry.java")
                public void testSubclassOfMapEntry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/SubclassOfMapEntry.java", this::doTestCompiledJava);
                }

                @TestMetadata("SubstitutedClassParameter.java")
                public void testSubstitutedClassParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/SubstitutedClassParameter.java", this::doTestCompiledJava);
                }

                @TestMetadata("SubstitutedClassParameters.java")
                public void testSubstitutedClassParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/SubstitutedClassParameters.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoSuperclassesConflictingProjectionKinds.java")
                public void testTwoSuperclassesConflictingProjectionKinds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TwoSuperclassesConflictingProjectionKinds.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoSuperclassesInvariantAndCovariantInferMutability.java")
                public void testTwoSuperclassesInvariantAndCovariantInferMutability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TwoSuperclassesInvariantAndCovariantInferMutability.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoSuperclassesInvariantAndCovariantInferNullability.java")
                public void testTwoSuperclassesInvariantAndCovariantInferNullability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TwoSuperclassesInvariantAndCovariantInferNullability.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoSuperclassesMutableAndNot.java")
                public void testTwoSuperclassesMutableAndNot() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TwoSuperclassesMutableAndNot.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoSuperclassesReturnJavaSubtype.java")
                public void testTwoSuperclassesReturnJavaSubtype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TwoSuperclassesReturnJavaSubtype.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoSuperclassesReturnSameJavaType.java")
                public void testTwoSuperclassesReturnSameJavaType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TwoSuperclassesReturnSameJavaType.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoSuperclassesSupplementNotNull.java")
                public void testTwoSuperclassesSupplementNotNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TwoSuperclassesSupplementNotNull.java", this::doTestCompiledJava);
                }

                @TestMetadata("TypeParamOfClass.java")
                public void testTypeParamOfClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TypeParamOfClass.java", this::doTestCompiledJava);
                }

                @TestMetadata("TypeParamOfClassSubstituted.java")
                public void testTypeParamOfClassSubstituted() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TypeParamOfClassSubstituted.java", this::doTestCompiledJava);
                }

                @TestMetadata("TypeParamOfFun.java")
                public void testTypeParamOfFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/return/TypeParamOfFun.java", this::doTestCompiledJava);
                }
            }

            @TestMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeParameter extends AbstractLoadJavaWithFastClassReadingTest {
                public void testAllFilesPresentInTypeParameter() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
                }

                @TestMetadata("InheritNullability.java")
                public void testInheritNullability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter/InheritNullability.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoBounds.java")
                public void testTwoBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter/TwoBounds.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoSuperclasses.java")
                public void testTwoSuperclasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter/TwoSuperclasses.java", this::doTestCompiledJava);
                }

                @TestMetadata("TwoTypeParameters.java")
                public void testTwoTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter/TwoTypeParameters.java", this::doTestCompiledJava);
                }

                @TestMetadata("UseParameterAsUpperBound.java")
                public void testUseParameterAsUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter/UseParameterAsUpperBound.java", this::doTestCompiledJava);
                }

                @TestMetadata("UseParameterInUpperBound.java")
                public void testUseParameterInUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter/UseParameterInUpperBound.java", this::doTestCompiledJava);
                }

                @TestMetadata("UseParameterInUpperBoundWithKotlinSignature.java")
                public void testUseParameterInUpperBoundWithKotlinSignature() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/kotlinSignature/propagation/typeParameter/UseParameterInUpperBoundWithKotlinSignature.java", this::doTestCompiledJava);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/library")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Library extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInLibrary() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/library"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("LoadIterable.java")
        public void testLoadIterable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/library/LoadIterable.java", this::doTestCompiledJava);
        }

        @TestMetadata("LoadIterator.java")
        public void testLoadIterator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/library/LoadIterator.java", this::doTestCompiledJava);
        }

        @TestMetadata("Max.java")
        public void testMax() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/library/Max.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/modality")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Modality extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInModality() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/modality"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ModalityOfFakeOverrides.java")
        public void testModalityOfFakeOverrides() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/modality/ModalityOfFakeOverrides.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/mutability")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Mutability extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInMutability() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/mutability"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("LoadIterable.java")
        public void testLoadIterable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/mutability/LoadIterable.java", this::doTestCompiledJava);
        }

        @TestMetadata("LoadIterableWithConflict.java")
        public void testLoadIterableWithConflict() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/mutability/LoadIterableWithConflict.java", this::doTestCompiledJava);
        }

        @TestMetadata("LoadIterableWithNullability.java")
        public void testLoadIterableWithNullability() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/mutability/LoadIterableWithNullability.java", this::doTestCompiledJava);
        }

        @TestMetadata("LoadIterableWithPropagation.java")
        public void testLoadIterableWithPropagation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/mutability/LoadIterableWithPropagation.java", this::doTestCompiledJava);
        }

        @TestMetadata("ReadOnlyExtendsWildcard.java")
        public void testReadOnlyExtendsWildcard() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/mutability/ReadOnlyExtendsWildcard.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/notNull")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NotNull extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInNotNull() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/notNull"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("NotNullField.java")
        public void testNotNullField() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/notNull/NotNullField.java", this::doTestCompiledJava);
        }

        @TestMetadata("NotNullIntArray.java")
        public void testNotNullIntArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/notNull/NotNullIntArray.java", this::doTestCompiledJava);
        }

        @TestMetadata("NotNullMethod.java")
        public void testNotNullMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/notNull/NotNullMethod.java", this::doTestCompiledJava);
        }

        @TestMetadata("NotNullObjectArray.java")
        public void testNotNullObjectArray() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/notNull/NotNullObjectArray.java", this::doTestCompiledJava);
        }

        @TestMetadata("NotNullParameter.java")
        public void testNotNullParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/notNull/NotNullParameter.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/protectedPackage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedPackage extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInProtectedPackage() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/protectedPackage"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ProtectedPackageConstructor.java")
        public void testProtectedPackageConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageConstructor.java", this::doTestCompiledJava);
        }

        @TestMetadata("ProtectedPackageFun.java")
        public void testProtectedPackageFun() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageFun.java", this::doTestCompiledJava);
        }

        @TestMetadata("ProtectedPackageProperty.java")
        public void testProtectedPackageProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageProperty.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/protectedStatic")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedStatic extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInProtectedStatic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/protectedStatic"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ConstructorInProtectedStaticNestedClass.java")
        public void testConstructorInProtectedStaticNestedClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/protectedStatic/ConstructorInProtectedStaticNestedClass.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/rendering")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Rendering extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInRendering() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/rendering"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("Rendering.java")
        public void testRendering() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/rendering/Rendering.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/sam")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Sam extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInSam() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/sam"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("Comparator.java")
        public void testComparator() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/Comparator.java", this::doTestCompiledJava);
        }

        @TestMetadata("DifferentParametersCount.java")
        public void testDifferentParametersCount() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/DifferentParametersCount.java", this::doTestCompiledJava);
        }

        @TestMetadata("FakeStaticOverrides.java")
        public void testFakeStaticOverrides() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/FakeStaticOverrides.java", this::doTestCompiledJava);
        }

        @TestMetadata("FilenameFilter.java")
        public void testFilenameFilter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/FilenameFilter.java", this::doTestCompiledJava);
        }

        @TestMetadata("GenericInterfaceParameterWithSelfBound.java")
        public void testGenericInterfaceParameterWithSelfBound() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParameterWithSelfBound.java", this::doTestCompiledJava);
        }

        @TestMetadata("GenericInterfaceParametersWithBounds.java")
        public void testGenericInterfaceParametersWithBounds() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParametersWithBounds.java", this::doTestCompiledJava);
        }

        @TestMetadata("GenericMethodParameters.java")
        public void testGenericMethodParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/GenericMethodParameters.java", this::doTestCompiledJava);
        }

        @TestMetadata("InterfaceWithObjectMethod.java")
        public void testInterfaceWithObjectMethod() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/InterfaceWithObjectMethod.java", this::doTestCompiledJava);
        }

        @TestMetadata("Nested.java")
        public void testNested() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/Nested.java", this::doTestCompiledJava);
        }

        @TestMetadata("Runnable.java")
        public void testRunnable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/Runnable.java", this::doTestCompiledJava);
        }

        @TestMetadata("SamSubinterfaceOfTwo.java")
        public void testSamSubinterfaceOfTwo() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/SamSubinterfaceOfTwo.java", this::doTestCompiledJava);
        }

        @TestMetadata("SamSubinterfaceOverridding.java")
        public void testSamSubinterfaceOverridding() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/SamSubinterfaceOverridding.java", this::doTestCompiledJava);
        }

        @TestMetadata("StaticOverrides.java")
        public void testStaticOverrides() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/StaticOverrides.java", this::doTestCompiledJava);
        }

        @TestMetadata("SubstitutedSamInterface.java")
        public void testSubstitutedSamInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterface.java", this::doTestCompiledJava);
        }

        @TestMetadata("SubstitutedSamInterfaceSubclassOfBuiltin.java")
        public void testSubstitutedSamInterfaceSubclassOfBuiltin() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterfaceSubclassOfBuiltin.java", this::doTestCompiledJava);
        }

        @TestMetadata("VarargParameter.java")
        public void testVarargParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/VarargParameter.java", this::doTestCompiledJava);
        }

        @TestMetadata("compiler/testData/loadJava/compiledJava/sam/adapters")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Adapters extends AbstractLoadJavaWithFastClassReadingTest {
            public void testAllFilesPresentInAdapters() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/sam/adapters"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AmbiguousAdapters.java")
            public void testAmbiguousAdapters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/AmbiguousAdapters.java", this::doTestCompiledJava);
            }

            @TestMetadata("Basic.java")
            public void testBasic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/Basic.java", this::doTestCompiledJava);
            }

            @TestMetadata("Constructor.java")
            public void testConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/Constructor.java", this::doTestCompiledJava);
            }

            @TestMetadata("ConstructorWithAnnotations.java")
            public void testConstructorWithAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/ConstructorWithAnnotations.java", this::doTestCompiledJava);
            }

            @TestMetadata("DeepSamLoop.java")
            public void testDeepSamLoop() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/DeepSamLoop.java", this::doTestCompiledJava);
            }

            @TestMetadata("NoSamForClassTypeParameter.java")
            public void testNoSamForClassTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/NoSamForClassTypeParameter.java", this::doTestCompiledJava);
            }

            @TestMetadata("NoSamForMethodTypeParameter.java")
            public void testNoSamForMethodTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/NoSamForMethodTypeParameter.java", this::doTestCompiledJava);
            }

            @TestMetadata("NonTrivialFunctionType.java")
            public void testNonTrivialFunctionType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/NonTrivialFunctionType.java", this::doTestCompiledJava);
            }

            @TestMetadata("PrivateSamAdapter.java")
            public void testPrivateSamAdapter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/PrivateSamAdapter.java", this::doTestCompiledJava);
            }

            @TestMetadata("SelfAsParameter.java")
            public void testSelfAsParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/SelfAsParameter.java", this::doTestCompiledJava);
            }

            @TestMetadata("SeveralSamParameters.java")
            public void testSeveralSamParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/SeveralSamParameters.java", this::doTestCompiledJava);
            }

            @TestMetadata("TypeParameterOfClass.java")
            public void testTypeParameterOfClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfClass.java", this::doTestCompiledJava);
            }

            @TestMetadata("TypeParameterOfMethod.java")
            public void testTypeParameterOfMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfMethod.java", this::doTestCompiledJava);
            }

            @TestMetadata("TypeParameterOfOuterClass.java")
            public void testTypeParameterOfOuterClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfOuterClass.java", this::doTestCompiledJava);
            }

            @TestMetadata("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inheritance extends AbstractLoadJavaWithFastClassReadingTest {
                @TestMetadata("AdapterDoesntOverrideDeclaration.java")
                public void testAdapterDoesntOverrideDeclaration() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/AdapterDoesntOverrideDeclaration.java", this::doTestCompiledJava);
                }

                public void testAllFilesPresentInInheritance() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
                }

                @TestMetadata("InheritedAdapterAndDeclaration.java")
                public void testInheritedAdapterAndDeclaration() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedAdapterAndDeclaration.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritedAmbiguousAdapters.java")
                public void testInheritedAmbiguousAdapters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedAmbiguousAdapters.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritedAndOverriddenAmbiguousAdapters.java")
                public void testInheritedAndOverriddenAmbiguousAdapters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedAndOverriddenAmbiguousAdapters.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritedOverridden.java")
                public void testInheritedOverridden() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedOverridden.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritedOverriddenAdapter.java")
                public void testInheritedOverriddenAdapter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedOverriddenAdapter.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritedSameAdapters.java")
                public void testInheritedSameAdapters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedSameAdapters.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritedSameAdaptersWithSubstitution.java")
                public void testInheritedSameAdaptersWithSubstitution() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedSameAdaptersWithSubstitution.java", this::doTestCompiledJava);
                }

                @TestMetadata("InheritedSimple.java")
                public void testInheritedSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedSimple.java", this::doTestCompiledJava);
                }

                @TestMetadata("OverriddenAmbiguousAdapters.java")
                public void testOverriddenAmbiguousAdapters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/OverriddenAmbiguousAdapters.java", this::doTestCompiledJava);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/signatureAnnotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SignatureAnnotations extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInSignatureAnnotations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/signatureAnnotations"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("StableName.java")
        public void testStableName() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signatureAnnotations/StableName.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SignaturePropagation extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInSignaturePropagation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/signaturePropagation"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ArraysInSubtypes.java")
        public void testArraysInSubtypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/ArraysInSubtypes.java", this::doTestCompiledJava);
        }

        @TestMetadata("MethodTypeParameterErased.java")
        public void testMethodTypeParameterErased() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/MethodTypeParameterErased.java", this::doTestCompiledJava);
        }

        @TestMetadata("RawSuperType.java")
        public void testRawSuperType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperType.java", this::doTestCompiledJava);
        }

        @TestMetadata("RawSuperTypeWithBound.java")
        public void testRawSuperTypeWithBound() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperTypeWithBound.java", this::doTestCompiledJava);
        }

        @TestMetadata("RawSuperTypeWithRecursiveBound.java")
        public void testRawSuperTypeWithRecursiveBound() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperTypeWithRecursiveBound.java", this::doTestCompiledJava);
        }

        @TestMetadata("RawSuperTypeWithRecursiveBoundMultipleParameters.java")
        public void testRawSuperTypeWithRecursiveBoundMultipleParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperTypeWithRecursiveBoundMultipleParameters.java", this::doTestCompiledJava);
        }

        @TestMetadata("ReturnInnerSubclassOfSupersInner.java")
        public void testReturnInnerSubclassOfSupersInner() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/ReturnInnerSubclassOfSupersInner.java", this::doTestCompiledJava);
        }

        @TestMetadata("SubclassWithRawType.java")
        public void testSubclassWithRawType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/SubclassWithRawType.java", this::doTestCompiledJava);
        }

        @TestMetadata("TwoSuperclassesInconsistentGenericTypes.java")
        public void testTwoSuperclassesInconsistentGenericTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/signaturePropagation/TwoSuperclassesInconsistentGenericTypes.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/static")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Static extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInStatic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/static"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("DeeplyInnerClass.java")
        public void testDeeplyInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/DeeplyInnerClass.java", this::doTestCompiledJava);
        }

        @TestMetadata("DeeplyNestedStatic.java")
        public void testDeeplyNestedStatic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/DeeplyNestedStatic.java", this::doTestCompiledJava);
        }

        @TestMetadata("Enum.java")
        public void testEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/Enum.java", this::doTestCompiledJava);
        }

        @TestMetadata("InnerClass.java")
        public void testInnerClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/InnerClass.java", this::doTestCompiledJava);
        }

        @TestMetadata("Simple.java")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/Simple.java", this::doTestCompiledJava);
        }

        @TestMetadata("StaticFinal.java")
        public void testStaticFinal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/StaticFinal.java", this::doTestCompiledJava);
        }

        @TestMetadata("StaticMembersFromParentClass.java")
        public void testStaticMembersFromParentClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/StaticMembersFromParentClass.java", this::doTestCompiledJava);
        }

        @TestMetadata("StaticMembersFromParentClassVisibility.java")
        public void testStaticMembersFromParentClassVisibility() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/StaticMembersFromParentClassVisibility.java", this::doTestCompiledJava);
        }

        @TestMetadata("StaticMembersFromParentInterface.java")
        public void testStaticMembersFromParentInterface() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/StaticMembersFromParentInterface.java", this::doTestCompiledJava);
        }

        @TestMetadata("StaticMembersInEnum.java")
        public void testStaticMembersInEnum() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/StaticMembersInEnum.java", this::doTestCompiledJava);
        }

        @TestMetadata("StaticMembersInEnumFromParents.java")
        public void testStaticMembersInEnumFromParents() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/static/StaticMembersInEnumFromParents.java", this::doTestCompiledJava);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/vararg")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Vararg extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInVararg() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/vararg"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("VarargInt.java")
        public void testVarargInt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/vararg/VarargInt.java", this::doTestCompiledJava);
        }

        @TestMetadata("VarargString.java")
        public void testVarargString() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/loadJava/compiledJava/vararg/VarargString.java", this::doTestCompiledJava);
        }
    }
}
