/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.checkers.javac;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class DiagnosticsUsingJavacTestGenerated extends AbstractDiagnosticsUsingJavacTest {
    @TestMetadata("compiler/testData/diagnostics/tests")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Tests extends AbstractDiagnosticsUsingJavacTest {
        @TestMetadata("Abstract.kt")
        public void testAbstract() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Abstract.kt", this::doTest);
        }

        @TestMetadata("AbstractAccessor.kt")
        public void testAbstractAccessor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/AbstractAccessor.kt", this::doTest);
        }

        @TestMetadata("AbstractInAbstractClass.kt")
        public void testAbstractInAbstractClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/AbstractInAbstractClass.kt", this::doTest);
        }

        @TestMetadata("AbstractInClass.kt")
        public void testAbstractInClass() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/AbstractInClass.kt", this::doTest);
        }

        @TestMetadata("AbstractInTrait.kt")
        public void testAbstractInTrait() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/AbstractInTrait.kt", this::doTest);
        }

        public void testAllFilesPresentInTests() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("AnonymousInitializerVarAndConstructor.kt")
        public void testAnonymousInitializerVarAndConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/AnonymousInitializerVarAndConstructor.kt", this::doTest);
        }

        @TestMetadata("AnonymousInitializers.kt")
        public void testAnonymousInitializers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/AnonymousInitializers.kt", this::doTest);
        }

        @TestMetadata("AssignToArrayElement.kt")
        public void testAssignToArrayElement() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/AssignToArrayElement.kt", this::doTest);
        }

        @TestMetadata("AutoCreatedIt.kt")
        public void testAutoCreatedIt() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/AutoCreatedIt.kt", this::doTest);
        }

        @TestMetadata("BacktickNames.kt")
        public void testBacktickNames() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/BacktickNames.kt", this::doTest);
        }

        @TestMetadata("Basic.kt")
        public void testBasic() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Basic.kt", this::doTest);
        }

        @TestMetadata("BinaryCallsOnNullableValues.kt")
        public void testBinaryCallsOnNullableValues() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/BinaryCallsOnNullableValues.kt", this::doTest);
        }

        @TestMetadata("Bounds.kt")
        public void testBounds() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Bounds.kt", this::doTest);
        }

        @TestMetadata("BreakContinue.kt")
        public void testBreakContinue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/BreakContinue.kt", this::doTest);
        }

        @TestMetadata("BreakContinueInWhen.kt")
        public void testBreakContinueInWhen() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/BreakContinueInWhen.kt", this::doTest);
        }

        @TestMetadata("Builders.kt")
        public void testBuilders() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Builders.kt", this::doTest);
        }

        @TestMetadata("Casts.kt")
        public void testCasts() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Casts.kt", this::doTest);
        }

        @TestMetadata("CharacterLiterals.kt")
        public void testCharacterLiterals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/CharacterLiterals.kt", this::doTest);
        }

        @TestMetadata("checkType.kt")
        public void testCheckType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/checkType.kt", this::doTest);
        }

        @TestMetadata("CompareToWithErrorType.kt")
        public void testCompareToWithErrorType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/CompareToWithErrorType.kt", this::doTest);
        }

        @TestMetadata("Constants.kt")
        public void testConstants() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Constants.kt", this::doTest);
        }

        @TestMetadata("Constructors.kt")
        public void testConstructors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Constructors.kt", this::doTest);
        }

        @TestMetadata("ConstructorsOfPrimitives.kt")
        public void testConstructorsOfPrimitives() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ConstructorsOfPrimitives.kt", this::doTest);
        }

        @TestMetadata("CovariantOverrideType.kt")
        public void testCovariantOverrideType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/CovariantOverrideType.kt", this::doTest);
        }

        @TestMetadata("DefaultValueForParameterInFunctionType.kt")
        public void testDefaultValueForParameterInFunctionType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DefaultValueForParameterInFunctionType.kt", this::doTest);
        }

        @TestMetadata("DefaultValuesCheckWithoutBody.kt")
        public void testDefaultValuesCheckWithoutBody() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DefaultValuesCheckWithoutBody.kt", this::doTest);
        }

        @TestMetadata("DefaultValuesTypechecking.kt")
        public void testDefaultValuesTypechecking() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DefaultValuesTypechecking.kt", this::doTest);
        }

        @TestMetadata("DeferredTypes.kt")
        public void testDeferredTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DeferredTypes.kt", this::doTest);
        }

        @TestMetadata("DeprecatedGetSetPropertyDelegateConvention.kt")
        public void testDeprecatedGetSetPropertyDelegateConvention() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DeprecatedGetSetPropertyDelegateConvention.kt", this::doTest);
        }

        @TestMetadata("DeprecatedUnaryOperatorConventions.kt")
        public void testDeprecatedUnaryOperatorConventions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DeprecatedUnaryOperatorConventions.kt", this::doTest);
        }

        @TestMetadata("DiamondFunction.kt")
        public void testDiamondFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DiamondFunction.kt", this::doTest);
        }

        @TestMetadata("DiamondFunctionGeneric.kt")
        public void testDiamondFunctionGeneric() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DiamondFunctionGeneric.kt", this::doTest);
        }

        @TestMetadata("DiamondProperty.kt")
        public void testDiamondProperty() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/DiamondProperty.kt", this::doTest);
        }

        @TestMetadata("Dollar.kt")
        public void testDollar() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Dollar.kt", this::doTest);
        }

        @TestMetadata("EnumEntryAsType.kt")
        public void testEnumEntryAsType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/EnumEntryAsType.kt", this::doTest);
        }

        @TestMetadata("ExtensionCallInvoke.kt")
        public void testExtensionCallInvoke() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ExtensionCallInvoke.kt", this::doTest);
        }

        @TestMetadata("ExternalAccessors.kt")
        public void testExternalAccessors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ExternalAccessors.kt", this::doTest);
        }

        @TestMetadata("ExternalAndAbstract.kt")
        public void testExternalAndAbstract() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ExternalAndAbstract.kt", this::doTest);
        }

        @TestMetadata("fileDependencyRecursion.kt")
        public void testFileDependencyRecursion() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/fileDependencyRecursion.kt", this::doTest);
        }

        @TestMetadata("ForRangeConventions.kt")
        public void testForRangeConventions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ForRangeConventions.kt", this::doTest);
        }

        @TestMetadata("FreeFunctionCalledAsExtension.kt")
        public void testFreeFunctionCalledAsExtension() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/FreeFunctionCalledAsExtension.kt", this::doTest);
        }

        @TestMetadata("FunctionCalleeExpressions.kt")
        public void testFunctionCalleeExpressions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/FunctionCalleeExpressions.kt", this::doTest);
        }

        @TestMetadata("FunctionParameterWithoutType.kt")
        public void testFunctionParameterWithoutType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/FunctionParameterWithoutType.kt", this::doTest);
        }

        @TestMetadata("FunctionReturnTypes.kt")
        public void testFunctionReturnTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/FunctionReturnTypes.kt", this::doTest);
        }

        @TestMetadata("GenericArgumentConsistency.kt")
        public void testGenericArgumentConsistency() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/GenericArgumentConsistency.kt", this::doTest);
        }

        @TestMetadata("GenericFunctionIsLessSpecific.kt")
        public void testGenericFunctionIsLessSpecific() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/GenericFunctionIsLessSpecific.kt", this::doTest);
        }

        @TestMetadata("IdentityComparisonWithPrimitives.kt")
        public void testIdentityComparisonWithPrimitives() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/IdentityComparisonWithPrimitives.kt", this::doTest);
        }

        @TestMetadata("implicitIntersection.kt")
        public void testImplicitIntersection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/implicitIntersection.kt", this::doTest);
        }

        @TestMetadata("implicitNestedIntersection.kt")
        public void testImplicitNestedIntersection() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/implicitNestedIntersection.kt", this::doTest);
        }

        @TestMetadata("implicitNothing.kt")
        public void testImplicitNothing() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/implicitNothing.kt", this::doTest);
        }

        @TestMetadata("IncDec.kt")
        public void testIncDec() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/IncDec.kt", this::doTest);
        }

        @TestMetadata("IncorrectCharacterLiterals.kt")
        public void testIncorrectCharacterLiterals() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/IncorrectCharacterLiterals.kt", this::doTest);
        }

        @TestMetadata("InferNullabilityInThenBlock.kt")
        public void testInferNullabilityInThenBlock() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/InferNullabilityInThenBlock.kt", this::doTest);
        }

        @TestMetadata("Infix.kt")
        public void testInfix() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Infix.kt", this::doTest);
        }

        @TestMetadata("InfixModifierApplicability.kt")
        public void testInfixModifierApplicability() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/InfixModifierApplicability.kt", this::doTest);
        }

        @TestMetadata("InvokeAndRecursiveResolve.kt")
        public void testInvokeAndRecursiveResolve() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/InvokeAndRecursiveResolve.kt", this::doTest);
        }

        @TestMetadata("IsExpressions.kt")
        public void testIsExpressions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/IsExpressions.kt", this::doTest);
        }

        @TestMetadata("kt13401.kt")
        public void testKt13401() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/kt13401.kt", this::doTest);
        }

        @TestMetadata("kt310.kt")
        public void testKt310() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/kt310.kt", this::doTest);
        }

        @TestMetadata("kt435.kt")
        public void testKt435() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/kt435.kt", this::doTest);
        }

        @TestMetadata("kt53.kt")
        public void testKt53() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/kt53.kt", this::doTest);
        }

        @TestMetadata("LValueAssignment.kt")
        public void testLValueAssignment() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/LValueAssignment.kt", this::doTest);
        }

        @TestMetadata("LiteralAsResult.kt")
        public void testLiteralAsResult() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/LiteralAsResult.kt", this::doTest);
        }

        @TestMetadata("LocalClassAndShortSubpackageNames.kt")
        public void testLocalClassAndShortSubpackageNames() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/LocalClassAndShortSubpackageNames.kt", this::doTest);
        }

        @TestMetadata("localInterfaces.kt")
        public void testLocalInterfaces() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/localInterfaces.kt", this::doTest);
        }

        @TestMetadata("MultilineStringTemplates.kt")
        public void testMultilineStringTemplates() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/MultilineStringTemplates.kt", this::doTest);
        }

        @TestMetadata("MultipleBounds.kt")
        public void testMultipleBounds() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/MultipleBounds.kt", this::doTest);
        }

        @TestMetadata("NamedFunctionTypeParameterInSupertype.kt")
        public void testNamedFunctionTypeParameterInSupertype() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/NamedFunctionTypeParameterInSupertype.kt", this::doTest);
        }

        @TestMetadata("Nullability.kt")
        public void testNullability() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Nullability.kt", this::doTest);
        }

        @TestMetadata("NumberPrefixAndSuffix.kt")
        public void testNumberPrefixAndSuffix() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/NumberPrefixAndSuffix.kt", this::doTest);
        }

        @TestMetadata("ObjectWithConstructor.kt")
        public void testObjectWithConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ObjectWithConstructor.kt", this::doTest);
        }

        @TestMetadata("OperatorChecks.kt")
        public void testOperatorChecks() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/OperatorChecks.kt", this::doTest);
        }

        @TestMetadata("Operators.kt")
        public void testOperators() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Operators.kt", this::doTest);
        }

        @TestMetadata("OperatorsWithWrongNames.kt")
        public void testOperatorsWithWrongNames() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/OperatorsWithWrongNames.kt", this::doTest);
        }

        @TestMetadata("OverrideFunctionWithParamDefaultValue.kt")
        public void testOverrideFunctionWithParamDefaultValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/OverrideFunctionWithParamDefaultValue.kt", this::doTest);
        }

        @TestMetadata("OverridenFunctionAndSpecifiedTypeParameter.kt")
        public void testOverridenFunctionAndSpecifiedTypeParameter() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/OverridenFunctionAndSpecifiedTypeParameter.kt", this::doTest);
        }

        @TestMetadata("OverridenSetterVisibility.kt")
        public void testOverridenSetterVisibility() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/OverridenSetterVisibility.kt", this::doTest);
        }

        @TestMetadata("OverridingVarByVal.kt")
        public void testOverridingVarByVal() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/OverridingVarByVal.kt", this::doTest);
        }

        @TestMetadata("PackageInExpressionPosition.kt")
        public void testPackageInExpressionPosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/PackageInExpressionPosition.kt", this::doTest);
        }

        @TestMetadata("PackageInTypePosition.kt")
        public void testPackageInTypePosition() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/PackageInTypePosition.kt", this::doTest);
        }

        @TestMetadata("PackageQualified.kt")
        public void testPackageQualified() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/PackageQualified.kt", this::doTest);
        }

        @TestMetadata("PrimaryConstructors.kt")
        public void testPrimaryConstructors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/PrimaryConstructors.kt", this::doTest);
        }

        @TestMetadata("PrivateFromOuterPackage.kt")
        public void testPrivateFromOuterPackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/PrivateFromOuterPackage.kt", this::doTest);
        }

        @TestMetadata("PrivateSetterForOverridden.kt")
        public void testPrivateSetterForOverridden() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/PrivateSetterForOverridden.kt", this::doTest);
        }

        @TestMetadata("ProcessingEmptyImport.kt")
        public void testProcessingEmptyImport() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ProcessingEmptyImport.kt", this::doTest);
        }

        @TestMetadata("ProjectionOnFunctionArgumentErrror.kt")
        public void testProjectionOnFunctionArgumentErrror() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ProjectionOnFunctionArgumentErrror.kt", this::doTest);
        }

        @TestMetadata("ProjectionsInSupertypes.kt")
        public void testProjectionsInSupertypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ProjectionsInSupertypes.kt", this::doTest);
        }

        @TestMetadata("Properties.kt")
        public void testProperties() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Properties.kt", this::doTest);
        }

        @TestMetadata("PropertyInitializers.kt")
        public void testPropertyInitializers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/PropertyInitializers.kt", this::doTest);
        }

        @TestMetadata("publishedApi.kt")
        public void testPublishedApi() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/publishedApi.kt", this::doTest);
        }

        @TestMetadata("QualifiedExpressions.kt")
        public void testQualifiedExpressions() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/QualifiedExpressions.kt", this::doTest);
        }

        @TestMetadata("RecursiveResolve.kt")
        public void testRecursiveResolve() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/RecursiveResolve.kt", this::doTest);
        }

        @TestMetadata("RecursiveTypeInference.kt")
        public void testRecursiveTypeInference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/RecursiveTypeInference.kt", this::doTest);
        }

        @TestMetadata("ReserveYield.kt")
        public void testReserveYield() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ReserveYield.kt", this::doTest);
        }

        @TestMetadata("ReserveYield2.kt")
        public void testReserveYield2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ReserveYield2.kt", this::doTest);
        }

        @TestMetadata("ResolveOfJavaGenerics.kt")
        public void testResolveOfJavaGenerics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ResolveOfJavaGenerics.kt", this::doTest);
        }

        @TestMetadata("ResolveToJava.kt")
        public void testResolveToJava() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ResolveToJava.kt", this::doTest);
        }

        @TestMetadata("Return.kt")
        public void testReturn() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Return.kt", this::doTest);
        }

        @TestMetadata("ReturnInFunctionWithoutBody.kt")
        public void testReturnInFunctionWithoutBody() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ReturnInFunctionWithoutBody.kt", this::doTest);
        }

        @TestMetadata("SafeCallInvoke.kt")
        public void testSafeCallInvoke() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SafeCallInvoke.kt", this::doTest);
        }

        @TestMetadata("SafeCallNonNullReceiver.kt")
        public void testSafeCallNonNullReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiver.kt", this::doTest);
        }

        @TestMetadata("SafeCallNonNullReceiverReturnNull.kt")
        public void testSafeCallNonNullReceiverReturnNull() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiverReturnNull.kt", this::doTest);
        }

        @TestMetadata("SafeCallOnFakePackage.kt")
        public void testSafeCallOnFakePackage() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SafeCallOnFakePackage.kt", this::doTest);
        }

        @TestMetadata("SafeCallOnSuperReceiver.kt")
        public void testSafeCallOnSuperReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SafeCallOnSuperReceiver.kt", this::doTest);
        }

        @TestMetadata("Serializable.kt")
        public void testSerializable() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Serializable.kt", this::doTest);
        }

        @TestMetadata("SetterVisibility.kt")
        public void testSetterVisibility() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SetterVisibility.kt", this::doTest);
        }

        @TestMetadata("ShiftFunctionTypes.kt")
        public void testShiftFunctionTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ShiftFunctionTypes.kt", this::doTest);
        }

        @TestMetadata("SingleUnderscoreUnsupported.kt")
        public void testSingleUnderscoreUnsupported() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SingleUnderscoreUnsupported.kt", this::doTest);
        }

        @TestMetadata("StarsInFunctionCalls.kt")
        public void testStarsInFunctionCalls() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/StarsInFunctionCalls.kt", this::doTest);
        }

        @TestMetadata("StringPrefixAndSuffix.kt")
        public void testStringPrefixAndSuffix() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/StringPrefixAndSuffix.kt", this::doTest);
        }

        @TestMetadata("StringTemplates.kt")
        public void testStringTemplates() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/StringTemplates.kt", this::doTest);
        }

        @TestMetadata("SupertypeListChecks.kt")
        public void testSupertypeListChecks() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SupertypeListChecks.kt", this::doTest);
        }

        @TestMetadata("SyntaxErrorInTestHighlighting.kt")
        public void testSyntaxErrorInTestHighlighting() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlighting.kt", this::doTest);
        }

        @TestMetadata("SyntaxErrorInTestHighlightingEof.kt")
        public void testSyntaxErrorInTestHighlightingEof() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlightingEof.kt", this::doTest);
        }

        @TestMetadata("tailRecOverridden.kt")
        public void testTailRecOverridden() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/tailRecOverridden.kt", this::doTest);
        }

        @TestMetadata("tailRecursionComplex.kt")
        public void testTailRecursionComplex() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/tailRecursionComplex.kt", this::doTest);
        }

        @TestMetadata("TraitOverrideObjectMethods.kt")
        public void testTraitOverrideObjectMethods() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/TraitOverrideObjectMethods.kt", this::doTest);
        }

        @TestMetadata("TraitWithConstructor.kt")
        public void testTraitWithConstructor() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/TraitWithConstructor.kt", this::doTest);
        }

        @TestMetadata("TypeInference.kt")
        public void testTypeInference() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/TypeInference.kt", this::doTest);
        }

        @TestMetadata("TypeMismatchOnOverrideWithSyntaxErrors.kt")
        public void testTypeMismatchOnOverrideWithSyntaxErrors() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/TypeMismatchOnOverrideWithSyntaxErrors.kt", this::doTest);
        }

        @TestMetadata("Underscore.kt")
        public void testUnderscore() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Underscore.kt", this::doTest);
        }

        @TestMetadata("UnderscoreUsageInAnnotation.kt")
        public void testUnderscoreUsageInAnnotation() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInAnnotation.kt", this::doTest);
        }

        @TestMetadata("UnderscoreUsageInCall.kt")
        public void testUnderscoreUsageInCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInCall.kt", this::doTest);
        }

        @TestMetadata("UnderscoreUsageInCallableRefTypeLHS.kt")
        public void testUnderscoreUsageInCallableRefTypeLHS() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInCallableRefTypeLHS.kt", this::doTest);
        }

        @TestMetadata("UnderscoreUsageInType.kt")
        public void testUnderscoreUsageInType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInType.kt", this::doTest);
        }

        @TestMetadata("UnderscoreUsageInVariableAsFunctionCall.kt")
        public void testUnderscoreUsageInVariableAsFunctionCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInVariableAsFunctionCall.kt", this::doTest);
        }

        @TestMetadata("UnitByDefaultForFunctionTypes.kt")
        public void testUnitByDefaultForFunctionTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnitByDefaultForFunctionTypes.kt", this::doTest);
        }

        @TestMetadata("UnitValue.kt")
        public void testUnitValue() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnitValue.kt", this::doTest);
        }

        @TestMetadata("Unresolved.kt")
        public void testUnresolved() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Unresolved.kt", this::doTest);
        }

        @TestMetadata("UnusedInDestructuring.kt")
        public void testUnusedInDestructuring() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnusedInDestructuring.kt", this::doTest);
        }

        @TestMetadata("UnusedParameters.kt")
        public void testUnusedParameters() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnusedParameters.kt", this::doTest);
        }

        @TestMetadata("UnusedParametersVersion10.kt")
        public void testUnusedParametersVersion10() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnusedParametersVersion10.kt", this::doTest);
        }

        @TestMetadata("UnusedVariables.kt")
        public void testUnusedVariables() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/UnusedVariables.kt", this::doTest);
        }

        @TestMetadata("ValAndFunOverrideCompatibilityClash.kt")
        public void testValAndFunOverrideCompatibilityClash() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/ValAndFunOverrideCompatibilityClash.kt", this::doTest);
        }

        @TestMetadata("VarargTypes.kt")
        public void testVarargTypes() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/VarargTypes.kt", this::doTest);
        }

        @TestMetadata("Varargs.kt")
        public void testVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Varargs.kt", this::doTest);
        }

        @TestMetadata("Variance.kt")
        public void testVariance() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/Variance.kt", this::doTest);
        }

        @TestMetadata("compiler/testData/diagnostics/tests/annotations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Annotations extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInAnnotations() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AmbigiousAnnotationConstructor.kt")
            public void testAmbigiousAnnotationConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AmbigiousAnnotationConstructor.kt", this::doTest);
            }

            @TestMetadata("AnnotatedConstructor.kt")
            public void testAnnotatedConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructor.kt", this::doTest);
            }

            @TestMetadata("AnnotatedConstructorParams.kt")
            public void testAnnotatedConstructorParams() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructorParams.kt", this::doTest);
            }

            @TestMetadata("annotatedExpressionInsideAnnotation.kt")
            public void testAnnotatedExpressionInsideAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotatedExpressionInsideAnnotation.kt", this::doTest);
            }

            @TestMetadata("AnnotatedLocalObjectFun.kt")
            public void testAnnotatedLocalObjectFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLocalObjectFun.kt", this::doTest);
            }

            @TestMetadata("AnnotatedLocalObjectProperty.kt")
            public void testAnnotatedLocalObjectProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLocalObjectProperty.kt", this::doTest);
            }

            @TestMetadata("AnnotatedLoop.kt")
            public void testAnnotatedLoop() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLoop.kt", this::doTest);
            }

            @TestMetadata("AnnotatedResultType.kt")
            public void testAnnotatedResultType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedResultType.kt", this::doTest);
            }

            @TestMetadata("AnnotatedTryCatch.kt")
            public void testAnnotatedTryCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedTryCatch.kt", this::doTest);
            }

            @TestMetadata("AnnotationAsDefaultParameter.kt")
            public void testAnnotationAsDefaultParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotationAsDefaultParameter.kt", this::doTest);
            }

            @TestMetadata("AnnotationForClassTypeParameter.kt")
            public void testAnnotationForClassTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter.kt", this::doTest);
            }

            @TestMetadata("AnnotationForFunctionTypeParameter.kt")
            public void testAnnotationForFunctionTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotationForFunctionTypeParameter.kt", this::doTest);
            }

            @TestMetadata("AnnotationForObject.kt")
            public void testAnnotationForObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotationForObject.kt", this::doTest);
            }

            @TestMetadata("AnnotationIdentifier.kt")
            public void testAnnotationIdentifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotationIdentifier.kt", this::doTest);
            }

            @TestMetadata("annotationInheritance.kt")
            public void testAnnotationInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationInheritance.kt", this::doTest);
            }

            @TestMetadata("annotationModifier.kt")
            public void testAnnotationModifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationModifier.kt", this::doTest);
            }

            @TestMetadata("AnnotationOnObject.kt")
            public void testAnnotationOnObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotationOnObject.kt", this::doTest);
            }

            @TestMetadata("annotationOnParameterInFunctionType.kt")
            public void testAnnotationOnParameterInFunctionType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationOnParameterInFunctionType.kt", this::doTest);
            }

            @TestMetadata("AnnotationsForClasses.kt")
            public void testAnnotationsForClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotationsForClasses.kt", this::doTest);
            }

            @TestMetadata("AnnotationsForPropertyTypeParameter.kt")
            public void testAnnotationsForPropertyTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/AnnotationsForPropertyTypeParameter.kt", this::doTest);
            }

            @TestMetadata("annotationsOnLambdaAsCallArgument.kt")
            public void testAnnotationsOnLambdaAsCallArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationsOnLambdaAsCallArgument.kt", this::doTest);
            }

            @TestMetadata("annotationsOnNullableTypes.kt")
            public void testAnnotationsOnNullableTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationsOnNullableTypes.kt", this::doTest);
            }

            @TestMetadata("atAnnotationResolve.kt")
            public void testAtAnnotationResolve() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/atAnnotationResolve.kt", this::doTest);
            }

            @TestMetadata("BasicAnnotations.kt")
            public void testBasicAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/BasicAnnotations.kt", this::doTest);
            }

            @TestMetadata("blockLevelOnTheSameLineWarning.kt")
            public void testBlockLevelOnTheSameLineWarning() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/blockLevelOnTheSameLineWarning.kt", this::doTest);
            }

            @TestMetadata("ConstructorCall.kt")
            public void testConstructorCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/ConstructorCall.kt", this::doTest);
            }

            @TestMetadata("DanglingInScript.kt")
            public void testDanglingInScript() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/DanglingInScript.kt", this::doTest);
            }

            @TestMetadata("DanglingMixed.kt")
            public void testDanglingMixed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/DanglingMixed.kt", this::doTest);
            }

            @TestMetadata("DanglingNoBrackets.kt")
            public void testDanglingNoBrackets() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/DanglingNoBrackets.kt", this::doTest);
            }

            @TestMetadata("DanglingWithBrackets.kt")
            public void testDanglingWithBrackets() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/DanglingWithBrackets.kt", this::doTest);
            }

            @TestMetadata("Deprecated.kt")
            public void testDeprecated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/Deprecated.kt", this::doTest);
            }

            @TestMetadata("deprecatedRepeatable.kt")
            public void testDeprecatedRepeatable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/deprecatedRepeatable.kt", this::doTest);
            }

            @TestMetadata("extensionFunctionType.kt")
            public void testExtensionFunctionType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/extensionFunctionType.kt", this::doTest);
            }

            @TestMetadata("forParameterAnnotationResolve.kt")
            public void testForParameterAnnotationResolve() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/forParameterAnnotationResolve.kt", this::doTest);
            }

            @TestMetadata("illegalRequireKotlinValue.kt")
            public void testIllegalRequireKotlinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/illegalRequireKotlinValue.kt", this::doTest);
            }

            @TestMetadata("illegalSinceKotlinValue.kt")
            public void testIllegalSinceKotlinValue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/illegalSinceKotlinValue.kt", this::doTest);
            }

            @TestMetadata("inheritFromAnnotationClass.kt")
            public void testInheritFromAnnotationClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/inheritFromAnnotationClass.kt", this::doTest);
            }

            @TestMetadata("inheritFromAnnotationClass2.kt")
            public void testInheritFromAnnotationClass2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/inheritFromAnnotationClass2.kt", this::doTest);
            }

            @TestMetadata("invalidTypesInAnnotationConstructor.kt")
            public void testInvalidTypesInAnnotationConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/invalidTypesInAnnotationConstructor.kt", this::doTest);
            }

            @TestMetadata("JavaAnnotationConstructors.kt")
            public void testJavaAnnotationConstructors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/JavaAnnotationConstructors.kt", this::doTest);
            }

            @TestMetadata("javaRepeatable.kt")
            public void testJavaRepeatable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/javaRepeatable.kt", this::doTest);
            }

            @TestMetadata("javaRepeatableRetention.kt")
            public void testJavaRepeatableRetention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/javaRepeatableRetention.kt", this::doTest);
            }

            @TestMetadata("javaUnrepeatable.kt")
            public void testJavaUnrepeatable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/javaUnrepeatable.kt", this::doTest);
            }

            @TestMetadata("kt1860-negative.kt")
            public void testKt1860_negative() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/kt1860-negative.kt", this::doTest);
            }

            @TestMetadata("kt1860-positive.kt")
            public void testKt1860_positive() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/kt1860-positive.kt", this::doTest);
            }

            @TestMetadata("kt1886annotationBody.kt")
            public void testKt1886annotationBody() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/kt1886annotationBody.kt", this::doTest);
            }

            @TestMetadata("missingValOnParameter.kt")
            public void testMissingValOnParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/missingValOnParameter.kt", this::doTest);
            }

            @TestMetadata("MultiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/MultiDeclaration.kt", this::doTest);
            }

            @TestMetadata("MutuallyRecursivelyAnnotatedGlobalFunction.kt")
            public void testMutuallyRecursivelyAnnotatedGlobalFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/MutuallyRecursivelyAnnotatedGlobalFunction.kt", this::doTest);
            }

            @TestMetadata("nestedClassesInAnnotations.kt")
            public void testNestedClassesInAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/nestedClassesInAnnotations.kt", this::doTest);
            }

            @TestMetadata("noNameProperty.kt")
            public void testNoNameProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/noNameProperty.kt", this::doTest);
            }

            @TestMetadata("NonAnnotationClass.kt")
            public void testNonAnnotationClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/NonAnnotationClass.kt", this::doTest);
            }

            @TestMetadata("onExpression.kt")
            public void testOnExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/onExpression.kt", this::doTest);
            }

            @TestMetadata("onFunctionParameter.kt")
            public void testOnFunctionParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/onFunctionParameter.kt", this::doTest);
            }

            @TestMetadata("onInitializer.kt")
            public void testOnInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/onInitializer.kt", this::doTest);
            }

            @TestMetadata("onLoops.kt")
            public void testOnLoops() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/onLoops.kt", this::doTest);
            }

            @TestMetadata("onLoopsUnreachable.kt")
            public void testOnLoopsUnreachable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/onLoopsUnreachable.kt", this::doTest);
            }

            @TestMetadata("onMultiDeclaration.kt")
            public void testOnMultiDeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/onMultiDeclaration.kt", this::doTest);
            }

            @TestMetadata("RecursivelyAnnotated.kt")
            public void testRecursivelyAnnotated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotated.kt", this::doTest);
            }

            @TestMetadata("RecursivelyAnnotatedFunctionParameter.kt")
            public void testRecursivelyAnnotatedFunctionParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedFunctionParameter.kt", this::doTest);
            }

            @TestMetadata("RecursivelyAnnotatedGlobalFunction.kt")
            public void testRecursivelyAnnotatedGlobalFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedGlobalFunction.kt", this::doTest);
            }

            @TestMetadata("RecursivelyAnnotatedGlobalProperty.kt")
            public void testRecursivelyAnnotatedGlobalProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedGlobalProperty.kt", this::doTest);
            }

            @TestMetadata("RecursivelyAnnotatedParameter.kt")
            public void testRecursivelyAnnotatedParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameter.kt", this::doTest);
            }

            @TestMetadata("RecursivelyAnnotatedParameterType.kt")
            public void testRecursivelyAnnotatedParameterType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameterType.kt", this::doTest);
            }

            @TestMetadata("RecursivelyAnnotatedParameterWithAt.kt")
            public void testRecursivelyAnnotatedParameterWithAt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameterWithAt.kt", this::doTest);
            }

            @TestMetadata("RecursivelyAnnotatedProperty.kt")
            public void testRecursivelyAnnotatedProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedProperty.kt", this::doTest);
            }

            @TestMetadata("RecursivelyIncorrectlyAnnotatedParameter.kt")
            public void testRecursivelyIncorrectlyAnnotatedParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyIncorrectlyAnnotatedParameter.kt", this::doTest);
            }

            @TestMetadata("typeAnnotations.kt")
            public void testTypeAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/typeAnnotations.kt", this::doTest);
            }

            @TestMetadata("typeParameterAsAnnotation.kt")
            public void testTypeParameterAsAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/typeParameterAsAnnotation.kt", this::doTest);
            }

            @TestMetadata("UnresolvedAnnotationOnObject.kt")
            public void testUnresolvedAnnotationOnObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/UnresolvedAnnotationOnObject.kt", this::doTest);
            }

            @TestMetadata("unresolvedReferenceRange.kt")
            public void testUnresolvedReferenceRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/unresolvedReferenceRange.kt", this::doTest);
            }

            @TestMetadata("WrongAnnotationArgsOnObject.kt")
            public void testWrongAnnotationArgsOnObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/WrongAnnotationArgsOnObject.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AnnotationParameterMustBeConstant extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInAnnotationParameterMustBeConstant() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotationConstructorDefaultParameter.kt")
                public void testAnnotationConstructorDefaultParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/annotationConstructorDefaultParameter.kt", this::doTest);
                }

                @TestMetadata("booleanLocalVal.kt")
                public void testBooleanLocalVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/booleanLocalVal.kt", this::doTest);
                }

                @TestMetadata("compareAndEquals.kt")
                public void testCompareAndEquals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/compareAndEquals.kt", this::doTest);
                }

                @TestMetadata("enumConst.kt")
                public void testEnumConst() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/enumConst.kt", this::doTest);
                }

                @TestMetadata("javaProperties.kt")
                public void testJavaProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/javaProperties.kt", this::doTest);
                }

                @TestMetadata("kotlinProperties.kt")
                public void testKotlinProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/kotlinProperties.kt", this::doTest);
                }

                @TestMetadata("standaloneInExpression.kt")
                public void testStandaloneInExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/standaloneInExpression.kt", this::doTest);
                }

                @TestMetadata("strings.kt")
                public void testStrings() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/strings.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/annotations/options")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Options extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInOptions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/options"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotationAsArg.kt")
                public void testAnnotationAsArg() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/annotationAsArg.kt", this::doTest);
                }

                @TestMetadata("annotationAsArgComplex.kt")
                public void testAnnotationAsArgComplex() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/annotationAsArgComplex.kt", this::doTest);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/assignment.kt", this::doTest);
                }

                @TestMetadata("documented.kt")
                public void testDocumented() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/documented.kt", this::doTest);
                }

                @TestMetadata("forParam.kt")
                public void testForParam() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/forParam.kt", this::doTest);
                }

                @TestMetadata("functionExpression.kt")
                public void testFunctionExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/functionExpression.kt", this::doTest);
                }

                @TestMetadata("functions.kt")
                public void testFunctions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/functions.kt", this::doTest);
                }

                @TestMetadata("javaDocumented.kt")
                public void testJavaDocumented() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/javaDocumented.kt", this::doTest);
                }

                @TestMetadata("javaKotlinTargetRetention.kt")
                public void testJavaKotlinTargetRetention() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/javaKotlinTargetRetention.kt", this::doTest);
                }

                @TestMetadata("javaretention.kt")
                public void testJavaretention() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/javaretention.kt", this::doTest);
                }

                @TestMetadata("multiDeclaration.kt")
                public void testMultiDeclaration() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/multiDeclaration.kt", this::doTest);
                }

                @TestMetadata("objectLiteral.kt")
                public void testObjectLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/objectLiteral.kt", this::doTest);
                }

                @TestMetadata("prefix.kt")
                public void testPrefix() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/prefix.kt", this::doTest);
                }

                @TestMetadata("repeatable.kt")
                public void testRepeatable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/repeatable.kt", this::doTest);
                }

                @TestMetadata("retention.kt")
                public void testRetention() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/retention.kt", this::doTest);
                }

                @TestMetadata("setterParam.kt")
                public void testSetterParam() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/setterParam.kt", this::doTest);
                }

                @TestMetadata("target.kt")
                public void testTarget() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/target.kt", this::doTest);
                }

                @TestMetadata("unrepeatable.kt")
                public void testUnrepeatable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/unrepeatable.kt", this::doTest);
                }

                @TestMetadata("compiler/testData/diagnostics/tests/annotations/options/targets")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Targets extends AbstractDiagnosticsUsingJavacTest {
                    @TestMetadata("accessors.kt")
                    public void testAccessors() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/accessors.kt", this::doTest);
                    }

                    public void testAllFilesPresentInTargets() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/options/targets"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("annotation.kt")
                    public void testAnnotation() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/annotation.kt", this::doTest);
                    }

                    @TestMetadata("classifier.kt")
                    public void testClassifier() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/classifier.kt", this::doTest);
                    }

                    @TestMetadata("constructor.kt")
                    public void testConstructor() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/constructor.kt", this::doTest);
                    }

                    @TestMetadata("empty.kt")
                    public void testEmpty() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/empty.kt", this::doTest);
                    }

                    @TestMetadata("expr.kt")
                    public void testExpr() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/expr.kt", this::doTest);
                    }

                    @TestMetadata("field.kt")
                    public void testField() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/field.kt", this::doTest);
                    }

                    @TestMetadata("file.kt")
                    public void testFile() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/file.kt", this::doTest);
                    }

                    @TestMetadata("function.kt")
                    public void testFunction() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/function.kt", this::doTest);
                    }

                    @TestMetadata("funtypeargs.kt")
                    public void testFuntypeargs() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/funtypeargs.kt", this::doTest);
                    }

                    @TestMetadata("incorrect.kt")
                    public void testIncorrect() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/incorrect.kt", this::doTest);
                    }

                    @TestMetadata("init.kt")
                    public void testInit() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/init.kt", this::doTest);
                    }

                    @TestMetadata("java.kt")
                    public void testJava() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/java.kt", this::doTest);
                    }

                    @TestMetadata("local.kt")
                    public void testLocal() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/local.kt", this::doTest);
                    }

                    @TestMetadata("nested.kt")
                    public void testNested() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/nested.kt", this::doTest);
                    }

                    @TestMetadata("property.kt")
                    public void testProperty() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/property.kt", this::doTest);
                    }

                    @TestMetadata("returntype.kt")
                    public void testReturntype() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/returntype.kt", this::doTest);
                    }

                    @TestMetadata("suppress.kt")
                    public void testSuppress() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/suppress.kt", this::doTest);
                    }

                    @TestMetadata("type.kt")
                    public void testType() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/type.kt", this::doTest);
                    }

                    @TestMetadata("typeParams.kt")
                    public void testTypeParams() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/typeParams.kt", this::doTest);
                    }

                    @TestMetadata("typeargs.kt")
                    public void testTypeargs() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/typeargs.kt", this::doTest);
                    }

                    @TestMetadata("valueparam.kt")
                    public void testValueparam() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/options/targets/valueparam.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class WithUseSiteTarget extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInWithUseSiteTarget() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("DelegateAnnotations.kt")
                public void testDelegateAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/DelegateAnnotations.kt", this::doTest);
                }

                @TestMetadata("diagnosticFileAnnotationInWrongPlace.kt")
                public void testDiagnosticFileAnnotationInWrongPlace() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticFileAnnotationInWrongPlace.kt", this::doTest);
                }

                @TestMetadata("diagnosticWithoutPackage.kt")
                public void testDiagnosticWithoutPackage() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticWithoutPackage.kt", this::doTest);
                }

                @TestMetadata("diagnosticWithoutPackageWithSimpleAnnotation.kt")
                public void testDiagnosticWithoutPackageWithSimpleAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticWithoutPackageWithSimpleAnnotation.kt", this::doTest);
                }

                @TestMetadata("FieldAnnotations.kt")
                public void testFieldAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/FieldAnnotations.kt", this::doTest);
                }

                @TestMetadata("fileAnnotationWithoutColon.kt")
                public void testFileAnnotationWithoutColon() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/fileAnnotationWithoutColon.kt", this::doTest);
                }

                @TestMetadata("FileAnnotations.kt")
                public void testFileAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/FileAnnotations.kt", this::doTest);
                }

                @TestMetadata("GetterAnnotations.kt")
                public void testGetterAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/GetterAnnotations.kt", this::doTest);
                }

                @TestMetadata("ParamAnnotations.kt")
                public void testParamAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/ParamAnnotations.kt", this::doTest);
                }

                @TestMetadata("PropertyAnnotations.kt")
                public void testPropertyAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/PropertyAnnotations.kt", this::doTest);
                }

                @TestMetadata("ReceiverAnnotations.kt")
                public void testReceiverAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/ReceiverAnnotations.kt", this::doTest);
                }

                @TestMetadata("receiverUseSiteTargetOnExtensionFunction.kt")
                public void testReceiverUseSiteTargetOnExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/receiverUseSiteTargetOnExtensionFunction.kt", this::doTest);
                }

                @TestMetadata("repeatable.kt")
                public void testRepeatable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/repeatable.kt", this::doTest);
                }

                @TestMetadata("SetterAnnotations.kt")
                public void testSetterAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/SetterAnnotations.kt", this::doTest);
                }

                @TestMetadata("SparamAnnotations.kt")
                public void testSparamAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/SparamAnnotations.kt", this::doTest);
                }

                @TestMetadata("wrongParamAnnotationsOnTypes.kt")
                public void testWrongParamAnnotationsOnTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/wrongParamAnnotationsOnTypes.kt", this::doTest);
                }

                @TestMetadata("wrongParamAnnotationsOnTypesError.kt")
                public void testWrongParamAnnotationsOnTypesError() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/wrongParamAnnotationsOnTypesError.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/backingField")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class BackingField extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInBackingField() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/backingField"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("CustomGetSet.kt")
            public void testCustomGetSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/CustomGetSet.kt", this::doTest);
            }

            @TestMetadata("CustomGetVal.kt")
            public void testCustomGetVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/CustomGetVal.kt", this::doTest);
            }

            @TestMetadata("CustomGetValGlobal.kt")
            public void testCustomGetValGlobal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/CustomGetValGlobal.kt", this::doTest);
            }

            @TestMetadata("CustomGetVar.kt")
            public void testCustomGetVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/CustomGetVar.kt", this::doTest);
            }

            @TestMetadata("CustomSet.kt")
            public void testCustomSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/CustomSet.kt", this::doTest);
            }

            @TestMetadata("ExtensionProperty.kt")
            public void testExtensionProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/ExtensionProperty.kt", this::doTest);
            }

            @TestMetadata("FieldAsParam.kt")
            public void testFieldAsParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldAsParam.kt", this::doTest);
            }

            @TestMetadata("FieldAsProperty.kt")
            public void testFieldAsProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldAsProperty.kt", this::doTest);
            }

            @TestMetadata("FieldDerived.kt")
            public void testFieldDerived() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldDerived.kt", this::doTest);
            }

            @TestMetadata("FieldInInterface.kt")
            public void testFieldInInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldInInterface.kt", this::doTest);
            }

            @TestMetadata("FieldInLocal.kt")
            public void testFieldInLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldInLocal.kt", this::doTest);
            }

            @TestMetadata("FieldOnVal.kt")
            public void testFieldOnVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldOnVal.kt", this::doTest);
            }

            @TestMetadata("FieldOnVar.kt")
            public void testFieldOnVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldOnVar.kt", this::doTest);
            }

            @TestMetadata("FieldReassignment.kt")
            public void testFieldReassignment() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldReassignment.kt", this::doTest);
            }

            @TestMetadata("FieldReassignmentError.kt")
            public void testFieldReassignmentError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldReassignmentError.kt", this::doTest);
            }

            @TestMetadata("FieldShadow.kt")
            public void testFieldShadow() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/FieldShadow.kt", this::doTest);
            }

            @TestMetadata("InitCustomSetter.kt")
            public void testInitCustomSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/InitCustomSetter.kt", this::doTest);
            }

            @TestMetadata("InitOpenSetter.kt")
            public void testInitOpenSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/InitOpenSetter.kt", this::doTest);
            }

            @TestMetadata("kt782packageLevel.kt")
            public void testKt782packageLevel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/kt782packageLevel.kt", this::doTest);
            }

            @TestMetadata("SetterWithExplicitType.kt")
            public void testSetterWithExplicitType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/backingField/SetterWithExplicitType.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/callableReference")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CallableReference extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInCallableReference() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("bareType.kt")
            public void testBareType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bareType.kt", this::doTest);
            }

            @TestMetadata("callableReferenceAsLastExpressionInBlock.kt")
            public void testCallableReferenceAsLastExpressionInBlock() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/callableReferenceAsLastExpressionInBlock.kt", this::doTest);
            }

            @TestMetadata("classVsPackage.kt")
            public void testClassVsPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/classVsPackage.kt", this::doTest);
            }

            @TestMetadata("ea81649_errorPropertyLHS.kt")
            public void testEa81649_errorPropertyLHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/ea81649_errorPropertyLHS.kt", this::doTest);
            }

            @TestMetadata("emptyLhs.kt")
            public void testEmptyLhs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/emptyLhs.kt", this::doTest);
            }

            @TestMetadata("kt15439_completeCall.kt")
            public void testKt15439_completeCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/kt15439_completeCall.kt", this::doTest);
            }

            @TestMetadata("kt7430_wrongClassOnLHS.kt")
            public void testKt7430_wrongClassOnLHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/kt7430_wrongClassOnLHS.kt", this::doTest);
            }

            @TestMetadata("memberExtensionsImportedFromObjectsUnsupported.kt")
            public void testMemberExtensionsImportedFromObjectsUnsupported() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/memberExtensionsImportedFromObjectsUnsupported.kt", this::doTest);
            }

            @TestMetadata("packageInLhs.kt")
            public void testPackageInLhs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/packageInLhs.kt", this::doTest);
            }

            @TestMetadata("parsingPriorityOfGenericArgumentsVsLess.kt")
            public void testParsingPriorityOfGenericArgumentsVsLess() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/parsingPriorityOfGenericArgumentsVsLess.kt", this::doTest);
            }

            @TestMetadata("sam.kt")
            public void testSam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/sam.kt", this::doTest);
            }

            @TestMetadata("unused.kt")
            public void testUnused() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/unused.kt", this::doTest);
            }

            @TestMetadata("whitespacesInExpression.kt")
            public void testWhitespacesInExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/whitespacesInExpression.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/callableReference/bound")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Bound extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInBound() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/bound"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classVsStarImportedCompanion.kt")
                public void testClassVsStarImportedCompanion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/classVsStarImportedCompanion.kt", this::doTest);
                }

                @TestMetadata("classVsStarImportedObject.kt")
                public void testClassVsStarImportedObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/classVsStarImportedObject.kt", this::doTest);
                }

                @TestMetadata("companionObject.kt")
                public void testCompanionObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/companionObject.kt", this::doTest);
                }

                @TestMetadata("controlFlow.kt")
                public void testControlFlow() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/controlFlow.kt", this::doTest);
                }

                @TestMetadata("dataFlow.kt")
                public void testDataFlow() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/dataFlow.kt", this::doTest);
                }

                @TestMetadata("expectedType.kt")
                public void testExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/expectedType.kt", this::doTest);
                }

                @TestMetadata("expressionWithNullableType.kt")
                public void testExpressionWithNullableType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/expressionWithNullableType.kt", this::doTest);
                }

                @TestMetadata("functionCallWithoutArguments.kt")
                public void testFunctionCallWithoutArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/functionCallWithoutArguments.kt", this::doTest);
                }

                @TestMetadata("innerNested.kt")
                public void testInnerNested() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/innerNested.kt", this::doTest);
                }

                @TestMetadata("kt12843.kt")
                public void testKt12843() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/kt12843.kt", this::doTest);
                }

                @TestMetadata("noThisInSuperCall.kt")
                public void testNoThisInSuperCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/noThisInSuperCall.kt", this::doTest);
                }

                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/object.kt", this::doTest);
                }

                @TestMetadata("privateToThis.kt")
                public void testPrivateToThis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/privateToThis.kt", this::doTest);
                }

                @TestMetadata("referenceToStaticMethodOnInstance.kt")
                public void testReferenceToStaticMethodOnInstance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/referenceToStaticMethodOnInstance.kt", this::doTest);
                }

                @TestMetadata("reservedExpressionSyntax.kt")
                public void testReservedExpressionSyntax() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax.kt", this::doTest);
                }

                @TestMetadata("reservedExpressionSyntax2.kt")
                public void testReservedExpressionSyntax2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax2.kt", this::doTest);
                }

                @TestMetadata("reservedExpressionSyntax3.kt")
                public void testReservedExpressionSyntax3() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax3.kt", this::doTest);
                }

                @TestMetadata("syntheticExtensionOnLHS.kt")
                public void testSyntheticExtensionOnLHS() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/syntheticExtensionOnLHS.kt", this::doTest);
                }

                @TestMetadata("valueOfTypeParameterType.kt")
                public void testValueOfTypeParameterType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/bound/valueOfTypeParameterType.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/callableReference/function")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Function extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("abstractClassConstructors.kt")
                public void testAbstractClassConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/abstractClassConstructors.kt", this::doTest);
                }

                public void testAllFilesPresentInFunction() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/function"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("ambiguityTopLevelVsTopLevel.kt")
                public void testAmbiguityTopLevelVsTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/ambiguityTopLevelVsTopLevel.kt", this::doTest);
                }

                @TestMetadata("annotationClassConstructor.kt")
                public void testAnnotationClassConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/annotationClassConstructor.kt", this::doTest);
                }

                @TestMetadata("callableRefrenceOnNestedObject.kt")
                public void testCallableRefrenceOnNestedObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/callableRefrenceOnNestedObject.kt", this::doTest);
                }

                @TestMetadata("classMemberVsConstructorLikeFunction.kt")
                public void testClassMemberVsConstructorLikeFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/classMemberVsConstructorLikeFunction.kt", this::doTest);
                }

                @TestMetadata("constructorFromClass.kt")
                public void testConstructorFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromClass.kt", this::doTest);
                }

                @TestMetadata("constructorFromCompanion.kt")
                public void testConstructorFromCompanion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromCompanion.kt", this::doTest);
                }

                @TestMetadata("constructorFromExtension.kt")
                public void testConstructorFromExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromExtension.kt", this::doTest);
                }

                @TestMetadata("constructorFromExtensionInClass.kt")
                public void testConstructorFromExtensionInClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromExtensionInClass.kt", this::doTest);
                }

                @TestMetadata("constructorFromTopLevel.kt")
                public void testConstructorFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("constructorOfNestedClassInObject.kt")
                public void testConstructorOfNestedClassInObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorOfNestedClassInObject.kt", this::doTest);
                }

                @TestMetadata("differentPackageClass.kt")
                public void testDifferentPackageClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/differentPackageClass.kt", this::doTest);
                }

                @TestMetadata("differentPackageExtension.kt")
                public void testDifferentPackageExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/differentPackageExtension.kt", this::doTest);
                }

                @TestMetadata("differentPackageTopLevel.kt")
                public void testDifferentPackageTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/differentPackageTopLevel.kt", this::doTest);
                }

                @TestMetadata("empty.kt")
                public void testEmpty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/empty.kt", this::doTest);
                }

                @TestMetadata("extensionFromTopLevel.kt")
                public void testExtensionFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("extensionInClassDisallowed.kt")
                public void testExtensionInClassDisallowed() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionInClassDisallowed.kt", this::doTest);
                }

                @TestMetadata("extensionOnNullable.kt")
                public void testExtensionOnNullable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionOnNullable.kt", this::doTest);
                }

                @TestMetadata("extensionToSupertype.kt")
                public void testExtensionToSupertype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionToSupertype.kt", this::doTest);
                }

                @TestMetadata("fakeOverrideType.kt")
                public void testFakeOverrideType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/fakeOverrideType.kt", this::doTest);
                }

                @TestMetadata("genericClassFromTopLevel.kt")
                public void testGenericClassFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/genericClassFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("importedInnerConstructor.kt")
                public void testImportedInnerConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/importedInnerConstructor.kt", this::doTest);
                }

                @TestMetadata("innerConstructorFromClass.kt")
                public void testInnerConstructorFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromClass.kt", this::doTest);
                }

                @TestMetadata("innerConstructorFromExtension.kt")
                public void testInnerConstructorFromExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromExtension.kt", this::doTest);
                }

                @TestMetadata("innerConstructorFromTopLevel.kt")
                public void testInnerConstructorFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("javaStaticMethod.kt")
                public void testJavaStaticMethod() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/javaStaticMethod.kt", this::doTest);
                }

                @TestMetadata("lhsNotAClass.kt")
                public void testLhsNotAClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/lhsNotAClass.kt", this::doTest);
                }

                @TestMetadata("localConstructor.kt")
                public void testLocalConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructor.kt", this::doTest);
                }

                @TestMetadata("localConstructorFromExtensionInLocalClass.kt")
                public void testLocalConstructorFromExtensionInLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromExtensionInLocalClass.kt", this::doTest);
                }

                @TestMetadata("localConstructorFromLocalClass.kt")
                public void testLocalConstructorFromLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromLocalClass.kt", this::doTest);
                }

                @TestMetadata("localConstructorFromLocalExtension.kt")
                public void testLocalConstructorFromLocalExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromLocalExtension.kt", this::doTest);
                }

                @TestMetadata("localNamedFun.kt")
                public void testLocalNamedFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/localNamedFun.kt", this::doTest);
                }

                @TestMetadata("localNamedFunFromExtensionInLocalClass.kt")
                public void testLocalNamedFunFromExtensionInLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromExtensionInLocalClass.kt", this::doTest);
                }

                @TestMetadata("localNamedFunFromLocalClass.kt")
                public void testLocalNamedFunFromLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromLocalClass.kt", this::doTest);
                }

                @TestMetadata("localNamedFunFromLocalExtension.kt")
                public void testLocalNamedFunFromLocalExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromLocalExtension.kt", this::doTest);
                }

                @TestMetadata("longQualifiedName.kt")
                public void testLongQualifiedName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/longQualifiedName.kt", this::doTest);
                }

                @TestMetadata("longQualifiedNameGeneric.kt")
                public void testLongQualifiedNameGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/longQualifiedNameGeneric.kt", this::doTest);
                }

                @TestMetadata("memberFromTopLevel.kt")
                public void testMemberFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/memberFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("nestedConstructorFromClass.kt")
                public void testNestedConstructorFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromClass.kt", this::doTest);
                }

                @TestMetadata("nestedConstructorFromExtension.kt")
                public void testNestedConstructorFromExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromExtension.kt", this::doTest);
                }

                @TestMetadata("nestedConstructorFromTopLevel.kt")
                public void testNestedConstructorFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("noAmbiguityLocalVsTopLevel.kt")
                public void testNoAmbiguityLocalVsTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityLocalVsTopLevel.kt", this::doTest);
                }

                @TestMetadata("noAmbiguityMemberVsExtension.kt")
                public void testNoAmbiguityMemberVsExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityMemberVsExtension.kt", this::doTest);
                }

                @TestMetadata("noAmbiguityMemberVsTopLevel.kt")
                public void testNoAmbiguityMemberVsTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityMemberVsTopLevel.kt", this::doTest);
                }

                @TestMetadata("privateStaticAndPublicMember.kt")
                public void testPrivateStaticAndPublicMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/privateStaticAndPublicMember.kt", this::doTest);
                }

                @TestMetadata("renameOnImport.kt")
                public void testRenameOnImport() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/renameOnImport.kt", this::doTest);
                }

                @TestMetadata("topLevelFromClass.kt")
                public void testTopLevelFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromClass.kt", this::doTest);
                }

                @TestMetadata("topLevelFromExtension.kt")
                public void testTopLevelFromExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromExtension.kt", this::doTest);
                }

                @TestMetadata("topLevelFromExtensionInClass.kt")
                public void testTopLevelFromExtensionInClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromExtensionInClass.kt", this::doTest);
                }

                @TestMetadata("topLevelFromTopLevel.kt")
                public void testTopLevelFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("unresolved.kt")
                public void testUnresolved() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/function/unresolved.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/callableReference/generic")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Generic extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInGeneric() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/generic"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("argumentAndReturnExpectedType.kt")
                public void testArgumentAndReturnExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/argumentAndReturnExpectedType.kt", this::doTest);
                }

                @TestMetadata("argumentExpectedType.kt")
                public void testArgumentExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/argumentExpectedType.kt", this::doTest);
                }

                @TestMetadata("dependOnArgumentType.kt")
                public void testDependOnArgumentType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/dependOnArgumentType.kt", this::doTest);
                }

                @TestMetadata("expectedFunctionType.kt")
                public void testExpectedFunctionType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/expectedFunctionType.kt", this::doTest);
                }

                @TestMetadata("explicitTypeArguments.kt")
                public void testExplicitTypeArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/explicitTypeArguments.kt", this::doTest);
                }

                @TestMetadata("genericExtensionFunction.kt")
                public void testGenericExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/genericExtensionFunction.kt", this::doTest);
                }

                @TestMetadata("genericFunctionsWithNullableTypes.kt")
                public void testGenericFunctionsWithNullableTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/genericFunctionsWithNullableTypes.kt", this::doTest);
                }

                @TestMetadata("kt10968.kt")
                public void testKt10968() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt10968.kt", this::doTest);
                }

                @TestMetadata("kt11075.kt")
                public void testKt11075() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt11075.kt", this::doTest);
                }

                @TestMetadata("kt12286.kt")
                public void testKt12286() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt12286.kt", this::doTest);
                }

                @TestMetadata("kt7470.kt")
                public void testKt7470() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt7470.kt", this::doTest);
                }

                @TestMetadata("nestedCallWithOverload.kt")
                public void testNestedCallWithOverload() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/nestedCallWithOverload.kt", this::doTest);
                }

                @TestMetadata("noInferenceFeatureForCallableReferences.kt")
                public void testNoInferenceFeatureForCallableReferences() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/noInferenceFeatureForCallableReferences.kt", this::doTest);
                }

                @TestMetadata("resolutionGenericCallableWithNullableTypes.kt")
                public void testResolutionGenericCallableWithNullableTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/resolutionGenericCallableWithNullableTypes.kt", this::doTest);
                }

                @TestMetadata("resolutionWithGenericCallable.kt")
                public void testResolutionWithGenericCallable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/resolutionWithGenericCallable.kt", this::doTest);
                }

                @TestMetadata("specialCalls.kt")
                public void testSpecialCalls() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/generic/specialCalls.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/callableReference/property")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Property extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("abstractPropertyViaSubclasses.kt")
                public void testAbstractPropertyViaSubclasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/abstractPropertyViaSubclasses.kt", this::doTest);
                }

                @TestMetadata("accessViaSubclass.kt")
                public void testAccessViaSubclass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/accessViaSubclass.kt", this::doTest);
                }

                public void testAllFilesPresentInProperty() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/property"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classFromClass.kt")
                public void testClassFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/classFromClass.kt", this::doTest);
                }

                @TestMetadata("extensionFromTopLevel.kt")
                public void testExtensionFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/extensionFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("extensionPropertyOnNullable.kt")
                public void testExtensionPropertyOnNullable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/extensionPropertyOnNullable.kt", this::doTest);
                }

                @TestMetadata("genericClass.kt")
                public void testGenericClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/genericClass.kt", this::doTest);
                }

                @TestMetadata("javaInstanceField.kt")
                public void testJavaInstanceField() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/javaInstanceField.kt", this::doTest);
                }

                @TestMetadata("javaStaticFieldViaImport.kt")
                public void testJavaStaticFieldViaImport() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/javaStaticFieldViaImport.kt", this::doTest);
                }

                @TestMetadata("kt7564.kt")
                public void testKt7564() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/kt7564.kt", this::doTest);
                }

                @TestMetadata("kt7945_unrelatedClass.kt")
                public void testKt7945_unrelatedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/kt7945_unrelatedClass.kt", this::doTest);
                }

                @TestMetadata("localVariable.kt")
                public void testLocalVariable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/localVariable.kt", this::doTest);
                }

                @TestMetadata("memberFromTopLevel.kt")
                public void testMemberFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/memberFromTopLevel.kt", this::doTest);
                }

                @TestMetadata("protectedVarFromClass.kt")
                public void testProtectedVarFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/protectedVarFromClass.kt", this::doTest);
                }

                @TestMetadata("returnTypeDependentOnGenericProperty.kt")
                public void testReturnTypeDependentOnGenericProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/returnTypeDependentOnGenericProperty.kt", this::doTest);
                }

                @TestMetadata("samePriorityForFunctionsAndProperties.kt")
                public void testSamePriorityForFunctionsAndProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/samePriorityForFunctionsAndProperties.kt", this::doTest);
                }

                @TestMetadata("syntheticProperties.kt")
                public void testSyntheticProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/syntheticProperties.kt", this::doTest);
                }

                @TestMetadata("topLevelFromTopLevel.kt")
                public void testTopLevelFromTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/property/topLevelFromTopLevel.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/callableReference/resolve")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Resolve extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInResolve() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/resolve"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("ambiguousWithVararg.kt")
                public void testAmbiguousWithVararg() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/ambiguousWithVararg.kt", this::doTest);
                }

                @TestMetadata("byArgType.kt")
                public void testByArgType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/byArgType.kt", this::doTest);
                }

                @TestMetadata("byGenericArgType.kt")
                public void testByGenericArgType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/byGenericArgType.kt", this::doTest);
                }

                @TestMetadata("byValType.kt")
                public void testByValType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/byValType.kt", this::doTest);
                }

                @TestMetadata("constructor.kt")
                public void testConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/constructor.kt", this::doTest);
                }

                @TestMetadata("innerClassConstructorOnOuterClassInstance.kt")
                public void testInnerClassConstructorOnOuterClassInstance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/innerClassConstructorOnOuterClassInstance.kt", this::doTest);
                }

                @TestMetadata("intersectionTypeOverloadWithWrongParameter.kt")
                public void testIntersectionTypeOverloadWithWrongParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/intersectionTypeOverloadWithWrongParameter.kt", this::doTest);
                }

                @TestMetadata("kt10036.kt")
                public void testKt10036() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt10036.kt", this::doTest);
                }

                @TestMetadata("kt10036_bound.kt")
                public void testKt10036_bound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt10036_bound.kt", this::doTest);
                }

                @TestMetadata("kt12338.kt")
                public void testKt12338() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt12338.kt", this::doTest);
                }

                @TestMetadata("kt12751.kt")
                public void testKt12751() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt12751.kt", this::doTest);
                }

                @TestMetadata("kt8596.kt")
                public void testKt8596() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt8596.kt", this::doTest);
                }

                @TestMetadata("kt9601.kt")
                public void testKt9601() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt9601.kt", this::doTest);
                }

                @TestMetadata("moreSpecificAmbiguousExtensions.kt")
                public void testMoreSpecificAmbiguousExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/moreSpecificAmbiguousExtensions.kt", this::doTest);
                }

                @TestMetadata("moreSpecificSimple.kt")
                public void testMoreSpecificSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/moreSpecificSimple.kt", this::doTest);
                }

                @TestMetadata("noFakeDescriptorForObject.kt")
                public void testNoFakeDescriptorForObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/noFakeDescriptorForObject.kt", this::doTest);
                }

                @TestMetadata("overloads.kt")
                public void testOverloads() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloads.kt", this::doTest);
                }

                @TestMetadata("overloadsBound.kt")
                public void testOverloadsBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloadsBound.kt", this::doTest);
                }

                @TestMetadata("overloadsMember.kt")
                public void testOverloadsMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloadsMember.kt", this::doTest);
                }

                @TestMetadata("valVsFun.kt")
                public void testValVsFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/valVsFun.kt", this::doTest);
                }

                @TestMetadata("withAs.kt")
                public void testWithAs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withAs.kt", this::doTest);
                }

                @TestMetadata("withExtFun.kt")
                public void testWithExtFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withExtFun.kt", this::doTest);
                }

                @TestMetadata("withGenericFun.kt")
                public void testWithGenericFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withGenericFun.kt", this::doTest);
                }

                @TestMetadata("withPlaceholderTypes.kt")
                public void testWithPlaceholderTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withPlaceholderTypes.kt", this::doTest);
                }

                @TestMetadata("withVararg.kt")
                public void testWithVararg() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withVararg.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/cast")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Cast extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInCast() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cast"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AsArray.kt")
            public void testAsArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsArray.kt", this::doTest);
            }

            @TestMetadata("AsErasedError.kt")
            public void testAsErasedError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsErasedError.kt", this::doTest);
            }

            @TestMetadata("AsErasedFine.kt")
            public void testAsErasedFine() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsErasedFine.kt", this::doTest);
            }

            @TestMetadata("AsErasedStar.kt")
            public void testAsErasedStar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsErasedStar.kt", this::doTest);
            }

            @TestMetadata("AsErasedWarning.kt")
            public void testAsErasedWarning() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsErasedWarning.kt", this::doTest);
            }

            @TestMetadata("AsInBinaryUnary.kt")
            public void testAsInBinaryUnary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsInBinaryUnary.kt", this::doTest);
            }

            @TestMetadata("AsInBlockWithReturnType.kt")
            public void testAsInBlockWithReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsInBlockWithReturnType.kt", this::doTest);
            }

            @TestMetadata("AsInExpressionBody.kt")
            public void testAsInExpressionBody() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsInExpressionBody.kt", this::doTest);
            }

            @TestMetadata("AsInPropertyAndPropertyAccessor.kt")
            public void testAsInPropertyAndPropertyAccessor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsInPropertyAndPropertyAccessor.kt", this::doTest);
            }

            @TestMetadata("AsNothing.kt")
            public void testAsNothing() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsNothing.kt", this::doTest);
            }

            @TestMetadata("AsTypeAlias.kt")
            public void testAsTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsTypeAlias.kt", this::doTest);
            }

            @TestMetadata("AsWithOtherParameter.kt")
            public void testAsWithOtherParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/AsWithOtherParameter.kt", this::doTest);
            }

            @TestMetadata("checkCastToNullableType.kt")
            public void testCheckCastToNullableType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/checkCastToNullableType.kt", this::doTest);
            }

            @TestMetadata("constants.kt")
            public void testConstants() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/constants.kt", this::doTest);
            }

            @TestMetadata("DowncastMap.kt")
            public void testDowncastMap() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/DowncastMap.kt", this::doTest);
            }

            @TestMetadata("ExtensionAsNonExtension.kt")
            public void testExtensionAsNonExtension() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/ExtensionAsNonExtension.kt", this::doTest);
            }

            @TestMetadata("FlexibleTargetType.kt")
            public void testFlexibleTargetType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/FlexibleTargetType.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt")
            public void testIsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowForExactSupertypeCheck.kt")
            public void testIsErasedAllowForExactSupertypeCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForExactSupertypeCheck.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowForOverridenVarianceWithProjection.kt")
            public void testIsErasedAllowForOverridenVarianceWithProjection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForOverridenVarianceWithProjection.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowForSupertypeCheckWithContrvariance.kt")
            public void testIsErasedAllowForSupertypeCheckWithContrvariance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithContrvariance.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowForSupertypeCheckWithCovariance.kt")
            public void testIsErasedAllowForSupertypeCheckWithCovariance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithCovariance.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowForTypeWithIrrelevantMixin.kt")
            public void testIsErasedAllowForTypeWithIrrelevantMixin() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithIrrelevantMixin.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt")
            public void testIsErasedAllowForTypeWithTwoSameTypeSubstitutions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowForTypeWithoutTypeArguments.kt")
            public void testIsErasedAllowForTypeWithoutTypeArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithoutTypeArguments.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowFromOut.kt")
            public void testIsErasedAllowFromOut() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowFromOut2.kt")
            public void testIsErasedAllowFromOut2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut2.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowFromOutAtClass.kt")
            public void testIsErasedAllowFromOutAtClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOutAtClass.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowParameterSubtype.kt")
            public void testIsErasedAllowParameterSubtype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowParameterSubtype.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowSameClassParameter.kt")
            public void testIsErasedAllowSameClassParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameClassParameter.kt", this::doTest);
            }

            @TestMetadata("IsErasedAllowSameParameterParameter.kt")
            public void testIsErasedAllowSameParameterParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameParameterParameter.kt", this::doTest);
            }

            @TestMetadata("isErasedAnyAndStarred.kt")
            public void testIsErasedAnyAndStarred() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/isErasedAnyAndStarred.kt", this::doTest);
            }

            @TestMetadata("IsErasedDisallowDifferentArgInvariantPosition.kt")
            public void testIsErasedDisallowDifferentArgInvariantPosition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowDifferentArgInvariantPosition.kt", this::doTest);
            }

            @TestMetadata("IsErasedDisallowForOverridenVariance.kt")
            public void testIsErasedDisallowForOverridenVariance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowForOverridenVariance.kt", this::doTest);
            }

            @TestMetadata("IsErasedDisallowForTypeWithConstraints.kt")
            public void testIsErasedDisallowForTypeWithConstraints() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowForTypeWithConstraints.kt", this::doTest);
            }

            @TestMetadata("IsErasedDisallowFromAny.kt")
            public void testIsErasedDisallowFromAny() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromAny.kt", this::doTest);
            }

            @TestMetadata("IsErasedDisallowFromIn.kt")
            public void testIsErasedDisallowFromIn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromIn.kt", this::doTest);
            }

            @TestMetadata("IsErasedDisallowFromOut.kt")
            public void testIsErasedDisallowFromOut() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOut.kt", this::doTest);
            }

            @TestMetadata("IsErasedDisallowFromOutAtClass.kt")
            public void testIsErasedDisallowFromOutAtClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOutAtClass.kt", this::doTest);
            }

            @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt")
            public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt", this::doTest);
            }

            @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt")
            public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt", this::doTest);
            }

            @TestMetadata("IsErasedNonGeneric.kt")
            public void testIsErasedNonGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedNonGeneric.kt", this::doTest);
            }

            @TestMetadata("IsErasedNullableTasT.kt")
            public void testIsErasedNullableTasT() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedNullableTasT.kt", this::doTest);
            }

            @TestMetadata("IsErasedStar.kt")
            public void testIsErasedStar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedStar.kt", this::doTest);
            }

            @TestMetadata("isErasedTAndStarred.kt")
            public void testIsErasedTAndStarred() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/isErasedTAndStarred.kt", this::doTest);
            }

            @TestMetadata("IsErasedTasT.kt")
            public void testIsErasedTasT() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedTasT.kt", this::doTest);
            }

            @TestMetadata("IsErasedToErrorType.kt")
            public void testIsErasedToErrorType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedToErrorType.kt", this::doTest);
            }

            @TestMetadata("isErasedUnrelatedAndStarred.kt")
            public void testIsErasedUnrelatedAndStarred() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/isErasedUnrelatedAndStarred.kt", this::doTest);
            }

            @TestMetadata("IsErasedUpcastToNonReified.kt")
            public void testIsErasedUpcastToNonReified() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsErasedUpcastToNonReified.kt", this::doTest);
            }

            @TestMetadata("IsForTypeWithComplexUpperBound.kt")
            public void testIsForTypeWithComplexUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsForTypeWithComplexUpperBound.kt", this::doTest);
            }

            @TestMetadata("IsRecursionSustainable.kt")
            public void testIsRecursionSustainable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsRecursionSustainable.kt", this::doTest);
            }

            @TestMetadata("IsTraits.kt")
            public void testIsTraits() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsTraits.kt", this::doTest);
            }

            @TestMetadata("IsWithCycleUpperBounds.kt")
            public void testIsWithCycleUpperBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/IsWithCycleUpperBounds.kt", this::doTest);
            }

            @TestMetadata("kt15161.kt")
            public void testKt15161() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/kt15161.kt", this::doTest);
            }

            @TestMetadata("kt614.kt")
            public void testKt614() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/kt614.kt", this::doTest);
            }

            @TestMetadata("nothingAs.kt")
            public void testNothingAs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/nothingAs.kt", this::doTest);
            }

            @TestMetadata("NullableToNullable.kt")
            public void testNullableToNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/NullableToNullable.kt", this::doTest);
            }

            @TestMetadata("StableTypeForUselessCast.kt")
            public void testStableTypeForUselessCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/StableTypeForUselessCast.kt", this::doTest);
            }

            @TestMetadata("UselessSafeCast.kt")
            public void testUselessSafeCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/UselessSafeCast.kt", this::doTest);
            }

            @TestMetadata("WhenErasedDisallowFromAny.kt")
            public void testWhenErasedDisallowFromAny() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/WhenErasedDisallowFromAny.kt", this::doTest);
            }

            @TestMetadata("WhenWithExpression.kt")
            public void testWhenWithExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/WhenWithExpression.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/cast/bare")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Bare extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInBare() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cast/bare"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("AsNestedBare.kt")
                public void testAsNestedBare() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/AsNestedBare.kt", this::doTest);
                }

                @TestMetadata("AsNullable.kt")
                public void testAsNullable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/AsNullable.kt", this::doTest);
                }

                @TestMetadata("AsNullableNotEnough.kt")
                public void testAsNullableNotEnough() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/AsNullableNotEnough.kt", this::doTest);
                }

                @TestMetadata("EitherAs.kt")
                public void testEitherAs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/EitherAs.kt", this::doTest);
                }

                @TestMetadata("EitherIs.kt")
                public void testEitherIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/EitherIs.kt", this::doTest);
                }

                @TestMetadata("EitherNotIs.kt")
                public void testEitherNotIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/EitherNotIs.kt", this::doTest);
                }

                @TestMetadata("EitherSafeAs.kt")
                public void testEitherSafeAs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/EitherSafeAs.kt", this::doTest);
                }

                @TestMetadata("EitherWhen.kt")
                public void testEitherWhen() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/EitherWhen.kt", this::doTest);
                }

                @TestMetadata("ErrorsInSubstitution.kt")
                public void testErrorsInSubstitution() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/ErrorsInSubstitution.kt", this::doTest);
                }

                @TestMetadata("FromErrorType.kt")
                public void testFromErrorType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/FromErrorType.kt", this::doTest);
                }

                @TestMetadata("NullableAs.kt")
                public void testNullableAs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/NullableAs.kt", this::doTest);
                }

                @TestMetadata("NullableAsNotEnough.kt")
                public void testNullableAsNotEnough() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNotEnough.kt", this::doTest);
                }

                @TestMetadata("NullableAsNullable.kt")
                public void testNullableAsNullable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNullable.kt", this::doTest);
                }

                @TestMetadata("NullableAsNullableNotEnough.kt")
                public void testNullableAsNullableNotEnough() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNullableNotEnough.kt", this::doTest);
                }

                @TestMetadata("RedundantNullable.kt")
                public void testRedundantNullable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/RedundantNullable.kt", this::doTest);
                }

                @TestMetadata("ToErrorType.kt")
                public void testToErrorType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/ToErrorType.kt", this::doTest);
                }

                @TestMetadata("UnrelatedAs.kt")
                public void testUnrelatedAs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedAs.kt", this::doTest);
                }

                @TestMetadata("UnrelatedColon.kt")
                public void testUnrelatedColon() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedColon.kt", this::doTest);
                }

                @TestMetadata("UnrelatedIs.kt")
                public void testUnrelatedIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedIs.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NeverSucceeds extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNeverSucceeds() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cast/neverSucceeds"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("CastToNotNullSuper.kt")
                public void testCastToNotNullSuper() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/CastToNotNullSuper.kt", this::doTest);
                }

                @TestMetadata("MappedDirect.kt")
                public void testMappedDirect() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedDirect.kt", this::doTest);
                }

                @TestMetadata("MappedSubtypes.kt")
                public void testMappedSubtypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedSubtypes.kt", this::doTest);
                }

                @TestMetadata("NoGenericsRelated.kt")
                public void testNoGenericsRelated() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsRelated.kt", this::doTest);
                }

                @TestMetadata("NoGenericsUnrelated.kt")
                public void testNoGenericsUnrelated() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsUnrelated.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/checkArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CheckArguments extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInCheckArguments() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/checkArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("arrayAccessSet.kt")
            public void testArrayAccessSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/checkArguments/arrayAccessSet.kt", this::doTest);
            }

            @TestMetadata("arrayAccessSetTooManyArgs.kt")
            public void testArrayAccessSetTooManyArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/checkArguments/arrayAccessSetTooManyArgs.kt", this::doTest);
            }

            @TestMetadata("booleanExpressions.kt")
            public void testBooleanExpressions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/checkArguments/booleanExpressions.kt", this::doTest);
            }

            @TestMetadata("kt1897_diagnostic_part.kt")
            public void testKt1897_diagnostic_part() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/checkArguments/kt1897_diagnostic_part.kt", this::doTest);
            }

            @TestMetadata("kt1940.kt")
            public void testKt1940() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/checkArguments/kt1940.kt", this::doTest);
            }

            @TestMetadata("overloadedFunction.kt")
            public void testOverloadedFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/checkArguments/overloadedFunction.kt", this::doTest);
            }

            @TestMetadata("SpreadVarargs.kt")
            public void testSpreadVarargs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/checkArguments/SpreadVarargs.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/classLiteral")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClassLiteral extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInClassLiteral() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/classLiteral"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("arrays.kt")
            public void testArrays() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/arrays.kt", this::doTest);
            }

            @TestMetadata("classAndObjectLiteralType.kt")
            public void testClassAndObjectLiteralType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/classAndObjectLiteralType.kt", this::doTest);
            }

            @TestMetadata("classLiteralType.kt")
            public void testClassLiteralType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/classLiteralType.kt", this::doTest);
            }

            @TestMetadata("expressionWithNullableType.kt")
            public void testExpressionWithNullableType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/expressionWithNullableType.kt", this::doTest);
            }

            @TestMetadata("genericArrays.kt")
            public void testGenericArrays() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/genericArrays.kt", this::doTest);
            }

            @TestMetadata("genericClasses.kt")
            public void testGenericClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/genericClasses.kt", this::doTest);
            }

            @TestMetadata("inAnnotationArguments.kt")
            public void testInAnnotationArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/inAnnotationArguments.kt", this::doTest);
            }

            @TestMetadata("integerValueType.kt")
            public void testIntegerValueType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/integerValueType.kt", this::doTest);
            }

            @TestMetadata("nonClassesOnLHS.kt")
            public void testNonClassesOnLHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/nonClassesOnLHS.kt", this::doTest);
            }

            @TestMetadata("qualifiedClassLiteral.kt")
            public void testQualifiedClassLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/qualifiedClassLiteral.kt", this::doTest);
            }

            @TestMetadata("simpleClassLiteral.kt")
            public void testSimpleClassLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/simpleClassLiteral.kt", this::doTest);
            }

            @TestMetadata("smartCast.kt")
            public void testSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/smartCast.kt", this::doTest);
            }

            @TestMetadata("typealiases.kt")
            public void testTypealiases() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/typealiases.kt", this::doTest);
            }

            @TestMetadata("unresolvedClass.kt")
            public void testUnresolvedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classLiteral/unresolvedClass.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/classObjects")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClassObjects extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInClassObjects() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/classObjects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("builtInClassObjects.kt")
            public void testBuiltInClassObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/builtInClassObjects.kt", this::doTest);
            }

            @TestMetadata("ClassObjectCannotAccessClassFields.kt")
            public void testClassObjectCannotAccessClassFields() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/ClassObjectCannotAccessClassFields.kt", this::doTest);
            }

            @TestMetadata("classObjectHeader.kt")
            public void testClassObjectHeader() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/classObjectHeader.kt", this::doTest);
            }

            @TestMetadata("classObjectInLocalClass.kt")
            public void testClassObjectInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/classObjectInLocalClass.kt", this::doTest);
            }

            @TestMetadata("classObjectRedeclaration.kt")
            public void testClassObjectRedeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/classObjectRedeclaration.kt", this::doTest);
            }

            @TestMetadata("ClassObjectVisibility.kt")
            public void testClassObjectVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/ClassObjectVisibility.kt", this::doTest);
            }

            @TestMetadata("ClassObjects.kt")
            public void testClassObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/ClassObjects.kt", this::doTest);
            }

            @TestMetadata("companionObjectOfPrivateClassVisibility.kt")
            public void testCompanionObjectOfPrivateClassVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/companionObjectOfPrivateClassVisibility.kt", this::doTest);
            }

            @TestMetadata("importClassInClassObject.kt")
            public void testImportClassInClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/importClassInClassObject.kt", this::doTest);
            }

            @TestMetadata("InnerClassAccessThroughClassObject.kt")
            public void testInnerClassAccessThroughClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughClassObject.kt", this::doTest);
            }

            @TestMetadata("InnerClassAccessThroughEnum.kt")
            public void testInnerClassAccessThroughEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughEnum.kt", this::doTest);
            }

            @TestMetadata("InnerClassClassObject.kt")
            public void testInnerClassClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/InnerClassClassObject.kt", this::doTest);
            }

            @TestMetadata("invisibleClassObjects.kt")
            public void testInvisibleClassObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/invisibleClassObjects.kt", this::doTest);
            }

            @TestMetadata("kt3866.kt")
            public void testKt3866() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/kt3866.kt", this::doTest);
            }

            @TestMetadata("multipleDissallowedDefaultObjects.kt")
            public void testMultipleDissallowedDefaultObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/multipleDissallowedDefaultObjects.kt", this::doTest);
            }

            @TestMetadata("nestedClassInPrivateClassObject.kt")
            public void testNestedClassInPrivateClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/nestedClassInPrivateClassObject.kt", this::doTest);
            }

            @TestMetadata("resolveFunctionInsideClassObject.kt")
            public void testResolveFunctionInsideClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/resolveFunctionInsideClassObject.kt", this::doTest);
            }

            @TestMetadata("typeParametersInObject.kt")
            public void testTypeParametersInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/classObjects/typeParametersInObject.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/collectionLiterals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CollectionLiterals extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInCollectionLiterals() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/collectionLiterals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("argumentsOfAnnotation.kt")
            public void testArgumentsOfAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/argumentsOfAnnotation.kt", this::doTest);
            }

            @TestMetadata("argumentsOfAnnotationWithKClass.kt")
            public void testArgumentsOfAnnotationWithKClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/argumentsOfAnnotationWithKClass.kt", this::doTest);
            }

            @TestMetadata("basicCollectionLiterals.kt")
            public void testBasicCollectionLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/basicCollectionLiterals.kt", this::doTest);
            }

            @TestMetadata("collectionLiteralsAsPrimitiveArrays.kt")
            public void testCollectionLiteralsAsPrimitiveArrays() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/collectionLiteralsAsPrimitiveArrays.kt", this::doTest);
            }

            @TestMetadata("collectionLiteralsWithVarargs.kt")
            public void testCollectionLiteralsWithVarargs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/collectionLiteralsWithVarargs.kt", this::doTest);
            }

            @TestMetadata("defaultValuesInAnnotation.kt")
            public void testDefaultValuesInAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/defaultValuesInAnnotation.kt", this::doTest);
            }

            @TestMetadata("defaultValuesWithConstantsInAnnotation.kt")
            public void testDefaultValuesWithConstantsInAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/defaultValuesWithConstantsInAnnotation.kt", this::doTest);
            }

            @TestMetadata("noArrayLiteralsInAnnotationsFeature.kt")
            public void testNoArrayLiteralsInAnnotationsFeature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/noArrayLiteralsInAnnotationsFeature.kt", this::doTest);
            }

            @TestMetadata("noCollectionLiterals.kt")
            public void testNoCollectionLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/noCollectionLiterals.kt", this::doTest);
            }

            @TestMetadata("resolveToFunctionFromBuiltIns.kt")
            public void testResolveToFunctionFromBuiltIns() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/collectionLiterals/resolveToFunctionFromBuiltIns.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/constructorConsistency")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ConstructorConsistency extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("afterInitialization.kt")
            public void testAfterInitialization() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/afterInitialization.kt", this::doTest);
            }

            @TestMetadata("aliencall.kt")
            public void testAliencall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/aliencall.kt", this::doTest);
            }

            public void testAllFilesPresentInConstructorConsistency() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/constructorConsistency"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("assignment.kt")
            public void testAssignment() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/assignment.kt", this::doTest);
            }

            @TestMetadata("backing.kt")
            public void testBacking() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/backing.kt", this::doTest);
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/basic.kt", this::doTest);
            }

            @TestMetadata("companion.kt")
            public void testCompanion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/companion.kt", this::doTest);
            }

            @TestMetadata("comparison.kt")
            public void testComparison() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/comparison.kt", this::doTest);
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/delegate.kt", this::doTest);
            }

            @TestMetadata("derived.kt")
            public void testDerived() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/derived.kt", this::doTest);
            }

            @TestMetadata("derivedProperty.kt")
            public void testDerivedProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/derivedProperty.kt", this::doTest);
            }

            @TestMetadata("getset.kt")
            public void testGetset() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/getset.kt", this::doTest);
            }

            @TestMetadata("init.kt")
            public void testInit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/init.kt", this::doTest);
            }

            @TestMetadata("initializerWithSecondaryConstructor.kt")
            public void testInitializerWithSecondaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/initializerWithSecondaryConstructor.kt", this::doTest);
            }

            @TestMetadata("initwithgetter.kt")
            public void testInitwithgetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/initwithgetter.kt", this::doTest);
            }

            @TestMetadata("inspection.kt")
            public void testInspection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/inspection.kt", this::doTest);
            }

            @TestMetadata("lambdaInObject.kt")
            public void testLambdaInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/lambdaInObject.kt", this::doTest);
            }

            @TestMetadata("lateInit.kt")
            public void testLateInit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/lateInit.kt", this::doTest);
            }

            @TestMetadata("localObject.kt")
            public void testLocalObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/localObject.kt", this::doTest);
            }

            @TestMetadata("multipleAreNull.kt")
            public void testMultipleAreNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/multipleAreNull.kt", this::doTest);
            }

            @TestMetadata("nobacking.kt")
            public void testNobacking() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/nobacking.kt", this::doTest);
            }

            @TestMetadata("open.kt")
            public void testOpen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/open.kt", this::doTest);
            }

            @TestMetadata("openProperty.kt")
            public void testOpenProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/openProperty.kt", this::doTest);
            }

            @TestMetadata("outer.kt")
            public void testOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/outer.kt", this::doTest);
            }

            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/property.kt", this::doTest);
            }

            @TestMetadata("propertyAccess.kt")
            public void testPropertyAccess() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/propertyAccess.kt", this::doTest);
            }

            @TestMetadata("twoSecondaryConstructors.kt")
            public void testTwoSecondaryConstructors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/constructorConsistency/twoSecondaryConstructors.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ControlFlowAnalysis extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInControlFlowAnalysis() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("assignedInFinally.kt")
            public void testAssignedInFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInFinally.kt", this::doTest);
            }

            @TestMetadata("assignmentInLocalsInConstructor.kt")
            public void testAssignmentInLocalsInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignmentInLocalsInConstructor.kt", this::doTest);
            }

            @TestMetadata("backingFieldInsideGetter.kt")
            public void testBackingFieldInsideGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/backingFieldInsideGetter.kt", this::doTest);
            }

            @TestMetadata("breakContinueInTryFinally.kt")
            public void testBreakContinueInTryFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakContinueInTryFinally.kt", this::doTest);
            }

            @TestMetadata("breakInsideLocal.kt")
            public void testBreakInsideLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakInsideLocal.kt", this::doTest);
            }

            @TestMetadata("breakOrContinueInLoopCondition.kt")
            public void testBreakOrContinueInLoopCondition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakOrContinueInLoopCondition.kt", this::doTest);
            }

            @TestMetadata("checkInnerLocalDeclarations.kt")
            public void testCheckInnerLocalDeclarations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkInnerLocalDeclarations.kt", this::doTest);
            }

            @TestMetadata("checkPropertyAccessor.kt")
            public void testCheckPropertyAccessor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkPropertyAccessor.kt", this::doTest);
            }

            @TestMetadata("constructorPropertyInterdependence.kt")
            public void testConstructorPropertyInterdependence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/constructorPropertyInterdependence.kt", this::doTest);
            }

            @TestMetadata("definiteReturnInWhen.kt")
            public void testDefiniteReturnInWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturnInWhen.kt", this::doTest);
            }

            @TestMetadata("delegatedPropertyEarlyAccess.kt")
            public void testDelegatedPropertyEarlyAccess() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/delegatedPropertyEarlyAccess.kt", this::doTest);
            }

            @TestMetadata("doWhileAssignment.kt")
            public void testDoWhileAssignment() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/doWhileAssignment.kt", this::doTest);
            }

            @TestMetadata("doWhileNotDefined.kt")
            public void testDoWhileNotDefined() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/doWhileNotDefined.kt", this::doTest);
            }

            @TestMetadata("elvisNotProcessed.kt")
            public void testElvisNotProcessed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/elvisNotProcessed.kt", this::doTest);
            }

            @TestMetadata("enumCompanionInterdependence.kt")
            public void testEnumCompanionInterdependence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/enumCompanionInterdependence.kt", this::doTest);
            }

            @TestMetadata("enumInterdependence.kt")
            public void testEnumInterdependence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/enumInterdependence.kt", this::doTest);
            }

            @TestMetadata("fieldAsClassDelegate.kt")
            public void testFieldAsClassDelegate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/fieldAsClassDelegate.kt", this::doTest);
            }

            @TestMetadata("infiniteLoops.kt")
            public void testInfiniteLoops() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/infiniteLoops.kt", this::doTest);
            }

            @TestMetadata("initializationInLambda.kt")
            public void testInitializationInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLambda.kt", this::doTest);
            }

            @TestMetadata("initializationInLocalClass.kt")
            public void testInitializationInLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalClass.kt", this::doTest);
            }

            @TestMetadata("initializationInLocalFun.kt")
            public void testInitializationInLocalFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalFun.kt", this::doTest);
            }

            @TestMetadata("initializationInLocalViaExplicitThis.kt")
            public void testInitializationInLocalViaExplicitThis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalViaExplicitThis.kt", this::doTest);
            }

            @TestMetadata("kt1001.kt")
            public void testKt1001() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1001.kt", this::doTest);
            }

            @TestMetadata("kt1027.kt")
            public void testKt1027() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1027.kt", this::doTest);
            }

            @TestMetadata("kt1066.kt")
            public void testKt1066() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1066.kt", this::doTest);
            }

            @TestMetadata("kt10805.kt")
            public void testKt10805() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt10805.kt", this::doTest);
            }

            @TestMetadata("kt10823.kt")
            public void testKt10823() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt10823.kt", this::doTest);
            }

            @TestMetadata("kt1156.kt")
            public void testKt1156() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1156.kt", this::doTest);
            }

            @TestMetadata("kt1185enums.kt")
            public void testKt1185enums() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1185enums.kt", this::doTest);
            }

            @TestMetadata("kt1189.kt")
            public void testKt1189() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1189.kt", this::doTest);
            }

            @TestMetadata("kt1191.kt")
            public void testKt1191() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1191.kt", this::doTest);
            }

            @TestMetadata("kt1219.1301.kt")
            public void testKt1219_1301() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1219.1301.kt", this::doTest);
            }

            @TestMetadata("kt1571.kt")
            public void testKt1571() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1571.kt", this::doTest);
            }

            @TestMetadata("kt1977.kt")
            public void testKt1977() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1977.kt", this::doTest);
            }

            @TestMetadata("kt2166_kt2103.kt")
            public void testKt2166_kt2103() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2166_kt2103.kt", this::doTest);
            }

            @TestMetadata("kt2226.kt")
            public void testKt2226() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2226.kt", this::doTest);
            }

            @TestMetadata("kt2330.kt")
            public void testKt2330() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2330.kt", this::doTest);
            }

            @TestMetadata("kt2334.kt")
            public void testKt2334() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2334.kt", this::doTest);
            }

            @TestMetadata("kt2369.kt")
            public void testKt2369() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2369.kt", this::doTest);
            }

            @TestMetadata("kt2845.kt")
            public void testKt2845() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2845.kt", this::doTest);
            }

            @TestMetadata("kt2960.kt")
            public void testKt2960() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2960.kt", this::doTest);
            }

            @TestMetadata("kt2972.kt")
            public void testKt2972() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2972.kt", this::doTest);
            }

            @TestMetadata("kt3444.kt")
            public void testKt3444() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3444.kt", this::doTest);
            }

            @TestMetadata("kt3501.kt")
            public void testKt3501() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3501.kt", this::doTest);
            }

            @TestMetadata("kt4126.kt")
            public void testKt4126() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4126.kt", this::doTest);
            }

            @TestMetadata("kt4405.kt")
            public void testKt4405() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4405.kt", this::doTest);
            }

            @TestMetadata("kt510.kt")
            public void testKt510() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt510.kt", this::doTest);
            }

            @TestMetadata("kt607.kt")
            public void testKt607() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt607.kt", this::doTest);
            }

            @TestMetadata("kt609.kt")
            public void testKt609() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt609.kt", this::doTest);
            }

            @TestMetadata("kt610.kt")
            public void testKt610() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt610.kt", this::doTest);
            }

            @TestMetadata("kt6788.kt")
            public void testKt6788() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt6788.kt", this::doTest);
            }

            @TestMetadata("kt776.kt")
            public void testKt776() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt776.kt", this::doTest);
            }

            @TestMetadata("kt843.kt")
            public void testKt843() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt843.kt", this::doTest);
            }

            @TestMetadata("kt897.kt")
            public void testKt897() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt897.kt", this::doTest);
            }

            @TestMetadata("localClasses.kt")
            public void testLocalClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/localClasses.kt", this::doTest);
            }

            @TestMetadata("localObjectInConstructor.kt")
            public void testLocalObjectInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/localObjectInConstructor.kt", this::doTest);
            }

            @TestMetadata("nestedTryFinally.kt")
            public void testNestedTryFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nestedTryFinally.kt", this::doTest);
            }

            @TestMetadata("nonLocalReturnUnreachable.kt")
            public void testNonLocalReturnUnreachable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nonLocalReturnUnreachable.kt", this::doTest);
            }

            @TestMetadata("nonLocalReturnWithFinally.kt")
            public void testNonLocalReturnWithFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nonLocalReturnWithFinally.kt", this::doTest);
            }

            @TestMetadata("privateSetter.kt")
            public void testPrivateSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/privateSetter.kt", this::doTest);
            }

            @TestMetadata("propertiesInitWithOtherInstance.kt")
            public void testPropertiesInitWithOtherInstance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstance.kt", this::doTest);
            }

            @TestMetadata("propertiesInitWithOtherInstanceInner.kt")
            public void testPropertiesInitWithOtherInstanceInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstanceInner.kt", this::doTest);
            }

            @TestMetadata("propertiesInitWithOtherInstanceThisLabel.kt")
            public void testPropertiesInitWithOtherInstanceThisLabel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstanceThisLabel.kt", this::doTest);
            }

            @TestMetadata("propertiesOrderInPackage.kt")
            public void testPropertiesOrderInPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesOrderInPackage.kt", this::doTest);
            }

            @TestMetadata("reassignmentInTryCatch.kt")
            public void testReassignmentInTryCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInTryCatch.kt", this::doTest);
            }

            @TestMetadata("reassignmentInTryCatchWithJumps.kt")
            public void testReassignmentInTryCatchWithJumps() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInTryCatchWithJumps.kt", this::doTest);
            }

            @TestMetadata("referenceToPropertyInitializer.kt")
            public void testReferenceToPropertyInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/referenceToPropertyInitializer.kt", this::doTest);
            }

            @TestMetadata("repeatUnitializedErrorOnlyForLocalVars.kt")
            public void testRepeatUnitializedErrorOnlyForLocalVars() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/repeatUnitializedErrorOnlyForLocalVars.kt", this::doTest);
            }

            @TestMetadata("scopeOfAnonymousInitializer.kt")
            public void testScopeOfAnonymousInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/scopeOfAnonymousInitializer.kt", this::doTest);
            }

            @TestMetadata("throwInLambda.kt")
            public void testThrowInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/throwInLambda.kt", this::doTest);
            }

            @TestMetadata("tryWithAssignmentUsedInCatch.kt")
            public void testTryWithAssignmentUsedInCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/tryWithAssignmentUsedInCatch.kt", this::doTest);
            }

            @TestMetadata("uninitializedInLocalDeclarations.kt")
            public void testUninitializedInLocalDeclarations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedInLocalDeclarations.kt", this::doTest);
            }

            @TestMetadata("UninitializedOrReassignedVariables.kt")
            public void testUninitializedOrReassignedVariables() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/UninitializedOrReassignedVariables.kt", this::doTest);
            }

            @TestMetadata("unmappedArgs.kt")
            public void testUnmappedArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unmappedArgs.kt", this::doTest);
            }

            @TestMetadata("unresolvedReference.kt")
            public void testUnresolvedReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unresolvedReference.kt", this::doTest);
            }

            @TestMetadata("unusedInAnonymous.kt")
            public void testUnusedInAnonymous() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unusedInAnonymous.kt", this::doTest);
            }

            @TestMetadata("useUninitializedInLambda.kt")
            public void testUseUninitializedInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/useUninitializedInLambda.kt", this::doTest);
            }

            @TestMetadata("varInitializationInIfInCycle.kt")
            public void testVarInitializationInIfInCycle() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/varInitializationInIfInCycle.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DeadCode extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDeadCode() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("commasAndWhitespaces.kt")
                public void testCommasAndWhitespaces() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/commasAndWhitespaces.kt", this::doTest);
                }

                @TestMetadata("commentsInDeadCode.kt")
                public void testCommentsInDeadCode() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/commentsInDeadCode.kt", this::doTest);
                }

                @TestMetadata("deadCallInInvokeCall.kt")
                public void testDeadCallInInvokeCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCallInInvokeCall.kt", this::doTest);
                }

                @TestMetadata("deadCallInReceiver.kt")
                public void testDeadCallInReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCallInReceiver.kt", this::doTest);
                }

                @TestMetadata("deadCodeDifferentExamples.kt")
                public void testDeadCodeDifferentExamples() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeDifferentExamples.kt", this::doTest);
                }

                @TestMetadata("deadCodeFromDifferentSources.kt")
                public void testDeadCodeFromDifferentSources() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeFromDifferentSources.kt", this::doTest);
                }

                @TestMetadata("deadCodeInArrayAccess.kt")
                public void testDeadCodeInArrayAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInArrayAccess.kt", this::doTest);
                }

                @TestMetadata("deadCodeInAssignment.kt")
                public void testDeadCodeInAssignment() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInAssignment.kt", this::doTest);
                }

                @TestMetadata("deadCodeInBinaryExpressions.kt")
                public void testDeadCodeInBinaryExpressions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInBinaryExpressions.kt", this::doTest);
                }

                @TestMetadata("deadCodeInCalls.kt")
                public void testDeadCodeInCalls() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInCalls.kt", this::doTest);
                }

                @TestMetadata("deadCodeInDeadCode.kt")
                public void testDeadCodeInDeadCode() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInDeadCode.kt", this::doTest);
                }

                @TestMetadata("deadCodeInIf.kt")
                public void testDeadCodeInIf() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInIf.kt", this::doTest);
                }

                @TestMetadata("deadCodeInInnerExpressions.kt")
                public void testDeadCodeInInnerExpressions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInInnerExpressions.kt", this::doTest);
                }

                @TestMetadata("deadCodeInLocalDeclarations.kt")
                public void testDeadCodeInLocalDeclarations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInLocalDeclarations.kt", this::doTest);
                }

                @TestMetadata("deadCodeInLoops.kt")
                public void testDeadCodeInLoops() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInLoops.kt", this::doTest);
                }

                @TestMetadata("deadCodeInReturn.kt")
                public void testDeadCodeInReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInReturn.kt", this::doTest);
                }

                @TestMetadata("deadCodeInUnaryExpr.kt")
                public void testDeadCodeInUnaryExpr() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInUnaryExpr.kt", this::doTest);
                }

                @TestMetadata("deadCodeInWhileFromBreak.kt")
                public void testDeadCodeInWhileFromBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInWhileFromBreak.kt", this::doTest);
                }

                @TestMetadata("expressionInUnitLiteral.kt")
                public void testExpressionInUnitLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/expressionInUnitLiteral.kt", this::doTest);
                }

                @TestMetadata("kt2585_1.kt")
                public void testKt2585_1() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_1.kt", this::doTest);
                }

                @TestMetadata("kt2585_2.kt")
                public void testKt2585_2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_2.kt", this::doTest);
                }

                @TestMetadata("kt2585_3.kt")
                public void testKt2585_3() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_3.kt", this::doTest);
                }

                @TestMetadata("kt3162tryAsInitializer.kt")
                public void testKt3162tryAsInitializer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt3162tryAsInitializer.kt", this::doTest);
                }

                @TestMetadata("kt5200DeadCodeInLambdas.kt")
                public void testKt5200DeadCodeInLambdas() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt5200DeadCodeInLambdas.kt", this::doTest);
                }

                @TestMetadata("returnInDeadLambda.kt")
                public void testReturnInDeadLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/returnInDeadLambda.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DefiniteReturn extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDefiniteReturn() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("kt3444_ReturnFromLocalFunctions.kt")
                public void testKt3444_ReturnFromLocalFunctions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt3444_ReturnFromLocalFunctions.kt", this::doTest);
                }

                @TestMetadata("kt4034.kt")
                public void testKt4034() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt4034.kt", this::doTest);
                }

                @TestMetadata("ReturnFromFunctionInObject.kt")
                public void testReturnFromFunctionInObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/ReturnFromFunctionInObject.kt", this::doTest);
                }

                @TestMetadata("simpleClass.kt")
                public void testSimpleClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/simpleClass.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class UnnecessaryLateinit extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInUnnecessaryLateinit() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("lateinitRecursiveInLambda.kt")
                public void testLateinitRecursiveInLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitRecursiveInLambda.kt", this::doTest);
                }

                @TestMetadata("lateinitWithConstructor.kt")
                public void testLateinitWithConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithConstructor.kt", this::doTest);
                }

                @TestMetadata("lateinitWithErroneousDelegation.kt")
                public void testLateinitWithErroneousDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithErroneousDelegation.kt", this::doTest);
                }

                @TestMetadata("lateinitWithInit.kt")
                public void testLateinitWithInit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithInit.kt", this::doTest);
                }

                @TestMetadata("lateinitWithMultipleConstructors.kt")
                public void testLateinitWithMultipleConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithMultipleConstructors.kt", this::doTest);
                }

                @TestMetadata("lateinitWithMultipleConstructorsAndDelegation.kt")
                public void testLateinitWithMultipleConstructorsAndDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithMultipleConstructorsAndDelegation.kt", this::doTest);
                }

                @TestMetadata("lateinitWithPlusAssign.kt")
                public void testLateinitWithPlusAssign() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithPlusAssign.kt", this::doTest);
                }

                @TestMetadata("lateinitWithPrimaryConstructorAndConstructor.kt")
                public void testLateinitWithPrimaryConstructorAndConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithPrimaryConstructorAndConstructor.kt", this::doTest);
                }

                @TestMetadata("normalLateinit.kt")
                public void testNormalLateinit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/normalLateinit.kt", this::doTest);
                }

                @TestMetadata("normalLateinitWithTwoConstructors.kt")
                public void testNormalLateinitWithTwoConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/normalLateinitWithTwoConstructors.kt", this::doTest);
                }

                @TestMetadata("secondaryConstructorDelegateItself.kt")
                public void testSecondaryConstructorDelegateItself() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/secondaryConstructorDelegateItself.kt", this::doTest);
                }

                @TestMetadata("secondaryConstructorDelegateLoop.kt")
                public void testSecondaryConstructorDelegateLoop() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/secondaryConstructorDelegateLoop.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/controlStructures")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ControlStructures extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInControlStructures() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlStructures"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("catchGenerics.kt")
            public void testCatchGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/catchGenerics.kt", this::doTest);
            }

            @TestMetadata("catchInnerClassesOfGenerics.kt")
            public void testCatchInnerClassesOfGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/catchInnerClassesOfGenerics.kt", this::doTest);
            }

            @TestMetadata("catchInnerClassesOfGenerics_deprecation.kt")
            public void testCatchInnerClassesOfGenerics_deprecation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/catchInnerClassesOfGenerics_deprecation.kt", this::doTest);
            }

            @TestMetadata("catchWithDefault.kt")
            public void testCatchWithDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/catchWithDefault.kt", this::doTest);
            }

            @TestMetadata("catchingLocalClassesCapturingTypeParameters.kt")
            public void testCatchingLocalClassesCapturingTypeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/catchingLocalClassesCapturingTypeParameters.kt", this::doTest);
            }

            @TestMetadata("commonSupertypeOfT.kt")
            public void testCommonSupertypeOfT() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/commonSupertypeOfT.kt", this::doTest);
            }

            @TestMetadata("continueAndBreakLabelWithSameFunctionName.kt")
            public void testContinueAndBreakLabelWithSameFunctionName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/continueAndBreakLabelWithSameFunctionName.kt", this::doTest);
            }

            @TestMetadata("emptyIf.kt")
            public void testEmptyIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/emptyIf.kt", this::doTest);
            }

            @TestMetadata("ForLoopWithExtensionIteratorOnNullable.kt")
            public void testForLoopWithExtensionIteratorOnNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/ForLoopWithExtensionIteratorOnNullable.kt", this::doTest);
            }

            @TestMetadata("forLoopWithNullableRange.kt")
            public void testForLoopWithNullableRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/forLoopWithNullableRange.kt", this::doTest);
            }

            @TestMetadata("forWithNullableIterator.kt")
            public void testForWithNullableIterator() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/forWithNullableIterator.kt", this::doTest);
            }

            @TestMetadata("ForWithoutBraces.kt")
            public void testForWithoutBraces() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/ForWithoutBraces.kt", this::doTest);
            }

            @TestMetadata("ForbidStatementAsDirectFunctionBody.kt")
            public void testForbidStatementAsDirectFunctionBody() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/ForbidStatementAsDirectFunctionBody.kt", this::doTest);
            }

            @TestMetadata("ifElseIntersection.kt")
            public void testIfElseIntersection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/ifElseIntersection.kt", this::doTest);
            }

            @TestMetadata("ifInResultOfLambda.kt")
            public void testIfInResultOfLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/ifInResultOfLambda.kt", this::doTest);
            }

            @TestMetadata("ifToAnyDiscriminatingUsages.kt")
            public void testIfToAnyDiscriminatingUsages() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/ifToAnyDiscriminatingUsages.kt", this::doTest);
            }

            @TestMetadata("ifWhenToAnyComplexExpressions.kt")
            public void testIfWhenToAnyComplexExpressions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/ifWhenToAnyComplexExpressions.kt", this::doTest);
            }

            @TestMetadata("ifWhenWithoutElse.kt")
            public void testIfWhenWithoutElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/ifWhenWithoutElse.kt", this::doTest);
            }

            @TestMetadata("improperElseInExpression.kt")
            public void testImproperElseInExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/improperElseInExpression.kt", this::doTest);
            }

            @TestMetadata("jumpAcrossFunctionBoundary.kt")
            public void testJumpAcrossFunctionBoundary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/jumpAcrossFunctionBoundary.kt", this::doTest);
            }

            @TestMetadata("kt10322.kt")
            public void testKt10322() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt10322.kt", this::doTest);
            }

            @TestMetadata("kt10706.kt")
            public void testKt10706() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt10706.kt", this::doTest);
            }

            @TestMetadata("kt10717.kt")
            public void testKt10717() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt10717.kt", this::doTest);
            }

            @TestMetadata("kt1075.kt")
            public void testKt1075() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt1075.kt", this::doTest);
            }

            @TestMetadata("kt4310.kt")
            public void testKt4310() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt4310.kt", this::doTest);
            }

            @TestMetadata("kt657.kt")
            public void testKt657() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt657.kt", this::doTest);
            }

            @TestMetadata("kt770.kt351.kt735_StatementType.kt")
            public void testKt770_kt351_kt735_StatementType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt770.kt351.kt735_StatementType.kt", this::doTest);
            }

            @TestMetadata("kt786.kt")
            public void testKt786() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt786.kt", this::doTest);
            }

            @TestMetadata("kt799.kt")
            public void testKt799() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/kt799.kt", this::doTest);
            }

            @TestMetadata("lambdasInExclExclAndElvis.kt")
            public void testLambdasInExclExclAndElvis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/lambdasInExclExclAndElvis.kt", this::doTest);
            }

            @TestMetadata("localReturnInsidePropertyAccessor.kt")
            public void testLocalReturnInsidePropertyAccessor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/localReturnInsidePropertyAccessor.kt", this::doTest);
            }

            @TestMetadata("specialConstructsAndPlatformTypes.kt")
            public void testSpecialConstructsAndPlatformTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/specialConstructsAndPlatformTypes.kt", this::doTest);
            }

            @TestMetadata("specialConstructsWithNullableExpectedType.kt")
            public void testSpecialConstructsWithNullableExpectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/specialConstructsWithNullableExpectedType.kt", this::doTest);
            }

            @TestMetadata("tryReturnType.kt")
            public void testTryReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/tryReturnType.kt", this::doTest);
            }

            @TestMetadata("typeInferenceForExclExcl.kt")
            public void testTypeInferenceForExclExcl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/typeInferenceForExclExcl.kt", this::doTest);
            }

            @TestMetadata("valVarCatchParameter.kt")
            public void testValVarCatchParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/valVarCatchParameter.kt", this::doTest);
            }

            @TestMetadata("valVarLoopParameter.kt")
            public void testValVarLoopParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/valVarLoopParameter.kt", this::doTest);
            }

            @TestMetadata("whenInResultOfLambda.kt")
            public void testWhenInResultOfLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/whenInResultOfLambda.kt", this::doTest);
            }

            @TestMetadata("whenToAnyDiscriminatingUsages.kt")
            public void testWhenToAnyDiscriminatingUsages() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/whenToAnyDiscriminatingUsages.kt", this::doTest);
            }

            @TestMetadata("when.kt234.kt973.kt")
            public void testWhen_kt234_kt973() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/controlStructures/when.kt234.kt973.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CyclicHierarchy extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInCyclicHierarchy() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cyclicHierarchy"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("classIndirectlyInheritsNested.kt")
            public void testClassIndirectlyInheritsNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/classIndirectlyInheritsNested.kt", this::doTest);
            }

            @TestMetadata("classInheritsNested.kt")
            public void testClassInheritsNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/classInheritsNested.kt", this::doTest);
            }

            @TestMetadata("commonSupertypeForCyclicAndUsualTypes.kt")
            public void testCommonSupertypeForCyclicAndUsualTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/commonSupertypeForCyclicAndUsualTypes.kt", this::doTest);
            }

            @TestMetadata("commonSupertypeForCyclicTypes.kt")
            public void testCommonSupertypeForCyclicTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/commonSupertypeForCyclicTypes.kt", this::doTest);
            }

            @TestMetadata("cyclicHierarchy.kt")
            public void testCyclicHierarchy() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/cyclicHierarchy.kt", this::doTest);
            }

            @TestMetadata("javaJavaCycle.kt")
            public void testJavaJavaCycle() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/javaJavaCycle.kt", this::doTest);
            }

            @TestMetadata("javaJavaNested.kt")
            public void testJavaJavaNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/javaJavaNested.kt", this::doTest);
            }

            @TestMetadata("javaKotlinJavaCycle.kt")
            public void testJavaKotlinJavaCycle() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/javaKotlinJavaCycle.kt", this::doTest);
            }

            @TestMetadata("kotlinJavaCycle.kt")
            public void testKotlinJavaCycle() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaCycle.kt", this::doTest);
            }

            @TestMetadata("kotlinJavaKotlinCycle.kt")
            public void testKotlinJavaKotlinCycle() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaKotlinCycle.kt", this::doTest);
            }

            @TestMetadata("kotlinJavaNestedCycle.kt")
            public void testKotlinJavaNestedCycle() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaNestedCycle.kt", this::doTest);
            }

            @TestMetadata("kt303.kt")
            public void testKt303() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/kt303.kt", this::doTest);
            }

            @TestMetadata("nestedClassInSuperClassParameter.kt")
            public void testNestedClassInSuperClassParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/nestedClassInSuperClassParameter.kt", this::doTest);
            }

            @TestMetadata("objectInheritsNested.kt")
            public void testObjectInheritsNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/objectInheritsNested.kt", this::doTest);
            }

            @TestMetadata("twoClassesWithNestedCycle.kt")
            public void testTwoClassesWithNestedCycle() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/twoClassesWithNestedCycle.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class WithCompanion extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInWithCompanion() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("everythingInOneScope.kt")
                public void testEverythingInOneScope() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/everythingInOneScope.kt", this::doTest);
                }

                @TestMetadata("noMembers.kt")
                public void testNoMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/noMembers.kt", this::doTest);
                }

                @TestMetadata("onlyInterfaces.kt")
                public void testOnlyInterfaces() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/onlyInterfaces.kt", this::doTest);
                }

                @TestMetadata("typeIsLowEnough.kt")
                public void testTypeIsLowEnough() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/typeIsLowEnough.kt", this::doTest);
                }

                @TestMetadata("withIrrelevantInterface.kt")
                public void testWithIrrelevantInterface() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withIrrelevantInterface.kt", this::doTest);
                }

                @TestMetadata("withMembers.kt")
                public void testWithMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withMembers.kt", this::doTest);
                }

                @TestMetadata("withoutTypeReference.kt")
                public void testWithoutTypeReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withoutTypeReference.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/dataClasses")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DataClasses extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDataClasses() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("componentNamedComponent1.kt")
            public void testComponentNamedComponent1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/componentNamedComponent1.kt", this::doTest);
            }

            @TestMetadata("conflictingCopyOverloads.kt")
            public void testConflictingCopyOverloads() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/conflictingCopyOverloads.kt", this::doTest);
            }

            @TestMetadata("conflictingOverloads.kt")
            public void testConflictingOverloads() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/conflictingOverloads.kt", this::doTest);
            }

            @TestMetadata("copyOfPrivateClass.kt")
            public void testCopyOfPrivateClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/copyOfPrivateClass.kt", this::doTest);
            }

            @TestMetadata("dataClassExplicitlyOverridingCopyNoDefaults.kt")
            public void testDataClassExplicitlyOverridingCopyNoDefaults() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassExplicitlyOverridingCopyNoDefaults.kt", this::doTest);
            }

            @TestMetadata("dataClassExplicitlyOverridingCopyWithDefaults.kt")
            public void testDataClassExplicitlyOverridingCopyWithDefaults() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassExplicitlyOverridingCopyWithDefaults.kt", this::doTest);
            }

            @TestMetadata("dataClassNoName.kt")
            public void testDataClassNoName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassNoName.kt", this::doTest);
            }

            @TestMetadata("dataClassNotOverridingCopy.kt")
            public void testDataClassNotOverridingCopy() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassNotOverridingCopy.kt", this::doTest);
            }

            @TestMetadata("dataClassOverridingCopy_lv12.kt")
            public void testDataClassOverridingCopy_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassOverridingCopy_lv12.kt", this::doTest);
            }

            @TestMetadata("dataClassOverridingCopy_lv13.kt")
            public void testDataClassOverridingCopy_lv13() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassOverridingCopy_lv13.kt", this::doTest);
            }

            @TestMetadata("dataClassVarargParam.kt")
            public void testDataClassVarargParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassVarargParam.kt", this::doTest);
            }

            @TestMetadata("dataInheritance.kt")
            public void testDataInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataInheritance.kt", this::doTest);
            }

            @TestMetadata("dataObject.kt")
            public void testDataObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/dataObject.kt", this::doTest);
            }

            @TestMetadata("emptyConstructor.kt")
            public void testEmptyConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/emptyConstructor.kt", this::doTest);
            }

            @TestMetadata("errorTypesInDataClasses.kt")
            public void testErrorTypesInDataClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/errorTypesInDataClasses.kt", this::doTest);
            }

            @TestMetadata("extensionComponentsOnNullable.kt")
            public void testExtensionComponentsOnNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/extensionComponentsOnNullable.kt", this::doTest);
            }

            @TestMetadata("finalMembersInBaseClass.kt")
            public void testFinalMembersInBaseClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/finalMembersInBaseClass.kt", this::doTest);
            }

            @TestMetadata("implementMethodsFromInterface.kt")
            public void testImplementMethodsFromInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/implementMethodsFromInterface.kt", this::doTest);
            }

            @TestMetadata("implementTraitWhichHasComponent1.kt")
            public void testImplementTraitWhichHasComponent1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasComponent1.kt", this::doTest);
            }

            @TestMetadata("implementTraitWhichHasFinalComponent1.kt")
            public void testImplementTraitWhichHasFinalComponent1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasFinalComponent1.kt", this::doTest);
            }

            @TestMetadata("innerDataClass.kt")
            public void testInnerDataClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/innerDataClass.kt", this::doTest);
            }

            @TestMetadata("innerOuterDataClass.kt")
            public void testInnerOuterDataClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/innerOuterDataClass.kt", this::doTest);
            }

            @TestMetadata("multiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/multiDeclaration.kt", this::doTest);
            }

            @TestMetadata("multiDeclarationFor.kt")
            public void testMultiDeclarationFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/multiDeclarationFor.kt", this::doTest);
            }

            @TestMetadata("noConstructor.kt")
            public void testNoConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/noConstructor.kt", this::doTest);
            }

            @TestMetadata("notADataClass.kt")
            public void testNotADataClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/notADataClass.kt", this::doTest);
            }

            @TestMetadata("oneValParam.kt")
            public void testOneValParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/oneValParam.kt", this::doTest);
            }

            @TestMetadata("repeatedProperties.kt")
            public void testRepeatedProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/repeatedProperties.kt", this::doTest);
            }

            @TestMetadata("sealedDataClass.kt")
            public void testSealedDataClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/sealedDataClass.kt", this::doTest);
            }

            @TestMetadata("strange.kt")
            public void testStrange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/strange.kt", this::doTest);
            }

            @TestMetadata("twoValParams.kt")
            public void testTwoValParams() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/twoValParams.kt", this::doTest);
            }

            @TestMetadata("twoVarParams.kt")
            public void testTwoVarParams() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataClasses/twoVarParams.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/dataFlow")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DataFlow extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDataFlow() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("CalleeExpression.kt")
            public void testCalleeExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/CalleeExpression.kt", this::doTest);
            }

            @TestMetadata("EmptyIf.kt")
            public void testEmptyIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/EmptyIf.kt", this::doTest);
            }

            @TestMetadata("IsExpression.kt")
            public void testIsExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/IsExpression.kt", this::doTest);
            }

            @TestMetadata("WhenSubject.kt")
            public void testWhenSubject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/WhenSubject.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Assignment extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInAssignment() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow/assignment"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("assignToNewVal.kt")
                public void testAssignToNewVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/assignToNewVal.kt", this::doTest);
                }

                @TestMetadata("kt6118.kt")
                public void testKt6118() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/kt6118.kt", this::doTest);
                }

                @TestMetadata("uninitializedValIsCheck.kt")
                public void testUninitializedValIsCheck() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/uninitializedValIsCheck.kt", this::doTest);
                }

                @TestMetadata("uninitializedValNullability.kt")
                public void testUninitializedValNullability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/uninitializedValNullability.kt", this::doTest);
                }

                @TestMetadata("when.kt")
                public void testWhen() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/when.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/local")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Local extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInLocal() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow/local"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("kt2835.kt")
                public void testKt2835() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/kt2835.kt", this::doTest);
                }

                @TestMetadata("LocalClassBase.kt")
                public void testLocalClassBase() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassBase.kt", this::doTest);
                }

                @TestMetadata("LocalClassDefaultParameters.kt")
                public void testLocalClassDefaultParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDefaultParameters.kt", this::doTest);
                }

                @TestMetadata("LocalClassDelegatedProperties.kt")
                public void testLocalClassDelegatedProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegatedProperties.kt", this::doTest);
                }

                @TestMetadata("LocalClassDelegation.kt")
                public void testLocalClassDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegation.kt", this::doTest);
                }

                @TestMetadata("LocalClassFunctions.kt")
                public void testLocalClassFunctions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassFunctions.kt", this::doTest);
                }

                @TestMetadata("LocalClassInMemberOfLocalClass.kt")
                public void testLocalClassInMemberOfLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInMemberOfLocalClass.kt", this::doTest);
                }

                @TestMetadata("LocalClassInitializer.kt")
                public void testLocalClassInitializer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInitializer.kt", this::doTest);
                }

                @TestMetadata("LocalClassProperty.kt")
                public void testLocalClassProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassProperty.kt", this::doTest);
                }

                @TestMetadata("LocalObject.kt")
                public void testLocalObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalObject.kt", this::doTest);
                }

                @TestMetadata("LocalObjectDelegation.kt")
                public void testLocalObjectDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalObjectDelegation.kt", this::doTest);
                }

                @TestMetadata("NestedLocalClass.kt")
                public void testNestedLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlow/local/NestedLocalClass.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DataFlowInfoTraversal extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDataFlowInfoTraversal() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlowInfoTraversal"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AndOr.kt")
            public void testAndOr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AndOr.kt", this::doTest);
            }

            @TestMetadata("ArrayAccess.kt")
            public void testArrayAccess() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayAccess.kt", this::doTest);
            }

            @TestMetadata("ArrayExpression.kt")
            public void testArrayExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayExpression.kt", this::doTest);
            }

            @TestMetadata("ArrayGetSetConvention.kt")
            public void testArrayGetSetConvention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayGetSetConvention.kt", this::doTest);
            }

            @TestMetadata("ArrayIndices.kt")
            public void testArrayIndices() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayIndices.kt", this::doTest);
            }

            @TestMetadata("Assignment.kt")
            public void testAssignment() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Assignment.kt", this::doTest);
            }

            @TestMetadata("AssignmentInInitializer.kt")
            public void testAssignmentInInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentInInitializer.kt", this::doTest);
            }

            @TestMetadata("AssignmentOperation.kt")
            public void testAssignmentOperation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentOperation.kt", this::doTest);
            }

            @TestMetadata("AssignmentToArrayElement.kt")
            public void testAssignmentToArrayElement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentToArrayElement.kt", this::doTest);
            }

            @TestMetadata("BinaryExpression.kt")
            public void testBinaryExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpression.kt", this::doTest);
            }

            @TestMetadata("BinaryExpressionBooleanOperations.kt")
            public void testBinaryExpressionBooleanOperations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionBooleanOperations.kt", this::doTest);
            }

            @TestMetadata("BinaryExpressionCompareToConvention.kt")
            public void testBinaryExpressionCompareToConvention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionCompareToConvention.kt", this::doTest);
            }

            @TestMetadata("BinaryExpressionContainsConvention.kt")
            public void testBinaryExpressionContainsConvention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionContainsConvention.kt", this::doTest);
            }

            @TestMetadata("BinaryExpressionElvis.kt")
            public void testBinaryExpressionElvis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionElvis.kt", this::doTest);
            }

            @TestMetadata("BinaryExpressionEqualsConvention.kt")
            public void testBinaryExpressionEqualsConvention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionEqualsConvention.kt", this::doTest);
            }

            @TestMetadata("BinaryExpressionIdentifier.kt")
            public void testBinaryExpressionIdentifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionIdentifier.kt", this::doTest);
            }

            @TestMetadata("BinaryExpressionPlusConvention.kt")
            public void testBinaryExpressionPlusConvention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionPlusConvention.kt", this::doTest);
            }

            @TestMetadata("Condition.kt")
            public void testCondition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Condition.kt", this::doTest);
            }

            @TestMetadata("ContinueOuterLoop.kt")
            public void testContinueOuterLoop() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ContinueOuterLoop.kt", this::doTest);
            }

            @TestMetadata("DeepIf.kt")
            public void testDeepIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DeepIf.kt", this::doTest);
            }

            @TestMetadata("DoWhile.kt")
            public void testDoWhile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhile.kt", this::doTest);
            }

            @TestMetadata("DoWhileCondition.kt")
            public void testDoWhileCondition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhileCondition.kt", this::doTest);
            }

            @TestMetadata("Elvis.kt")
            public void testElvis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Elvis.kt", this::doTest);
            }

            @TestMetadata("ExclExcl.kt")
            public void testExclExcl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ExclExcl.kt", this::doTest);
            }

            @TestMetadata("For.kt")
            public void testFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/For.kt", this::doTest);
            }

            @TestMetadata("ForLoopRange.kt")
            public void testForLoopRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ForLoopRange.kt", this::doTest);
            }

            @TestMetadata("FunctionLiteral.kt")
            public void testFunctionLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/FunctionLiteral.kt", this::doTest);
            }

            @TestMetadata("IfStatement.kt")
            public void testIfStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfStatement.kt", this::doTest);
            }

            @TestMetadata("IfThenElse.kt")
            public void testIfThenElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElse.kt", this::doTest);
            }

            @TestMetadata("IfThenElseBothInvalid.kt")
            public void testIfThenElseBothInvalid() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElseBothInvalid.kt", this::doTest);
            }

            @TestMetadata("IsExpression.kt")
            public void testIsExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IsExpression.kt", this::doTest);
            }

            @TestMetadata("kt4332WhenBranches.kt")
            public void testKt4332WhenBranches() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt4332WhenBranches.kt", this::doTest);
            }

            @TestMetadata("kt5155WhenBranches.kt")
            public void testKt5155WhenBranches() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt5155WhenBranches.kt", this::doTest);
            }

            @TestMetadata("kt5182WhenBranches.kt")
            public void testKt5182WhenBranches() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt5182WhenBranches.kt", this::doTest);
            }

            @TestMetadata("ManyIfs.kt")
            public void testManyIfs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ManyIfs.kt", this::doTest);
            }

            @TestMetadata("MultiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/MultiDeclaration.kt", this::doTest);
            }

            @TestMetadata("ObjectExpression.kt")
            public void testObjectExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ObjectExpression.kt", this::doTest);
            }

            @TestMetadata("QualifiedExpression.kt")
            public void testQualifiedExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/QualifiedExpression.kt", this::doTest);
            }

            @TestMetadata("Return.kt")
            public void testReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Return.kt", this::doTest);
            }

            @TestMetadata("StringTemplate.kt")
            public void testStringTemplate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/StringTemplate.kt", this::doTest);
            }

            @TestMetadata("ThisSuper.kt")
            public void testThisSuper() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ThisSuper.kt", this::doTest);
            }

            @TestMetadata("Throw.kt")
            public void testThrow() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Throw.kt", this::doTest);
            }

            @TestMetadata("TryCatch.kt")
            public void testTryCatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryCatch.kt", this::doTest);
            }

            @TestMetadata("TryFinally.kt")
            public void testTryFinally() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryFinally.kt", this::doTest);
            }

            @TestMetadata("UnaryExpression.kt")
            public void testUnaryExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/UnaryExpression.kt", this::doTest);
            }

            @TestMetadata("When.kt")
            public void testWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/When.kt", this::doTest);
            }

            @TestMetadata("WhenEntryAs.kt")
            public void testWhenEntryAs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntryAs.kt", this::doTest);
            }

            @TestMetadata("WhenEntryIs.kt")
            public void testWhenEntryIs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntryIs.kt", this::doTest);
            }

            @TestMetadata("WhenIn.kt")
            public void testWhenIn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenIn.kt", this::doTest);
            }

            @TestMetadata("WhenSubject.kt")
            public void testWhenSubject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenSubject.kt", this::doTest);
            }

            @TestMetadata("While.kt")
            public void testWhile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/While.kt", this::doTest);
            }

            @TestMetadata("WhileCondition.kt")
            public void testWhileCondition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhileCondition.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Smartcasts extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSmartcasts() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("SmartcastAmbiguitites.kt")
                public void testSmartcastAmbiguitites() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts/SmartcastAmbiguitites.kt", this::doTest);
                }

                @TestMetadata("SmartcastsForStableIdentifiers.kt")
                public void testSmartcastsForStableIdentifiers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts/SmartcastsForStableIdentifiers.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DeclarationChecks extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDeclarationChecks() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ambiguousObjectExpressionType.kt")
            public void testAmbiguousObjectExpressionType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/ambiguousObjectExpressionType.kt", this::doTest);
            }

            @TestMetadata("anonymousFunAsLastExpressionInBlock.kt")
            public void testAnonymousFunAsLastExpressionInBlock() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/anonymousFunAsLastExpressionInBlock.kt", this::doTest);
            }

            @TestMetadata("anonymousFunUnusedLastExpressionInBlock.kt")
            public void testAnonymousFunUnusedLastExpressionInBlock() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/anonymousFunUnusedLastExpressionInBlock.kt", this::doTest);
            }

            @TestMetadata("ComponentFunctionReturnTypeMismatch.kt")
            public void testComponentFunctionReturnTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/ComponentFunctionReturnTypeMismatch.kt", this::doTest);
            }

            @TestMetadata("ConflictingAndRedundantProjections.kt")
            public void testConflictingAndRedundantProjections() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/ConflictingAndRedundantProjections.kt", this::doTest);
            }

            @TestMetadata("DataFlowInMultiDeclInFor.kt")
            public void testDataFlowInMultiDeclInFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInMultiDeclInFor.kt", this::doTest);
            }

            @TestMetadata("DataFlowInfoInMultiDecl.kt")
            public void testDataFlowInfoInMultiDecl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInfoInMultiDecl.kt", this::doTest);
            }

            @TestMetadata("FunctionWithMissingNames.kt")
            public void testFunctionWithMissingNames() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/FunctionWithMissingNames.kt", this::doTest);
            }

            @TestMetadata("illegalModifiersOnClass.kt")
            public void testIllegalModifiersOnClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/illegalModifiersOnClass.kt", this::doTest);
            }

            @TestMetadata("kClassInSignature.kt")
            public void testKClassInSignature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kClassInSignature.kt", this::doTest);
            }

            @TestMetadata("kt1141.kt")
            public void testKt1141() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kt1141.kt", this::doTest);
            }

            @TestMetadata("kt1193.kt")
            public void testKt1193() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kt1193.kt", this::doTest);
            }

            @TestMetadata("kt2096.kt")
            public void testKt2096() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2096.kt", this::doTest);
            }

            @TestMetadata("kt2142.kt")
            public void testKt2142() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2142.kt", this::doTest);
            }

            @TestMetadata("kt2397.kt")
            public void testKt2397() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2397.kt", this::doTest);
            }

            @TestMetadata("kt2631_MultipleDeclaration.kt")
            public void testKt2631_MultipleDeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2631_MultipleDeclaration.kt", this::doTest);
            }

            @TestMetadata("kt2643MultiDeclInControlFlow.kt")
            public void testKt2643MultiDeclInControlFlow() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2643MultiDeclInControlFlow.kt", this::doTest);
            }

            @TestMetadata("kt559.kt")
            public void testKt559() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/kt559.kt", this::doTest);
            }

            @TestMetadata("localDeclarationModifiers.kt")
            public void testLocalDeclarationModifiers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/localDeclarationModifiers.kt", this::doTest);
            }

            @TestMetadata("localFunctionNoInheritVisibility.kt")
            public void testLocalFunctionNoInheritVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/localFunctionNoInheritVisibility.kt", this::doTest);
            }

            @TestMetadata("LocalVariableWithNoTypeInformation.kt")
            public void testLocalVariableWithNoTypeInformation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/LocalVariableWithNoTypeInformation.kt", this::doTest);
            }

            @TestMetadata("mulitpleVarargParameters.kt")
            public void testMulitpleVarargParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/mulitpleVarargParameters.kt", this::doTest);
            }

            @TestMetadata("MultiDeclarationErrors.kt")
            public void testMultiDeclarationErrors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/MultiDeclarationErrors.kt", this::doTest);
            }

            @TestMetadata("namedFunAsLastExpressionInBlock.kt")
            public void testNamedFunAsLastExpressionInBlock() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/namedFunAsLastExpressionInBlock.kt", this::doTest);
            }

            @TestMetadata("packageDeclarationModifiers.kt")
            public void testPackageDeclarationModifiers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/packageDeclarationModifiers.kt", this::doTest);
            }

            @TestMetadata("propertyInPackageHasNoInheritVisibility.kt")
            public void testPropertyInPackageHasNoInheritVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/propertyInPackageHasNoInheritVisibility.kt", this::doTest);
            }

            @TestMetadata("RedeclarationsInMultiDecl.kt")
            public void testRedeclarationsInMultiDecl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/RedeclarationsInMultiDecl.kt", this::doTest);
            }

            @TestMetadata("ScalaLikeNamedFun.kt")
            public void testScalaLikeNamedFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/ScalaLikeNamedFun.kt", this::doTest);
            }

            @TestMetadata("sealedOnMembers.kt")
            public void testSealedOnMembers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/sealedOnMembers.kt", this::doTest);
            }

            @TestMetadata("unambiguousObjectExpressionType.kt")
            public void testUnambiguousObjectExpressionType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/unambiguousObjectExpressionType.kt", this::doTest);
            }

            @TestMetadata("valVarFunctionParameter.kt")
            public void testValVarFunctionParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/valVarFunctionParameter.kt", this::doTest);
            }

            @TestMetadata("VarianceOnFunctionAndPropertyTypeParameters.kt")
            public void testVarianceOnFunctionAndPropertyTypeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/VarianceOnFunctionAndPropertyTypeParameters.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DestructuringDeclarations extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDestructuringDeclarations() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("destructuringDeclarationAssignedUnresolved.kt")
                public void testDestructuringDeclarationAssignedUnresolved() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/destructuringDeclarationAssignedUnresolved.kt", this::doTest);
                }

                @TestMetadata("destructuringDeclarationMissingInitializer.kt")
                public void testDestructuringDeclarationMissingInitializer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/destructuringDeclarationMissingInitializer.kt", this::doTest);
                }

                @TestMetadata("DoubleDeclForLoop.kt")
                public void testDoubleDeclForLoop() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/DoubleDeclForLoop.kt", this::doTest);
                }

                @TestMetadata("FolLoopTypeComponentTypeMismatch.kt")
                public void testFolLoopTypeComponentTypeMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/FolLoopTypeComponentTypeMismatch.kt", this::doTest);
                }

                @TestMetadata("ForLoopComponentFunctionAmbiguity.kt")
                public void testForLoopComponentFunctionAmbiguity() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopComponentFunctionAmbiguity.kt", this::doTest);
                }

                @TestMetadata("ForLoopComponentFunctionMissing.kt")
                public void testForLoopComponentFunctionMissing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopComponentFunctionMissing.kt", this::doTest);
                }

                @TestMetadata("ForLoopMissingLoopParameter.kt")
                public void testForLoopMissingLoopParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopMissingLoopParameter.kt", this::doTest);
                }

                @TestMetadata("ForLoopWithExtensions.kt")
                public void testForLoopWithExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopWithExtensions.kt", this::doTest);
                }

                @TestMetadata("ForWithExplicitTypes.kt")
                public void testForWithExplicitTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForWithExplicitTypes.kt", this::doTest);
                }

                @TestMetadata("kt2829.kt")
                public void testKt2829() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/kt2829.kt", this::doTest);
                }

                @TestMetadata("lastDestructuringDeclarationInBlock.kt")
                public void testLastDestructuringDeclarationInBlock() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/lastDestructuringDeclarationInBlock.kt", this::doTest);
                }

                @TestMetadata("RedeclarationInForLoop.kt")
                public void testRedeclarationInForLoop() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/RedeclarationInForLoop.kt", this::doTest);
                }

                @TestMetadata("SingleDeclForLoop.kt")
                public void testSingleDeclForLoop() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/SingleDeclForLoop.kt", this::doTest);
                }

                @TestMetadata("underscore.kt")
                public void testUnderscore() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/underscore.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FiniteBoundRestriction extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInFiniteBoundRestriction() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("CasesWithOneTypeParameter.kt")
                public void testCasesWithOneTypeParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/CasesWithOneTypeParameter.kt", this::doTest);
                }

                @TestMetadata("CasesWithTwoTypeParameters.kt")
                public void testCasesWithTwoTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/CasesWithTwoTypeParameters.kt", this::doTest);
                }

                @TestMetadata("JavaSuperType.kt")
                public void testJavaSuperType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/JavaSuperType.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NonExpansiveInheritanceRestriction extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNonExpansiveInheritanceRestriction() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("JavaWithKotlin.kt")
                public void testJavaWithKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/JavaWithKotlin.kt", this::doTest);
                }

                @TestMetadata("JavaWithKotlin2.kt")
                public void testJavaWithKotlin2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/JavaWithKotlin2.kt", this::doTest);
                }

                @TestMetadata("PureKotlin.kt")
                public void testPureKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/PureKotlin.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/defaultArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DefaultArguments extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDefaultArguments() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt5232.kt")
            public void testKt5232() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/defaultArguments/kt5232.kt", this::doTest);
            }

            @TestMetadata("superCall.kt")
            public void testSuperCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/defaultArguments/superCall.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DelegatedProperty extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("absentErrorAboutInitializer.kt")
            public void testAbsentErrorAboutInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutInitializer.kt", this::doTest);
            }

            @TestMetadata("absentErrorAboutType.kt")
            public void testAbsentErrorAboutType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutType.kt", this::doTest);
            }

            @TestMetadata("abstractDelegatedProperty.kt")
            public void testAbstractDelegatedProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/abstractDelegatedProperty.kt", this::doTest);
            }

            public void testAllFilesPresentInDelegatedProperty() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("backingField.kt")
            public void testBackingField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/backingField.kt", this::doTest);
            }

            @TestMetadata("defaultGetter.kt")
            public void testDefaultGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/defaultGetter.kt", this::doTest);
            }

            @TestMetadata("defaultSetter.kt")
            public void testDefaultSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/defaultSetter.kt", this::doTest);
            }

            @TestMetadata("delegatedPropertyOverridedInTrait.kt")
            public void testDelegatedPropertyOverridedInTrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTrait.kt", this::doTest);
            }

            @TestMetadata("delegatedPropertyOverridedInTraitTypeMismatch.kt")
            public void testDelegatedPropertyOverridedInTraitTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTraitTypeMismatch.kt", this::doTest);
            }

            @TestMetadata("disallowImplInTypeParameter.kt")
            public void testDisallowImplInTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/disallowImplInTypeParameter.kt", this::doTest);
            }

            @TestMetadata("genericGetter.kt")
            public void testGenericGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/genericGetter.kt", this::doTest);
            }

            @TestMetadata("getterWithSubtype.kt")
            public void testGetterWithSubtype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/getterWithSubtype.kt", this::doTest);
            }

            @TestMetadata("inTrait.kt")
            public void testInTrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inTrait.kt", this::doTest);
            }

            @TestMetadata("incompleteTypeInference.kt")
            public void testIncompleteTypeInference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/incompleteTypeInference.kt", this::doTest);
            }

            @TestMetadata("kt4640.kt")
            public void testKt4640() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/kt4640.kt", this::doTest);
            }

            @TestMetadata("localVariable.kt")
            public void testLocalVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/localVariable.kt", this::doTest);
            }

            @TestMetadata("localWithSmartCast.kt")
            public void testLocalWithSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/localWithSmartCast.kt", this::doTest);
            }

            @TestMetadata("missedGetter.kt")
            public void testMissedGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/missedGetter.kt", this::doTest);
            }

            @TestMetadata("missedSetter.kt")
            public void testMissedSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/missedSetter.kt", this::doTest);
            }

            @TestMetadata("nonDefaultAccessors.kt")
            public void testNonDefaultAccessors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/nonDefaultAccessors.kt", this::doTest);
            }

            @TestMetadata("propertyDefferedType.kt")
            public void testPropertyDefferedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/propertyDefferedType.kt", this::doTest);
            }

            @TestMetadata("recursiveType.kt")
            public void testRecursiveType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/recursiveType.kt", this::doTest);
            }

            @TestMetadata("redundantGetter.kt")
            public void testRedundantGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/redundantGetter.kt", this::doTest);
            }

            @TestMetadata("redundantSetter.kt")
            public void testRedundantSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/redundantSetter.kt", this::doTest);
            }

            @TestMetadata("setterThisTypeMismatch.kt")
            public void testSetterThisTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/setterThisTypeMismatch.kt", this::doTest);
            }

            @TestMetadata("setterWithSupertype.kt")
            public void testSetterWithSupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/setterWithSupertype.kt", this::doTest);
            }

            @TestMetadata("severalReceivers.kt")
            public void testSeveralReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/severalReceivers.kt", this::doTest);
            }

            @TestMetadata("thisInDelegate.kt")
            public void testThisInDelegate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisInDelegate.kt", this::doTest);
            }

            @TestMetadata("thisOfAnyType.kt")
            public void testThisOfAnyType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfAnyType.kt", this::doTest);
            }

            @TestMetadata("thisOfNothingNullableType.kt")
            public void testThisOfNothingNullableType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingNullableType.kt", this::doTest);
            }

            @TestMetadata("thisOfNothingType.kt")
            public void testThisOfNothingType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingType.kt", this::doTest);
            }

            @TestMetadata("twoGetMethods.kt")
            public void testTwoGetMethods() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/twoGetMethods.kt", this::doTest);
            }

            @TestMetadata("typeMismatchForGetReturnType.kt")
            public void testTypeMismatchForGetReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetReturnType.kt", this::doTest);
            }

            @TestMetadata("typeMismatchForGetWithGeneric.kt")
            public void testTypeMismatchForGetWithGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetWithGeneric.kt", this::doTest);
            }

            @TestMetadata("typeMismatchForSetParameter.kt")
            public void testTypeMismatchForSetParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForSetParameter.kt", this::doTest);
            }

            @TestMetadata("typeMismatchForThisGetParameter.kt")
            public void testTypeMismatchForThisGetParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForThisGetParameter.kt", this::doTest);
            }

            @TestMetadata("wrongCountOfParametersInGet.kt")
            public void testWrongCountOfParametersInGet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInGet.kt", this::doTest);
            }

            @TestMetadata("wrongCountOfParametersInSet.kt")
            public void testWrongCountOfParametersInSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInSet.kt", this::doTest);
            }

            @TestMetadata("wrongSetterReturnType.kt")
            public void testWrongSetterReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongSetterReturnType.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inference extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInference() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegatedProperty/inference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("delegateExpressionAsLambda.kt")
                public void testDelegateExpressionAsLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/delegateExpressionAsLambda.kt", this::doTest);
                }

                @TestMetadata("differentDelegatedExpressions.kt")
                public void testDifferentDelegatedExpressions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/differentDelegatedExpressions.kt", this::doTest);
                }

                @TestMetadata("extensionGet.kt")
                public void testExtensionGet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionGet.kt", this::doTest);
                }

                @TestMetadata("extensionProperty.kt")
                public void testExtensionProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionProperty.kt", this::doTest);
                }

                @TestMetadata("genericMethodInGenericClass.kt")
                public void testGenericMethodInGenericClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/genericMethodInGenericClass.kt", this::doTest);
                }

                @TestMetadata("genericMethods.kt")
                public void testGenericMethods() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/genericMethods.kt", this::doTest);
                }

                @TestMetadata("labeledDelegatedExpression.kt")
                public void testLabeledDelegatedExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/labeledDelegatedExpression.kt", this::doTest);
                }

                @TestMetadata("manyIncompleteCandidates.kt")
                public void testManyIncompleteCandidates() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/manyIncompleteCandidates.kt", this::doTest);
                }

                @TestMetadata("noErrorsForImplicitConstraints.kt")
                public void testNoErrorsForImplicitConstraints() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/noErrorsForImplicitConstraints.kt", this::doTest);
                }

                @TestMetadata("noExpectedTypeForSupertypeConstraint.kt")
                public void testNoExpectedTypeForSupertypeConstraint() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/noExpectedTypeForSupertypeConstraint.kt", this::doTest);
                }

                @TestMetadata("resultTypeOfLambdaForConventionMethods.kt")
                public void testResultTypeOfLambdaForConventionMethods() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/resultTypeOfLambdaForConventionMethods.kt", this::doTest);
                }

                @TestMetadata("typeOfLazyDelegatedPropertyWithObject.kt")
                public void testTypeOfLazyDelegatedPropertyWithObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/typeOfLazyDelegatedPropertyWithObject.kt", this::doTest);
                }

                @TestMetadata("useCompleterWithoutExpectedType.kt")
                public void testUseCompleterWithoutExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useCompleterWithoutExpectedType.kt", this::doTest);
                }

                @TestMetadata("useExpectedType.kt")
                public void testUseExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedType.kt", this::doTest);
                }

                @TestMetadata("useExpectedTypeForVal.kt")
                public void testUseExpectedTypeForVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedTypeForVal.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ProvideDelegate extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInProvideDelegate() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("commonCaseForInference.kt")
                public void testCommonCaseForInference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/commonCaseForInference.kt", this::doTest);
                }

                @TestMetadata("genericProvideDelegate.kt")
                public void testGenericProvideDelegate() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/genericProvideDelegate.kt", this::doTest);
                }

                @TestMetadata("hostAndReceiver1.kt")
                public void testHostAndReceiver1() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver1.kt", this::doTest);
                }

                @TestMetadata("hostAndReceiver2.kt")
                public void testHostAndReceiver2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver2.kt", this::doTest);
                }

                @TestMetadata("hostAndReceiver3.kt")
                public void testHostAndReceiver3() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver3.kt", this::doTest);
                }

                @TestMetadata("inferenceFromReceiver1.kt")
                public void testInferenceFromReceiver1() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/inferenceFromReceiver1.kt", this::doTest);
                }

                @TestMetadata("inferenceFromReceiver2.kt")
                public void testInferenceFromReceiver2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/inferenceFromReceiver2.kt", this::doTest);
                }

                @TestMetadata("localDelegatedProperty.kt")
                public void testLocalDelegatedProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/localDelegatedProperty.kt", this::doTest);
                }

                @TestMetadata("noOperatorModifierOnProvideDelegate.kt")
                public void testNoOperatorModifierOnProvideDelegate() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/noOperatorModifierOnProvideDelegate.kt", this::doTest);
                }

                @TestMetadata("provideDelegateOperatorDeclaration.kt")
                public void testProvideDelegateOperatorDeclaration() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateOperatorDeclaration.kt", this::doTest);
                }

                @TestMetadata("setValue.kt")
                public void testSetValue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/setValue.kt", this::doTest);
                }

                @TestMetadata("simpleProvideDelegate.kt")
                public void testSimpleProvideDelegate() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/simpleProvideDelegate.kt", this::doTest);
                }

                @TestMetadata("unsupportedOperatorProvideDelegate.kt")
                public void testUnsupportedOperatorProvideDelegate() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/unsupportedOperatorProvideDelegate.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/delegation")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Delegation extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDelegation() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("DelegationAndOverriding.kt")
            public void testDelegationAndOverriding() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/DelegationAndOverriding.kt", this::doTest);
            }

            @TestMetadata("DelegationExpectedType.kt")
            public void testDelegationExpectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/DelegationExpectedType.kt", this::doTest);
            }

            @TestMetadata("DelegationNotTotrait.kt")
            public void testDelegationNotTotrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/DelegationNotTotrait.kt", this::doTest);
            }

            @TestMetadata("DelegationToJavaIface.kt")
            public void testDelegationToJavaIface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/DelegationToJavaIface.kt", this::doTest);
            }

            @TestMetadata("Delegation_ClashingFunctions.kt")
            public void testDelegation_ClashingFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/Delegation_ClashingFunctions.kt", this::doTest);
            }

            @TestMetadata("Delegation_Hierarchy.kt")
            public void testDelegation_Hierarchy() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/Delegation_Hierarchy.kt", this::doTest);
            }

            @TestMetadata("Delegation_MultipleDelegates.kt")
            public void testDelegation_MultipleDelegates() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/Delegation_MultipleDelegates.kt", this::doTest);
            }

            @TestMetadata("Delegation_ScopeInitializationOrder.kt")
            public void testDelegation_ScopeInitializationOrder() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/Delegation_ScopeInitializationOrder.kt", this::doTest);
            }

            @TestMetadata("kt8154.kt")
            public void testKt8154() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/kt8154.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/delegation/clashes")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Clashes extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInClashes() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation/clashes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("finalMemberOverridden.kt")
                public void testFinalMemberOverridden() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/clashes/finalMemberOverridden.kt", this::doTest);
                }

                @TestMetadata("propertyTypeMismatch.kt")
                public void testPropertyTypeMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/clashes/propertyTypeMismatch.kt", this::doTest);
                }

                @TestMetadata("returnTypeMismatch.kt")
                public void testReturnTypeMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/clashes/returnTypeMismatch.kt", this::doTest);
                }

                @TestMetadata("varOverriddenByVal.kt")
                public void testVarOverriddenByVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/clashes/varOverriddenByVal.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/delegation/covariantOverrides")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CovariantOverrides extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCovariantOverrides() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation/covariantOverrides"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("fromClass.kt")
                public void testFromClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/covariantOverrides/fromClass.kt", this::doTest);
                }

                @TestMetadata("irrelevant.kt")
                public void testIrrelevant() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/covariantOverrides/irrelevant.kt", this::doTest);
                }

                @TestMetadata("kt13952.kt")
                public void testKt13952() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/covariantOverrides/kt13952.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/covariantOverrides/simple.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class MemberHidesSupertypeOverride extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("abstractOverride.kt")
                public void testAbstractOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/abstractOverride.kt", this::doTest);
                }

                public void testAllFilesPresentInMemberHidesSupertypeOverride() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("delegationToSubType.kt")
                public void testDelegationToSubType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubType.kt", this::doTest);
                }

                @TestMetadata("delegationToSubTypeProperty.kt")
                public void testDelegationToSubTypeProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeProperty.kt", this::doTest);
                }

                @TestMetadata("delegationToSubTypeWithOverride.kt")
                public void testDelegationToSubTypeWithOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeWithOverride.kt", this::doTest);
                }

                @TestMetadata("delegationToSubTypeWithOverrideProperty.kt")
                public void testDelegationToSubTypeWithOverrideProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeWithOverrideProperty.kt", this::doTest);
                }

                @TestMetadata("diamond.kt")
                public void testDiamond() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/diamond.kt", this::doTest);
                }

                @TestMetadata("explicitOverride.kt")
                public void testExplicitOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/explicitOverride.kt", this::doTest);
                }

                @TestMetadata("fakeOverrideInTheMiddle.kt")
                public void testFakeOverrideInTheMiddle() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/fakeOverrideInTheMiddle.kt", this::doTest);
                }

                @TestMetadata("generic.kt")
                public void testGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/generic.kt", this::doTest);
                }

                @TestMetadata("sameDelegationInHierarchy.kt")
                public void testSameDelegationInHierarchy() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/sameDelegationInHierarchy.kt", this::doTest);
                }

                @TestMetadata("sameDelegationInHierarchy2.kt")
                public void testSameDelegationInHierarchy2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/sameDelegationInHierarchy2.kt", this::doTest);
                }

                @TestMetadata("severalDelegates.kt")
                public void testSeveralDelegates() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/severalDelegates.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simple.kt", this::doTest);
                }

                @TestMetadata("simpleNoOverride.kt")
                public void testSimpleNoOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simpleNoOverride.kt", this::doTest);
                }

                @TestMetadata("simpleProp.kt")
                public void testSimpleProp() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simpleProp.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/deparenthesize")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Deparenthesize extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDeparenthesize() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/deparenthesize"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("annotatedSafeCall.kt")
            public void testAnnotatedSafeCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deparenthesize/annotatedSafeCall.kt", this::doTest);
            }

            @TestMetadata("checkDeparenthesizedType.kt")
            public void testCheckDeparenthesizedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deparenthesize/checkDeparenthesizedType.kt", this::doTest);
            }

            @TestMetadata("labeledSafeCall.kt")
            public void testLabeledSafeCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deparenthesize/labeledSafeCall.kt", this::doTest);
            }

            @TestMetadata("multiParenthesizedSafeCall.kt")
            public void testMultiParenthesizedSafeCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deparenthesize/multiParenthesizedSafeCall.kt", this::doTest);
            }

            @TestMetadata("parenthesizedSafeCall.kt")
            public void testParenthesizedSafeCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deparenthesize/parenthesizedSafeCall.kt", this::doTest);
            }

            @TestMetadata("ParenthesizedVariable.kt")
            public void testParenthesizedVariable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deparenthesize/ParenthesizedVariable.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/deprecated")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Deprecated extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDeprecated() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/deprecated"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("annotationUsage.kt")
            public void testAnnotationUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/annotationUsage.kt", this::doTest);
            }

            @TestMetadata("classWithCompanionObject.kt")
            public void testClassWithCompanionObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/classWithCompanionObject.kt", this::doTest);
            }

            @TestMetadata("companionObjectUsage.kt")
            public void testCompanionObjectUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/companionObjectUsage.kt", this::doTest);
            }

            @TestMetadata("componentUsage.kt")
            public void testComponentUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/componentUsage.kt", this::doTest);
            }

            @TestMetadata("deprecatedConstructor.kt")
            public void testDeprecatedConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedConstructor.kt", this::doTest);
            }

            @TestMetadata("deprecatedError.kt")
            public void testDeprecatedError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedError.kt", this::doTest);
            }

            @TestMetadata("deprecatedErrorBuilder.kt")
            public void testDeprecatedErrorBuilder() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedErrorBuilder.kt", this::doTest);
            }

            @TestMetadata("deprecatedHidden.kt")
            public void testDeprecatedHidden() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedHidden.kt", this::doTest);
            }

            @TestMetadata("deprecatedInheritance.kt")
            public void testDeprecatedInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedInheritance.kt", this::doTest);
            }

            @TestMetadata("deprecatedPropertyInheritance.kt")
            public void testDeprecatedPropertyInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedPropertyInheritance.kt", this::doTest);
            }

            @TestMetadata("functionUsage.kt")
            public void testFunctionUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/functionUsage.kt", this::doTest);
            }

            @TestMetadata("genericConstructorUsage.kt")
            public void testGenericConstructorUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/genericConstructorUsage.kt", this::doTest);
            }

            @TestMetadata("hiddenPropertyAccessors.kt")
            public void testHiddenPropertyAccessors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/hiddenPropertyAccessors.kt", this::doTest);
            }

            @TestMetadata("importJavaSamInterface.kt")
            public void testImportJavaSamInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/importJavaSamInterface.kt", this::doTest);
            }

            @TestMetadata("imports.kt")
            public void testImports() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/imports.kt", this::doTest);
            }

            @TestMetadata("iteratorUsage.kt")
            public void testIteratorUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/iteratorUsage.kt", this::doTest);
            }

            @TestMetadata("javaDeprecated.kt")
            public void testJavaDeprecated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/javaDeprecated.kt", this::doTest);
            }

            @TestMetadata("javaDeprecatedInheritance.kt")
            public void testJavaDeprecatedInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/javaDeprecatedInheritance.kt", this::doTest);
            }

            @TestMetadata("javaDocDeprecated.kt")
            public void testJavaDocDeprecated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/javaDocDeprecated.kt", this::doTest);
            }

            @TestMetadata("nestedTypesUsage.kt")
            public void testNestedTypesUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/nestedTypesUsage.kt", this::doTest);
            }

            @TestMetadata("objectUsage.kt")
            public void testObjectUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/objectUsage.kt", this::doTest);
            }

            @TestMetadata("propertyUsage.kt")
            public void testPropertyUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/propertyUsage.kt", this::doTest);
            }

            @TestMetadata("propertyUseSiteTargetedAnnotations.kt")
            public void testPropertyUseSiteTargetedAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/propertyUseSiteTargetedAnnotations.kt", this::doTest);
            }

            @TestMetadata("propertyWithInvoke.kt")
            public void testPropertyWithInvoke() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/propertyWithInvoke.kt", this::doTest);
            }

            @TestMetadata("thisUsage.kt")
            public void testThisUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/thisUsage.kt", this::doTest);
            }

            @TestMetadata("typeUsage.kt")
            public void testTypeUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/typeUsage.kt", this::doTest);
            }

            @TestMetadata("typealiasCompanionObject.kt")
            public void testTypealiasCompanionObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/typealiasCompanionObject.kt", this::doTest);
            }

            @TestMetadata("typealiasConstructor.kt")
            public void testTypealiasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/typealiasConstructor.kt", this::doTest);
            }

            @TestMetadata("typealiasForDeprecatedClass.kt")
            public void testTypealiasForDeprecatedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/typealiasForDeprecatedClass.kt", this::doTest);
            }

            @TestMetadata("typealiasUsage.kt")
            public void testTypealiasUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/typealiasUsage.kt", this::doTest);
            }

            @TestMetadata("unusedImport.kt")
            public void testUnusedImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/unusedImport.kt", this::doTest);
            }

            @TestMetadata("warningOnConstructorErrorOnClass.kt")
            public void testWarningOnConstructorErrorOnClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/deprecated/warningOnConstructorErrorOnClass.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DuplicateJvmSignature extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDuplicateJvmSignature() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("caseInProperties.kt")
            public void testCaseInProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/caseInProperties.kt", this::doTest);
            }

            @TestMetadata("missingNames.kt")
            public void testMissingNames() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/missingNames.kt", this::doTest);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/vararg.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AccidentalOverrides extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("accidentalOverrideFromGrandparent.kt")
                public void testAccidentalOverrideFromGrandparent() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/accidentalOverrideFromGrandparent.kt", this::doTest);
                }

                public void testAllFilesPresentInAccidentalOverrides() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classFunctionOverriddenByProperty.kt")
                public void testClassFunctionOverriddenByProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/classFunctionOverriddenByProperty.kt", this::doTest);
                }

                @TestMetadata("classFunctionOverriddenByPropertyInConstructor.kt")
                public void testClassFunctionOverriddenByPropertyInConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/classFunctionOverriddenByPropertyInConstructor.kt", this::doTest);
                }

                @TestMetadata("classFunctionOverriddenByPropertyNoGetter.kt")
                public void testClassFunctionOverriddenByPropertyNoGetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/classFunctionOverriddenByPropertyNoGetter.kt", this::doTest);
                }

                @TestMetadata("classPropertyOverriddenByFunction.kt")
                public void testClassPropertyOverriddenByFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/classPropertyOverriddenByFunction.kt", this::doTest);
                }

                @TestMetadata("defaultFunction.kt")
                public void testDefaultFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/defaultFunction.kt", this::doTest);
                }

                @TestMetadata("delegatedFunctionOverriddenByProperty.kt")
                public void testDelegatedFunctionOverriddenByProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/delegatedFunctionOverriddenByProperty.kt", this::doTest);
                }

                @TestMetadata("genericClassFunction.kt")
                public void testGenericClassFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/genericClassFunction.kt", this::doTest);
                }

                @TestMetadata("overridesNothing.kt")
                public void testOverridesNothing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/overridesNothing.kt", this::doTest);
                }

                @TestMetadata("privateClassFunctionOverriddenByProperty.kt")
                public void testPrivateClassFunctionOverriddenByProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/privateClassFunctionOverriddenByProperty.kt", this::doTest);
                }

                @TestMetadata("require.kt")
                public void testRequire() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/require.kt", this::doTest);
                }

                @TestMetadata("traitFunctionOverriddenByProperty.kt")
                public void testTraitFunctionOverriddenByProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/traitFunctionOverriddenByProperty.kt", this::doTest);
                }

                @TestMetadata("traitFunctionOverriddenByPropertyNoImpl.kt")
                public void testTraitFunctionOverriddenByPropertyNoImpl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/traitFunctionOverriddenByPropertyNoImpl.kt", this::doTest);
                }

                @TestMetadata("traitPropertyOverriddenByFunction.kt")
                public void testTraitPropertyOverriddenByFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/traitPropertyOverriddenByFunction.kt", this::doTest);
                }

                @TestMetadata("traitPropertyOverriddenByFunctionNoImpl.kt")
                public void testTraitPropertyOverriddenByFunctionNoImpl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/traitPropertyOverriddenByFunctionNoImpl.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Bridges extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInBridges() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges/class.kt", this::doTest);
                }

                @TestMetadata("fakeOverrideTrait.kt")
                public void testFakeOverrideTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges/fakeOverrideTrait.kt", this::doTest);
                }

                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges/trait.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Erasure extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInErasure() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("clashFromInterfaceAndSuperClass.kt")
                public void testClashFromInterfaceAndSuperClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/clashFromInterfaceAndSuperClass.kt", this::doTest);
                }

                @TestMetadata("collections.kt")
                public void testCollections() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/collections.kt", this::doTest);
                }

                @TestMetadata("delegateToTwoTraits.kt")
                public void testDelegateToTwoTraits() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/delegateToTwoTraits.kt", this::doTest);
                }

                @TestMetadata("delegationAndOwnMethod.kt")
                public void testDelegationAndOwnMethod() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/delegationAndOwnMethod.kt", this::doTest);
                }

                @TestMetadata("delegationToTraitImplAndOwnMethod.kt")
                public void testDelegationToTraitImplAndOwnMethod() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/delegationToTraitImplAndOwnMethod.kt", this::doTest);
                }

                @TestMetadata("extensionProperties.kt")
                public void testExtensionProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/extensionProperties.kt", this::doTest);
                }

                @TestMetadata("genericType.kt")
                public void testGenericType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/genericType.kt", this::doTest);
                }

                @TestMetadata("inheritFromTwoTraits.kt")
                public void testInheritFromTwoTraits() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/inheritFromTwoTraits.kt", this::doTest);
                }

                @TestMetadata("kotlinAndJavaCollections.kt")
                public void testKotlinAndJavaCollections() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/kotlinAndJavaCollections.kt", this::doTest);
                }

                @TestMetadata("nullableType.kt")
                public void testNullableType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/nullableType.kt", this::doTest);
                }

                @TestMetadata("superTraitAndDelegationToTraitImpl.kt")
                public void testSuperTraitAndDelegationToTraitImpl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/superTraitAndDelegationToTraitImpl.kt", this::doTest);
                }

                @TestMetadata("twoTraitsAndOwnFunction.kt")
                public void testTwoTraitsAndOwnFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/twoTraitsAndOwnFunction.kt", this::doTest);
                }

                @TestMetadata("typeMappedToJava.kt")
                public void testTypeMappedToJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeMappedToJava.kt", this::doTest);
                }

                @TestMetadata("typeParameter.kt")
                public void testTypeParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeParameter.kt", this::doTest);
                }

                @TestMetadata("typeParameterWithBound.kt")
                public void testTypeParameterWithBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeParameterWithBound.kt", this::doTest);
                }

                @TestMetadata("typeParameterWithTwoBounds.kt")
                public void testTypeParameterWithTwoBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeParameterWithTwoBounds.kt", this::doTest);
                }

                @TestMetadata("typeParameterWithTwoBoundsInWhere.kt")
                public void testTypeParameterWithTwoBoundsInWhere() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeParameterWithTwoBoundsInWhere.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/finalMembersFromBuiltIns")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FinalMembersFromBuiltIns extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInFinalMembersFromBuiltIns() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/finalMembersFromBuiltIns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("enumMembers.kt")
                public void testEnumMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/finalMembersFromBuiltIns/enumMembers.kt", this::doTest);
                }

                @TestMetadata("waitNotifyGetClass.kt")
                public void testWaitNotifyGetClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/finalMembersFromBuiltIns/waitNotifyGetClass.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FunctionAndProperty extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInFunctionAndProperty() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/class.kt", this::doTest);
                }

                @TestMetadata("classObject.kt")
                public void testClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/classObject.kt", this::doTest);
                }

                @TestMetadata("classPropertyInConstructor.kt")
                public void testClassPropertyInConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/classPropertyInConstructor.kt", this::doTest);
                }

                @TestMetadata("extensionFunctionAndNormalFunction.kt")
                public void testExtensionFunctionAndNormalFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/extensionFunctionAndNormalFunction.kt", this::doTest);
                }

                @TestMetadata("extensionPropertyAndFunction.kt")
                public void testExtensionPropertyAndFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/extensionPropertyAndFunction.kt", this::doTest);
                }

                @TestMetadata("functionAndSetter.kt")
                public void testFunctionAndSetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/functionAndSetter.kt", this::doTest);
                }

                @TestMetadata("functionAndVar.kt")
                public void testFunctionAndVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/functionAndVar.kt", this::doTest);
                }

                @TestMetadata("localClass.kt")
                public void testLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/localClass.kt", this::doTest);
                }

                @TestMetadata("localClassInClass.kt")
                public void testLocalClassInClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/localClassInClass.kt", this::doTest);
                }

                @TestMetadata("nestedClass.kt")
                public void testNestedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/nestedClass.kt", this::doTest);
                }

                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/object.kt", this::doTest);
                }

                @TestMetadata("objectExpression.kt")
                public void testObjectExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/objectExpression.kt", this::doTest);
                }

                @TestMetadata("objectExpressionInConstructor.kt")
                public void testObjectExpressionInConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/objectExpressionInConstructor.kt", this::doTest);
                }

                @TestMetadata("privateClassPropertyNoClash.kt")
                public void testPrivateClassPropertyNoClash() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/privateClassPropertyNoClash.kt", this::doTest);
                }

                @TestMetadata("topLevel.kt")
                public void testTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/topLevel.kt", this::doTest);
                }

                @TestMetadata("topLevelDifferentFiles.kt")
                public void testTopLevelDifferentFiles() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/topLevelDifferentFiles.kt", this::doTest);
                }

                @TestMetadata("topLevelGetter.kt")
                public void testTopLevelGetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/topLevelGetter.kt", this::doTest);
                }

                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/trait.kt", this::doTest);
                }

                @TestMetadata("withErrorTypes.kt")
                public void testWithErrorTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/withErrorTypes.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SpecialNames extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSpecialNames() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classObject.kt")
                public void testClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/classObject.kt", this::doTest);
                }

                @TestMetadata("classObjectCopiedField.kt")
                public void testClassObjectCopiedField() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/classObjectCopiedField.kt", this::doTest);
                }

                @TestMetadata("classObjectCopiedFieldObject.kt")
                public void testClassObjectCopiedFieldObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/classObjectCopiedFieldObject.kt", this::doTest);
                }

                @TestMetadata("dataClassCopy.kt")
                public void testDataClassCopy() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/dataClassCopy.kt", this::doTest);
                }

                @TestMetadata("defaults.kt")
                public void testDefaults() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/defaults.kt", this::doTest);
                }

                @TestMetadata("delegationBy.kt")
                public void testDelegationBy() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/delegationBy.kt", this::doTest);
                }

                @TestMetadata("enum.kt")
                public void testEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/enum.kt", this::doTest);
                }

                @TestMetadata("innerClassField.kt")
                public void testInnerClassField() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/innerClassField.kt", this::doTest);
                }

                @TestMetadata("instance.kt")
                public void testInstance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/instance.kt", this::doTest);
                }

                @TestMetadata("propertyMetadataCache.kt")
                public void testPropertyMetadataCache() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/propertyMetadataCache.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/statics")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Statics extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInStatics() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/statics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("jkjk.kt")
                public void testJkjk() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/statics/jkjk.kt", this::doTest);
                }

                @TestMetadata("kotlinClassExtendsJavaClass.kt")
                public void testKotlinClassExtendsJavaClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/statics/kotlinClassExtendsJavaClass.kt", this::doTest);
                }

                @TestMetadata("kotlinClassExtendsJavaClassExtendsJavaClass.kt")
                public void testKotlinClassExtendsJavaClassExtendsJavaClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/statics/kotlinClassExtendsJavaClassExtendsJavaClass.kt", this::doTest);
                }

                @TestMetadata("kotlinClassImplementsJavaInterface.kt")
                public void testKotlinClassImplementsJavaInterface() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/statics/kotlinClassImplementsJavaInterface.kt", this::doTest);
                }

                @TestMetadata("kotlinClassImplementsJavaInterfaceExtendsJavaInteface.kt")
                public void testKotlinClassImplementsJavaInterfaceExtendsJavaInteface() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/statics/kotlinClassImplementsJavaInterfaceExtendsJavaInteface.kt", this::doTest);
                }

                @TestMetadata("kotlinMembersVsJavaNonVisibleStatics.kt")
                public void testKotlinMembersVsJavaNonVisibleStatics() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/statics/kotlinMembersVsJavaNonVisibleStatics.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/synthesized")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Synthesized extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSynthesized() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/synthesized"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("enumValuesValueOf.kt")
                public void testEnumValuesValueOf() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/synthesized/enumValuesValueOf.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TraitImpl extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInTraitImpl() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("oneTrait.kt")
                public void testOneTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl/oneTrait.kt", this::doTest);
                }

                @TestMetadata("traitFunctionOverriddenByPropertyInTrait.kt")
                public void testTraitFunctionOverriddenByPropertyInTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl/traitFunctionOverriddenByPropertyInTrait.kt", this::doTest);
                }

                @TestMetadata("traitPropertyOverriddenByFunctionInTrait.kt")
                public void testTraitPropertyOverriddenByFunctionInTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl/traitPropertyOverriddenByFunctionInTrait.kt", this::doTest);
                }

                @TestMetadata("twoTraits.kt")
                public void testTwoTraits() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl/twoTraits.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/dynamicTypes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DynamicTypes extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInDynamicTypes() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dynamicTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("delegationBy.kt")
            public void testDelegationBy() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dynamicTypes/delegationBy.kt", this::doTest);
            }

            @TestMetadata("unsupported.kt")
            public void testUnsupported() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dynamicTypes/unsupported.kt", this::doTest);
            }

            @TestMetadata("withInvisibleSynthesized.kt")
            public void testWithInvisibleSynthesized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/dynamicTypes/withInvisibleSynthesized.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/enum")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Enum extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("AbstractEnum.kt")
            public void testAbstractEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/AbstractEnum.kt", this::doTest);
            }

            @TestMetadata("AbstractInEnum.kt")
            public void testAbstractInEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/AbstractInEnum.kt", this::doTest);
            }

            @TestMetadata("AbstractOverrideInEnum.kt")
            public void testAbstractOverrideInEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/AbstractOverrideInEnum.kt", this::doTest);
            }

            public void testAllFilesPresentInEnum() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/enum"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("classObjectInEnum.kt")
            public void testClassObjectInEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/classObjectInEnum.kt", this::doTest);
            }

            @TestMetadata("classObjectInEnumPrivate.kt")
            public void testClassObjectInEnumPrivate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/classObjectInEnumPrivate.kt", this::doTest);
            }

            @TestMetadata("commonSupertype.kt")
            public void testCommonSupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/commonSupertype.kt", this::doTest);
            }

            @TestMetadata("compareTwoDifferentEnums.kt")
            public void testCompareTwoDifferentEnums() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/compareTwoDifferentEnums.kt", this::doTest);
            }

            @TestMetadata("ConstructorCallFromOutside.kt")
            public void testConstructorCallFromOutside() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/ConstructorCallFromOutside.kt", this::doTest);
            }

            @TestMetadata("constructorWithDefaultParametersOnly.kt")
            public void testConstructorWithDefaultParametersOnly() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/constructorWithDefaultParametersOnly.kt", this::doTest);
            }

            @TestMetadata("dontCreatePackageTypeForEnumEntry.kt")
            public void testDontCreatePackageTypeForEnumEntry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/dontCreatePackageTypeForEnumEntry.kt", this::doTest);
            }

            @TestMetadata("emptyConstructor.kt")
            public void testEmptyConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/emptyConstructor.kt", this::doTest);
            }

            @TestMetadata("entryShouldBeOfEnumType.kt")
            public void testEntryShouldBeOfEnumType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/entryShouldBeOfEnumType.kt", this::doTest);
            }

            @TestMetadata("enumEntryCannotHaveClassObject.kt")
            public void testEnumEntryCannotHaveClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumEntryCannotHaveClassObject.kt", this::doTest);
            }

            @TestMetadata("enumEntryInAbstractEnum.kt")
            public void testEnumEntryInAbstractEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumEntryInAbstractEnum.kt", this::doTest);
            }

            @TestMetadata("enumImplementingTrait.kt")
            public void testEnumImplementingTrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumImplementingTrait.kt", this::doTest);
            }

            @TestMetadata("enumInheritance.kt")
            public void testEnumInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumInheritance.kt", this::doTest);
            }

            @TestMetadata("enumIsAssignableToBuiltInEnum.kt")
            public void testEnumIsAssignableToBuiltInEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumIsAssignableToBuiltInEnum.kt", this::doTest);
            }

            @TestMetadata("enumMissingName.kt")
            public void testEnumMissingName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumMissingName.kt", this::doTest);
            }

            @TestMetadata("enumModifier.kt")
            public void testEnumModifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumModifier.kt", this::doTest);
            }

            @TestMetadata("enumStarImport.kt")
            public void testEnumStarImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumStarImport.kt", this::doTest);
            }

            @TestMetadata("enumSubjectTypeCheck.kt")
            public void testEnumSubjectTypeCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumSubjectTypeCheck.kt", this::doTest);
            }

            @TestMetadata("enumWithAnnotationKeyword.kt")
            public void testEnumWithAnnotationKeyword() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumWithAnnotationKeyword.kt", this::doTest);
            }

            @TestMetadata("enumWithEmptyName.kt")
            public void testEnumWithEmptyName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/enumWithEmptyName.kt", this::doTest);
            }

            @TestMetadata("ExplicitConstructorCall.kt")
            public void testExplicitConstructorCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/ExplicitConstructorCall.kt", this::doTest);
            }

            @TestMetadata("extendingEnumDirectly.kt")
            public void testExtendingEnumDirectly() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/extendingEnumDirectly.kt", this::doTest);
            }

            @TestMetadata("extensionNamedAsEnumEntry.kt")
            public void testExtensionNamedAsEnumEntry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/extensionNamedAsEnumEntry.kt", this::doTest);
            }

            @TestMetadata("ifEnumEntry.kt")
            public void testIfEnumEntry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/ifEnumEntry.kt", this::doTest);
            }

            @TestMetadata("importEnumFromJava.kt")
            public void testImportEnumFromJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/importEnumFromJava.kt", this::doTest);
            }

            @TestMetadata("inheritFromEnumEntry.kt")
            public void testInheritFromEnumEntry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inheritFromEnumEntry.kt", this::doTest);
            }

            @TestMetadata("inheritanceFromEnum.kt")
            public void testInheritanceFromEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inheritanceFromEnum.kt", this::doTest);
            }

            @TestMetadata("inline.kt")
            public void testInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inline.kt", this::doTest);
            }

            @TestMetadata("InsideEntryConstructorCall.kt")
            public void testInsideEntryConstructorCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/InsideEntryConstructorCall.kt", this::doTest);
            }

            @TestMetadata("InsideSecondaryConstructorCall.kt")
            public void testInsideSecondaryConstructorCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/InsideSecondaryConstructorCall.kt", this::doTest);
            }

            @TestMetadata("interfaceWithEnumKeyword.kt")
            public void testInterfaceWithEnumKeyword() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/interfaceWithEnumKeyword.kt", this::doTest);
            }

            @TestMetadata("isEnumEntry.kt")
            public void testIsEnumEntry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/isEnumEntry.kt", this::doTest);
            }

            @TestMetadata("javaEnumValueOfMethod.kt")
            public void testJavaEnumValueOfMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/javaEnumValueOfMethod.kt", this::doTest);
            }

            @TestMetadata("javaEnumValuesMethod.kt")
            public void testJavaEnumValuesMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/javaEnumValuesMethod.kt", this::doTest);
            }

            @TestMetadata("javaEnumWithAbstractFun.kt")
            public void testJavaEnumWithAbstractFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithAbstractFun.kt", this::doTest);
            }

            @TestMetadata("javaEnumWithFuns.kt")
            public void testJavaEnumWithFuns() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithFuns.kt", this::doTest);
            }

            @TestMetadata("javaEnumWithNameClashing.kt")
            public void testJavaEnumWithNameClashing() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithNameClashing.kt", this::doTest);
            }

            @TestMetadata("javaEnumWithProperty.kt")
            public void testJavaEnumWithProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithProperty.kt", this::doTest);
            }

            @TestMetadata("kt2834.kt")
            public void testKt2834() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/kt2834.kt", this::doTest);
            }

            @TestMetadata("kt8972_cloneNotAllowed.kt")
            public void testKt8972_cloneNotAllowed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/kt8972_cloneNotAllowed.kt", this::doTest);
            }

            @TestMetadata("localEnums.kt")
            public void testLocalEnums() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/localEnums.kt", this::doTest);
            }

            @TestMetadata("modifiersOnEnumEntry.kt")
            public void testModifiersOnEnumEntry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/modifiersOnEnumEntry.kt", this::doTest);
            }

            @TestMetadata("multipleConstructors.kt")
            public void testMultipleConstructors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/multipleConstructors.kt", this::doTest);
            }

            @TestMetadata("NonPrivateConstructor.kt")
            public void testNonPrivateConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/NonPrivateConstructor.kt", this::doTest);
            }

            @TestMetadata("openMemberInEnum.kt")
            public void testOpenMemberInEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/openMemberInEnum.kt", this::doTest);
            }

            @TestMetadata("overrideFinalEnumMethods.kt")
            public void testOverrideFinalEnumMethods() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/overrideFinalEnumMethods.kt", this::doTest);
            }

            @TestMetadata("SecondaryConstructorCall.kt")
            public void testSecondaryConstructorCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/SecondaryConstructorCall.kt", this::doTest);
            }

            @TestMetadata("starImportNestedClassAndEntries.kt")
            public void testStarImportNestedClassAndEntries() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/starImportNestedClassAndEntries.kt", this::doTest);
            }

            @TestMetadata("typeParametersInEnum.kt")
            public void testTypeParametersInEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/typeParametersInEnum.kt", this::doTest);
            }

            @TestMetadata("valuesValueOfAndEntriesAccessibility.kt")
            public void testValuesValueOfAndEntriesAccessibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/valuesValueOfAndEntriesAccessibility.kt", this::doTest);
            }

            @TestMetadata("wrongUnitializedEnumCompanion.kt")
            public void testWrongUnitializedEnumCompanion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/wrongUnitializedEnumCompanion.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/enum/inner")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inner extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInner() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/enum/inner"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("existingClassObject.kt")
                public void testExistingClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/existingClassObject.kt", this::doTest);
                }

                @TestMetadata("insideClass.kt")
                public void testInsideClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/insideClass.kt", this::doTest);
                }

                @TestMetadata("insideClassObject.kt")
                public void testInsideClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/insideClassObject.kt", this::doTest);
                }

                @TestMetadata("insideEnum.kt")
                public void testInsideEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/insideEnum.kt", this::doTest);
                }

                @TestMetadata("insideEnumEntry.kt")
                public void testInsideEnumEntry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/insideEnumEntry.kt", this::doTest);
                }

                @TestMetadata("insideInnerClassNotAllowed.kt")
                public void testInsideInnerClassNotAllowed() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/insideInnerClassNotAllowed.kt", this::doTest);
                }

                @TestMetadata("insideObject.kt")
                public void testInsideObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/insideObject.kt", this::doTest);
                }

                @TestMetadata("insideTrait.kt")
                public void testInsideTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/insideTrait.kt", this::doTest);
                }

                @TestMetadata("redeclarationInClassObject.kt")
                public void testRedeclarationInClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/redeclarationInClassObject.kt", this::doTest);
                }

                @TestMetadata("twoEnums.kt")
                public void testTwoEnums() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/twoEnums.kt", this::doTest);
                }

                @TestMetadata("twoEnumsInClassObjectAndInnerClass.kt")
                public void testTwoEnumsInClassObjectAndInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/enum/inner/twoEnumsInClassObjectAndInnerClass.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/evaluate")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Evaluate extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInEvaluate() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/evaluate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("binaryMinusDepOnExpType.kt")
            public void testBinaryMinusDepOnExpType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusDepOnExpType.kt", this::doTest);
            }

            @TestMetadata("binaryMinusIndepWoExpType.kt")
            public void testBinaryMinusIndepWoExpType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusIndepWoExpType.kt", this::doTest);
            }

            @TestMetadata("binaryMinusIndependentExpType.kt")
            public void testBinaryMinusIndependentExpType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusIndependentExpType.kt", this::doTest);
            }

            @TestMetadata("divisionByZero.kt")
            public void testDivisionByZero() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/divisionByZero.kt", this::doTest);
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/float.kt", this::doTest);
            }

            @TestMetadata("floatLiteralOutOfRange.kt")
            public void testFloatLiteralOutOfRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/floatLiteralOutOfRange.kt", this::doTest);
            }

            @TestMetadata("infixFunOverBuiltinMemberInConst.kt")
            public void testInfixFunOverBuiltinMemberInConst() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/infixFunOverBuiltinMemberInConst.kt", this::doTest);
            }

            @TestMetadata("intOverflow.kt")
            public void testIntOverflow() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/intOverflow.kt", this::doTest);
            }

            @TestMetadata("intOverflowWithJavaProperties.kt")
            public void testIntOverflowWithJavaProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/intOverflowWithJavaProperties.kt", this::doTest);
            }

            @TestMetadata("integer.kt")
            public void testInteger() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/integer.kt", this::doTest);
            }

            @TestMetadata("logicWithNumber.kt")
            public void testLogicWithNumber() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/logicWithNumber.kt", this::doTest);
            }

            @TestMetadata("longOverflow.kt")
            public void testLongOverflow() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/longOverflow.kt", this::doTest);
            }

            @TestMetadata("noOverflowWithZero.kt")
            public void testNoOverflowWithZero() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/noOverflowWithZero.kt", this::doTest);
            }

            @TestMetadata("numberBinaryOperations.kt")
            public void testNumberBinaryOperations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperations.kt", this::doTest);
            }

            @TestMetadata("numberBinaryOperationsCall.kt")
            public void testNumberBinaryOperationsCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsCall.kt", this::doTest);
            }

            @TestMetadata("numberBinaryOperationsInfixCall.kt")
            public void testNumberBinaryOperationsInfixCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsInfixCall.kt", this::doTest);
            }

            @TestMetadata("otherOverflow.kt")
            public void testOtherOverflow() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/otherOverflow.kt", this::doTest);
            }

            @TestMetadata("parentesized.kt")
            public void testParentesized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/parentesized.kt", this::doTest);
            }

            @TestMetadata("qualifiedExpressions.kt")
            public void testQualifiedExpressions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/qualifiedExpressions.kt", this::doTest);
            }

            @TestMetadata("unaryMinusDepOnExpType.kt")
            public void testUnaryMinusDepOnExpType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusDepOnExpType.kt", this::doTest);
            }

            @TestMetadata("unaryMinusIndepWoExpType.kt")
            public void testUnaryMinusIndepWoExpType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusIndepWoExpType.kt", this::doTest);
            }

            @TestMetadata("unaryMinusIndependentExpType.kt")
            public void testUnaryMinusIndependentExpType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusIndependentExpType.kt", this::doTest);
            }

            @TestMetadata("wrongLongSuffix.kt")
            public void testWrongLongSuffix() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/evaluate/wrongLongSuffix.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/exposed")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Exposed extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInExposed() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/exposed"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/delegate.kt", this::doTest);
            }

            @TestMetadata("exceptionOnFakeInvisible.kt")
            public void testExceptionOnFakeInvisible() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/exceptionOnFakeInvisible.kt", this::doTest);
            }

            @TestMetadata("functional.kt")
            public void testFunctional() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/functional.kt", this::doTest);
            }

            @TestMetadata("implements.kt")
            public void testImplements() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/implements.kt", this::doTest);
            }

            @TestMetadata("inaccessibleType.kt")
            public void testInaccessibleType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/inaccessibleType.kt", this::doTest);
            }

            @TestMetadata("internal.kt")
            public void testInternal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/internal.kt", this::doTest);
            }

            @TestMetadata("internalAndProtected.kt")
            public void testInternalAndProtected() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/internalAndProtected.kt", this::doTest);
            }

            @TestMetadata("internalFromLocal.kt")
            public void testInternalFromLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/internalFromLocal.kt", this::doTest);
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/local.kt", this::doTest);
            }

            @TestMetadata("localFromInternal.kt")
            public void testLocalFromInternal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/localFromInternal.kt", this::doTest);
            }

            @TestMetadata("localFromPrivate.kt")
            public void testLocalFromPrivate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/localFromPrivate.kt", this::doTest);
            }

            @TestMetadata("localInFunReturnType.kt")
            public void testLocalInFunReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/localInFunReturnType.kt", this::doTest);
            }

            @TestMetadata("localInMemberType.kt")
            public void testLocalInMemberType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/localInMemberType.kt", this::doTest);
            }

            @TestMetadata("localInPropertyType.kt")
            public void testLocalInPropertyType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/localInPropertyType.kt", this::doTest);
            }

            @TestMetadata("nested.kt")
            public void testNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/nested.kt", this::doTest);
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/object.kt", this::doTest);
            }

            @TestMetadata("packagePrivate.kt")
            public void testPackagePrivate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/packagePrivate.kt", this::doTest);
            }

            @TestMetadata("privateFromLocal.kt")
            public void testPrivateFromLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/privateFromLocal.kt", this::doTest);
            }

            @TestMetadata("protected.kt")
            public void testProtected() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/protected.kt", this::doTest);
            }

            @TestMetadata("protectedInProtected.kt")
            public void testProtectedInProtected() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/protectedInProtected.kt", this::doTest);
            }

            @TestMetadata("protectedJava.kt")
            public void testProtectedJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/protectedJava.kt", this::doTest);
            }

            @TestMetadata("protectedSameWay.kt")
            public void testProtectedSameWay() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/protectedSameWay.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/simple.kt", this::doTest);
            }

            @TestMetadata("typeArgs.kt")
            public void testTypeArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/exposed/typeArgs.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/extensions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Extensions extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInExtensions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/extensions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/classObject.kt", this::doTest);
            }

            @TestMetadata("ExtensionFunctions.kt")
            public void testExtensionFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/ExtensionFunctions.kt", this::doTest);
            }

            @TestMetadata("extensionMemberInClassObject.kt")
            public void testExtensionMemberInClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/extensionMemberInClassObject.kt", this::doTest);
            }

            @TestMetadata("extensionPropertyVsParameter.kt")
            public void testExtensionPropertyVsParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/extensionPropertyVsParameter.kt", this::doTest);
            }

            @TestMetadata("ExtensionsCalledOnSuper.kt")
            public void testExtensionsCalledOnSuper() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/ExtensionsCalledOnSuper.kt", this::doTest);
            }

            @TestMetadata("GenericIterator.kt")
            public void testGenericIterator() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/GenericIterator.kt", this::doTest);
            }

            @TestMetadata("GenericIterator2.kt")
            public void testGenericIterator2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/GenericIterator2.kt", this::doTest);
            }

            @TestMetadata("kt1875.kt")
            public void testKt1875() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/kt1875.kt", this::doTest);
            }

            @TestMetadata("kt2317.kt")
            public void testKt2317() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/kt2317.kt", this::doTest);
            }

            @TestMetadata("kt3470.kt")
            public void testKt3470() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/kt3470.kt", this::doTest);
            }

            @TestMetadata("kt3563.kt")
            public void testKt3563() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/kt3563.kt", this::doTest);
            }

            @TestMetadata("kt819ExtensionProperties.kt")
            public void testKt819ExtensionProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/kt819ExtensionProperties.kt", this::doTest);
            }

            @TestMetadata("noClassObjectsInJava.kt")
            public void testNoClassObjectsInJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/noClassObjectsInJava.kt", this::doTest);
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/object.kt", this::doTest);
            }

            @TestMetadata("throwOutCandidatesByReceiver.kt")
            public void testThrowOutCandidatesByReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver.kt", this::doTest);
            }

            @TestMetadata("throwOutCandidatesByReceiver2.kt")
            public void testThrowOutCandidatesByReceiver2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver2.kt", this::doTest);
            }

            @TestMetadata("variableInvoke.kt")
            public void testVariableInvoke() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/extensions/variableInvoke.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/functionAsExpression")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FunctionAsExpression extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInFunctionAsExpression() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/functionAsExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AutoLabels.kt")
            public void testAutoLabels() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/AutoLabels.kt", this::doTest);
            }

            @TestMetadata("Common.kt")
            public void testCommon() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/Common.kt", this::doTest);
            }

            @TestMetadata("DifficultInferenceForParameter.kt")
            public void testDifficultInferenceForParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/DifficultInferenceForParameter.kt", this::doTest);
            }

            @TestMetadata("ForbiddenNonLocalReturn.kt")
            public void testForbiddenNonLocalReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/ForbiddenNonLocalReturn.kt", this::doTest);
            }

            @TestMetadata("FunctionType.kt")
            public void testFunctionType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/FunctionType.kt", this::doTest);
            }

            @TestMetadata("InferenceParametersTypes.kt")
            public void testInferenceParametersTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/InferenceParametersTypes.kt", this::doTest);
            }

            @TestMetadata("MissingParameterTypes.kt")
            public void testMissingParameterTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/MissingParameterTypes.kt", this::doTest);
            }

            @TestMetadata("NameDeprecation.kt")
            public void testNameDeprecation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/NameDeprecation.kt", this::doTest);
            }

            @TestMetadata("NoOverloadError.kt")
            public void testNoOverloadError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/NoOverloadError.kt", this::doTest);
            }

            @TestMetadata("Parameters.kt")
            public void testParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/Parameters.kt", this::doTest);
            }

            @TestMetadata("ReceiverByExpectedType.kt")
            public void testReceiverByExpectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/ReceiverByExpectedType.kt", this::doTest);
            }

            @TestMetadata("ReturnAndLabels.kt")
            public void testReturnAndLabels() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/ReturnAndLabels.kt", this::doTest);
            }

            @TestMetadata("ReturnTypeCheck.kt")
            public void testReturnTypeCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/ReturnTypeCheck.kt", this::doTest);
            }

            @TestMetadata("ScopeCheck.kt")
            public void testScopeCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/ScopeCheck.kt", this::doTest);
            }

            @TestMetadata("WithGenericParameters.kt")
            public void testWithGenericParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/WithGenericParameters.kt", this::doTest);
            }

            @TestMetadata("WithOuterGeneric.kt")
            public void testWithOuterGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/WithOuterGeneric.kt", this::doTest);
            }

            @TestMetadata("WithoutBody.kt")
            public void testWithoutBody() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionAsExpression/WithoutBody.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FunctionLiterals extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInFunctionLiterals() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/functionLiterals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("assignmentOperationInLambda.kt")
            public void testAssignmentOperationInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/assignmentOperationInLambda.kt", this::doTest);
            }

            @TestMetadata("assignmentOperationInLambdaWithExpectedType.kt")
            public void testAssignmentOperationInLambdaWithExpectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/assignmentOperationInLambdaWithExpectedType.kt", this::doTest);
            }

            @TestMetadata("DeprecatedSyntax.kt")
            public void testDeprecatedSyntax() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/DeprecatedSyntax.kt", this::doTest);
            }

            @TestMetadata("ExpectedParameterTypeMismatchVariance.kt")
            public void testExpectedParameterTypeMismatchVariance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/ExpectedParameterTypeMismatchVariance.kt", this::doTest);
            }

            @TestMetadata("ExpectedParametersTypesMismatch.kt")
            public void testExpectedParametersTypesMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/ExpectedParametersTypesMismatch.kt", this::doTest);
            }

            @TestMetadata("functionExpressionAsLastExpressionInBlock.kt")
            public void testFunctionExpressionAsLastExpressionInBlock() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/functionExpressionAsLastExpressionInBlock.kt", this::doTest);
            }

            @TestMetadata("functionLIteralInBlockInIf.kt")
            public void testFunctionLIteralInBlockInIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLIteralInBlockInIf.kt", this::doTest);
            }

            @TestMetadata("functionLiteralInIf.kt")
            public void testFunctionLiteralInIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralInIf.kt", this::doTest);
            }

            @TestMetadata("functionLiteralWithoutArgumentList.kt")
            public void testFunctionLiteralWithoutArgumentList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralWithoutArgumentList.kt", this::doTest);
            }

            @TestMetadata("higherOrderCallMissingParameters.kt")
            public void testHigherOrderCallMissingParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/higherOrderCallMissingParameters.kt", this::doTest);
            }

            @TestMetadata("kt11733.kt")
            public void testKt11733() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt11733.kt", this::doTest);
            }

            @TestMetadata("kt11733_1.kt")
            public void testKt11733_1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt11733_1.kt", this::doTest);
            }

            @TestMetadata("kt16016.kt")
            public void testKt16016() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt16016.kt", this::doTest);
            }

            @TestMetadata("kt2906.kt")
            public void testKt2906() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt2906.kt", this::doTest);
            }

            @TestMetadata("kt3343.kt")
            public void testKt3343() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt3343.kt", this::doTest);
            }

            @TestMetadata("kt4529.kt")
            public void testKt4529() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt4529.kt", this::doTest);
            }

            @TestMetadata("kt6541_extensionForExtensionFunction.kt")
            public void testKt6541_extensionForExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt6541_extensionForExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("kt6869.kt")
            public void testKt6869() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt6869.kt", this::doTest);
            }

            @TestMetadata("kt7383_starProjectedFunction.kt")
            public void testKt7383_starProjectedFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/kt7383_starProjectedFunction.kt", this::doTest);
            }

            @TestMetadata("LabeledFunctionLiterals.kt")
            public void testLabeledFunctionLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/LabeledFunctionLiterals.kt", this::doTest);
            }

            @TestMetadata("returnNull.kt")
            public void testReturnNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/returnNull.kt", this::doTest);
            }

            @TestMetadata("returnNullWithReturn.kt")
            public void testReturnNullWithReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/returnNullWithReturn.kt", this::doTest);
            }

            @TestMetadata("underscopeParameters.kt")
            public void testUnderscopeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/underscopeParameters.kt", this::doTest);
            }

            @TestMetadata("unusedLiteral.kt")
            public void testUnusedLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteral.kt", this::doTest);
            }

            @TestMetadata("unusedLiteralInsideUnitLiteral.kt")
            public void testUnusedLiteralInsideUnitLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteralInsideUnitLiteral.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DestructuringInLambdas extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDestructuringInLambdas() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("complexInference.kt")
                public void testComplexInference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/complexInference.kt", this::doTest);
                }

                @TestMetadata("extensionComponents.kt")
                public void testExtensionComponents() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/extensionComponents.kt", this::doTest);
                }

                @TestMetadata("inferredFunctionalType.kt")
                public void testInferredFunctionalType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/inferredFunctionalType.kt", this::doTest);
                }

                @TestMetadata("modifiers.kt")
                public void testModifiers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/modifiers.kt", this::doTest);
                }

                @TestMetadata("noExpectedType.kt")
                public void testNoExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/noExpectedType.kt", this::doTest);
                }

                @TestMetadata("redeclaration.kt")
                public void testRedeclaration() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/redeclaration.kt", this::doTest);
                }

                @TestMetadata("shadowing.kt")
                public void testShadowing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/shadowing.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/simple.kt", this::doTest);
                }

                @TestMetadata("underscore.kt")
                public void testUnderscore() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/underscore.kt", this::doTest);
                }

                @TestMetadata("unsupportedFeature.kt")
                public void testUnsupportedFeature() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/unsupportedFeature.kt", this::doTest);
                }

                @TestMetadata("unusedParameters.kt")
                public void testUnusedParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/unusedParameters.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/return")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Return extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInReturn() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/functionLiterals/return"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("AutoLabels.kt")
                public void testAutoLabels() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabels.kt", this::doTest);
                }

                @TestMetadata("AutoLabelsNonLocal.kt")
                public void testAutoLabelsNonLocal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabelsNonLocal.kt", this::doTest);
                }

                @TestMetadata("ForbiddenNonLocalReturnNoType.kt")
                public void testForbiddenNonLocalReturnNoType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/ForbiddenNonLocalReturnNoType.kt", this::doTest);
                }

                @TestMetadata("IfInReturnedExpression.kt")
                public void testIfInReturnedExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/IfInReturnedExpression.kt", this::doTest);
                }

                @TestMetadata("IfWithoutElse.kt")
                public void testIfWithoutElse() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/IfWithoutElse.kt", this::doTest);
                }

                @TestMetadata("IfWithoutElseWithExplicitType.kt")
                public void testIfWithoutElseWithExplicitType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/IfWithoutElseWithExplicitType.kt", this::doTest);
                }

                @TestMetadata("LambdaWithParameter.kt")
                public void testLambdaWithParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LambdaWithParameter.kt", this::doTest);
                }

                @TestMetadata("LocalAndNonLocalReturnInLambda.kt")
                public void testLocalAndNonLocalReturnInLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalAndNonLocalReturnInLambda.kt", this::doTest);
                }

                @TestMetadata("LocalReturnExplicitLabelNoParens.kt")
                public void testLocalReturnExplicitLabelNoParens() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelNoParens.kt", this::doTest);
                }

                @TestMetadata("LocalReturnExplicitLabelParens.kt")
                public void testLocalReturnExplicitLabelParens() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelParens.kt", this::doTest);
                }

                @TestMetadata("LocalReturnHasTypeNothing.kt")
                public void testLocalReturnHasTypeNothing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnHasTypeNothing.kt", this::doTest);
                }

                @TestMetadata("LocalReturnInNestedFunction.kt")
                public void testLocalReturnInNestedFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedFunction.kt", this::doTest);
                }

                @TestMetadata("LocalReturnInNestedLambda.kt")
                public void testLocalReturnInNestedLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedLambda.kt", this::doTest);
                }

                @TestMetadata("LocalReturnNoCoercionToUnit.kt")
                public void testLocalReturnNoCoercionToUnit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNoCoercionToUnit.kt", this::doTest);
                }

                @TestMetadata("LocalReturnNull.kt")
                public void testLocalReturnNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNull.kt", this::doTest);
                }

                @TestMetadata("LocalReturnSecondUnit.kt")
                public void testLocalReturnSecondUnit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnSecondUnit.kt", this::doTest);
                }

                @TestMetadata("LocalReturnUnit.kt")
                public void testLocalReturnUnit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnit.kt", this::doTest);
                }

                @TestMetadata("LocalReturnUnitAndDontCareType.kt")
                public void testLocalReturnUnitAndDontCareType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnitAndDontCareType.kt", this::doTest);
                }

                @TestMetadata("LocalReturnUnitWithBodyExpression.kt")
                public void testLocalReturnUnitWithBodyExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnitWithBodyExpression.kt", this::doTest);
                }

                @TestMetadata("LocalReturnWithExpectedType.kt")
                public void testLocalReturnWithExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithExpectedType.kt", this::doTest);
                }

                @TestMetadata("LocalReturnWithExplicitUnit.kt")
                public void testLocalReturnWithExplicitUnit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithExplicitUnit.kt", this::doTest);
                }

                @TestMetadata("LocalReturnsWithExplicitReturnType.kt")
                public void testLocalReturnsWithExplicitReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnsWithExplicitReturnType.kt", this::doTest);
                }

                @TestMetadata("MixedReturnsFromLambda.kt")
                public void testMixedReturnsFromLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/MixedReturnsFromLambda.kt", this::doTest);
                }

                @TestMetadata("NoCommonSystem.kt")
                public void testNoCommonSystem() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/NoCommonSystem.kt", this::doTest);
                }

                @TestMetadata("SmartCast.kt")
                public void testSmartCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/SmartCast.kt", this::doTest);
                }

                @TestMetadata("SmartCastWithExplicitType.kt")
                public void testSmartCastWithExplicitType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/SmartCastWithExplicitType.kt", this::doTest);
                }

                @TestMetadata("unresolvedReferenceInReturnBlock.kt")
                public void testUnresolvedReferenceInReturnBlock() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/functionLiterals/return/unresolvedReferenceInReturnBlock.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/generics")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Generics extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInGenerics() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("argumentsForT.kt")
            public void testArgumentsForT() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/argumentsForT.kt", this::doTest);
            }

            @TestMetadata("commonSupertypeContravariant.kt")
            public void testCommonSupertypeContravariant() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/commonSupertypeContravariant.kt", this::doTest);
            }

            @TestMetadata("commonSupertypeContravariant2.kt")
            public void testCommonSupertypeContravariant2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/commonSupertypeContravariant2.kt", this::doTest);
            }

            @TestMetadata("doNotCaptureSupertype.kt")
            public void testDoNotCaptureSupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/doNotCaptureSupertype.kt", this::doTest);
            }

            @TestMetadata("genericsInType.kt")
            public void testGenericsInType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/genericsInType.kt", this::doTest);
            }

            @TestMetadata("InconsistentTypeParameterBounds.kt")
            public void testInconsistentTypeParameterBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/InconsistentTypeParameterBounds.kt", this::doTest);
            }

            @TestMetadata("invalidArgumentsNumberInWhere.kt")
            public void testInvalidArgumentsNumberInWhere() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/invalidArgumentsNumberInWhere.kt", this::doTest);
            }

            @TestMetadata("kt1575-Class.kt")
            public void testKt1575_Class() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/kt1575-Class.kt", this::doTest);
            }

            @TestMetadata("kt1575-Function.kt")
            public void testKt1575_Function() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/kt1575-Function.kt", this::doTest);
            }

            @TestMetadata("kt5508.kt")
            public void testKt5508() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/kt5508.kt", this::doTest);
            }

            @TestMetadata("kt9203.kt")
            public void testKt9203() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/kt9203.kt", this::doTest);
            }

            @TestMetadata("kt9203_1.kt")
            public void testKt9203_1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/kt9203_1.kt", this::doTest);
            }

            @TestMetadata("kt9985.kt")
            public void testKt9985() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/kt9985.kt", this::doTest);
            }

            @TestMetadata("Projections.kt")
            public void testProjections() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/Projections.kt", this::doTest);
            }

            @TestMetadata("PseudoRawTypes.kt")
            public void testPseudoRawTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/PseudoRawTypes.kt", this::doTest);
            }

            @TestMetadata("RawTypeInIsExpression.kt")
            public void testRawTypeInIsExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/RawTypeInIsExpression.kt", this::doTest);
            }

            @TestMetadata("RawTypeInIsPattern.kt")
            public void testRawTypeInIsPattern() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/RawTypeInIsPattern.kt", this::doTest);
            }

            @TestMetadata("recursive.kt")
            public void testRecursive() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/recursive.kt", this::doTest);
            }

            @TestMetadata("RecursiveUpperBoundCheck.kt")
            public void testRecursiveUpperBoundCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundCheck.kt", this::doTest);
            }

            @TestMetadata("RecursiveUpperBoundWithTwoArguments.kt")
            public void testRecursiveUpperBoundWithTwoArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundWithTwoArguments.kt", this::doTest);
            }

            @TestMetadata("resolveGenericBoundsBeforeSupertypes.kt")
            public void testResolveGenericBoundsBeforeSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/resolveGenericBoundsBeforeSupertypes.kt", this::doTest);
            }

            @TestMetadata("sameTypeParameterUse.kt")
            public void testSameTypeParameterUse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/sameTypeParameterUse.kt", this::doTest);
            }

            @TestMetadata("suppressVarianceConflict.kt")
            public void testSuppressVarianceConflict() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/suppressVarianceConflict.kt", this::doTest);
            }

            @TestMetadata("TypeParameterBounds.kt")
            public void testTypeParameterBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/TypeParameterBounds.kt", this::doTest);
            }

            @TestMetadata("TypeParametersInTypeParameterBounds.kt")
            public void testTypeParametersInTypeParameterBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/TypeParametersInTypeParameterBounds.kt", this::doTest);
            }

            @TestMetadata("unresolvedClassifierInWhere.kt")
            public void testUnresolvedClassifierInWhere() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/unresolvedClassifierInWhere.kt", this::doTest);
            }

            @TestMetadata("wildcardInValueParameter.kt")
            public void testWildcardInValueParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/wildcardInValueParameter.kt", this::doTest);
            }

            @TestMetadata("wrongNumberOfTypeArgumentsDiagnostic.kt")
            public void testWrongNumberOfTypeArgumentsDiagnostic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/wrongNumberOfTypeArgumentsDiagnostic.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/capturedParameters")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CapturedParameters extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCapturedParameters() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/capturedParameters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("innerLocalClass.kt")
                public void testInnerLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/innerLocalClass.kt", this::doTest);
                }

                @TestMetadata("localClass.kt")
                public void testLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/localClass.kt", this::doTest);
                }

                @TestMetadata("localWithTypeParameter.kt")
                public void testLocalWithTypeParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/localWithTypeParameter.kt", this::doTest);
                }

                @TestMetadata("objectLiteral.kt")
                public void testObjectLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/objectLiteral.kt", this::doTest);
                }

                @TestMetadata("uncheckedCast.kt")
                public void testUncheckedCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/uncheckedCast.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/cyclicBounds")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CyclicBounds extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCyclicBounds() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/cyclicBounds"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("functions.kt")
                public void testFunctions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/cyclicBounds/functions.kt", this::doTest);
                }

                @TestMetadata("inClass.kt")
                public void testInClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/cyclicBounds/inClass.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/innerClasses")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class InnerClasses extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInnerClasses() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/innerClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("bareTypes.kt")
                public void testBareTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/bareTypes.kt", this::doTest);
                }

                @TestMetadata("bareTypesComplex.kt")
                public void testBareTypesComplex() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/bareTypesComplex.kt", this::doTest);
                }

                @TestMetadata("checkBoundsOuter.kt")
                public void testCheckBoundsOuter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/checkBoundsOuter.kt", this::doTest);
                }

                @TestMetadata("importedInner.kt")
                public void testImportedInner() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/importedInner.kt", this::doTest);
                }

                @TestMetadata("innerSuperCall.kt")
                public void testInnerSuperCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerSuperCall.kt", this::doTest);
                }

                @TestMetadata("innerSuperCallSecondary.kt")
                public void testInnerSuperCallSecondary() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerSuperCallSecondary.kt", this::doTest);
                }

                @TestMetadata("innerTP.kt")
                public void testInnerTP() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerTP.kt", this::doTest);
                }

                @TestMetadata("innerUncheckedCast.kt")
                public void testInnerUncheckedCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerUncheckedCast.kt", this::doTest);
                }

                @TestMetadata("innerVariance.kt")
                public void testInnerVariance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerVariance.kt", this::doTest);
                }

                @TestMetadata("iterator.kt")
                public void testIterator() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/iterator.kt", this::doTest);
                }

                @TestMetadata("j+k.kt")
                public void testJ_k() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/j+k.kt", this::doTest);
                }

                @TestMetadata("j+k_complex.kt")
                public void testJ_k_complex() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/j+k_complex.kt", this::doTest);
                }

                @TestMetadata("kt3357.kt")
                public void testKt3357() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt3357.kt", this::doTest);
                }

                @TestMetadata("kt408.kt")
                public void testKt408() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt408.kt", this::doTest);
                }

                @TestMetadata("kt6325.kt")
                public void testKt6325() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt6325.kt", this::doTest);
                }

                @TestMetadata("outerArgumentsRequired.kt")
                public void testOuterArgumentsRequired() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/outerArgumentsRequired.kt", this::doTest);
                }

                @TestMetadata("parameterShadowing.kt")
                public void testParameterShadowing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/parameterShadowing.kt", this::doTest);
                }

                @TestMetadata("qualifiedOuter.kt")
                public void testQualifiedOuter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/qualifiedOuter.kt", this::doTest);
                }

                @TestMetadata("qualifiedTypesResolution.kt")
                public void testQualifiedTypesResolution() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/qualifiedTypesResolution.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/simple.kt", this::doTest);
                }

                @TestMetadata("simpleIn.kt")
                public void testSimpleIn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/simpleIn.kt", this::doTest);
                }

                @TestMetadata("simpleOut.kt")
                public void testSimpleOut() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/simpleOut.kt", this::doTest);
                }

                @TestMetadata("simpleOutUseSite.kt")
                public void testSimpleOutUseSite() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/simpleOutUseSite.kt", this::doTest);
                }

                @TestMetadata("substitutedMemberScope.kt")
                public void testSubstitutedMemberScope() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/substitutedMemberScope.kt", this::doTest);
                }

                @TestMetadata("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class ImplicitArguments extends AbstractDiagnosticsUsingJavacTest {
                    public void testAllFilesPresentInImplicitArguments() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("fromCompanionObject.kt")
                    public void testFromCompanionObject() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromCompanionObject.kt", this::doTest);
                    }

                    @TestMetadata("fromOuterClassInObjectLiteral.kt")
                    public void testFromOuterClassInObjectLiteral() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromOuterClassInObjectLiteral.kt", this::doTest);
                    }

                    @TestMetadata("fromSuperClasses.kt")
                    public void testFromSuperClasses() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClasses.kt", this::doTest);
                    }

                    @TestMetadata("fromSuperClassesLocal.kt")
                    public void testFromSuperClassesLocal() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesLocal.kt", this::doTest);
                    }

                    @TestMetadata("fromSuperClassesLocalInsideInner.kt")
                    public void testFromSuperClassesLocalInsideInner() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesLocalInsideInner.kt", this::doTest);
                    }

                    @TestMetadata("fromSuperClassesTransitive.kt")
                    public void testFromSuperClassesTransitive() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesTransitive.kt", this::doTest);
                    }

                    @TestMetadata("inStaticScope.kt")
                    public void testInStaticScope() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/inStaticScope.kt", this::doTest);
                    }

                    @TestMetadata("secondLevelDepth.kt")
                    public void testSecondLevelDepth() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/secondLevelDepth.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class MultipleBoundsMemberScope extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInMultipleBoundsMemberScope() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("conflictingReturnType.kt")
                public void testConflictingReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/conflictingReturnType.kt", this::doTest);
                }

                @TestMetadata("flexibleTypes.kt")
                public void testFlexibleTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/flexibleTypes.kt", this::doTest);
                }

                @TestMetadata("mostSpecific.kt")
                public void testMostSpecific() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/mostSpecific.kt", this::doTest);
                }

                @TestMetadata("properties.kt")
                public void testProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/properties.kt", this::doTest);
                }

                @TestMetadata("propertiesConflict.kt")
                public void testPropertiesConflict() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/propertiesConflict.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/simple.kt", this::doTest);
                }

                @TestMetadata("validTypeParameters.kt")
                public void testValidTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/validTypeParameters.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/nullability")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Nullability extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNullability() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/nullability"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("capturedTypeWithPlatformSupertype.kt")
                public void testCapturedTypeWithPlatformSupertype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/capturedTypeWithPlatformSupertype.kt", this::doTest);
                }

                @TestMetadata("correctSubstitutionForIncorporationConstraint.kt")
                public void testCorrectSubstitutionForIncorporationConstraint() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/correctSubstitutionForIncorporationConstraint.kt", this::doTest);
                }

                @TestMetadata("declarationsBoundsViolation.kt")
                public void testDeclarationsBoundsViolation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/declarationsBoundsViolation.kt", this::doTest);
                }

                @TestMetadata("expressionsBoundsViolation.kt")
                public void testExpressionsBoundsViolation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/expressionsBoundsViolation.kt", this::doTest);
                }

                @TestMetadata("functionalBound.kt")
                public void testFunctionalBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/functionalBound.kt", this::doTest);
                }

                @TestMetadata("nullToGeneric.kt")
                public void testNullToGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/nullToGeneric.kt", this::doTest);
                }

                @TestMetadata("smartCastRefinedClass.kt")
                public void testSmartCastRefinedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/smartCastRefinedClass.kt", this::doTest);
                }

                @TestMetadata("smartCasts.kt")
                public void testSmartCasts() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/smartCasts.kt", this::doTest);
                }

                @TestMetadata("smartCastsOnThis.kt")
                public void testSmartCastsOnThis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/smartCastsOnThis.kt", this::doTest);
                }

                @TestMetadata("smartCastsValueArgument.kt")
                public void testSmartCastsValueArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/smartCastsValueArgument.kt", this::doTest);
                }

                @TestMetadata("tpBoundsViolation.kt")
                public void testTpBoundsViolation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/tpBoundsViolation.kt", this::doTest);
                }

                @TestMetadata("tpBoundsViolationVariance.kt")
                public void testTpBoundsViolationVariance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/tpBoundsViolationVariance.kt", this::doTest);
                }

                @TestMetadata("tpInBounds.kt")
                public void testTpInBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/tpInBounds.kt", this::doTest);
                }

                @TestMetadata("useAsReceiver.kt")
                public void testUseAsReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/useAsReceiver.kt", this::doTest);
                }

                @TestMetadata("useAsValueArgument.kt")
                public void testUseAsValueArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/nullability/useAsValueArgument.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/projectionsScope")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ProjectionsScope extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("addAll.kt")
                public void testAddAll() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/addAll.kt", this::doTest);
                }

                public void testAllFilesPresentInProjectionsScope() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/projectionsScope"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("approximateDispatchReceiver.kt")
                public void testApproximateDispatchReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/approximateDispatchReceiver.kt", this::doTest);
                }

                @TestMetadata("extensionReceiverTypeMismatch.kt")
                public void testExtensionReceiverTypeMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/extensionReceiverTypeMismatch.kt", this::doTest);
                }

                @TestMetadata("extensionResultSubstitution.kt")
                public void testExtensionResultSubstitution() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/extensionResultSubstitution.kt", this::doTest);
                }

                @TestMetadata("flexibleProjectedScope.kt")
                public void testFlexibleProjectedScope() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/flexibleProjectedScope.kt", this::doTest);
                }

                @TestMetadata("inValueParameter.kt")
                public void testInValueParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/inValueParameter.kt", this::doTest);
                }

                @TestMetadata("iterateOnExtension.kt")
                public void testIterateOnExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/iterateOnExtension.kt", this::doTest);
                }

                @TestMetadata("kt7296.kt")
                public void testKt7296() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/kt7296.kt", this::doTest);
                }

                @TestMetadata("kt8647.kt")
                public void testKt8647() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/kt8647.kt", this::doTest);
                }

                @TestMetadata("lambdaArgument.kt")
                public void testLambdaArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/lambdaArgument.kt", this::doTest);
                }

                @TestMetadata("leakedApproximatedType.kt")
                public void testLeakedApproximatedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/leakedApproximatedType.kt", this::doTest);
                }

                @TestMetadata("MLOut.kt")
                public void testMLOut() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/MLOut.kt", this::doTest);
                }

                @TestMetadata("multipleArgumentProjectedOut.kt")
                public void testMultipleArgumentProjectedOut() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/multipleArgumentProjectedOut.kt", this::doTest);
                }

                @TestMetadata("platformSuperClass.kt")
                public void testPlatformSuperClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/platformSuperClass.kt", this::doTest);
                }

                @TestMetadata("projectedOutConventions.kt")
                public void testProjectedOutConventions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/projectedOutConventions.kt", this::doTest);
                }

                @TestMetadata("projectedOutSmartCast.kt")
                public void testProjectedOutSmartCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/projectedOutSmartCast.kt", this::doTest);
                }

                @TestMetadata("recursiveUpperBoundStar.kt")
                public void testRecursiveUpperBoundStar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/recursiveUpperBoundStar.kt", this::doTest);
                }

                @TestMetadata("recursiveUpperBoundStarOut.kt")
                public void testRecursiveUpperBoundStarOut() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/recursiveUpperBoundStarOut.kt", this::doTest);
                }

                @TestMetadata("starNullability.kt")
                public void testStarNullability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/starNullability.kt", this::doTest);
                }

                @TestMetadata("starNullabilityRecursive.kt")
                public void testStarNullabilityRecursive() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/starNullabilityRecursive.kt", this::doTest);
                }

                @TestMetadata("superClass.kt")
                public void testSuperClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/superClass.kt", this::doTest);
                }

                @TestMetadata("typeMismatchConventions.kt")
                public void testTypeMismatchConventions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/typeMismatchConventions.kt", this::doTest);
                }

                @TestMetadata("typeMismatchInLambda.kt")
                public void testTypeMismatchInLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/typeMismatchInLambda.kt", this::doTest);
                }

                @TestMetadata("typeParameterBounds.kt")
                public void testTypeParameterBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/typeParameterBounds.kt", this::doTest);
                }

                @TestMetadata("unsafeVarianceStar.kt")
                public void testUnsafeVarianceStar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceStar.kt", this::doTest);
                }

                @TestMetadata("varargs.kt")
                public void testVarargs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/varargs.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/starProjections")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class StarProjections extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInStarProjections() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/starProjections"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("checkBounds.kt")
                public void testCheckBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/starProjections/checkBounds.kt", this::doTest);
                }

                @TestMetadata("collectionInheritedFromJava.kt")
                public void testCollectionInheritedFromJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/starProjections/collectionInheritedFromJava.kt", this::doTest);
                }

                @TestMetadata("inheritedFromJava.kt")
                public void testInheritedFromJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/starProjections/inheritedFromJava.kt", this::doTest);
                }

                @TestMetadata("inheritedFromKotlin.kt")
                public void testInheritedFromKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/starProjections/inheritedFromKotlin.kt", this::doTest);
                }

                @TestMetadata("invalid.kt")
                public void testInvalid() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/starProjections/invalid.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TpAsReified extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInTpAsReified() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/tpAsReified"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("CapturedAsReified.kt")
                public void testCapturedAsReified() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/CapturedAsReified.kt", this::doTest);
                }

                @TestMetadata("ClassDereference.kt")
                public void testClassDereference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/ClassDereference.kt", this::doTest);
                }

                @TestMetadata("Conventions.kt")
                public void testConventions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/Conventions.kt", this::doTest);
                }

                @TestMetadata("GenericAsReifiedArgument.kt")
                public void testGenericAsReifiedArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/GenericAsReifiedArgument.kt", this::doTest);
                }

                @TestMetadata("InConstructor.kt")
                public void testInConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InConstructor.kt", this::doTest);
                }

                @TestMetadata("InFunction.kt")
                public void testInFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InFunction.kt", this::doTest);
                }

                @TestMetadata("InProperty.kt")
                public void testInProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InProperty.kt", this::doTest);
                }

                @TestMetadata("InType.kt")
                public void testInType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InType.kt", this::doTest);
                }

                @TestMetadata("InlineableReified.kt")
                public void testInlineableReified() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InlineableReified.kt", this::doTest);
                }

                @TestMetadata("LocalFun.kt")
                public void testLocalFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/LocalFun.kt", this::doTest);
                }

                @TestMetadata("NotInlineableReified.kt")
                public void testNotInlineableReified() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/NotInlineableReified.kt", this::doTest);
                }

                @TestMetadata("ReifiedClass.kt")
                public void testReifiedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/ReifiedClass.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/varProjection")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class VarProjection extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInVarProjection() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/varProjection"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("setterNotProjectedOutAssign.kt")
                public void testSetterNotProjectedOutAssign() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterNotProjectedOutAssign.kt", this::doTest);
                }

                @TestMetadata("setterProjectedOutAssign.kt")
                public void testSetterProjectedOutAssign() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutAssign.kt", this::doTest);
                }

                @TestMetadata("setterProjectedOutNoPlusAssign.kt")
                public void testSetterProjectedOutNoPlusAssign() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutNoPlusAssign.kt", this::doTest);
                }

                @TestMetadata("setterProjectedOutPlusAssignDefined.kt")
                public void testSetterProjectedOutPlusAssignDefined() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutPlusAssignDefined.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/imports")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Imports extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInImports() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/imports"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AllUnderImportsAmbiguity.kt")
            public void testAllUnderImportsAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsAmbiguity.kt", this::doTest);
            }

            @TestMetadata("AllUnderImportsLessPriority.kt")
            public void testAllUnderImportsLessPriority() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsLessPriority.kt", this::doTest);
            }

            @TestMetadata("AllUnderImportsSamePriorityForFunction.kt")
            public void testAllUnderImportsSamePriorityForFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsSamePriorityForFunction.kt", this::doTest);
            }

            @TestMetadata("AllUnderImportsSamePriorityForProperty.kt")
            public void testAllUnderImportsSamePriorityForProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsSamePriorityForProperty.kt", this::doTest);
            }

            @TestMetadata("CheckJavaVisibility.kt")
            public void testCheckJavaVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/CheckJavaVisibility.kt", this::doTest);
            }

            @TestMetadata("CheckVisibility.kt")
            public void testCheckVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/CheckVisibility.kt", this::doTest);
            }

            @TestMetadata("ClassClash.kt")
            public void testClassClash() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ClassClash.kt", this::doTest);
            }

            @TestMetadata("ClassClashStarImport.kt")
            public void testClassClashStarImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ClassClashStarImport.kt", this::doTest);
            }

            @TestMetadata("ClassImportsConflicting.kt")
            public void testClassImportsConflicting() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ClassImportsConflicting.kt", this::doTest);
            }

            @TestMetadata("CurrentPackageAndAllUnderImport.kt")
            public void testCurrentPackageAndAllUnderImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/CurrentPackageAndAllUnderImport.kt", this::doTest);
            }

            @TestMetadata("CurrentPackageAndExplicitImport.kt")
            public void testCurrentPackageAndExplicitImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/CurrentPackageAndExplicitImport.kt", this::doTest);
            }

            @TestMetadata("DefaultImportsPriority.kt")
            public void testDefaultImportsPriority() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/DefaultImportsPriority.kt", this::doTest);
            }

            @TestMetadata("ExplicitImportsAmbiguity.kt")
            public void testExplicitImportsAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ExplicitImportsAmbiguity.kt", this::doTest);
            }

            @TestMetadata("ExplicitImportsUnambiguityForFunction.kt")
            public void testExplicitImportsUnambiguityForFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ExplicitImportsUnambiguityForFunction.kt", this::doTest);
            }

            @TestMetadata("ExplicitPackageImportsAmbiguity.kt")
            public void testExplicitPackageImportsAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ExplicitPackageImportsAmbiguity.kt", this::doTest);
            }

            @TestMetadata("ImportClassClash.kt")
            public void testImportClassClash() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportClassClash.kt", this::doTest);
            }

            @TestMetadata("ImportFromCompanionObject.kt")
            public void testImportFromCompanionObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportFromCompanionObject.kt", this::doTest);
            }

            @TestMetadata("ImportFromCurrentWithDifferentName.kt")
            public void testImportFromCurrentWithDifferentName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportFromCurrentWithDifferentName.kt", this::doTest);
            }

            @TestMetadata("ImportFromObject.kt")
            public void testImportFromObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportFromObject.kt", this::doTest);
            }

            @TestMetadata("ImportFromRootPackage.kt")
            public void testImportFromRootPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportFromRootPackage.kt", this::doTest);
            }

            @TestMetadata("importFunctionWithAllUnderImport.kt")
            public void testImportFunctionWithAllUnderImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/importFunctionWithAllUnderImport.kt", this::doTest);
            }

            @TestMetadata("importFunctionWithAllUnderImportAfterNamedImport.kt")
            public void testImportFunctionWithAllUnderImportAfterNamedImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/importFunctionWithAllUnderImportAfterNamedImport.kt", this::doTest);
            }

            @TestMetadata("ImportHidingDefinitionInTheSameFile.kt")
            public void testImportHidingDefinitionInTheSameFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportHidingDefinitionInTheSameFile.kt", this::doTest);
            }

            @TestMetadata("ImportNestedWithDifferentName.kt")
            public void testImportNestedWithDifferentName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportNestedWithDifferentName.kt", this::doTest);
            }

            @TestMetadata("ImportObjectAndUseAsSupertype.kt")
            public void testImportObjectAndUseAsSupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportObjectAndUseAsSupertype.kt", this::doTest);
            }

            @TestMetadata("ImportObjectHidesCurrentPackage.kt")
            public void testImportObjectHidesCurrentPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportObjectHidesCurrentPackage.kt", this::doTest);
            }

            @TestMetadata("ImportOverloadFunctions.kt")
            public void testImportOverloadFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportOverloadFunctions.kt", this::doTest);
            }

            @TestMetadata("ImportPrivateMember.kt")
            public void testImportPrivateMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportPrivateMember.kt", this::doTest);
            }

            @TestMetadata("ImportPrivateMemberFromOtherFile.kt")
            public void testImportPrivateMemberFromOtherFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportPrivateMemberFromOtherFile.kt", this::doTest);
            }

            @TestMetadata("ImportPrivateMembersWithStar.kt")
            public void testImportPrivateMembersWithStar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportPrivateMembersWithStar.kt", this::doTest);
            }

            @TestMetadata("ImportProtectedClass.kt")
            public void testImportProtectedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportProtectedClass.kt", this::doTest);
            }

            @TestMetadata("ImportResolutionOrder.kt")
            public void testImportResolutionOrder() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportResolutionOrder.kt", this::doTest);
            }

            @TestMetadata("ImportTwoTimes.kt")
            public void testImportTwoTimes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportTwoTimes.kt", this::doTest);
            }

            @TestMetadata("ImportTwoTimesStar.kt")
            public void testImportTwoTimesStar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportTwoTimesStar.kt", this::doTest);
            }

            @TestMetadata("Imports.kt")
            public void testImports() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/Imports.kt", this::doTest);
            }

            @TestMetadata("ImportsConflicting.kt")
            public void testImportsConflicting() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/ImportsConflicting.kt", this::doTest);
            }

            @TestMetadata("InaccessiblePrivateClass.kt")
            public void testInaccessiblePrivateClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/InaccessiblePrivateClass.kt", this::doTest);
            }

            @TestMetadata("JavaPackageLocalClassNotImported.kt")
            public void testJavaPackageLocalClassNotImported() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/JavaPackageLocalClassNotImported.kt", this::doTest);
            }

            @TestMetadata("kt13112.kt")
            public void testKt13112() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/kt13112.kt", this::doTest);
            }

            @TestMetadata("MalformedImports.kt")
            public void testMalformedImports() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/MalformedImports.kt", this::doTest);
            }

            @TestMetadata("NestedClassClash.kt")
            public void testNestedClassClash() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/NestedClassClash.kt", this::doTest);
            }

            @TestMetadata("OperatorRenameOnImport.kt")
            public void testOperatorRenameOnImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/OperatorRenameOnImport.kt", this::doTest);
            }

            @TestMetadata("PackageLocalClassNotImported.kt")
            public void testPackageLocalClassNotImported() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/PackageLocalClassNotImported.kt", this::doTest);
            }

            @TestMetadata("PackageLocalClassReferencedError.kt")
            public void testPackageLocalClassReferencedError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/PackageLocalClassReferencedError.kt", this::doTest);
            }

            @TestMetadata("PackageVsClass.kt")
            public void testPackageVsClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/PackageVsClass.kt", this::doTest);
            }

            @TestMetadata("PrivateClassNotImported.kt")
            public void testPrivateClassNotImported() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/PrivateClassNotImported.kt", this::doTest);
            }

            @TestMetadata("PrivateClassReferencedError.kt")
            public void testPrivateClassReferencedError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/PrivateClassReferencedError.kt", this::doTest);
            }

            @TestMetadata("propertyClassFileDependencyRecursion.kt")
            public void testPropertyClassFileDependencyRecursion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/propertyClassFileDependencyRecursion.kt", this::doTest);
            }

            @TestMetadata("RenameOnImport.kt")
            public void testRenameOnImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/RenameOnImport.kt", this::doTest);
            }

            @TestMetadata("StarImportFromObject.kt")
            public void testStarImportFromObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/StarImportFromObject.kt", this::doTest);
            }

            @TestMetadata("SyntaxError.kt")
            public void testSyntaxError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/SyntaxError.kt", this::doTest);
            }

            @TestMetadata("TopLevelClassVsPackage.kt")
            public void testTopLevelClassVsPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/TopLevelClassVsPackage.kt", this::doTest);
            }

            @TestMetadata("WrongImport.kt")
            public void testWrongImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/imports/WrongImport.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IncompleteCode extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInIncompleteCode() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/incompleteCode"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("arrayBracketsRange.kt")
            public void testArrayBracketsRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/arrayBracketsRange.kt", this::doTest);
            }

            @TestMetadata("checkNothingIsSubtype.kt")
            public void testCheckNothingIsSubtype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/checkNothingIsSubtype.kt", this::doTest);
            }

            @TestMetadata("controlStructuresErrors.kt")
            public void testControlStructuresErrors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/controlStructuresErrors.kt", this::doTest);
            }

            @TestMetadata("illegalSelectorCallableReference.kt")
            public void testIllegalSelectorCallableReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/illegalSelectorCallableReference.kt", this::doTest);
            }

            @TestMetadata("inExpr.kt")
            public void testInExpr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/inExpr.kt", this::doTest);
            }

            @TestMetadata("incompleteAssignment.kt")
            public void testIncompleteAssignment() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteAssignment.kt", this::doTest);
            }

            @TestMetadata("incompleteEquals.kt")
            public void testIncompleteEquals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteEquals.kt", this::doTest);
            }

            @TestMetadata("kt1955.kt")
            public void testKt1955() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/kt1955.kt", this::doTest);
            }

            @TestMetadata("kt2014.kt")
            public void testKt2014() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/kt2014.kt", this::doTest);
            }

            @TestMetadata("kt4866UnresolvedArrayAccess.kt")
            public void testKt4866UnresolvedArrayAccess() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/kt4866UnresolvedArrayAccess.kt", this::doTest);
            }

            @TestMetadata("NoSenselessComparisonForErrorType.kt")
            public void testNoSenselessComparisonForErrorType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/NoSenselessComparisonForErrorType.kt", this::doTest);
            }

            @TestMetadata("plusOnTheRight.kt")
            public void testPlusOnTheRight() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/plusOnTheRight.kt", this::doTest);
            }

            @TestMetadata("pseudocodeTraverseNextInstructions.kt")
            public void testPseudocodeTraverseNextInstructions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/pseudocodeTraverseNextInstructions.kt", this::doTest);
            }

            @TestMetadata("senselessComparisonWithNull.kt")
            public void testSenselessComparisonWithNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/senselessComparisonWithNull.kt", this::doTest);
            }

            @TestMetadata("SupertypeOfErrorType.kt")
            public void testSupertypeOfErrorType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/SupertypeOfErrorType.kt", this::doTest);
            }

            @TestMetadata("typeParameterOnLhsOfDot.kt")
            public void testTypeParameterOnLhsOfDot() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/typeParameterOnLhsOfDot.kt", this::doTest);
            }

            @TestMetadata("unresolvedArguments.kt")
            public void testUnresolvedArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/unresolvedArguments.kt", this::doTest);
            }

            @TestMetadata("unresolvedOperation.kt")
            public void testUnresolvedOperation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/unresolvedOperation.kt", this::doTest);
            }

            @TestMetadata("variableDeclarationInSelector.kt")
            public void testVariableDeclarationInSelector() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/variableDeclarationInSelector.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DiagnosticWithSyntaxError extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDiagnosticWithSyntaxError() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("arrayExpression.kt")
                public void testArrayExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/arrayExpression.kt", this::doTest);
                }

                @TestMetadata("checkBackingFieldException.kt")
                public void testCheckBackingFieldException() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/checkBackingFieldException.kt", this::doTest);
                }

                @TestMetadata("completeFunctionArgumentsOfNestedCalls.kt")
                public void testCompleteFunctionArgumentsOfNestedCalls() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/completeFunctionArgumentsOfNestedCalls.kt", this::doTest);
                }

                @TestMetadata("declarationAfterDotSelectorExpected.kt")
                public void testDeclarationAfterDotSelectorExpected() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/declarationAfterDotSelectorExpected.kt", this::doTest);
                }

                @TestMetadata("declarationAfterIncompleteElvis.kt")
                public void testDeclarationAfterIncompleteElvis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/declarationAfterIncompleteElvis.kt", this::doTest);
                }

                @TestMetadata("funEquals.kt")
                public void testFunEquals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funEquals.kt", this::doTest);
                }

                @TestMetadata("funKeyword.kt")
                public void testFunKeyword() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funKeyword.kt", this::doTest);
                }

                @TestMetadata("funcitonTypes.kt")
                public void testFuncitonTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funcitonTypes.kt", this::doTest);
                }

                @TestMetadata("incompleteEnumReference.kt")
                public void testIncompleteEnumReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteEnumReference.kt", this::doTest);
                }

                @TestMetadata("incompleteVal.kt")
                public void testIncompleteVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteVal.kt", this::doTest);
                }

                @TestMetadata("incompleteValWithAccessor.kt")
                public void testIncompleteValWithAccessor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteValWithAccessor.kt", this::doTest);
                }

                @TestMetadata("incompleteWhen.kt")
                public void testIncompleteWhen() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteWhen.kt", this::doTest);
                }

                @TestMetadata("namedFun.kt")
                public void testNamedFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/namedFun.kt", this::doTest);
                }

                @TestMetadata("noTypeParamsInReturnType.kt")
                public void testNoTypeParamsInReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/noTypeParamsInReturnType.kt", this::doTest);
                }

                @TestMetadata("typeReferenceError.kt")
                public void testTypeReferenceError() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/typeReferenceError.kt", this::doTest);
                }

                @TestMetadata("valNoName.kt")
                public void testValNoName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valNoName.kt", this::doTest);
                }

                @TestMetadata("valWithNoNameBeforeNextDeclarationWithModifiers.kt")
                public void testValWithNoNameBeforeNextDeclarationWithModifiers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valWithNoNameBeforeNextDeclarationWithModifiers.kt", this::doTest);
                }

                @TestMetadata("valWithNoNameInBlock.kt")
                public void testValWithNoNameInBlock() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valWithNoNameInBlock.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/inference")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inference extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInInference() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("cannotCompleteResolveAmbiguity.kt")
            public void testCannotCompleteResolveAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveAmbiguity.kt", this::doTest);
            }

            @TestMetadata("cannotCompleteResolveFunctionLiteralsNoUse.kt")
            public void testCannotCompleteResolveFunctionLiteralsNoUse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveFunctionLiteralsNoUse.kt", this::doTest);
            }

            @TestMetadata("cannotCompleteResolveNoInfoForParameter.kt")
            public void testCannotCompleteResolveNoInfoForParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoInfoForParameter.kt", this::doTest);
            }

            @TestMetadata("cannotCompleteResolveNoneApplicable.kt")
            public void testCannotCompleteResolveNoneApplicable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoneApplicable.kt", this::doTest);
            }

            @TestMetadata("cannotCompleteResolveWithFunctionLiterals.kt")
            public void testCannotCompleteResolveWithFunctionLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveWithFunctionLiterals.kt", this::doTest);
            }

            @TestMetadata("completeInferenceIfManyFailed.kt")
            public void testCompleteInferenceIfManyFailed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/completeInferenceIfManyFailed.kt", this::doTest);
            }

            @TestMetadata("conflictingSubstitutions.kt")
            public void testConflictingSubstitutions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/conflictingSubstitutions.kt", this::doTest);
            }

            @TestMetadata("dependOnExpectedType.kt")
            public void testDependOnExpectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/dependOnExpectedType.kt", this::doTest);
            }

            @TestMetadata("dependantOnVariance.kt")
            public void testDependantOnVariance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/dependantOnVariance.kt", this::doTest);
            }

            @TestMetadata("dependantOnVarianceNullable.kt")
            public void testDependantOnVarianceNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/dependantOnVarianceNullable.kt", this::doTest);
            }

            @TestMetadata("expectedTypeAdditionalTest.kt")
            public void testExpectedTypeAdditionalTest() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/expectedTypeAdditionalTest.kt", this::doTest);
            }

            @TestMetadata("expectedTypeDoubleReceiver.kt")
            public void testExpectedTypeDoubleReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/expectedTypeDoubleReceiver.kt", this::doTest);
            }

            @TestMetadata("expectedTypeFromCast.kt")
            public void testExpectedTypeFromCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/expectedTypeFromCast.kt", this::doTest);
            }

            @TestMetadata("expectedTypeFromCastComplexExpression.kt")
            public void testExpectedTypeFromCastComplexExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/expectedTypeFromCastComplexExpression.kt", this::doTest);
            }

            @TestMetadata("expectedTypeFromCastParenthesized.kt")
            public void testExpectedTypeFromCastParenthesized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/expectedTypeFromCastParenthesized.kt", this::doTest);
            }

            @TestMetadata("expectedTypeWithGenerics.kt")
            public void testExpectedTypeWithGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/expectedTypeWithGenerics.kt", this::doTest);
            }

            @TestMetadata("findViewById.kt")
            public void testFindViewById() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/findViewById.kt", this::doTest);
            }

            @TestMetadata("fixVariableToNothing.kt")
            public void testFixVariableToNothing() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/fixVariableToNothing.kt", this::doTest);
            }

            @TestMetadata("fixationOrderForProperConstraints.kt")
            public void testFixationOrderForProperConstraints() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/fixationOrderForProperConstraints.kt", this::doTest);
            }

            @TestMetadata("flexibleTypesAsUpperBound.kt")
            public void testFlexibleTypesAsUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/flexibleTypesAsUpperBound.kt", this::doTest);
            }

            @TestMetadata("functionPlaceholderError.kt")
            public void testFunctionPlaceholderError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/functionPlaceholderError.kt", this::doTest);
            }

            @TestMetadata("hasErrorInConstrainingTypes.kt")
            public void testHasErrorInConstrainingTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/hasErrorInConstrainingTypes.kt", this::doTest);
            }

            @TestMetadata("immutableArrayList.kt")
            public void testImmutableArrayList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/immutableArrayList.kt", this::doTest);
            }

            @TestMetadata("implicitInvokeExtensionWithFunctionalArgument.kt")
            public void testImplicitInvokeExtensionWithFunctionalArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/implicitInvokeExtensionWithFunctionalArgument.kt", this::doTest);
            }

            @TestMetadata("implicitInvokeInCompanionObjectWithFunctionalArgument.kt")
            public void testImplicitInvokeInCompanionObjectWithFunctionalArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/implicitInvokeInCompanionObjectWithFunctionalArgument.kt", this::doTest);
            }

            @TestMetadata("implicitInvokeInObjectWithFunctionalArgument.kt")
            public void testImplicitInvokeInObjectWithFunctionalArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/implicitInvokeInObjectWithFunctionalArgument.kt", this::doTest);
            }

            @TestMetadata("implicitInvokeWithFunctionLiteralArgument.kt")
            public void testImplicitInvokeWithFunctionLiteralArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/implicitInvokeWithFunctionLiteralArgument.kt", this::doTest);
            }

            @TestMetadata("inferInFunctionLiterals.kt")
            public void testInferInFunctionLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/inferInFunctionLiterals.kt", this::doTest);
            }

            @TestMetadata("inferInFunctionLiteralsWithReturn.kt")
            public void testInferInFunctionLiteralsWithReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/inferInFunctionLiteralsWithReturn.kt", this::doTest);
            }

            @TestMetadata("intersectionTypeMultipleBoundsAsReceiver.kt")
            public void testIntersectionTypeMultipleBoundsAsReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/intersectionTypeMultipleBoundsAsReceiver.kt", this::doTest);
            }

            @TestMetadata("invokeLambdaAsFunction.kt")
            public void testInvokeLambdaAsFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/invokeLambdaAsFunction.kt", this::doTest);
            }

            @TestMetadata("kt11963.kt")
            public void testKt11963() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/kt11963.kt", this::doTest);
            }

            @TestMetadata("kt12399.kt")
            public void testKt12399() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/kt12399.kt", this::doTest);
            }

            @TestMetadata("kt1293.kt")
            public void testKt1293() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/kt1293.kt", this::doTest);
            }

            @TestMetadata("kt3184.kt")
            public void testKt3184() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/kt3184.kt", this::doTest);
            }

            @TestMetadata("kt6175.kt")
            public void testKt6175() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/kt6175.kt", this::doTest);
            }

            @TestMetadata("kt619.kt")
            public void testKt619() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/kt619.kt", this::doTest);
            }

            @TestMetadata("lambdaInValInitializerWithAnonymousFunctions.kt")
            public void testLambdaInValInitializerWithAnonymousFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/lambdaInValInitializerWithAnonymousFunctions.kt", this::doTest);
            }

            @TestMetadata("listConstructor.kt")
            public void testListConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/listConstructor.kt", this::doTest);
            }

            @TestMetadata("mapFunction.kt")
            public void testMapFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/mapFunction.kt", this::doTest);
            }

            @TestMetadata("mostSpecificAfterInference.kt")
            public void testMostSpecificAfterInference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/mostSpecificAfterInference.kt", this::doTest);
            }

            @TestMetadata("NoInferenceFromDeclaredBounds.kt")
            public void testNoInferenceFromDeclaredBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/NoInferenceFromDeclaredBounds.kt", this::doTest);
            }

            @TestMetadata("noInformationForParameter.kt")
            public void testNoInformationForParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/noInformationForParameter.kt", this::doTest);
            }

            @TestMetadata("nullableTypeArgumentWithNotNullUpperBound.kt")
            public void testNullableTypeArgumentWithNotNullUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nullableTypeArgumentWithNotNullUpperBound.kt", this::doTest);
            }

            @TestMetadata("nullableUpperBound.kt")
            public void testNullableUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nullableUpperBound.kt", this::doTest);
            }

            @TestMetadata("opposite.kt")
            public void testOpposite() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/opposite.kt", this::doTest);
            }

            @TestMetadata("possibleCycleOnConstraints.kt")
            public void testPossibleCycleOnConstraints() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/possibleCycleOnConstraints.kt", this::doTest);
            }

            @TestMetadata("reportAboutUnresolvedReferenceAsUnresolved.kt")
            public void testReportAboutUnresolvedReferenceAsUnresolved() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportAboutUnresolvedReferenceAsUnresolved.kt", this::doTest);
            }

            @TestMetadata("tryNumberLowerBoundsBeforeUpperBounds.kt")
            public void testTryNumberLowerBoundsBeforeUpperBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/tryNumberLowerBoundsBeforeUpperBounds.kt", this::doTest);
            }

            @TestMetadata("typeConstructorMismatch.kt")
            public void testTypeConstructorMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/typeConstructorMismatch.kt", this::doTest);
            }

            @TestMetadata("typeInferenceExpectedTypeMismatch.kt")
            public void testTypeInferenceExpectedTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/typeInferenceExpectedTypeMismatch.kt", this::doTest);
            }

            @TestMetadata("useFunctionLiteralsToInferType.kt")
            public void testUseFunctionLiteralsToInferType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/useFunctionLiteralsToInferType.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CapturedTypes extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCapturedTypes() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/capturedTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("approximateBeforeFixation.kt")
                public void testApproximateBeforeFixation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/approximateBeforeFixation.kt", this::doTest);
                }

                @TestMetadata("cannotCaptureInProjection.kt")
                public void testCannotCaptureInProjection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/cannotCaptureInProjection.kt", this::doTest);
                }

                @TestMetadata("captureForNullableTypes.kt")
                public void testCaptureForNullableTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureForNullableTypes.kt", this::doTest);
                }

                @TestMetadata("captureForPlatformTypes.kt")
                public void testCaptureForPlatformTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureForPlatformTypes.kt", this::doTest);
                }

                @TestMetadata("captureFromNullableTypeVariable.kt")
                public void testCaptureFromNullableTypeVariable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromNullableTypeVariable.kt", this::doTest);
                }

                @TestMetadata("captureFromSubtyping.kt")
                public void testCaptureFromSubtyping() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromSubtyping.kt", this::doTest);
                }

                @TestMetadata("captureFromTypeParameterUpperBound.kt")
                public void testCaptureFromTypeParameterUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromTypeParameterUpperBound.kt", this::doTest);
                }

                @TestMetadata("captureTypeOnlyOnTopLevel.kt")
                public void testCaptureTypeOnlyOnTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureTypeOnlyOnTopLevel.kt", this::doTest);
                }

                @TestMetadata("capturedType.kt")
                public void testCapturedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedType.kt", this::doTest);
                }

                @TestMetadata("capturedTypeAndApproximation.kt")
                public void testCapturedTypeAndApproximation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeAndApproximation.kt", this::doTest);
                }

                @TestMetadata("capturedTypeSubstitutedIntoOppositeProjection.kt")
                public void testCapturedTypeSubstitutedIntoOppositeProjection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeSubstitutedIntoOppositeProjection.kt", this::doTest);
                }

                @TestMetadata("capturedTypeWithTypeVariableSubtyping.kt")
                public void testCapturedTypeWithTypeVariableSubtyping() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeWithTypeVariableSubtyping.kt", this::doTest);
                }

                @TestMetadata("expectedTypeMismatchWithInVariance.kt")
                public void testExpectedTypeMismatchWithInVariance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/expectedTypeMismatchWithInVariance.kt", this::doTest);
                }

                @TestMetadata("kt2570.kt")
                public void testKt2570() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt2570.kt", this::doTest);
                }

                @TestMetadata("kt2872.kt")
                public void testKt2872() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt2872.kt", this::doTest);
                }

                @TestMetadata("memberScopeOfCaptured.kt")
                public void testMemberScopeOfCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/memberScopeOfCaptured.kt", this::doTest);
                }

                @TestMetadata("noCaptureTypeErrorForNonTopLevel.kt")
                public void testNoCaptureTypeErrorForNonTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/noCaptureTypeErrorForNonTopLevel.kt", this::doTest);
                }

                @TestMetadata("notApproximateWhenCopyDescriptors.kt")
                public void testNotApproximateWhenCopyDescriptors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/notApproximateWhenCopyDescriptors.kt", this::doTest);
                }

                @TestMetadata("overApproximationForInCaptured.kt")
                public void testOverApproximationForInCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/overApproximationForInCaptured.kt", this::doTest);
                }

                @TestMetadata("overApproximationForOutCaptured.kt")
                public void testOverApproximationForOutCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/overApproximationForOutCaptured.kt", this::doTest);
                }

                @TestMetadata("starProjectionRegression.kt")
                public void testStarProjectionRegression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/starProjectionRegression.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/coercionToUnit")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CoercionToUnit extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCoercionToUnit() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/coercionToUnit"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("coercionWithExpectedType.kt")
                public void testCoercionWithExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithExpectedType.kt", this::doTest);
                }

                @TestMetadata("coercionWithExpectedTypeAndBound.kt")
                public void testCoercionWithExpectedTypeAndBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithExpectedTypeAndBound.kt", this::doTest);
                }

                @TestMetadata("coercionWithoutExpectedType.kt")
                public void testCoercionWithoutExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithoutExpectedType.kt", this::doTest);
                }

                @TestMetadata("indirectCoercionWithExpectedType.kt")
                public void testIndirectCoercionWithExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/indirectCoercionWithExpectedType.kt", this::doTest);
                }

                @TestMetadata("noCoercion.kt")
                public void testNoCoercion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/noCoercion.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/commonSystem")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CommonSystem extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCommonSystem() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/commonSystem"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("boundOnNullableVariable.kt")
                public void testBoundOnNullableVariable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/commonSystem/boundOnNullableVariable.kt", this::doTest);
                }

                @TestMetadata("dontCaptureTypeVariable.kt")
                public void testDontCaptureTypeVariable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/commonSystem/dontCaptureTypeVariable.kt", this::doTest);
                }

                @TestMetadata("fixVariablesInRightOrder.kt")
                public void testFixVariablesInRightOrder() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/commonSystem/fixVariablesInRightOrder.kt", this::doTest);
                }

                @TestMetadata("genericCandidateInGenericClass.kt")
                public void testGenericCandidateInGenericClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/commonSystem/genericCandidateInGenericClass.kt", this::doTest);
                }

                @TestMetadata("inferenceWithUpperBoundsInLambda.kt")
                public void testInferenceWithUpperBoundsInLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/commonSystem/inferenceWithUpperBoundsInLambda.kt", this::doTest);
                }

                @TestMetadata("kt3372toCollection.kt")
                public void testKt3372toCollection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt3372toCollection.kt", this::doTest);
                }

                @TestMetadata("nestedLambdas.kt")
                public void testNestedLambdas() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/commonSystem/nestedLambdas.kt", this::doTest);
                }

                @TestMetadata("theSameFunctionInArgs.kt")
                public void testTheSameFunctionInArgs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/commonSystem/theSameFunctionInArgs.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/constraints")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Constraints extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInConstraints() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/constraints"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("constraintOnFunctionLiteral.kt")
                public void testConstraintOnFunctionLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/constraintOnFunctionLiteral.kt", this::doTest);
                }

                @TestMetadata("equalityConstraintOnNullableType.kt")
                public void testEqualityConstraintOnNullableType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/equalityConstraintOnNullableType.kt", this::doTest);
                }

                @TestMetadata("ignoreConstraintFromImplicitInNothing.kt")
                public void testIgnoreConstraintFromImplicitInNothing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/ignoreConstraintFromImplicitInNothing.kt", this::doTest);
                }

                @TestMetadata("kt6320.kt")
                public void testKt6320() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/kt6320.kt", this::doTest);
                }

                @TestMetadata("kt7351ConstraintFromUnitExpectedType.kt")
                public void testKt7351ConstraintFromUnitExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/kt7351ConstraintFromUnitExpectedType.kt", this::doTest);
                }

                @TestMetadata("kt7433.kt")
                public void testKt7433() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/kt7433.kt", this::doTest);
                }

                @TestMetadata("kt8879.kt")
                public void testKt8879() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/kt8879.kt", this::doTest);
                }

                @TestMetadata("notNullConstraintOnNullableType.kt")
                public void testNotNullConstraintOnNullableType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/notNullConstraintOnNullableType.kt", this::doTest);
                }

                @TestMetadata("operationsOnIntegerValueTypes.kt")
                public void testOperationsOnIntegerValueTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/operationsOnIntegerValueTypes.kt", this::doTest);
                }

                @TestMetadata("returnLambdaFromLambda.kt")
                public void testReturnLambdaFromLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/returnLambdaFromLambda.kt", this::doTest);
                }

                @TestMetadata("subtypeConstraintOnNullableType.kt")
                public void testSubtypeConstraintOnNullableType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/subtypeConstraintOnNullableType.kt", this::doTest);
                }

                @TestMetadata("supertypeConstraintOnNullableType.kt")
                public void testSupertypeConstraintOnNullableType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/constraints/supertypeConstraintOnNullableType.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NestedCalls extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNestedCalls() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/nestedCalls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("arrayAccess.kt")
                public void testArrayAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/arrayAccess.kt", this::doTest);
                }

                @TestMetadata("binaryExpressions.kt")
                public void testBinaryExpressions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/binaryExpressions.kt", this::doTest);
                }

                @TestMetadata("checkTypesForQualifiedProperties.kt")
                public void testCheckTypesForQualifiedProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/checkTypesForQualifiedProperties.kt", this::doTest);
                }

                @TestMetadata("completeNestedCallsForArraySetExpression.kt")
                public void testCompleteNestedCallsForArraySetExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsForArraySetExpression.kt", this::doTest);
                }

                @TestMetadata("completeNestedCallsInference.kt")
                public void testCompleteNestedCallsInference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsInference.kt", this::doTest);
                }

                @TestMetadata("completeNestedForVariableAsFunctionCall.kt")
                public void testCompleteNestedForVariableAsFunctionCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedForVariableAsFunctionCall.kt", this::doTest);
                }

                @TestMetadata("externalTypeParameter.kt")
                public void testExternalTypeParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/externalTypeParameter.kt", this::doTest);
                }

                @TestMetadata("inferenceForNestedBinaryCall.kt")
                public void testInferenceForNestedBinaryCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/inferenceForNestedBinaryCall.kt", this::doTest);
                }

                @TestMetadata("kt3395.kt")
                public void testKt3395() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3395.kt", this::doTest);
                }

                @TestMetadata("kt3461checkTypes.kt")
                public void testKt3461checkTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3461checkTypes.kt", this::doTest);
                }

                @TestMetadata("makeNullableIfSafeCall.kt")
                public void testMakeNullableIfSafeCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/makeNullableIfSafeCall.kt", this::doTest);
                }

                @TestMetadata("nontrivialCallExpression.kt")
                public void testNontrivialCallExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/nontrivialCallExpression.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class RecursiveLocalFuns extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInRecursiveLocalFuns() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("localFactorial.kt")
                public void testLocalFactorial() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/localFactorial.kt", this::doTest);
                }

                @TestMetadata("recursiveFun.kt")
                public void testRecursiveFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/recursiveFun.kt", this::doTest);
                }

                @TestMetadata("recursiveLambda.kt")
                public void testRecursiveLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/recursiveLambda.kt", this::doTest);
                }

                @TestMetadata("selfCall.kt")
                public void testSelfCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/selfCall.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/regressions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Regressions extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInRegressions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/regressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("compareBy.kt")
                public void testCompareBy() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/compareBy.kt", this::doTest);
                }

                @TestMetadata("kt1029.kt")
                public void testKt1029() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1029.kt", this::doTest);
                }

                @TestMetadata("kt1031.kt")
                public void testKt1031() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1031.kt", this::doTest);
                }

                @TestMetadata("kt1127.kt")
                public void testKt1127() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1127.kt", this::doTest);
                }

                @TestMetadata("kt1145.kt")
                public void testKt1145() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1145.kt", this::doTest);
                }

                @TestMetadata("kt1358.kt")
                public void testKt1358() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1358.kt", this::doTest);
                }

                @TestMetadata("kt1410.kt")
                public void testKt1410() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1410.kt", this::doTest);
                }

                @TestMetadata("kt1718.kt")
                public void testKt1718() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1718.kt", this::doTest);
                }

                @TestMetadata("kt1944.kt")
                public void testKt1944() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1944.kt", this::doTest);
                }

                @TestMetadata("kt2057.kt")
                public void testKt2057() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2057.kt", this::doTest);
                }

                @TestMetadata("kt2179.kt")
                public void testKt2179() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2179.kt", this::doTest);
                }

                @TestMetadata("kt2200.kt")
                public void testKt2200() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2200.kt", this::doTest);
                }

                @TestMetadata("kt2283.kt")
                public void testKt2283() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2283.kt", this::doTest);
                }

                @TestMetadata("kt2286.kt")
                public void testKt2286() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2286.kt", this::doTest);
                }

                @TestMetadata("kt2294.kt")
                public void testKt2294() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2294.kt", this::doTest);
                }

                @TestMetadata("kt2320.kt")
                public void testKt2320() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2320.kt", this::doTest);
                }

                @TestMetadata("kt2324.kt")
                public void testKt2324() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2324.kt", this::doTest);
                }

                @TestMetadata("kt2407.kt")
                public void testKt2407() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2407.kt", this::doTest);
                }

                @TestMetadata("kt2445.kt")
                public void testKt2445() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2445.kt", this::doTest);
                }

                @TestMetadata("kt2459.kt")
                public void testKt2459() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2459.kt", this::doTest);
                }

                @TestMetadata("kt2484.kt")
                public void testKt2484() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2484.kt", this::doTest);
                }

                @TestMetadata("kt2505.kt")
                public void testKt2505() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2505.kt", this::doTest);
                }

                @TestMetadata("kt2514.kt")
                public void testKt2514() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2514.kt", this::doTest);
                }

                @TestMetadata("kt2588.kt")
                public void testKt2588() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2588.kt", this::doTest);
                }

                @TestMetadata("kt2741.kt")
                public void testKt2741() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2741.kt", this::doTest);
                }

                @TestMetadata("kt2754.kt")
                public void testKt2754() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2754.kt", this::doTest);
                }

                @TestMetadata("kt2838.kt")
                public void testKt2838() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2838.kt", this::doTest);
                }

                @TestMetadata("kt2841.kt")
                public void testKt2841() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841.kt", this::doTest);
                }

                @TestMetadata("kt2841_it.kt")
                public void testKt2841_it() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_it.kt", this::doTest);
                }

                @TestMetadata("kt2841_it_this.kt")
                public void testKt2841_it_this() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_it_this.kt", this::doTest);
                }

                @TestMetadata("kt2841_this.kt")
                public void testKt2841_this() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_this.kt", this::doTest);
                }

                @TestMetadata("kt2842.kt")
                public void testKt2842() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2842.kt", this::doTest);
                }

                @TestMetadata("kt2883.kt")
                public void testKt2883() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2883.kt", this::doTest);
                }

                @TestMetadata("kt3007.kt")
                public void testKt3007() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3007.kt", this::doTest);
                }

                @TestMetadata("kt3038.kt")
                public void testKt3038() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3038.kt", this::doTest);
                }

                @TestMetadata("kt3150.kt")
                public void testKt3150() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3150.kt", this::doTest);
                }

                @TestMetadata("kt3174.kt")
                public void testKt3174() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3174.kt", this::doTest);
                }

                @TestMetadata("kt3301.kt")
                public void testKt3301() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3301.kt", this::doTest);
                }

                @TestMetadata("kt3344.kt")
                public void testKt3344() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3344.kt", this::doTest);
                }

                @TestMetadata("kt3496.kt")
                public void testKt3496() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3496.kt", this::doTest);
                }

                @TestMetadata("kt3496_2.kt")
                public void testKt3496_2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3496_2.kt", this::doTest);
                }

                @TestMetadata("kt3559.kt")
                public void testKt3559() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3559.kt", this::doTest);
                }

                @TestMetadata("kt4420.kt")
                public void testKt4420() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt4420.kt", this::doTest);
                }

                @TestMetadata("kt702.kt")
                public void testKt702() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt702.kt", this::doTest);
                }

                @TestMetadata("kt731.kt")
                public void testKt731() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt731.kt", this::doTest);
                }

                @TestMetadata("kt742.kt")
                public void testKt742() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt742.kt", this::doTest);
                }

                @TestMetadata("kt8132.kt")
                public void testKt8132() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt8132.kt", this::doTest);
                }

                @TestMetadata("kt832.kt")
                public void testKt832() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt832.kt", this::doTest);
                }

                @TestMetadata("kt943.kt")
                public void testKt943() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt943.kt", this::doTest);
                }

                @TestMetadata("kt9461.kt")
                public void testKt9461() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt9461.kt", this::doTest);
                }

                @TestMetadata("kt948.kt")
                public void testKt948() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/kt948.kt", this::doTest);
                }

                @TestMetadata("noRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor.kt")
                public void testNoRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/regressions/noRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ReportingImprovements extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInReportingImprovements() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/reportingImprovements"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("cannotInferParameterTypeWithInference.kt")
                public void testCannotInferParameterTypeWithInference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/cannotInferParameterTypeWithInference.kt", this::doTest);
                }

                @TestMetadata("ErrorTypeAsGenericParameter.kt")
                public void testErrorTypeAsGenericParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/ErrorTypeAsGenericParameter.kt", this::doTest);
                }

                @TestMetadata("FunctionPlaceholder.kt")
                public void testFunctionPlaceholder() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/FunctionPlaceholder.kt", this::doTest);
                }

                @TestMetadata("NoAmbiguityForDifferentFunctionTypes.kt")
                public void testNoAmbiguityForDifferentFunctionTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/NoAmbiguityForDifferentFunctionTypes.kt", this::doTest);
                }

                @TestMetadata("reportUnresolvedReferenceWrongReceiverForManyCandidates.kt")
                public void testReportUnresolvedReferenceWrongReceiverForManyCandidates() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/reportUnresolvedReferenceWrongReceiverForManyCandidates.kt", this::doTest);
                }

                @TestMetadata("subtypeForInvariantWithErrorGenerics.kt")
                public void testSubtypeForInvariantWithErrorGenerics() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/subtypeForInvariantWithErrorGenerics.kt", this::doTest);
                }

                @TestMetadata("typeInferenceFailedOnComponentN.kt")
                public void testTypeInferenceFailedOnComponentN() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/typeInferenceFailedOnComponentN.kt", this::doTest);
                }

                @TestMetadata("typeInferenceFailedOnIteratorCall.kt")
                public void testTypeInferenceFailedOnIteratorCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/typeInferenceFailedOnIteratorCall.kt", this::doTest);
                }

                @TestMetadata("wrongArgumentExtensionFunction.kt")
                public void testWrongArgumentExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/wrongArgumentExtensionFunction.kt", this::doTest);
                }

                @TestMetadata("wrongArgumentPassedToLocalExtensionFunction.kt")
                public void testWrongArgumentPassedToLocalExtensionFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/wrongArgumentPassedToLocalExtensionFunction.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/substitutions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Substitutions extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSubstitutions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/substitutions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("delegationAndInference.kt")
                public void testDelegationAndInference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/substitutions/delegationAndInference.kt", this::doTest);
                }

                @TestMetadata("kt6081SubstituteIntoClassCorrectly.kt")
                public void testKt6081SubstituteIntoClassCorrectly() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/substitutions/kt6081SubstituteIntoClassCorrectly.kt", this::doTest);
                }

                @TestMetadata("simpleSubstitutionCheckTypeArgumentsNotTypeParameters.kt")
                public void testSimpleSubstitutionCheckTypeArgumentsNotTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/substitutions/simpleSubstitutionCheckTypeArgumentsNotTypeParameters.kt", this::doTest);
                }

                @TestMetadata("substitutionIntoAnonymousClass.kt")
                public void testSubstitutionIntoAnonymousClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/substitutions/substitutionIntoAnonymousClass.kt", this::doTest);
                }

                @TestMetadata("substitutionIntoInnerClass.kt")
                public void testSubstitutionIntoInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/substitutions/substitutionIntoInnerClass.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/upperBounds")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class UpperBounds extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInUpperBounds() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/upperBounds"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("conflictingSubstitutionsFromUpperBound.kt")
                public void testConflictingSubstitutionsFromUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/upperBounds/conflictingSubstitutionsFromUpperBound.kt", this::doTest);
                }

                @TestMetadata("doNotInferFromBoundsOnly.kt")
                public void testDoNotInferFromBoundsOnly() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/upperBounds/doNotInferFromBoundsOnly.kt", this::doTest);
                }

                @TestMetadata("intersectUpperBounds.kt")
                public void testIntersectUpperBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/upperBounds/intersectUpperBounds.kt", this::doTest);
                }

                @TestMetadata("kt2856.kt")
                public void testKt2856() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/upperBounds/kt2856.kt", this::doTest);
                }

                @TestMetadata("nonNullUpperBound.kt")
                public void testNonNullUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/upperBounds/nonNullUpperBound.kt", this::doTest);
                }

                @TestMetadata("useBoundsIfUnknownParameters.kt")
                public void testUseBoundsIfUnknownParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsIfUnknownParameters.kt", this::doTest);
                }

                @TestMetadata("useBoundsToInferTypeParamsSimple.kt")
                public void testUseBoundsToInferTypeParamsSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsToInferTypeParamsSimple.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/infos")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Infos extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInInfos() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/infos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("PropertiesWithBackingFields.kt")
            public void testPropertiesWithBackingFields() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/infos/PropertiesWithBackingFields.kt", this::doTest);
            }

            @TestMetadata("SmartCasts.kt")
            public void testSmartCasts() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/infos/SmartCasts.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/inline")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inline extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInInline() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("anonymousObjects.kt")
            public void testAnonymousObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/anonymousObjects.kt", this::doTest);
            }

            @TestMetadata("assignment.kt")
            public void testAssignment() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/assignment.kt", this::doTest);
            }

            @TestMetadata("capture.kt")
            public void testCapture() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/capture.kt", this::doTest);
            }

            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/constructor.kt", this::doTest);
            }

            @TestMetadata("default.kt")
            public void testDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/default.kt", this::doTest);
            }

            @TestMetadata("defaultLambdaInlineDisable.kt")
            public void testDefaultLambdaInlineDisable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/defaultLambdaInlineDisable.kt", this::doTest);
            }

            @TestMetadata("defaultLambdaInlineSuspend.kt")
            public void testDefaultLambdaInlineSuspend() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/defaultLambdaInlineSuspend.kt", this::doTest);
            }

            @TestMetadata("defaultLambdaInlining.kt")
            public void testDefaultLambdaInlining() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/defaultLambdaInlining.kt", this::doTest);
            }

            @TestMetadata("extensionOnFunction.kt")
            public void testExtensionOnFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/extensionOnFunction.kt", this::doTest);
            }

            @TestMetadata("fromInlineToNoInline.kt")
            public void testFromInlineToNoInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/fromInlineToNoInline.kt", this::doTest);
            }

            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/functions.kt", this::doTest);
            }

            @TestMetadata("inlineLambdaInDefaultInlineParameter.kt")
            public void testInlineLambdaInDefaultInlineParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/inlineLambdaInDefaultInlineParameter.kt", this::doTest);
            }

            @TestMetadata("inlineLambdaInDefaultInlineParameterDisabled.kt")
            public void testInlineLambdaInDefaultInlineParameterDisabled() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/inlineLambdaInDefaultInlineParameterDisabled.kt", this::doTest);
            }

            @TestMetadata("inlineReified.kt")
            public void testInlineReified() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/inlineReified.kt", this::doTest);
            }

            @TestMetadata("invoke.kt")
            public void testInvoke() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/invoke.kt", this::doTest);
            }

            @TestMetadata("isCheck.kt")
            public void testIsCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/isCheck.kt", this::doTest);
            }

            @TestMetadata("kt15410.kt")
            public void testKt15410() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/kt15410.kt", this::doTest);
            }

            @TestMetadata("kt19679.kt")
            public void testKt19679() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/kt19679.kt", this::doTest);
            }

            @TestMetadata("kt4869.kt")
            public void testKt4869() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/kt4869.kt", this::doTest);
            }

            @TestMetadata("labeled.kt")
            public void testLabeled() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/labeled.kt", this::doTest);
            }

            @TestMetadata("lambdaCast.kt")
            public void testLambdaCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/lambdaCast.kt", this::doTest);
            }

            @TestMetadata("localFun.kt")
            public void testLocalFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/localFun.kt", this::doTest);
            }

            @TestMetadata("messagesForUnsupportedInInline.kt")
            public void testMessagesForUnsupportedInInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/messagesForUnsupportedInInline.kt", this::doTest);
            }

            @TestMetadata("nonVirtualMembersWithInline.kt")
            public void testNonVirtualMembersWithInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonVirtualMembersWithInline.kt", this::doTest);
            }

            @TestMetadata("nothingToInline.kt")
            public void testNothingToInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nothingToInline.kt", this::doTest);
            }

            @TestMetadata("nullabilityOperations.kt")
            public void testNullabilityOperations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nullabilityOperations.kt", this::doTest);
            }

            @TestMetadata("nullableFunction.kt")
            public void testNullableFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nullableFunction.kt", this::doTest);
            }

            @TestMetadata("overrideWithInline.kt")
            public void testOverrideWithInline() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/overrideWithInline.kt", this::doTest);
            }

            @TestMetadata("parenthesized.kt")
            public void testParenthesized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/parenthesized.kt", this::doTest);
            }

            @TestMetadata("privateClass.kt")
            public void testPrivateClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/privateClass.kt", this::doTest);
            }

            @TestMetadata("propagation.kt")
            public void testPropagation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/propagation.kt", this::doTest);
            }

            @TestMetadata("protectedDepecation.kt")
            public void testProtectedDepecation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/protectedDepecation.kt", this::doTest);
            }

            @TestMetadata("publishedApi.kt")
            public void testPublishedApi() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/publishedApi.kt", this::doTest);
            }

            @TestMetadata("recursion.kt")
            public void testRecursion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/recursion.kt", this::doTest);
            }

            @TestMetadata("returns.kt")
            public void testReturns() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/returns.kt", this::doTest);
            }

            @TestMetadata("sam.kt")
            public void testSam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/sam.kt", this::doTest);
            }

            @TestMetadata("stringTemplate.kt")
            public void testStringTemplate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/stringTemplate.kt", this::doTest);
            }

            @TestMetadata("unsupportedConstruction.kt")
            public void testUnsupportedConstruction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/unsupportedConstruction.kt", this::doTest);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/vararg.kt", this::doTest);
            }

            @TestMetadata("when.kt")
            public void testWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/when.kt", this::doTest);
            }

            @TestMetadata("wrongUsage.kt")
            public void testWrongUsage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/wrongUsage.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class BinaryExpressions extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInBinaryExpressions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/binaryExpressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("andOr.kt")
                public void testAndOr() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/andOr.kt", this::doTest);
                }

                @TestMetadata("arrayAccess.kt")
                public void testArrayAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/arrayAccess.kt", this::doTest);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/assignment.kt", this::doTest);
                }

                @TestMetadata("comparison.kt")
                public void testComparison() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/comparison.kt", this::doTest);
                }

                @TestMetadata("componentAccess.kt")
                public void testComponentAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/componentAccess.kt", this::doTest);
                }

                @TestMetadata("contains.kt")
                public void testContains() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/contains.kt", this::doTest);
                }

                @TestMetadata("mathOperations.kt")
                public void testMathOperations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/mathOperations.kt", this::doTest);
                }

                @TestMetadata("rangeTo.kt")
                public void testRangeTo() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/rangeTo.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NonLocalReturns extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNonLocalReturns() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/nonLocalReturns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("anonymousObjects.kt")
                public void testAnonymousObjects() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/anonymousObjects.kt", this::doTest);
                }

                @TestMetadata("anonymousObjectsNested.kt")
                public void testAnonymousObjectsNested() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/anonymousObjectsNested.kt", this::doTest);
                }

                @TestMetadata("explicitReturnType.kt")
                public void testExplicitReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/explicitReturnType.kt", this::doTest);
                }

                @TestMetadata("fromOnlyLocal.kt")
                public void testFromOnlyLocal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/fromOnlyLocal.kt", this::doTest);
                }

                @TestMetadata("inlineLambda.kt")
                public void testInlineLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/inlineLambda.kt", this::doTest);
                }

                @TestMetadata("labeledReturn.kt")
                public void testLabeledReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/labeledReturn.kt", this::doTest);
                }

                @TestMetadata("lambdaAsGeneric.kt")
                public void testLambdaAsGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaAsGeneric.kt", this::doTest);
                }

                @TestMetadata("lambdaAsNonFunction.kt")
                public void testLambdaAsNonFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaAsNonFunction.kt", this::doTest);
                }

                @TestMetadata("lambdaWithGlobalReturnsInsideOnlyLocalOne.kt")
                public void testLambdaWithGlobalReturnsInsideOnlyLocalOne() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaWithGlobalReturnsInsideOnlyLocalOne.kt", this::doTest);
                }

                @TestMetadata("localFun.kt")
                public void testLocalFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/localFun.kt", this::doTest);
                }

                @TestMetadata("nestedNonLocals.kt")
                public void testNestedNonLocals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/nestedNonLocals.kt", this::doTest);
                }

                @TestMetadata("noInlineAnnotation.kt")
                public void testNoInlineAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/noInlineAnnotation.kt", this::doTest);
                }

                @TestMetadata("noInlineLambda.kt")
                public void testNoInlineLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/noInlineLambda.kt", this::doTest);
                }

                @TestMetadata("nonInlinedClass.kt")
                public void testNonInlinedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/nonInlinedClass.kt", this::doTest);
                }

                @TestMetadata("onlyLocalReturnLambda.kt")
                public void testOnlyLocalReturnLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/onlyLocalReturnLambda.kt", this::doTest);
                }

                @TestMetadata("onlyLocalReturnLambdaBinaryExpr.kt")
                public void testOnlyLocalReturnLambdaBinaryExpr() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/onlyLocalReturnLambdaBinaryExpr.kt", this::doTest);
                }

                @TestMetadata("propertyAccessorsAndConstructor.kt")
                public void testPropertyAccessorsAndConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/propertyAccessorsAndConstructor.kt", this::doTest);
                }

                @TestMetadata("toOnlyLocal.kt")
                public void testToOnlyLocal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/toOnlyLocal.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NonPublicMember extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNonPublicMember() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/nonPublicMember"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("inNonPublicClass.kt")
                public void testInNonPublicClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicClass.kt", this::doTest);
                }

                @TestMetadata("inNonPublicInnerClass.kt")
                public void testInNonPublicInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicInnerClass.kt", this::doTest);
                }

                @TestMetadata("inPackage.kt")
                public void testInPackage() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inPackage.kt", this::doTest);
                }

                @TestMetadata("inPublicClass.kt")
                public void testInPublicClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inPublicClass.kt", this::doTest);
                }

                @TestMetadata("kt14887.kt")
                public void testKt14887() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/kt14887.kt", this::doTest);
                }

                @TestMetadata("localClass.kt")
                public void testLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass.kt", this::doTest);
                }

                @TestMetadata("localClass2.kt")
                public void testLocalClass2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass2.kt", this::doTest);
                }

                @TestMetadata("localFun.kt")
                public void testLocalFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localFun.kt", this::doTest);
                }

                @TestMetadata("publishedApi.kt")
                public void testPublishedApi() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/publishedApi.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/property")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Property extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInProperty() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/property"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("invoke.kt")
                public void testInvoke() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/property/invoke.kt", this::doTest);
                }

                @TestMetadata("propertyWithBackingField.kt")
                public void testPropertyWithBackingField() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/property/propertyWithBackingField.kt", this::doTest);
                }

                @TestMetadata("unsupportedConstruction.kt")
                public void testUnsupportedConstruction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/property/unsupportedConstruction.kt", this::doTest);
                }

                @TestMetadata("virtualProperty.kt")
                public void testVirtualProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/property/virtualProperty.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/regressions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Regressions extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInRegressions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/regressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("kt4341.kt")
                public void testKt4341() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/regressions/kt4341.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class UnaryExpressions extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInUnaryExpressions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/unaryExpressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("mathOperation.kt")
                public void testMathOperation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/mathOperation.kt", this::doTest);
                }

                @TestMetadata("notOnCall.kt")
                public void testNotOnCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/notOnCall.kt", this::doTest);
                }

                @TestMetadata("notOperation.kt")
                public void testNotOperation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/notOperation.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/inlineClasses")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class InlineClasses extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInInlineClasses() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("basicInlineClassDeclaration.kt")
            public void testBasicInlineClassDeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inlineClasses/basicInlineClassDeclaration.kt", this::doTest);
            }

            @TestMetadata("basicInlineClassDeclarationDisabled.kt")
            public void testBasicInlineClassDeclarationDisabled() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inlineClasses/basicInlineClassDeclarationDisabled.kt", this::doTest);
            }

            @TestMetadata("inlineClassDeclarationCheck.kt")
            public void testInlineClassDeclarationCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassDeclarationCheck.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/inner")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inner extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("accessingToJavaNestedClass.kt")
            public void testAccessingToJavaNestedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/accessingToJavaNestedClass.kt", this::doTest);
            }

            @TestMetadata("accessingToKotlinNestedClass.kt")
            public void testAccessingToKotlinNestedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/accessingToKotlinNestedClass.kt", this::doTest);
            }

            public void testAllFilesPresentInInner() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inner"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("annotationInInnerClass.kt")
            public void testAnnotationInInnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/annotationInInnerClass.kt", this::doTest);
            }

            @TestMetadata("classesInClassObjectHeader.kt")
            public void testClassesInClassObjectHeader() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/classesInClassObjectHeader.kt", this::doTest);
            }

            @TestMetadata("constructorAccess.kt")
            public void testConstructorAccess() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/constructorAccess.kt", this::doTest);
            }

            @TestMetadata("deepInnerClass.kt")
            public void testDeepInnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/deepInnerClass.kt", this::doTest);
            }

            @TestMetadata("enumEntries.kt")
            public void testEnumEntries() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/enumEntries.kt", this::doTest);
            }

            @TestMetadata("enumInInnerClass.kt")
            public void testEnumInInnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/enumInInnerClass.kt", this::doTest);
            }

            @TestMetadata("extensionFun.kt")
            public void testExtensionFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/extensionFun.kt", this::doTest);
            }

            @TestMetadata("extensionLambdaInsideNestedClass.kt")
            public void testExtensionLambdaInsideNestedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/extensionLambdaInsideNestedClass.kt", this::doTest);
            }

            @TestMetadata("illegalModifier.kt")
            public void testIllegalModifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/illegalModifier.kt", this::doTest);
            }

            @TestMetadata("illegalModifier_lv12.kt")
            public void testIllegalModifier_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/illegalModifier_lv12.kt", this::doTest);
            }

            @TestMetadata("innerClassInEnumEntryClassMemberResolve.kt")
            public void testInnerClassInEnumEntryClassMemberResolve() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClassMemberResolve.kt", this::doTest);
            }

            @TestMetadata("innerClassInEnumEntryClass_lv11.kt")
            public void testInnerClassInEnumEntryClass_lv11() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClass_lv11.kt", this::doTest);
            }

            @TestMetadata("innerClassInEnumEntryClass_lv12.kt")
            public void testInnerClassInEnumEntryClass_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClass_lv12.kt", this::doTest);
            }

            @TestMetadata("innerClassInEnumEntryClass_lv13.kt")
            public void testInnerClassInEnumEntryClass_lv13() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClass_lv13.kt", this::doTest);
            }

            @TestMetadata("InnerClassNameClash.kt")
            public void testInnerClassNameClash() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/InnerClassNameClash.kt", this::doTest);
            }

            @TestMetadata("innerClassesInStaticParameters.kt")
            public void testInnerClassesInStaticParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerClassesInStaticParameters.kt", this::doTest);
            }

            @TestMetadata("innerConstructorsFromQualifiers.kt")
            public void testInnerConstructorsFromQualifiers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerConstructorsFromQualifiers.kt", this::doTest);
            }

            @TestMetadata("innerConstructorsFromQualifiersWithIrrelevantCandidate.kt")
            public void testInnerConstructorsFromQualifiersWithIrrelevantCandidate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerConstructorsFromQualifiersWithIrrelevantCandidate.kt", this::doTest);
            }

            @TestMetadata("innerErrorForClassObjects.kt")
            public void testInnerErrorForClassObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerErrorForClassObjects.kt", this::doTest);
            }

            @TestMetadata("innerErrorForObjects.kt")
            public void testInnerErrorForObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerErrorForObjects.kt", this::doTest);
            }

            @TestMetadata("innerThisSuper.kt")
            public void testInnerThisSuper() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/innerThisSuper.kt", this::doTest);
            }

            @TestMetadata("interfaceInInnerClass.kt")
            public void testInterfaceInInnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/interfaceInInnerClass.kt", this::doTest);
            }

            @TestMetadata("kt5854.kt")
            public void testKt5854() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/kt5854.kt", this::doTest);
            }

            @TestMetadata("kt6026.kt")
            public void testKt6026() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/kt6026.kt", this::doTest);
            }

            @TestMetadata("localClass.kt")
            public void testLocalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/localClass.kt", this::doTest);
            }

            @TestMetadata("localClassInsideNested.kt")
            public void testLocalClassInsideNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/localClassInsideNested.kt", this::doTest);
            }

            @TestMetadata("localThisSuper.kt")
            public void testLocalThisSuper() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/localThisSuper.kt", this::doTest);
            }

            @TestMetadata("modality.kt")
            public void testModality() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/modality.kt", this::doTest);
            }

            @TestMetadata("nestedClassAccessedViaInstanceReference.kt")
            public void testNestedClassAccessedViaInstanceReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/nestedClassAccessedViaInstanceReference.kt", this::doTest);
            }

            @TestMetadata("nestedClassExtendsOuter.kt")
            public void testNestedClassExtendsOuter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuter.kt", this::doTest);
            }

            @TestMetadata("nestedClassExtendsOuterGeneric.kt")
            public void testNestedClassExtendsOuterGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuterGeneric.kt", this::doTest);
            }

            @TestMetadata("nestedClassInObject.kt")
            public void testNestedClassInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/nestedClassInObject.kt", this::doTest);
            }

            @TestMetadata("nestedClassNotAllowed.kt")
            public void testNestedClassNotAllowed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/nestedClassNotAllowed.kt", this::doTest);
            }

            @TestMetadata("nestedObject.kt")
            public void testNestedObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/nestedObject.kt", this::doTest);
            }

            @TestMetadata("nestedVsInnerAccessOuterMember.kt")
            public void testNestedVsInnerAccessOuterMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/nestedVsInnerAccessOuterMember.kt", this::doTest);
            }

            @TestMetadata("outerGenericParam.kt")
            public void testOuterGenericParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/outerGenericParam.kt", this::doTest);
            }

            @TestMetadata("outerProtectedMember.kt")
            public void testOuterProtectedMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/outerProtectedMember.kt", this::doTest);
            }

            @TestMetadata("outerSuperClassMember.kt")
            public void testOuterSuperClassMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/outerSuperClassMember.kt", this::doTest);
            }

            @TestMetadata("referenceToSelfInLocal.kt")
            public void testReferenceToSelfInLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/referenceToSelfInLocal.kt", this::doTest);
            }

            @TestMetadata("resolvePackageClassInObjects.kt")
            public void testResolvePackageClassInObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/resolvePackageClassInObjects.kt", this::doTest);
            }

            @TestMetadata("selfAnnotationForClassObject.kt")
            public void testSelfAnnotationForClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/selfAnnotationForClassObject.kt", this::doTest);
            }

            @TestMetadata("traits.kt")
            public void testTraits() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/traits.kt", this::doTest);
            }

            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/visibility.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class QualifiedExpression extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInQualifiedExpression() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inner/qualifiedExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classObjectOfNestedClass.kt")
                public void testClassObjectOfNestedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/classObjectOfNestedClass.kt", this::doTest);
                }

                @TestMetadata("constructNestedClass.kt")
                public void testConstructNestedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/constructNestedClass.kt", this::doTest);
                }

                @TestMetadata("dataLocalVariable.kt")
                public void testDataLocalVariable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/dataLocalVariable.kt", this::doTest);
                }

                @TestMetadata("enumConstant.kt")
                public void testEnumConstant() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/enumConstant.kt", this::doTest);
                }

                @TestMetadata("genericNestedClass.kt")
                public void testGenericNestedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/genericNestedClass.kt", this::doTest);
                }

                @TestMetadata("importNestedClass.kt")
                public void testImportNestedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/importNestedClass.kt", this::doTest);
                }

                @TestMetadata("nestedClassInPackage.kt")
                public void testNestedClassInPackage() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedClassInPackage.kt", this::doTest);
                }

                @TestMetadata("nestedEnumConstant.kt")
                public void testNestedEnumConstant() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedEnumConstant.kt", this::doTest);
                }

                @TestMetadata("nestedObjects.kt")
                public void testNestedObjects() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedObjects.kt", this::doTest);
                }

                @TestMetadata("typePosition.kt")
                public void testTypePosition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/typePosition.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/j+k")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class J_k extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("accessClassObjectFromJava.kt")
            public void testAccessClassObjectFromJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/accessClassObjectFromJava.kt", this::doTest);
            }

            public void testAllFilesPresentInJ_k() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ambiguousSamAdapters.kt")
            public void testAmbiguousSamAdapters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/ambiguousSamAdapters.kt", this::doTest);
            }

            @TestMetadata("annotationWithArgumentsMissingDependencies.kt")
            public void testAnnotationWithArgumentsMissingDependencies() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/annotationWithArgumentsMissingDependencies.kt", this::doTest);
            }

            @TestMetadata("annotationsInheritance.kt")
            public void testAnnotationsInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/annotationsInheritance.kt", this::doTest);
            }

            @TestMetadata("arrayOfStarParametrized.kt")
            public void testArrayOfStarParametrized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/arrayOfStarParametrized.kt", this::doTest);
            }

            @TestMetadata("callableReferencesStaticMemberClash.kt")
            public void testCallableReferencesStaticMemberClash() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/callableReferencesStaticMemberClash.kt", this::doTest);
            }

            @TestMetadata("canDeclareIfSamAdapterIsInherited.kt")
            public void testCanDeclareIfSamAdapterIsInherited() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/canDeclareIfSamAdapterIsInherited.kt", this::doTest);
            }

            @TestMetadata("collectorInference.kt")
            public void testCollectorInference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectorInference.kt", this::doTest);
            }

            @TestMetadata("computeIfAbsentConcurrent.kt")
            public void testComputeIfAbsentConcurrent() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/computeIfAbsentConcurrent.kt", this::doTest);
            }

            @TestMetadata("contravariantIterable.kt")
            public void testContravariantIterable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/contravariantIterable.kt", this::doTest);
            }

            @TestMetadata("defaultMethods.kt")
            public void testDefaultMethods() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/defaultMethods.kt", this::doTest);
            }

            @TestMetadata("defaultMethodsIndirectInheritance.kt")
            public void testDefaultMethodsIndirectInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/defaultMethodsIndirectInheritance.kt", this::doTest);
            }

            @TestMetadata("defaultMethods_warning.kt")
            public void testDefaultMethods_warning() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/defaultMethods_warning.kt", this::doTest);
            }

            @TestMetadata("differentFilename.kt")
            public void testDifferentFilename() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/differentFilename.kt", this::doTest);
            }

            @TestMetadata("enumGetOrdinal.kt")
            public void testEnumGetOrdinal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/enumGetOrdinal.kt", this::doTest);
            }

            @TestMetadata("exceptionMessage.kt")
            public void testExceptionMessage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/exceptionMessage.kt", this::doTest);
            }

            @TestMetadata("fieldOverridesField.kt")
            public void testFieldOverridesField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/fieldOverridesField.kt", this::doTest);
            }

            @TestMetadata("fieldOverridesFieldOfDifferentType.kt")
            public void testFieldOverridesFieldOfDifferentType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/fieldOverridesFieldOfDifferentType.kt", this::doTest);
            }

            @TestMetadata("fieldOverridesNothing.kt")
            public void testFieldOverridesNothing() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/fieldOverridesNothing.kt", this::doTest);
            }

            @TestMetadata("finalCollectionSize.kt")
            public void testFinalCollectionSize() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/finalCollectionSize.kt", this::doTest);
            }

            @TestMetadata("flexibleNothing.kt")
            public void testFlexibleNothing() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/flexibleNothing.kt", this::doTest);
            }

            @TestMetadata("genericConstructorWithMultipleBounds.kt")
            public void testGenericConstructorWithMultipleBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructorWithMultipleBounds.kt", this::doTest);
            }

            @TestMetadata("GenericsInSupertypes.kt")
            public void testGenericsInSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/GenericsInSupertypes.kt", this::doTest);
            }

            @TestMetadata("inheritAbstractSamAdapter.kt")
            public void testInheritAbstractSamAdapter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/inheritAbstractSamAdapter.kt", this::doTest);
            }

            @TestMetadata("inheritanceStaticMethodFromInterface.kt")
            public void testInheritanceStaticMethodFromInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/inheritanceStaticMethodFromInterface.kt", this::doTest);
            }

            @TestMetadata("InheritedGenericFunction.kt")
            public void testInheritedGenericFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/InheritedGenericFunction.kt", this::doTest);
            }

            @TestMetadata("InnerClassFromJava.kt")
            public void testInnerClassFromJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/InnerClassFromJava.kt", this::doTest);
            }

            @TestMetadata("innerNestedClassFromJava.kt")
            public void testInnerNestedClassFromJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/innerNestedClassFromJava.kt", this::doTest);
            }

            @TestMetadata("invisiblePackagePrivateInheritedMember.kt")
            public void testInvisiblePackagePrivateInheritedMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/invisiblePackagePrivateInheritedMember.kt", this::doTest);
            }

            @TestMetadata("javaStaticImport.kt")
            public void testJavaStaticImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/javaStaticImport.kt", this::doTest);
            }

            @TestMetadata("KJKInheritance.kt")
            public void testKJKInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/KJKInheritance.kt", this::doTest);
            }

            @TestMetadata("KJKInheritanceGeneric.kt")
            public void testKJKInheritanceGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/KJKInheritanceGeneric.kt", this::doTest);
            }

            @TestMetadata("kt1402.kt")
            public void testKt1402() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt1402.kt", this::doTest);
            }

            @TestMetadata("kt1431.kt")
            public void testKt1431() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt1431.kt", this::doTest);
            }

            @TestMetadata("kt1730_implementCharSequence.kt")
            public void testKt1730_implementCharSequence() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt1730_implementCharSequence.kt", this::doTest);
            }

            @TestMetadata("kt2152.kt")
            public void testKt2152() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt2152.kt", this::doTest);
            }

            @TestMetadata("kt2394.kt")
            public void testKt2394() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt2394.kt", this::doTest);
            }

            @TestMetadata("kt2606.kt")
            public void testKt2606() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt2606.kt", this::doTest);
            }

            @TestMetadata("kt2619.kt")
            public void testKt2619() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt2619.kt", this::doTest);
            }

            @TestMetadata("kt2641.kt")
            public void testKt2641() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt2641.kt", this::doTest);
            }

            @TestMetadata("kt2890.kt")
            public void testKt2890() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt2890.kt", this::doTest);
            }

            @TestMetadata("kt3307.kt")
            public void testKt3307() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt3307.kt", this::doTest);
            }

            @TestMetadata("kt3311.kt")
            public void testKt3311() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt3311.kt", this::doTest);
            }

            @TestMetadata("kt6720_abstractProperty.kt")
            public void testKt6720_abstractProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt6720_abstractProperty.kt", this::doTest);
            }

            @TestMetadata("kt7523.kt")
            public void testKt7523() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/kt7523.kt", this::doTest);
            }

            @TestMetadata("matchers.kt")
            public void testMatchers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/matchers.kt", this::doTest);
            }

            @TestMetadata("mutableIterator.kt")
            public void testMutableIterator() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/mutableIterator.kt", this::doTest);
            }

            @TestMetadata("nullForOptionalOrElse.kt")
            public void testNullForOptionalOrElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/nullForOptionalOrElse.kt", this::doTest);
            }

            @TestMetadata("overrideRawType.kt")
            public void testOverrideRawType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/overrideRawType.kt", this::doTest);
            }

            @TestMetadata("OverrideVararg.kt")
            public void testOverrideVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/OverrideVararg.kt", this::doTest);
            }

            @TestMetadata("overrideWithSamAndTypeParameter.kt")
            public void testOverrideWithSamAndTypeParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/overrideWithSamAndTypeParameter.kt", this::doTest);
            }

            @TestMetadata("packagePrivateClassStaticMember.kt")
            public void testPackagePrivateClassStaticMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/packagePrivateClassStaticMember.kt", this::doTest);
            }

            @TestMetadata("packageVisibility.kt")
            public void testPackageVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/packageVisibility.kt", this::doTest);
            }

            @TestMetadata("privateFieldOverridesNothing.kt")
            public void testPrivateFieldOverridesNothing() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/privateFieldOverridesNothing.kt", this::doTest);
            }

            @TestMetadata("privateNestedClassStaticMember.kt")
            public void testPrivateNestedClassStaticMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/privateNestedClassStaticMember.kt", this::doTest);
            }

            @TestMetadata("protectedStaticSamePackage.kt")
            public void testProtectedStaticSamePackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/protectedStaticSamePackage.kt", this::doTest);
            }

            @TestMetadata("recursionWithJavaSyntheticProperty.kt")
            public void testRecursionWithJavaSyntheticProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/recursionWithJavaSyntheticProperty.kt", this::doTest);
            }

            @TestMetadata("recursiveRawUpperBound.kt")
            public void testRecursiveRawUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound.kt", this::doTest);
            }

            @TestMetadata("recursiveRawUpperBound2.kt")
            public void testRecursiveRawUpperBound2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound2.kt", this::doTest);
            }

            @TestMetadata("recursiveRawUpperBound3.kt")
            public void testRecursiveRawUpperBound3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound3.kt", this::doTest);
            }

            @TestMetadata("samInConstructorWithGenerics.kt")
            public void testSamInConstructorWithGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/samInConstructorWithGenerics.kt", this::doTest);
            }

            @TestMetadata("samWithConsumer.kt")
            public void testSamWithConsumer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/samWithConsumer.kt", this::doTest);
            }

            @TestMetadata("selectMoreSpecific.kt")
            public void testSelectMoreSpecific() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/selectMoreSpecific.kt", this::doTest);
            }

            @TestMetadata("serializable.kt")
            public void testSerializable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/serializable.kt", this::doTest);
            }

            @TestMetadata("shadowingPrimitiveStaticField.kt")
            public void testShadowingPrimitiveStaticField() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/shadowingPrimitiveStaticField.kt", this::doTest);
            }

            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/Simple.kt", this::doTest);
            }

            @TestMetadata("specialBridges.kt")
            public void testSpecialBridges() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/specialBridges.kt", this::doTest);
            }

            @TestMetadata("StaticMembersFromSuperclasses.kt")
            public void testStaticMembersFromSuperclasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/StaticMembersFromSuperclasses.kt", this::doTest);
            }

            @TestMetadata("staticMethodInClass.kt")
            public void testStaticMethodInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/staticMethodInClass.kt", this::doTest);
            }

            @TestMetadata("SupertypeArgumentsNullability-NotNull-SpecialTypes.kt")
            public void testSupertypeArgumentsNullability_NotNull_SpecialTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-SpecialTypes.kt", this::doTest);
            }

            @TestMetadata("SupertypeArgumentsNullability-NotNull-UserTypes.kt")
            public void testSupertypeArgumentsNullability_NotNull_UserTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-UserTypes.kt", this::doTest);
            }

            @TestMetadata("SupertypeArgumentsNullability-SpecialTypes.kt")
            public void testSupertypeArgumentsNullability_SpecialTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-SpecialTypes.kt", this::doTest);
            }

            @TestMetadata("SupertypeArgumentsNullability-UserTypes.kt")
            public void testSupertypeArgumentsNullability_UserTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt", this::doTest);
            }

            @TestMetadata("traitDefaultCall.kt")
            public void testTraitDefaultCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/traitDefaultCall.kt", this::doTest);
            }

            @TestMetadata("typeAliasWithSamConstructor.kt")
            public void testTypeAliasWithSamConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/typeAliasWithSamConstructor.kt", this::doTest);
            }

            @TestMetadata("UnboxingNulls.kt")
            public void testUnboxingNulls() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/UnboxingNulls.kt", this::doTest);
            }

            @TestMetadata("wrongVarianceInJava.kt")
            public void testWrongVarianceInJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/wrongVarianceInJava.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/brokenCode")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class BrokenCode extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInBrokenCode() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/brokenCode"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classDuplicates.kt")
                public void testClassDuplicates() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/brokenCode/classDuplicates.kt", this::doTest);
                }

                @TestMetadata("fieldDuplicates.kt")
                public void testFieldDuplicates() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/brokenCode/fieldDuplicates.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/collectionOverrides")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CollectionOverrides extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCollectionOverrides() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/collectionOverrides"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("charBuffer.kt")
                public void testCharBuffer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/charBuffer.kt", this::doTest);
                }

                @TestMetadata("collectionStringImpl.kt")
                public void testCollectionStringImpl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/collectionStringImpl.kt", this::doTest);
                }

                @TestMetadata("commonCollections.kt")
                public void testCommonCollections() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/commonCollections.kt", this::doTest);
                }

                @TestMetadata("contains.kt")
                public void testContains() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/contains.kt", this::doTest);
                }

                @TestMetadata("containsAll.kt")
                public void testContainsAll() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/containsAll.kt", this::doTest);
                }

                @TestMetadata("containsAndOverload.kt")
                public void testContainsAndOverload() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/containsAndOverload.kt", this::doTest);
                }

                @TestMetadata("getCharSequence.kt")
                public void testGetCharSequence() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/getCharSequence.kt", this::doTest);
                }

                @TestMetadata("irrelevantCharAtAbstract.kt")
                public void testIrrelevantCharAtAbstract() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantCharAtAbstract.kt", this::doTest);
                }

                @TestMetadata("irrelevantImplCharSequence.kt")
                public void testIrrelevantImplCharSequence() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplCharSequence.kt", this::doTest);
                }

                @TestMetadata("irrelevantImplCharSequenceKotlin.kt")
                public void testIrrelevantImplCharSequenceKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplCharSequenceKotlin.kt", this::doTest);
                }

                @TestMetadata("irrelevantImplMutableList.kt")
                public void testIrrelevantImplMutableList() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplMutableList.kt", this::doTest);
                }

                @TestMetadata("irrelevantImplMutableListKotlin.kt")
                public void testIrrelevantImplMutableListKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplMutableListKotlin.kt", this::doTest);
                }

                @TestMetadata("irrelevantMapGetAbstract.kt")
                public void testIrrelevantMapGetAbstract() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantMapGetAbstract.kt", this::doTest);
                }

                @TestMetadata("mapGetOverride.kt")
                public void testMapGetOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/mapGetOverride.kt", this::doTest);
                }

                @TestMetadata("overridesBuiltinNoMagic.kt")
                public void testOverridesBuiltinNoMagic() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/overridesBuiltinNoMagic.kt", this::doTest);
                }

                @TestMetadata("removeAt.kt")
                public void testRemoveAt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/removeAt.kt", this::doTest);
                }

                @TestMetadata("removeAtInt.kt")
                public void testRemoveAtInt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/removeAtInt.kt", this::doTest);
                }

                @TestMetadata("sizeFromKotlinOverriddenInJava.kt")
                public void testSizeFromKotlinOverriddenInJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/sizeFromKotlinOverriddenInJava.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/genericConstructor")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class GenericConstructor extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInGenericConstructor() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/genericConstructor"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classTypeParameterInferredFromArgument.kt")
                public void testClassTypeParameterInferredFromArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/classTypeParameterInferredFromArgument.kt", this::doTest);
                }

                @TestMetadata("innerClass.kt")
                public void testInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/innerClass.kt", this::doTest);
                }

                @TestMetadata("noClassTypeParameters.kt")
                public void testNoClassTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/noClassTypeParameters.kt", this::doTest);
                }

                @TestMetadata("noClassTypeParametersInvParameter.kt")
                public void testNoClassTypeParametersInvParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/noClassTypeParametersInvParameter.kt", this::doTest);
                }

                @TestMetadata("recursive.kt")
                public void testRecursive() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/recursive.kt", this::doTest);
                }

                @TestMetadata("selfTypes.kt")
                public void testSelfTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/selfTypes.kt", this::doTest);
                }

                @TestMetadata("superCall.kt")
                public void testSuperCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/superCall.kt", this::doTest);
                }

                @TestMetadata("superCallImpossibleToInfer.kt")
                public void testSuperCallImpossibleToInfer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/superCallImpossibleToInfer.kt", this::doTest);
                }

                @TestMetadata("withClassTypeParameters.kt")
                public void testWithClassTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/withClassTypeParameters.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/primitiveOverrides")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PrimitiveOverrides extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInPrimitiveOverrides() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/primitiveOverrides"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("kt11140.kt")
                public void testKt11140() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/kt11140.kt", this::doTest);
                }

                @TestMetadata("notNullAnnotated.kt")
                public void testNotNullAnnotated() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/notNullAnnotated.kt", this::doTest);
                }

                @TestMetadata("specializedMap.kt")
                public void testSpecializedMap() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/specializedMap.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/properties")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Properties extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInProperties() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/properties"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("interface.kt")
                public void testInterface() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/properties/interface.kt", this::doTest);
                }

                @TestMetadata("isName.kt")
                public void testIsName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/properties/isName.kt", this::doTest);
                }

                @TestMetadata("val.kt")
                public void testVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/properties/val.kt", this::doTest);
                }

                @TestMetadata("var.kt")
                public void testVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/properties/var.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/sam")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Sam extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSam() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/sam"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("enhancedSamConstructor.kt")
                public void testEnhancedSamConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/enhancedSamConstructor.kt", this::doTest);
                }

                @TestMetadata("fakeOverrideFunctionForStaticSam.kt")
                public void testFakeOverrideFunctionForStaticSam() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/fakeOverrideFunctionForStaticSam.kt", this::doTest);
                }

                @TestMetadata("inheritedStaticSam.kt")
                public void testInheritedStaticSam() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/inheritedStaticSam.kt", this::doTest);
                }

                @TestMetadata("privateCandidatesWithWrongArguments.kt")
                public void testPrivateCandidatesWithWrongArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/privateCandidatesWithWrongArguments.kt", this::doTest);
                }

                @TestMetadata("samOnTypeParameter.kt")
                public void testSamOnTypeParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/samOnTypeParameter.kt", this::doTest);
                }

                @TestMetadata("staticSamFromImportWithStar.kt")
                public void testStaticSamFromImportWithStar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/staticSamFromImportWithStar.kt", this::doTest);
                }

                @TestMetadata("staticSamWithExplicitImport.kt")
                public void testStaticSamWithExplicitImport() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/staticSamWithExplicitImport.kt", this::doTest);
                }

                @TestMetadata("typeInferenceOnSamAdapters.kt")
                public void testTypeInferenceOnSamAdapters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/typeInferenceOnSamAdapters.kt", this::doTest);
                }

                @TestMetadata("withDefaultMethods.kt")
                public void testWithDefaultMethods() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/sam/withDefaultMethods.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/samByProjectedType")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SamByProjectedType extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSamByProjectedType() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/samByProjectedType"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("genericInReturnType.kt")
                public void testGenericInReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericInReturnType.kt", this::doTest);
                }

                @TestMetadata("genericInValueParameter.kt")
                public void testGenericInValueParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericInValueParameter.kt", this::doTest);
                }

                @TestMetadata("genericSuperWildcard.kt")
                public void testGenericSuperWildcard() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericSuperWildcard.kt", this::doTest);
                }

                @TestMetadata("noAdapterBecuaseOfRecursiveUpperBound.kt")
                public void testNoAdapterBecuaseOfRecursiveUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/noAdapterBecuaseOfRecursiveUpperBound.kt", this::doTest);
                }

                @TestMetadata("starProjectionComplexUpperBound.kt")
                public void testStarProjectionComplexUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/starProjectionComplexUpperBound.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/signatureAnnotations")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SignatureAnnotations extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSignatureAnnotations() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/signatureAnnotations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("defaultEnum.kt")
                public void testDefaultEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/defaultEnum.kt", this::doTest);
                }

                @TestMetadata("defaultLongLiteral.kt")
                public void testDefaultLongLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/defaultLongLiteral.kt", this::doTest);
                }

                @TestMetadata("defaultNull.kt")
                public void testDefaultNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/defaultNull.kt", this::doTest);
                }

                @TestMetadata("defaultNullAndParameter.kt")
                public void testDefaultNullAndParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/defaultNullAndParameter.kt", this::doTest);
                }

                @TestMetadata("defaultParameter.kt")
                public void testDefaultParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/defaultParameter.kt", this::doTest);
                }

                @TestMetadata("emptyParameterName.kt")
                public void testEmptyParameterName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/emptyParameterName.kt", this::doTest);
                }

                @TestMetadata("notNullVarargOverride.kt")
                public void testNotNullVarargOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/notNullVarargOverride.kt", this::doTest);
                }

                @TestMetadata("nullableVarargOverride.kt")
                public void testNullableVarargOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/nullableVarargOverride.kt", this::doTest);
                }

                @TestMetadata("overridesDefaultValue.kt")
                public void testOverridesDefaultValue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/overridesDefaultValue.kt", this::doTest);
                }

                @TestMetadata("overridesParameterName.kt")
                public void testOverridesParameterName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/overridesParameterName.kt", this::doTest);
                }

                @TestMetadata("reorderedParameterNames.kt")
                public void testReorderedParameterNames() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/reorderedParameterNames.kt", this::doTest);
                }

                @TestMetadata("sameParameterName.kt")
                public void testSameParameterName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/sameParameterName.kt", this::doTest);
                }

                @TestMetadata("specialCharsParameterName.kt")
                public void testSpecialCharsParameterName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/specialCharsParameterName.kt", this::doTest);
                }

                @TestMetadata("stableParameterName.kt")
                public void testStableParameterName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/stableParameterName.kt", this::doTest);
                }

                @TestMetadata("staticMethodWithDefaultValue.kt")
                public void testStaticMethodWithDefaultValue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/staticMethodWithDefaultValue.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/specialBuiltIns")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SpecialBuiltIns extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSpecialBuiltIns() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/specialBuiltIns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("hashtableInheritance.kt")
                public void testHashtableInheritance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/specialBuiltIns/hashtableInheritance.kt", this::doTest);
                }

                @TestMetadata("securityProvider.kt")
                public void testSecurityProvider() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/specialBuiltIns/securityProvider.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/types")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Types extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInTypes() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/types"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("arrayList.kt")
                public void testArrayList() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/types/arrayList.kt", this::doTest);
                }

                @TestMetadata("returnCollection.kt")
                public void testReturnCollection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/types/returnCollection.kt", this::doTest);
                }

                @TestMetadata("shapeMismatchInCovariantPosition.kt")
                public void testShapeMismatchInCovariantPosition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/types/shapeMismatchInCovariantPosition.kt", this::doTest);
                }

                @TestMetadata("shapeMismatchInCovariantPositionGeneric.kt")
                public void testShapeMismatchInCovariantPositionGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/types/shapeMismatchInCovariantPositionGeneric.kt", this::doTest);
                }

                @TestMetadata("typeParameter.kt")
                public void testTypeParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/j+k/types/typeParameter.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/java8Overrides")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Java8Overrides extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("abstractBaseClassMemberNotImplemented.kt")
            public void testAbstractBaseClassMemberNotImplemented() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractBaseClassMemberNotImplemented.kt", this::doTest);
            }

            @TestMetadata("abstractVsAbstract.kt")
            public void testAbstractVsAbstract() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractVsAbstract.kt", this::doTest);
            }

            public void testAllFilesPresentInJava8Overrides() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/java8Overrides"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("defaultVsAbstract.kt")
            public void testDefaultVsAbstract() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/defaultVsAbstract.kt", this::doTest);
            }

            @TestMetadata("hidingMethodOfAny.kt")
            public void testHidingMethodOfAny() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/hidingMethodOfAny.kt", this::doTest);
            }

            @TestMetadata("implementingMethodOfAny.kt")
            public void testImplementingMethodOfAny() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/implementingMethodOfAny.kt", this::doTest);
            }

            @TestMetadata("notAMethodOfAny.kt")
            public void testNotAMethodOfAny() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/notAMethodOfAny.kt", this::doTest);
            }

            @TestMetadata("overridingMethodOfAnyChain.kt")
            public void testOverridingMethodOfAnyChain() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/overridingMethodOfAnyChain.kt", this::doTest);
            }

            @TestMetadata("overridingMethodOfAnyDiamond.kt")
            public void testOverridingMethodOfAnyDiamond() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/overridingMethodOfAnyDiamond.kt", this::doTest);
            }

            @TestMetadata("singleRelevantDefault.kt")
            public void testSingleRelevantDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/java8Overrides/singleRelevantDefault.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/labels")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Labels extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInLabels() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/labels"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("automaticLabelFromInfixOperator.kt")
            public void testAutomaticLabelFromInfixOperator() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/automaticLabelFromInfixOperator.kt", this::doTest);
            }

            @TestMetadata("kt1703.kt")
            public void testKt1703() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/kt1703.kt", this::doTest);
            }

            @TestMetadata("kt361.kt")
            public void testKt361() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/kt361.kt", this::doTest);
            }

            @TestMetadata("kt3920.kt")
            public void testKt3920() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/kt3920.kt", this::doTest);
            }

            @TestMetadata("kt3988.kt")
            public void testKt3988() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/kt3988.kt", this::doTest);
            }

            @TestMetadata("kt4247.kt")
            public void testKt4247() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/kt4247.kt", this::doTest);
            }

            @TestMetadata("kt4586.kt")
            public void testKt4586() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/kt4586.kt", this::doTest);
            }

            @TestMetadata("kt4603.kt")
            public void testKt4603() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/kt4603.kt", this::doTest);
            }

            @TestMetadata("kt591.kt")
            public void testKt591() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/kt591.kt", this::doTest);
            }

            @TestMetadata("labelReferencesInsideObjectExpressions.kt")
            public void testLabelReferencesInsideObjectExpressions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/labelReferencesInsideObjectExpressions.kt", this::doTest);
            }

            @TestMetadata("labeledFunctionLiteral.kt")
            public void testLabeledFunctionLiteral() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/labeledFunctionLiteral.kt", this::doTest);
            }

            @TestMetadata("labelsMustBeNamed.kt")
            public void testLabelsMustBeNamed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/labels/labelsMustBeNamed.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/lateinit")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Lateinit extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInLateinit() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/lateinit"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("modifierApplicability.kt")
            public void testModifierApplicability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/lateinit/modifierApplicability.kt", this::doTest);
            }

            @TestMetadata("modifierApplicability_lv12.kt")
            public void testModifierApplicability_lv12() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/lateinit/modifierApplicability_lv12.kt", this::doTest);
            }

            @TestMetadata("setter.kt")
            public void testSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/lateinit/setter.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/lateinit/local")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Local extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInLocal() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/lateinit/local"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("inapplicableLateinitModifier.kt")
                public void testInapplicableLateinitModifier() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/lateinit/local/inapplicableLateinitModifier.kt", this::doTest);
                }

                @TestMetadata("localLateinit.kt")
                public void testLocalLateinit() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/lateinit/local/localLateinit.kt", this::doTest);
                }

                @TestMetadata("uninitialized.kt")
                public void testUninitialized() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/lateinit/local/uninitialized.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/library")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Library extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInLibrary() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/library"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("Collections.kt")
            public void testCollections() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/library/Collections.kt", this::doTest);
            }

            @TestMetadata("kt828.kt")
            public void testKt828() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/library/kt828.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/localClasses")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LocalClasses extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInLocalClasses() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/localClasses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("localAnnotationClass.kt")
            public void testLocalAnnotationClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/localClasses/localAnnotationClass.kt", this::doTest);
            }

            @TestMetadata("localAnnotationClassError.kt")
            public void testLocalAnnotationClassError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/localClasses/localAnnotationClassError.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/modifiers")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Modifiers extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInModifiers() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/modifiers"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("annotations.kt")
            public void testAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/annotations.kt", this::doTest);
            }

            @TestMetadata("defaultModifier.kt")
            public void testDefaultModifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/defaultModifier.kt", this::doTest);
            }

            @TestMetadata("IllegalModifiers.kt")
            public void testIllegalModifiers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/IllegalModifiers.kt", this::doTest);
            }

            @TestMetadata("incompatibleVarianceModifiers.kt")
            public void testIncompatibleVarianceModifiers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/incompatibleVarianceModifiers.kt", this::doTest);
            }

            @TestMetadata("inlineParameters.kt")
            public void testInlineParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/inlineParameters.kt", this::doTest);
            }

            @TestMetadata("internalInInterface.kt")
            public void testInternalInInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/internalInInterface.kt", this::doTest);
            }

            @TestMetadata("modifierOnParameterInFunctionType.kt")
            public void testModifierOnParameterInFunctionType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/modifierOnParameterInFunctionType.kt", this::doTest);
            }

            @TestMetadata("NoLocalVisibility.kt")
            public void testNoLocalVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/NoLocalVisibility.kt", this::doTest);
            }

            @TestMetadata("openInInterface.kt")
            public void testOpenInInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/openInInterface.kt", this::doTest);
            }

            @TestMetadata("primaryConstructorMissingBrackets.kt")
            public void testPrimaryConstructorMissingBrackets() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/primaryConstructorMissingBrackets.kt", this::doTest);
            }

            @TestMetadata("primaryConstructorMissingKeyword.kt")
            public void testPrimaryConstructorMissingKeyword() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/primaryConstructorMissingKeyword.kt", this::doTest);
            }

            @TestMetadata("privateInInterface.kt")
            public void testPrivateInInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/privateInInterface.kt", this::doTest);
            }

            @TestMetadata("protected.kt")
            public void testProtected() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/protected.kt", this::doTest);
            }

            @TestMetadata("redundantTargets.kt")
            public void testRedundantTargets() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/redundantTargets.kt", this::doTest);
            }

            @TestMetadata("repeatedModifiers.kt")
            public void testRepeatedModifiers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/repeatedModifiers.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/modifiers/const")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Const extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInConst() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/modifiers/const"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("applicability.kt")
                public void testApplicability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/applicability.kt", this::doTest);
                }

                @TestMetadata("arrayInAnnotationArgumentType.kt")
                public void testArrayInAnnotationArgumentType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/arrayInAnnotationArgumentType.kt", this::doTest);
                }

                @TestMetadata("constInteraction.kt")
                public void testConstInteraction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/constInteraction.kt", this::doTest);
                }

                @TestMetadata("fromJava.kt")
                public void testFromJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/fromJava.kt", this::doTest);
                }

                @TestMetadata("fromJavaSubclass.kt")
                public void testFromJavaSubclass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/fromJavaSubclass.kt", this::doTest);
                }

                @TestMetadata("kt12248.kt")
                public void testKt12248() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/kt12248.kt", this::doTest);
                }

                @TestMetadata("kt15913.kt")
                public void testKt15913() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/kt15913.kt", this::doTest);
                }

                @TestMetadata("noDivisionByZeroFeature.kt")
                public void testNoDivisionByZeroFeature() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/noDivisionByZeroFeature.kt", this::doTest);
                }

                @TestMetadata("types.kt")
                public void testTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/const/types.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/modifiers/operatorInfix")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class OperatorInfix extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInOperatorInfix() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/modifiers/operatorInfix"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("LocalFunctions.kt")
                public void testLocalFunctions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/operatorInfix/LocalFunctions.kt", this::doTest);
                }

                @TestMetadata("MemberFunctions.kt")
                public void testMemberFunctions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/operatorInfix/MemberFunctions.kt", this::doTest);
                }

                @TestMetadata("Simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/modifiers/operatorInfix/Simple.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/multimodule")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Multimodule extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInMultimodule() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("internal.kt")
            public void testInternal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/internal.kt", this::doTest);
            }

            @TestMetadata("kt14249.kt")
            public void testKt14249() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/kt14249.kt", this::doTest);
            }

            @TestMetadata("packagePrivate.kt")
            public void testPackagePrivate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/packagePrivate.kt", this::doTest);
            }

            @TestMetadata("publishedApiInternal.kt")
            public void testPublishedApiInternal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/publishedApiInternal.kt", this::doTest);
            }

            @TestMetadata("redundantElseInWhen.kt")
            public void testRedundantElseInWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/redundantElseInWhen.kt", this::doTest);
            }

            @TestMetadata("varargConflict.kt")
            public void testVarargConflict() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/varargConflict.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DuplicateClass extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDuplicateClass() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateClass"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("collectionMethodStub.kt")
                public void testCollectionMethodStub() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/collectionMethodStub.kt", this::doTest);
                }

                @TestMetadata("differentGenericArguments.kt")
                public void testDifferentGenericArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/differentGenericArguments.kt", this::doTest);
                }

                @TestMetadata("differentGenericArgumentsReversed.kt")
                public void testDifferentGenericArgumentsReversed() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/differentGenericArgumentsReversed.kt", this::doTest);
                }

                @TestMetadata("duplicateClass.kt")
                public void testDuplicateClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateClass.kt", this::doTest);
                }

                @TestMetadata("duplicateNestedClasses.kt")
                public void testDuplicateNestedClasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateNestedClasses.kt", this::doTest);
                }

                @TestMetadata("duplicateSuperClass.kt")
                public void testDuplicateSuperClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateSuperClass.kt", this::doTest);
                }

                @TestMetadata("genericArgumentNumberMismatch.kt")
                public void testGenericArgumentNumberMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/genericArgumentNumberMismatch.kt", this::doTest);
                }

                @TestMetadata("genericSuperClass.kt")
                public void testGenericSuperClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/genericSuperClass.kt", this::doTest);
                }

                @TestMetadata("inTheSameModuleWithUsage.kt")
                public void testInTheSameModuleWithUsage() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/inTheSameModuleWithUsage.kt", this::doTest);
                }

                @TestMetadata("inTheSameModuleWithUsageNoTypeAnnotation.kt")
                public void testInTheSameModuleWithUsageNoTypeAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/inTheSameModuleWithUsageNoTypeAnnotation.kt", this::doTest);
                }

                @TestMetadata("members.kt")
                public void testMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/members.kt", this::doTest);
                }

                @TestMetadata("sameClassNameDifferentPackages.kt")
                public void testSameClassNameDifferentPackages() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/sameClassNameDifferentPackages.kt", this::doTest);
                }

                @TestMetadata("sameGenericArguments.kt")
                public void testSameGenericArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/sameGenericArguments.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DuplicateMethod extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDuplicateMethod() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateMethod"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classGenericsInParams.kt")
                public void testClassGenericsInParams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParams.kt", this::doTest);
                }

                @TestMetadata("classGenericsInParamsBoundMismatch.kt")
                public void testClassGenericsInParamsBoundMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsBoundMismatch.kt", this::doTest);
                }

                @TestMetadata("classGenericsInParamsIndexMismatch.kt")
                public void testClassGenericsInParamsIndexMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsIndexMismatch.kt", this::doTest);
                }

                @TestMetadata("classGenericsInParamsNameMismatch.kt")
                public void testClassGenericsInParamsNameMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsNameMismatch.kt", this::doTest);
                }

                @TestMetadata("classGenericsInReturnType.kt")
                public void testClassGenericsInReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInReturnType.kt", this::doTest);
                }

                @TestMetadata("classVsFunctionGenericsInParamsMismatch.kt")
                public void testClassVsFunctionGenericsInParamsMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classVsFunctionGenericsInParamsMismatch.kt", this::doTest);
                }

                @TestMetadata("covariantReturnTypes.kt")
                public void testCovariantReturnTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/covariantReturnTypes.kt", this::doTest);
                }

                @TestMetadata("differenceInParamNames.kt")
                public void testDifferenceInParamNames() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differenceInParamNames.kt", this::doTest);
                }

                @TestMetadata("differentGenericsInParams.kt")
                public void testDifferentGenericsInParams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentGenericsInParams.kt", this::doTest);
                }

                @TestMetadata("differentNumberOfParams.kt")
                public void testDifferentNumberOfParams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentNumberOfParams.kt", this::doTest);
                }

                @TestMetadata("differentReturnTypes.kt")
                public void testDifferentReturnTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentReturnTypes.kt", this::doTest);
                }

                @TestMetadata("extensionMatch.kt")
                public void testExtensionMatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/extensionMatch.kt", this::doTest);
                }

                @TestMetadata("functionGenericsInParams.kt")
                public void testFunctionGenericsInParams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParams.kt", this::doTest);
                }

                @TestMetadata("functionGenericsInParamsBoundsMismatch.kt")
                public void testFunctionGenericsInParamsBoundsMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsBoundsMismatch.kt", this::doTest);
                }

                @TestMetadata("functionGenericsInParamsEqNull.kt")
                public void testFunctionGenericsInParamsEqNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsEqNull.kt", this::doTest);
                }

                @TestMetadata("functionGenericsInParamsNotIs.kt")
                public void testFunctionGenericsInParamsNotIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsNotIs.kt", this::doTest);
                }

                @TestMetadata("functionGenericsInParamsReturnFooT.kt")
                public void testFunctionGenericsInParamsReturnFooT() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsReturnFooT.kt", this::doTest);
                }

                @TestMetadata("functionGenericsInParamsReturnT.kt")
                public void testFunctionGenericsInParamsReturnT() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsReturnT.kt", this::doTest);
                }

                @TestMetadata("incompleteCodeNoNoneApplicable.kt")
                public void testIncompleteCodeNoNoneApplicable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/incompleteCodeNoNoneApplicable.kt", this::doTest);
                }

                @TestMetadata("noGenericsInParams.kt")
                public void testNoGenericsInParams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/noGenericsInParams.kt", this::doTest);
                }

                @TestMetadata("noParams.kt")
                public void testNoParams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/noParams.kt", this::doTest);
                }

                @TestMetadata("sameGenericsInParams.kt")
                public void testSameGenericsInParams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/sameGenericsInParams.kt", this::doTest);
                }

                @TestMetadata("simpleWithInheritance.kt")
                public void testSimpleWithInheritance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/simpleWithInheritance.kt", this::doTest);
                }

                @TestMetadata("sinceKotlin.kt")
                public void testSinceKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/sinceKotlin.kt", this::doTest);
                }

                @TestMetadata("substitutedGenericInParams.kt")
                public void testSubstitutedGenericInParams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/substitutedGenericInParams.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DuplicateSuper extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDuplicateSuper() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateSuper"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("differentSuperTraits.kt")
                public void testDifferentSuperTraits() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/differentSuperTraits.kt", this::doTest);
                }

                @TestMetadata("sameSuperTrait.kt")
                public void testSameSuperTrait() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTrait.kt", this::doTest);
                }

                @TestMetadata("sameSuperTraitDifferentBounds.kt")
                public void testSameSuperTraitDifferentBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTraitDifferentBounds.kt", this::doTest);
                }

                @TestMetadata("sameSuperTraitGenerics.kt")
                public void testSameSuperTraitGenerics() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTraitGenerics.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multimodule/hiddenClass")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class HiddenClass extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInHiddenClass() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/hiddenClass"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("deprecatedHiddenImportPriority.kt")
                public void testDeprecatedHiddenImportPriority() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/hiddenClass/deprecatedHiddenImportPriority.kt", this::doTest);
                }

                @TestMetadata("deprecatedHiddenMultipleClasses.kt")
                public void testDeprecatedHiddenMultipleClasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/hiddenClass/deprecatedHiddenMultipleClasses.kt", this::doTest);
                }

                @TestMetadata("sinceKotlinImportPriority.kt")
                public void testSinceKotlinImportPriority() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/hiddenClass/sinceKotlinImportPriority.kt", this::doTest);
                }

                @TestMetadata("sinceKotlinMultipleClasses.kt")
                public void testSinceKotlinMultipleClasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multimodule/hiddenClass/sinceKotlinMultipleClasses.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Multiplatform extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInMultiplatform() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("headerFunInNonHeaderClass.kt")
            public void testHeaderFunInNonHeaderClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerFunInNonHeaderClass.kt", this::doTest);
            }

            @TestMetadata("implDelegatedMember.kt")
            public void testImplDelegatedMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/implDelegatedMember.kt", this::doTest);
            }

            @TestMetadata("implDynamic.kt")
            public void testImplDynamic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/implDynamic.kt", this::doTest);
            }

            @TestMetadata("implFakeOverride.kt")
            public void testImplFakeOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/implFakeOverride.kt", this::doTest);
            }

            @TestMetadata("incompatibles.kt")
            public void testIncompatibles() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/incompatibles.kt", this::doTest);
            }

            @TestMetadata("modifierApplicability.kt")
            public void testModifierApplicability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/modifierApplicability.kt", this::doTest);
            }

            @TestMetadata("namedArguments.kt")
            public void testNamedArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/namedArguments.kt", this::doTest);
            }

            @TestMetadata("privateTopLevelDeclarations.kt")
            public void testPrivateTopLevelDeclarations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/privateTopLevelDeclarations.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DefaultArguments extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDefaultArguments() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotationArgumentEquality.kt")
                public void testAnnotationArgumentEquality() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationArgumentEquality.kt", this::doTest);
                }

                @TestMetadata("annotations.kt")
                public void testAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotations.kt", this::doTest);
                }

                @TestMetadata("annotationsViaActualTypeAlias.kt")
                public void testAnnotationsViaActualTypeAlias() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias.kt", this::doTest);
                }

                @TestMetadata("constructor.kt")
                public void testConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructor.kt", this::doTest);
                }

                @TestMetadata("expectedDeclaresDefaultArguments.kt")
                public void testExpectedDeclaresDefaultArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedDeclaresDefaultArguments.kt", this::doTest);
                }

                @TestMetadata("expectedInheritsDefaultArguments.kt")
                public void testExpectedInheritsDefaultArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedInheritsDefaultArguments.kt", this::doTest);
                }

                @TestMetadata("expectedVsNonExpectedWithDefaults.kt")
                public void testExpectedVsNonExpectedWithDefaults() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedVsNonExpectedWithDefaults.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/deprecated")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Deprecated extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDeprecated() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/deprecated"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("header.kt")
                public void testHeader() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/deprecated/header.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/enum")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Enum extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("additionalEntriesInImpl.kt")
                public void testAdditionalEntriesInImpl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/enum/additionalEntriesInImpl.kt", this::doTest);
                }

                public void testAllFilesPresentInEnum() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/enum"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("constructorInHeaderEnum.kt")
                public void testConstructorInHeaderEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/enum/constructorInHeaderEnum.kt", this::doTest);
                }

                @TestMetadata("differentEntryOrder.kt")
                public void testDifferentEntryOrder() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/enum/differentEntryOrder.kt", this::doTest);
                }

                @TestMetadata("enumEntryWithBody.kt")
                public void testEnumEntryWithBody() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/enum/enumEntryWithBody.kt", this::doTest);
                }

                @TestMetadata("simpleEnum.kt")
                public void testSimpleEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/enum/simpleEnum.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/generic")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Generic extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInGeneric() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/generic"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("functionTypeParameterBounds.kt")
                public void testFunctionTypeParameterBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/generic/functionTypeParameterBounds.kt", this::doTest);
                }

                @TestMetadata("genericMemberBounds.kt")
                public void testGenericMemberBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/generic/genericMemberBounds.kt", this::doTest);
                }

                @TestMetadata("membersInGenericClass.kt")
                public void testMembersInGenericClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/generic/membersInGenericClass.kt", this::doTest);
                }

                @TestMetadata("typeParameterBoundsDifferentOrderActualMissing.kt")
                public void testTypeParameterBoundsDifferentOrderActualMissing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/generic/typeParameterBoundsDifferentOrderActualMissing.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/headerClass")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class HeaderClass extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("actualClassWithDefaultValuesInAnnotationViaTypealias.kt")
                public void testActualClassWithDefaultValuesInAnnotationViaTypealias() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDefaultValuesInAnnotationViaTypealias.kt", this::doTest);
                }

                @TestMetadata("actualClassWithDifferentConstructors.kt")
                public void testActualClassWithDifferentConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDifferentConstructors.kt", this::doTest);
                }

                @TestMetadata("actualMissing.kt")
                public void testActualMissing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMissing.kt", this::doTest);
                }

                public void testAllFilesPresentInHeaderClass() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/headerClass"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classKinds.kt")
                public void testClassKinds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/classKinds.kt", this::doTest);
                }

                @TestMetadata("dontOverrideMethodsFromInterfaceInCommonCode.kt")
                public void testDontOverrideMethodsFromInterfaceInCommonCode() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/dontOverrideMethodsFromInterfaceInCommonCode.kt", this::doTest);
                }

                @TestMetadata("expectClassWithExplicitAbstractMember.kt")
                public void testExpectClassWithExplicitAbstractMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithExplicitAbstractMember.kt", this::doTest);
                }

                @TestMetadata("expectClassWithoutConstructor.kt")
                public void testExpectClassWithoutConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithoutConstructor.kt", this::doTest);
                }

                @TestMetadata("expectDeclarationWithStrongIncompatibilities.kt")
                public void testExpectDeclarationWithStrongIncompatibilities() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithStrongIncompatibilities.kt", this::doTest);
                }

                @TestMetadata("expectDeclarationWithWeakIncompatibilities.kt")
                public void testExpectDeclarationWithWeakIncompatibilities() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithWeakIncompatibilities.kt", this::doTest);
                }

                @TestMetadata("expectFinalActualOpen.kt")
                public void testExpectFinalActualOpen() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFinalActualOpen.kt", this::doTest);
                }

                @TestMetadata("explicitConstructorDelegation.kt")
                public void testExplicitConstructorDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/explicitConstructorDelegation.kt", this::doTest);
                }

                @TestMetadata("extendExpectedClassWithAbstractMember.kt")
                public void testExtendExpectedClassWithAbstractMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithAbstractMember.kt", this::doTest);
                }

                @TestMetadata("extendExpectedClassWithoutExplicitOverrideOfMethod.kt")
                public void testExtendExpectedClassWithoutExplicitOverrideOfMethod() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithoutExplicitOverrideOfMethod.kt", this::doTest);
                }

                @TestMetadata("extraHeaderOnMembers.kt")
                public void testExtraHeaderOnMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extraHeaderOnMembers.kt", this::doTest);
                }

                @TestMetadata("functionAndPropertyWithSameName.kt")
                public void testFunctionAndPropertyWithSameName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/functionAndPropertyWithSameName.kt", this::doTest);
                }

                @TestMetadata("genericClassImplTypeAlias.kt")
                public void testGenericClassImplTypeAlias() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/genericClassImplTypeAlias.kt", this::doTest);
                }

                @TestMetadata("headerClassMember.kt")
                public void testHeaderClassMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassMember.kt", this::doTest);
                }

                @TestMetadata("headerClassWithFunctionBody.kt")
                public void testHeaderClassWithFunctionBody() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassWithFunctionBody.kt", this::doTest);
                }

                @TestMetadata("implDataClass.kt")
                public void testImplDataClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/implDataClass.kt", this::doTest);
                }

                @TestMetadata("implOpenClass.kt")
                public void testImplOpenClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/implOpenClass.kt", this::doTest);
                }

                @TestMetadata("inheritanceByDelegationInExpectClass.kt")
                public void testInheritanceByDelegationInExpectClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/inheritanceByDelegationInExpectClass.kt", this::doTest);
                }

                @TestMetadata("memberPropertyKinds.kt")
                public void testMemberPropertyKinds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/memberPropertyKinds.kt", this::doTest);
                }

                @TestMetadata("modalityCheckForExplicitAndImplicitOverride.kt")
                public void testModalityCheckForExplicitAndImplicitOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/modalityCheckForExplicitAndImplicitOverride.kt", this::doTest);
                }

                @TestMetadata("nestedClasses.kt")
                public void testNestedClasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClasses.kt", this::doTest);
                }

                @TestMetadata("nestedClassesWithErrors.kt")
                public void testNestedClassesWithErrors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClassesWithErrors.kt", this::doTest);
                }

                @TestMetadata("noImplKeywordOnMember.kt")
                public void testNoImplKeywordOnMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/noImplKeywordOnMember.kt", this::doTest);
                }

                @TestMetadata("privateMembers.kt")
                public void testPrivateMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/privateMembers.kt", this::doTest);
                }

                @TestMetadata("simpleHeaderClass.kt")
                public void testSimpleHeaderClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/simpleHeaderClass.kt", this::doTest);
                }

                @TestMetadata("smartCastOnExpectClass.kt")
                public void testSmartCastOnExpectClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/smartCastOnExpectClass.kt", this::doTest);
                }

                @TestMetadata("superClass.kt")
                public void testSuperClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/superClass.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/java")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Java extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInJava() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/java"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("flexibleTypes.kt")
                public void testFlexibleTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/java/flexibleTypes.kt", this::doTest);
                }

                @TestMetadata("parameterNames.kt")
                public void testParameterNames() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/java/parameterNames.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelFun")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TopLevelFun extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInTopLevelFun() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/topLevelFun"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("callHeaderFun.kt")
                public void testCallHeaderFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callHeaderFun.kt", this::doTest);
                }

                @TestMetadata("callableReferenceOnExpectFun.kt")
                public void testCallableReferenceOnExpectFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callableReferenceOnExpectFun.kt", this::doTest);
                }

                @TestMetadata("conflictingHeaderDeclarations.kt")
                public void testConflictingHeaderDeclarations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingHeaderDeclarations.kt", this::doTest);
                }

                @TestMetadata("conflictingImplDeclarations.kt")
                public void testConflictingImplDeclarations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingImplDeclarations.kt", this::doTest);
                }

                @TestMetadata("functionModifiers.kt")
                public void testFunctionModifiers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/functionModifiers.kt", this::doTest);
                }

                @TestMetadata("headerAndImplInDIfferentPackages.kt")
                public void testHeaderAndImplInDIfferentPackages() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerAndImplInDIfferentPackages.kt", this::doTest);
                }

                @TestMetadata("headerDeclarationWithBody.kt")
                public void testHeaderDeclarationWithBody() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerDeclarationWithBody.kt", this::doTest);
                }

                @TestMetadata("headerWithoutImpl.kt")
                public void testHeaderWithoutImpl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerWithoutImpl.kt", this::doTest);
                }

                @TestMetadata("implDeclarationWithoutBody.kt")
                public void testImplDeclarationWithoutBody() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implDeclarationWithoutBody.kt", this::doTest);
                }

                @TestMetadata("implWithoutHeader.kt")
                public void testImplWithoutHeader() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implWithoutHeader.kt", this::doTest);
                }

                @TestMetadata("inlineFun.kt")
                public void testInlineFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/inlineFun.kt", this::doTest);
                }

                @TestMetadata("simpleHeaderFun.kt")
                public void testSimpleHeaderFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/simpleHeaderFun.kt", this::doTest);
                }

                @TestMetadata("valueParameterModifiers.kt")
                public void testValueParameterModifiers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/valueParameterModifiers.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TopLevelProperty extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInTopLevelProperty() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("differentKindsOfProperties.kt")
                public void testDifferentKindsOfProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/differentKindsOfProperties.kt", this::doTest);
                }

                @TestMetadata("simpleHeaderVar.kt")
                public void testSimpleHeaderVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/simpleHeaderVar.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/namedArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NamedArguments extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInNamedArguments() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/namedArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("allowForJavaAnnotation.kt")
            public void testAllowForJavaAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/allowForJavaAnnotation.kt", this::doTest);
            }

            @TestMetadata("ambiguousNamedArguments1.kt")
            public void testAmbiguousNamedArguments1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArguments1.kt", this::doTest);
            }

            @TestMetadata("ambiguousNamedArguments2.kt")
            public void testAmbiguousNamedArguments2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArguments2.kt", this::doTest);
            }

            @TestMetadata("ambiguousNamedArgumentsWithGenerics1.kt")
            public void testAmbiguousNamedArgumentsWithGenerics1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics1.kt", this::doTest);
            }

            @TestMetadata("ambiguousNamedArgumentsWithGenerics2.kt")
            public void testAmbiguousNamedArgumentsWithGenerics2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics2.kt", this::doTest);
            }

            @TestMetadata("ambiguousNamedArgumentsWithGenerics3.kt")
            public void testAmbiguousNamedArgumentsWithGenerics3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics3.kt", this::doTest);
            }

            @TestMetadata("disallowForJavaConstructor.kt")
            public void testDisallowForJavaConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForJavaConstructor.kt", this::doTest);
            }

            @TestMetadata("disallowForJavaMethods.kt")
            public void testDisallowForJavaMethods() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForJavaMethods.kt", this::doTest);
            }

            @TestMetadata("disallowForSamAdapterConstructor.kt")
            public void testDisallowForSamAdapterConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForSamAdapterConstructor.kt", this::doTest);
            }

            @TestMetadata("disallowForSamAdapterFunction.kt")
            public void testDisallowForSamAdapterFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForSamAdapterFunction.kt", this::doTest);
            }

            @TestMetadata("namedArgumentsAndDefaultValues.kt")
            public void testNamedArgumentsAndDefaultValues() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/namedArgumentsAndDefaultValues.kt", this::doTest);
            }

            @TestMetadata("namedArgumentsInOverloads.kt")
            public void testNamedArgumentsInOverloads() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/namedArgumentsInOverloads.kt", this::doTest);
            }

            @TestMetadata("namedArgumentsInOverrides.kt")
            public void testNamedArgumentsInOverrides() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/namedArguments/namedArgumentsInOverrides.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NullabilityAndSmartCasts extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInNullabilityAndSmartCasts() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AssertNotNull.kt")
            public void testAssertNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/AssertNotNull.kt", this::doTest);
            }

            @TestMetadata("dataFlowInfoAfterExclExcl.kt")
            public void testDataFlowInfoAfterExclExcl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/dataFlowInfoAfterExclExcl.kt", this::doTest);
            }

            @TestMetadata("equalityUnderNotNullCheck.kt")
            public void testEqualityUnderNotNullCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/equalityUnderNotNullCheck.kt", this::doTest);
            }

            @TestMetadata("funcLiteralArgsInsideAmbiguity.kt")
            public void testFuncLiteralArgsInsideAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/funcLiteralArgsInsideAmbiguity.kt", this::doTest);
            }

            @TestMetadata("funcLiteralArgsInsideUnresolvedFunction.kt")
            public void testFuncLiteralArgsInsideUnresolvedFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/funcLiteralArgsInsideUnresolvedFunction.kt", this::doTest);
            }

            @TestMetadata("InfixCallNullability.kt")
            public void testInfixCallNullability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/InfixCallNullability.kt", this::doTest);
            }

            @TestMetadata("kt1270.kt")
            public void testKt1270() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1270.kt", this::doTest);
            }

            @TestMetadata("kt1680.kt")
            public void testKt1680() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1680.kt", this::doTest);
            }

            @TestMetadata("kt1778.kt")
            public void testKt1778() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1778.kt", this::doTest);
            }

            @TestMetadata("kt2109.kt")
            public void testKt2109() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2109.kt", this::doTest);
            }

            @TestMetadata("kt2125.kt")
            public void testKt2125() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2125.kt", this::doTest);
            }

            @TestMetadata("kt2146.kt")
            public void testKt2146() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2146.kt", this::doTest);
            }

            @TestMetadata("kt2164.kt")
            public void testKt2164() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2164.kt", this::doTest);
            }

            @TestMetadata("kt2176.kt")
            public void testKt2176() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2176.kt", this::doTest);
            }

            @TestMetadata("kt2195.kt")
            public void testKt2195() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2195.kt", this::doTest);
            }

            @TestMetadata("kt2212.kt")
            public void testKt2212() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2212.kt", this::doTest);
            }

            @TestMetadata("kt2216.kt")
            public void testKt2216() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2216.kt", this::doTest);
            }

            @TestMetadata("kt2223.kt")
            public void testKt2223() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2223.kt", this::doTest);
            }

            @TestMetadata("kt2234.kt")
            public void testKt2234() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2234.kt", this::doTest);
            }

            @TestMetadata("kt2336.kt")
            public void testKt2336() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2336.kt", this::doTest);
            }

            @TestMetadata("kt244.kt")
            public void testKt244() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt244.kt", this::doTest);
            }

            @TestMetadata("kt362.kt")
            public void testKt362() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt362.kt", this::doTest);
            }

            @TestMetadata("noSenselessNullOnNullableType.kt")
            public void testNoSenselessNullOnNullableType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/noSenselessNullOnNullableType.kt", this::doTest);
            }

            @TestMetadata("noUnnecessaryNotNullAssertionOnErrorType.kt")
            public void testNoUnnecessaryNotNullAssertionOnErrorType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/noUnnecessaryNotNullAssertionOnErrorType.kt", this::doTest);
            }

            @TestMetadata("notnullTypesFromJavaWithSmartcast.kt")
            public void testNotnullTypesFromJavaWithSmartcast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/notnullTypesFromJavaWithSmartcast.kt", this::doTest);
            }

            @TestMetadata("NullableNothingIsExactlyNull.kt")
            public void testNullableNothingIsExactlyNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/NullableNothingIsExactlyNull.kt", this::doTest);
            }

            @TestMetadata("nullableReceiverWithOverloadedMethod.kt")
            public void testNullableReceiverWithOverloadedMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/nullableReceiverWithOverloadedMethod.kt", this::doTest);
            }

            @TestMetadata("PreferExtensionsOnNullableReceiver.kt")
            public void testPreferExtensionsOnNullableReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/PreferExtensionsOnNullableReceiver.kt", this::doTest);
            }

            @TestMetadata("QualifiedExpressionNullability.kt")
            public void testQualifiedExpressionNullability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/QualifiedExpressionNullability.kt", this::doTest);
            }

            @TestMetadata("ReceiverNullability.kt")
            public void testReceiverNullability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/ReceiverNullability.kt", this::doTest);
            }

            @TestMetadata("SenselessNullInWhen.kt")
            public void testSenselessNullInWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/SenselessNullInWhen.kt", this::doTest);
            }

            @TestMetadata("senslessComparisonWithNullOnTypeParameters.kt")
            public void testSenslessComparisonWithNullOnTypeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/senslessComparisonWithNullOnTypeParameters.kt", this::doTest);
            }

            @TestMetadata("smartCastReceiverWithGenerics.kt")
            public void testSmartCastReceiverWithGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/smartCastReceiverWithGenerics.kt", this::doTest);
            }

            @TestMetadata("smartCastsAndBooleanExpressions.kt")
            public void testSmartCastsAndBooleanExpressions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/smartCastsAndBooleanExpressions.kt", this::doTest);
            }

            @TestMetadata("unnecessaryNotNullAssertion.kt")
            public void testUnnecessaryNotNullAssertion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unnecessaryNotNullAssertion.kt", this::doTest);
            }

            @TestMetadata("unstableSmartcastWhenOpenGetterWithOverloading.kt")
            public void testUnstableSmartcastWhenOpenGetterWithOverloading() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unstableSmartcastWhenOpenGetterWithOverloading.kt", this::doTest);
            }

            @TestMetadata("unstableSmartcastWithOverloadedExtensions.kt")
            public void testUnstableSmartcastWithOverloadedExtensions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unstableSmartcastWithOverloadedExtensions.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/nullableTypes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NullableTypes extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInNullableTypes() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/nullableTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("baseWithNullableUpperBound.kt")
            public void testBaseWithNullableUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/baseWithNullableUpperBound.kt", this::doTest);
            }

            @TestMetadata("elvisOnUnit.kt")
            public void testElvisOnUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/elvisOnUnit.kt", this::doTest);
            }

            @TestMetadata("nullAssertOnTypeWithNullableUpperBound.kt")
            public void testNullAssertOnTypeWithNullableUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/nullAssertOnTypeWithNullableUpperBound.kt", this::doTest);
            }

            @TestMetadata("nullableArgumentForIn.kt")
            public void testNullableArgumentForIn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentForIn.kt", this::doTest);
            }

            @TestMetadata("nullableArgumentToNonNullParameterPlatform.kt")
            public void testNullableArgumentToNonNullParameterPlatform() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentToNonNullParameterPlatform.kt", this::doTest);
            }

            @TestMetadata("nullableArgumentToNonNullParameterSimple.kt")
            public void testNullableArgumentToNonNullParameterSimple() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentToNonNullParameterSimple.kt", this::doTest);
            }

            @TestMetadata("redundantNullable.kt")
            public void testRedundantNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/redundantNullable.kt", this::doTest);
            }

            @TestMetadata("redundantNullableInSupertype.kt")
            public void testRedundantNullableInSupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/redundantNullableInSupertype.kt", this::doTest);
            }

            @TestMetadata("safeAccessOnUnit.kt")
            public void testSafeAccessOnUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/safeAccessOnUnit.kt", this::doTest);
            }

            @TestMetadata("safeCallOnTypeWithNullableUpperBound.kt")
            public void testSafeCallOnTypeWithNullableUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/safeCallOnTypeWithNullableUpperBound.kt", this::doTest);
            }

            @TestMetadata("safeCallWithInvoke.kt")
            public void testSafeCallWithInvoke() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/safeCallWithInvoke.kt", this::doTest);
            }

            @TestMetadata("uselessElvis.kt")
            public void testUselessElvis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/nullableTypes/uselessElvis.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/numbers")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Numbers extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInNumbers() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/numbers"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("characterIsNotANumber.kt")
            public void testCharacterIsNotANumber() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/numbers/characterIsNotANumber.kt", this::doTest);
            }

            @TestMetadata("doublesInSimpleConstraints.kt")
            public void testDoublesInSimpleConstraints() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/numbers/doublesInSimpleConstraints.kt", this::doTest);
            }

            @TestMetadata("intValuesOutOfRange.kt")
            public void testIntValuesOutOfRange() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/numbers/intValuesOutOfRange.kt", this::doTest);
            }

            @TestMetadata("numbersInSimpleConstraints.kt")
            public void testNumbersInSimpleConstraints() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/numbers/numbersInSimpleConstraints.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/objects")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Objects extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInObjects() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/objects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("invokeOnInnerObject.kt")
            public void testInvokeOnInnerObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/invokeOnInnerObject.kt", this::doTest);
            }

            @TestMetadata("kt2240.kt")
            public void testKt2240() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt2240.kt", this::doTest);
            }

            @TestMetadata("kt5527.kt")
            public void testKt5527() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt5527.kt", this::doTest);
            }

            @TestMetadata("localObjectInsideObject.kt")
            public void testLocalObjectInsideObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/localObjectInsideObject.kt", this::doTest);
            }

            @TestMetadata("localObjects.kt")
            public void testLocalObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/localObjects.kt", this::doTest);
            }

            @TestMetadata("nestedClassInAnonymousObject.kt")
            public void testNestedClassInAnonymousObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/nestedClassInAnonymousObject.kt", this::doTest);
            }

            @TestMetadata("objectInsideFun.kt")
            public void testObjectInsideFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/objectInsideFun.kt", this::doTest);
            }

            @TestMetadata("objectLiteralExpressionTypeMismatch.kt")
            public void testObjectLiteralExpressionTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/objectLiteralExpressionTypeMismatch.kt", this::doTest);
            }

            @TestMetadata("Objects.kt")
            public void testObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/Objects.kt", this::doTest);
            }

            @TestMetadata("ObjectsInheritance.kt")
            public void testObjectsInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/ObjectsInheritance.kt", this::doTest);
            }

            @TestMetadata("ObjectsLocal.kt")
            public void testObjectsLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/ObjectsLocal.kt", this::doTest);
            }

            @TestMetadata("ObjectsNested.kt")
            public void testObjectsNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/ObjectsNested.kt", this::doTest);
            }

            @TestMetadata("OpenInObject.kt")
            public void testOpenInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/OpenInObject.kt", this::doTest);
            }

            @TestMetadata("upperBoundViolated.kt")
            public void testUpperBoundViolated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/upperBoundViolated.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/objects/kt21515")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Kt21515 extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInKt21515() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/objects/kt21515"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotationConstructor.kt")
                public void testAnnotationConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/annotationConstructor.kt", this::doTest);
                }

                @TestMetadata("callableReferenceComplexCasesWithImportsOld.kt")
                public void testCallableReferenceComplexCasesWithImportsOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferenceComplexCasesWithImportsOld.kt", this::doTest);
                }

                @TestMetadata("callableReferencesComplexCasesWithQualificationOld.kt")
                public void testCallableReferencesComplexCasesWithQualificationOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesComplexCasesWithQualificationOld.kt", this::doTest);
                }

                @TestMetadata("callableReferencesNew.kt")
                public void testCallableReferencesNew() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesNew.kt", this::doTest);
                }

                @TestMetadata("callableReferencesOld.kt")
                public void testCallableReferencesOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesOld.kt", this::doTest);
                }

                @TestMetadata("callableReferencesOldComplexCases.kt")
                public void testCallableReferencesOldComplexCases() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesOldComplexCases.kt", this::doTest);
                }

                @TestMetadata("callableReferencesWithQualificationNew.kt")
                public void testCallableReferencesWithQualificationNew() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesWithQualificationNew.kt", this::doTest);
                }

                @TestMetadata("callableReferencesWithQualificationOld.kt")
                public void testCallableReferencesWithQualificationOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesWithQualificationOld.kt", this::doTest);
                }

                @TestMetadata("classifierFromCompanionObjectNew.kt")
                public void testClassifierFromCompanionObjectNew() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectNew.kt", this::doTest);
                }

                @TestMetadata("classifierFromCompanionObjectOld.kt")
                public void testClassifierFromCompanionObjectOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectOld.kt", this::doTest);
                }

                @TestMetadata("classifierFromCompanionObjectWithQualificationNew.kt")
                public void testClassifierFromCompanionObjectWithQualificationNew() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectWithQualificationNew.kt", this::doTest);
                }

                @TestMetadata("classifierFromCompanionObjectWithQualificationOld.kt")
                public void testClassifierFromCompanionObjectWithQualificationOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectWithQualificationOld.kt", this::doTest);
                }

                @TestMetadata("classifierIsVisibleByTwoPaths.kt")
                public void testClassifierIsVisibleByTwoPaths() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierIsVisibleByTwoPaths.kt", this::doTest);
                }

                @TestMetadata("inheritedFromDeprecatedNew.kt")
                public void testInheritedFromDeprecatedNew() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedNew.kt", this::doTest);
                }

                @TestMetadata("inheritedFromDeprecatedOld.kt")
                public void testInheritedFromDeprecatedOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedOld.kt", this::doTest);
                }

                @TestMetadata("inheritedFromDeprecatedWithQualificationNew.kt")
                public void testInheritedFromDeprecatedWithQualificationNew() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedWithQualificationNew.kt", this::doTest);
                }

                @TestMetadata("inheritedFromDeprecatedWithQualificationOld.kt")
                public void testInheritedFromDeprecatedWithQualificationOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedWithQualificationOld.kt", this::doTest);
                }

                @TestMetadata("useDeprecatedConstructorNew.kt")
                public void testUseDeprecatedConstructorNew() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorNew.kt", this::doTest);
                }

                @TestMetadata("useDeprecatedConstructorOld.kt")
                public void testUseDeprecatedConstructorOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorOld.kt", this::doTest);
                }

                @TestMetadata("useDeprecatedConstructorWithQualificationNew.kt")
                public void testUseDeprecatedConstructorWithQualificationNew() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorWithQualificationNew.kt", this::doTest);
                }

                @TestMetadata("useDeprecatedConstructorWithQualificationOld.kt")
                public void testUseDeprecatedConstructorWithQualificationOld() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorWithQualificationOld.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/operatorRem")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class OperatorRem extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInOperatorRem() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/operatorRem"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("DeprecatedModAssignOperatorConventions.kt")
            public void testDeprecatedModAssignOperatorConventions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/DeprecatedModAssignOperatorConventions.kt", this::doTest);
            }

            @TestMetadata("deprecatedModConvention.kt")
            public void testDeprecatedModConvention() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/deprecatedModConvention.kt", this::doTest);
            }

            @TestMetadata("DeprecatedModOperatorConventions.kt")
            public void testDeprecatedModOperatorConventions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/DeprecatedModOperatorConventions.kt", this::doTest);
            }

            @TestMetadata("doNotResolveToInapplicableRem.kt")
            public void testDoNotResolveToInapplicableRem() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/doNotResolveToInapplicableRem.kt", this::doTest);
            }

            @TestMetadata("modWithRemAssign.kt")
            public void testModWithRemAssign() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/modWithRemAssign.kt", this::doTest);
            }

            @TestMetadata("noDeprecatedModConventionWithoutFeature.kt")
            public void testNoDeprecatedModConventionWithoutFeature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/noDeprecatedModConventionWithoutFeature.kt", this::doTest);
            }

            @TestMetadata("noOperatorRemFeature.kt")
            public void testNoOperatorRemFeature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/noOperatorRemFeature.kt", this::doTest);
            }

            @TestMetadata("noWarningForModFromBuiltinsWhenApi1_0.kt")
            public void testNoWarningForModFromBuiltinsWhenApi1_0() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/noWarningForModFromBuiltinsWhenApi1_0.kt", this::doTest);
            }

            @TestMetadata("numberRemConversions.kt")
            public void testNumberRemConversions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/numberRemConversions.kt", this::doTest);
            }

            @TestMetadata("operatorRem.kt")
            public void testOperatorRem() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/operatorRem.kt", this::doTest);
            }

            @TestMetadata("preferRemAsExtentionOverMod.kt")
            public void testPreferRemAsExtentionOverMod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemAsExtentionOverMod.kt", this::doTest);
            }

            @TestMetadata("preferRemAsMemberOverMod.kt")
            public void testPreferRemAsMemberOverMod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemAsMemberOverMod.kt", this::doTest);
            }

            @TestMetadata("preferRemFromCompanionObjectOverRem.kt")
            public void testPreferRemFromCompanionObjectOverRem() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemFromCompanionObjectOverRem.kt", this::doTest);
            }

            @TestMetadata("preferRemOverModInLocalFunctions.kt")
            public void testPreferRemOverModInLocalFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemOverModInLocalFunctions.kt", this::doTest);
            }

            @TestMetadata("preferRemWithImplicitReceivers.kt")
            public void testPreferRemWithImplicitReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemWithImplicitReceivers.kt", this::doTest);
            }

            @TestMetadata("prefereRemAsExtensionOverMemberMod.kt")
            public void testPrefereRemAsExtensionOverMemberMod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/prefereRemAsExtensionOverMemberMod.kt", this::doTest);
            }

            @TestMetadata("remAndRemAssignAmbiguity.kt")
            public void testRemAndRemAssignAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/remAndRemAssignAmbiguity.kt", this::doTest);
            }

            @TestMetadata("remWithModAndModAssign.kt")
            public void testRemWithModAndModAssign() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/remWithModAndModAssign.kt", this::doTest);
            }

            @TestMetadata("remWithModAssign.kt")
            public void testRemWithModAssign() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/remWithModAssign.kt", this::doTest);
            }

            @TestMetadata("resolveModIfRemIsHidden.kt")
            public void testResolveModIfRemIsHidden() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/resolveModIfRemIsHidden.kt", this::doTest);
            }

            @TestMetadata("resolveToModWhenNoOperatorRemFeature.kt")
            public void testResolveToModWhenNoOperatorRemFeature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorRem/resolveToModWhenNoOperatorRemFeature.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class OperatorsOverloading extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInOperatorsOverloading() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/operatorsOverloading"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AssignOperatorAmbiguity.kt")
            public void testAssignOperatorAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorAmbiguity.kt", this::doTest);
            }

            @TestMetadata("AssignmentOperations.kt")
            public void testAssignmentOperations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignmentOperations.kt", this::doTest);
            }

            @TestMetadata("assignmentOperationsCheckReturnType.kt")
            public void testAssignmentOperationsCheckReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/assignmentOperationsCheckReturnType.kt", this::doTest);
            }

            @TestMetadata("compareToNullable.kt")
            public void testCompareToNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/compareToNullable.kt", this::doTest);
            }

            @TestMetadata("InconsistentGetSet.kt")
            public void testInconsistentGetSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/InconsistentGetSet.kt", this::doTest);
            }

            @TestMetadata("IteratorAmbiguity.kt")
            public void testIteratorAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/IteratorAmbiguity.kt", this::doTest);
            }

            @TestMetadata("kt1028.kt")
            public void testKt1028() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt1028.kt", this::doTest);
            }

            @TestMetadata("kt11300.kt")
            public void testKt11300() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt11300.kt", this::doTest);
            }

            @TestMetadata("kt13330.kt")
            public void testKt13330() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt13330.kt", this::doTest);
            }

            @TestMetadata("kt13349.kt")
            public void testKt13349() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt13349.kt", this::doTest);
            }

            @TestMetadata("kt3450.kt")
            public void testKt3450() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt3450.kt", this::doTest);
            }

            @TestMetadata("plusAssignOnArray.kt")
            public void testPlusAssignOnArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnArray.kt", this::doTest);
            }

            @TestMetadata("plusAssignOnLocal.kt")
            public void testPlusAssignOnLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnLocal.kt", this::doTest);
            }

            @TestMetadata("plusAssignOnProperty.kt")
            public void testPlusAssignOnProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnProperty.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/overload")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Overload extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInOverload() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/overload"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ConflictingOlverloadsGenericFunctions.kt")
            public void testConflictingOlverloadsGenericFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConflictingOlverloadsGenericFunctions.kt", this::doTest);
            }

            @TestMetadata("ConflictingOverloadsFunsDifferentReturnInClass.kt")
            public void testConflictingOverloadsFunsDifferentReturnInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInClass.kt", this::doTest);
            }

            @TestMetadata("ConflictingOverloadsFunsDifferentReturnInPackage.kt")
            public void testConflictingOverloadsFunsDifferentReturnInPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInPackage.kt", this::doTest);
            }

            @TestMetadata("ConflictingOverloadsIdenticalExtFunsInPackage.kt")
            public void testConflictingOverloadsIdenticalExtFunsInPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalExtFunsInPackage.kt", this::doTest);
            }

            @TestMetadata("ConflictingOverloadsIdenticalFunsInClass.kt")
            public void testConflictingOverloadsIdenticalFunsInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsInClass.kt", this::doTest);
            }

            @TestMetadata("ConflictingOverloadsIdenticalFunsTPInClass.kt")
            public void testConflictingOverloadsIdenticalFunsTPInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsTPInClass.kt", this::doTest);
            }

            @TestMetadata("ConflictingOverloadsIdenticalValsInClass.kt")
            public void testConflictingOverloadsIdenticalValsInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalValsInClass.kt", this::doTest);
            }

            @TestMetadata("ConflictingOverloadsValsDifferentTypeInClass.kt")
            public void testConflictingOverloadsValsDifferentTypeInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsValsDifferentTypeInClass.kt", this::doTest);
            }

            @TestMetadata("ConstructorVsFunOverload.kt")
            public void testConstructorVsFunOverload() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ConstructorVsFunOverload.kt", this::doTest);
            }

            @TestMetadata("defaultParameters.kt")
            public void testDefaultParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/defaultParameters.kt", this::doTest);
            }

            @TestMetadata("EmptyArgumentListInLambda.kt")
            public void testEmptyArgumentListInLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/EmptyArgumentListInLambda.kt", this::doTest);
            }

            @TestMetadata("ExtFunDifferentReceiver.kt")
            public void testExtFunDifferentReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/ExtFunDifferentReceiver.kt", this::doTest);
            }

            @TestMetadata("FunNoConflictInDifferentPackages.kt")
            public void testFunNoConflictInDifferentPackages() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/FunNoConflictInDifferentPackages.kt", this::doTest);
            }

            @TestMetadata("kt10939.kt")
            public void testKt10939() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/kt10939.kt", this::doTest);
            }

            @TestMetadata("kt1998.kt")
            public void testKt1998() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/kt1998.kt", this::doTest);
            }

            @TestMetadata("kt2493.kt")
            public void testKt2493() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/kt2493.kt", this::doTest);
            }

            @TestMetadata("kt7068.kt")
            public void testKt7068() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/kt7068.kt", this::doTest);
            }

            @TestMetadata("kt7068_2.kt")
            public void testKt7068_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/kt7068_2.kt", this::doTest);
            }

            @TestMetadata("kt7440.kt")
            public void testKt7440() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/kt7440.kt", this::doTest);
            }

            @TestMetadata("LocalFunctions.kt")
            public void testLocalFunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/LocalFunctions.kt", this::doTest);
            }

            @TestMetadata("onlyPrivateOverloadsDiagnostic.kt")
            public void testOnlyPrivateOverloadsDiagnostic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/onlyPrivateOverloadsDiagnostic.kt", this::doTest);
            }

            @TestMetadata("OverloadFunRegularAndExt.kt")
            public void testOverloadFunRegularAndExt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/OverloadFunRegularAndExt.kt", this::doTest);
            }

            @TestMetadata("OverloadVarAndFunInClass.kt")
            public void testOverloadVarAndFunInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/OverloadVarAndFunInClass.kt", this::doTest);
            }

            @TestMetadata("SyntheticAndNotSynthetic.kt")
            public void testSyntheticAndNotSynthetic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/SyntheticAndNotSynthetic.kt", this::doTest);
            }

            @TestMetadata("TypeParameterMultipleBounds.kt")
            public void testTypeParameterMultipleBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/TypeParameterMultipleBounds.kt", this::doTest);
            }

            @TestMetadata("UnsubstitutedJavaGenetics.kt")
            public void testUnsubstitutedJavaGenetics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/overload/UnsubstitutedJavaGenetics.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/override")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Override extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("AbstractFunImplemented.kt")
            public void testAbstractFunImplemented() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/AbstractFunImplemented.kt", this::doTest);
            }

            @TestMetadata("AbstractFunNotImplemented.kt")
            public void testAbstractFunNotImplemented() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/AbstractFunNotImplemented.kt", this::doTest);
            }

            @TestMetadata("AbstractValImplemented.kt")
            public void testAbstractValImplemented() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/AbstractValImplemented.kt", this::doTest);
            }

            @TestMetadata("AbstractValNotImplemented.kt")
            public void testAbstractValNotImplemented() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/AbstractValNotImplemented.kt", this::doTest);
            }

            @TestMetadata("AbstractVarImplemented.kt")
            public void testAbstractVarImplemented() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/AbstractVarImplemented.kt", this::doTest);
            }

            @TestMetadata("AbstractVarNotImplemented.kt")
            public void testAbstractVarNotImplemented() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/AbstractVarNotImplemented.kt", this::doTest);
            }

            public void testAllFilesPresentInOverride() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/override"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AllPrivateFromSuperTypes.kt")
            public void testAllPrivateFromSuperTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/AllPrivateFromSuperTypes.kt", this::doTest);
            }

            @TestMetadata("ComplexValRedeclaration.kt")
            public void testComplexValRedeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ComplexValRedeclaration.kt", this::doTest);
            }

            @TestMetadata("ConflictingFunctionSignatureFromSuperclass.kt")
            public void testConflictingFunctionSignatureFromSuperclass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ConflictingFunctionSignatureFromSuperclass.kt", this::doTest);
            }

            @TestMetadata("ConflictingPropertySignatureFromSuperclass.kt")
            public void testConflictingPropertySignatureFromSuperclass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ConflictingPropertySignatureFromSuperclass.kt", this::doTest);
            }

            @TestMetadata("DefaultParameterValueInOverride.kt")
            public void testDefaultParameterValueInOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/DefaultParameterValueInOverride.kt", this::doTest);
            }

            @TestMetadata("DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt")
            public void testDefaultParameterValues_NoErrorsWhenInheritingFromOneTypeTwice() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt", this::doTest);
            }

            @TestMetadata("Delegation.kt")
            public void testDelegation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/Delegation.kt", this::doTest);
            }

            @TestMetadata("DelegationFun.kt")
            public void testDelegationFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/DelegationFun.kt", this::doTest);
            }

            @TestMetadata("DelegationVal.kt")
            public void testDelegationVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/DelegationVal.kt", this::doTest);
            }

            @TestMetadata("DelegationVar.kt")
            public void testDelegationVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/DelegationVar.kt", this::doTest);
            }

            @TestMetadata("DuplicateMethod.kt")
            public void testDuplicateMethod() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/DuplicateMethod.kt", this::doTest);
            }

            @TestMetadata("EqualityOfIntersectionTypes.kt")
            public void testEqualityOfIntersectionTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/EqualityOfIntersectionTypes.kt", this::doTest);
            }

            @TestMetadata("ExtendFunctionClass.kt")
            public void testExtendFunctionClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ExtendFunctionClass.kt", this::doTest);
            }

            @TestMetadata("FakeOverrideAbstractAndNonAbstractFun.kt")
            public void testFakeOverrideAbstractAndNonAbstractFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/FakeOverrideAbstractAndNonAbstractFun.kt", this::doTest);
            }

            @TestMetadata("FakeOverrideDifferentDeclarationSignatures.kt")
            public void testFakeOverrideDifferentDeclarationSignatures() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/FakeOverrideDifferentDeclarationSignatures.kt", this::doTest);
            }

            @TestMetadata("FakeOverrideModality1.kt")
            public void testFakeOverrideModality1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/FakeOverrideModality1.kt", this::doTest);
            }

            @TestMetadata("FakeOverrideModality2.kt")
            public void testFakeOverrideModality2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/FakeOverrideModality2.kt", this::doTest);
            }

            @TestMetadata("FakeOverrideModality3.kt")
            public void testFakeOverrideModality3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/FakeOverrideModality3.kt", this::doTest);
            }

            @TestMetadata("Generics.kt")
            public void testGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/Generics.kt", this::doTest);
            }

            @TestMetadata("InvisiblePotentialOverride.kt")
            public void testInvisiblePotentialOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/InvisiblePotentialOverride.kt", this::doTest);
            }

            @TestMetadata("kt12358.kt")
            public void testKt12358() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt12358.kt", this::doTest);
            }

            @TestMetadata("kt12467.kt")
            public void testKt12467() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt12467.kt", this::doTest);
            }

            @TestMetadata("kt12482.kt")
            public void testKt12482() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt12482.kt", this::doTest);
            }

            @TestMetadata("kt1862.kt")
            public void testKt1862() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt1862.kt", this::doTest);
            }

            @TestMetadata("kt2052.kt")
            public void testKt2052() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt2052.kt", this::doTest);
            }

            @TestMetadata("kt2491.kt")
            public void testKt2491() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt2491.kt", this::doTest);
            }

            @TestMetadata("kt4763.kt")
            public void testKt4763() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt4763.kt", this::doTest);
            }

            @TestMetadata("kt4763property.kt")
            public void testKt4763property() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt4763property.kt", this::doTest);
            }

            @TestMetadata("kt4785.kt")
            public void testKt4785() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt4785.kt", this::doTest);
            }

            @TestMetadata("kt6014.kt")
            public void testKt6014() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt6014.kt", this::doTest);
            }

            @TestMetadata("kt880.kt")
            public void testKt880() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt880.kt", this::doTest);
            }

            @TestMetadata("kt8990.kt")
            public void testKt8990() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/kt8990.kt", this::doTest);
            }

            @TestMetadata("MissingDelegate.kt")
            public void testMissingDelegate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/MissingDelegate.kt", this::doTest);
            }

            @TestMetadata("MultipleDefaultParametersInSupertypes.kt")
            public void testMultipleDefaultParametersInSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypes.kt", this::doTest);
            }

            @TestMetadata("MultipleDefaultParametersInSupertypesNoOverride.kt")
            public void testMultipleDefaultParametersInSupertypesNoOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypesNoOverride.kt", this::doTest);
            }

            @TestMetadata("MultipleDefaultsAndNamesInSupertypes.kt")
            public void testMultipleDefaultsAndNamesInSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultsAndNamesInSupertypes.kt", this::doTest);
            }

            @TestMetadata("MultipleDefaultsInSupertypesNoExplicitOverride.kt")
            public void testMultipleDefaultsInSupertypesNoExplicitOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultsInSupertypesNoExplicitOverride.kt", this::doTest);
            }

            @TestMetadata("NonGenerics.kt")
            public void testNonGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/NonGenerics.kt", this::doTest);
            }

            @TestMetadata("ObjectDelegationManyImpl.kt")
            public void testObjectDelegationManyImpl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ObjectDelegationManyImpl.kt", this::doTest);
            }

            @TestMetadata("overrideMemberFromFinalClass.kt")
            public void testOverrideMemberFromFinalClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/overrideMemberFromFinalClass.kt", this::doTest);
            }

            @TestMetadata("OverrideWithErrors.kt")
            public void testOverrideWithErrors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/OverrideWithErrors.kt", this::doTest);
            }

            @TestMetadata("OverridingFinalMember.kt")
            public void testOverridingFinalMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/OverridingFinalMember.kt", this::doTest);
            }

            @TestMetadata("ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt")
            public void testParameterDefaultValues_DefaultValueFromOnlyOneSupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt", this::doTest);
            }

            @TestMetadata("ParentInheritsManyImplementations.kt")
            public void testParentInheritsManyImplementations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ParentInheritsManyImplementations.kt", this::doTest);
            }

            @TestMetadata("PropertyInConstructor.kt")
            public void testPropertyInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/PropertyInConstructor.kt", this::doTest);
            }

            @TestMetadata("ProtectedAndPrivateFromSupertypes.kt")
            public void testProtectedAndPrivateFromSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ProtectedAndPrivateFromSupertypes.kt", this::doTest);
            }

            @TestMetadata("SuspiciousCase1.kt")
            public void testSuspiciousCase1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/SuspiciousCase1.kt", this::doTest);
            }

            @TestMetadata("ToAbstractMembersFromSuper-kt1996.kt")
            public void testToAbstractMembersFromSuper_kt1996() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/ToAbstractMembersFromSuper-kt1996.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/override/clashesOnInheritance")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ClashesOnInheritance extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInClashesOnInheritance() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/override/clashesOnInheritance"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("covariantOverrides.kt")
                public void testCovariantOverrides() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/covariantOverrides.kt", this::doTest);
                }

                @TestMetadata("flexibleReturnType.kt")
                public void testFlexibleReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnType.kt", this::doTest);
                }

                @TestMetadata("flexibleReturnTypeIn.kt")
                public void testFlexibleReturnTypeIn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnTypeIn.kt", this::doTest);
                }

                @TestMetadata("flexibleReturnTypeList.kt")
                public void testFlexibleReturnTypeList() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnTypeList.kt", this::doTest);
                }

                @TestMetadata("genericWithUpperBound.kt")
                public void testGenericWithUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/genericWithUpperBound.kt", this::doTest);
                }

                @TestMetadata("kt13355.kt")
                public void testKt13355() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt13355.kt", this::doTest);
                }

                @TestMetadata("kt13355viaJava.kt")
                public void testKt13355viaJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt13355viaJava.kt", this::doTest);
                }

                @TestMetadata("kt9550.kt")
                public void testKt9550() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt9550.kt", this::doTest);
                }

                @TestMetadata("returnTypeMismatch.kt")
                public void testReturnTypeMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/returnTypeMismatch.kt", this::doTest);
                }

                @TestMetadata("unrelatedInherited.kt")
                public void testUnrelatedInherited() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/unrelatedInherited.kt", this::doTest);
                }

                @TestMetadata("valTypeMismatch.kt")
                public void testValTypeMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/valTypeMismatch.kt", this::doTest);
                }

                @TestMetadata("varTypeMismatch.kt")
                public void testVarTypeMismatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/varTypeMismatch.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/override/parameterNames")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ParameterNames extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInParameterNames() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/override/parameterNames"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("changeOnOverrideDiagnostic.kt")
                public void testChangeOnOverrideDiagnostic() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/parameterNames/changeOnOverrideDiagnostic.kt", this::doTest);
                }

                @TestMetadata("differentNamesInSupertypesDiagnostic.kt")
                public void testDifferentNamesInSupertypesDiagnostic() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/parameterNames/differentNamesInSupertypesDiagnostic.kt", this::doTest);
                }

                @TestMetadata("invokeInFunctionClass.kt")
                public void testInvokeInFunctionClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/parameterNames/invokeInFunctionClass.kt", this::doTest);
                }

                @TestMetadata("jjkHierarchy.kt")
                public void testJjkHierarchy() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/parameterNames/jjkHierarchy.kt", this::doTest);
                }

                @TestMetadata("kjkHierarchy.kt")
                public void testKjkHierarchy() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/parameterNames/kjkHierarchy.kt", this::doTest);
                }

                @TestMetadata("kjkWithSeveralSupers.kt")
                public void testKjkWithSeveralSupers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/parameterNames/kjkWithSeveralSupers.kt", this::doTest);
                }

                @TestMetadata("kotlinInheritsBothJavaAndKotlin.kt")
                public void testKotlinInheritsBothJavaAndKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/parameterNames/kotlinInheritsBothJavaAndKotlin.kt", this::doTest);
                }

                @TestMetadata("kotlinInheritsJava.kt")
                public void testKotlinInheritsJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/parameterNames/kotlinInheritsJava.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/override/typeParameters")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeParameters extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInTypeParameters() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/override/typeParameters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classAndTwoInterfaceBounds.kt")
                public void testClassAndTwoInterfaceBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/typeParameters/classAndTwoInterfaceBounds.kt", this::doTest);
                }

                @TestMetadata("differentSetsOfBounds.kt")
                public void testDifferentSetsOfBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/typeParameters/differentSetsOfBounds.kt", this::doTest);
                }

                @TestMetadata("kt9850.kt")
                public void testKt9850() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/typeParameters/kt9850.kt", this::doTest);
                }

                @TestMetadata("simpleVisitorTwoAccepts.kt")
                public void testSimpleVisitorTwoAccepts() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/override/typeParameters/simpleVisitorTwoAccepts.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/parenthesizedTypes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ParenthesizedTypes extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInParenthesizedTypes() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/parenthesizedTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("annotationsOnNullableParenthesizedTypes.kt")
            public void testAnnotationsOnNullableParenthesizedTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/parenthesizedTypes/annotationsOnNullableParenthesizedTypes.kt", this::doTest);
            }

            @TestMetadata("annotationsOnParenthesizedTypes.kt")
            public void testAnnotationsOnParenthesizedTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/parenthesizedTypes/annotationsOnParenthesizedTypes.kt", this::doTest);
            }

            @TestMetadata("splitModifierList.kt")
            public void testSplitModifierList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/parenthesizedTypes/splitModifierList.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/platformTypes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class PlatformTypes extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInPlatformTypes() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("delegateByComplexInheritance.kt")
            public void testDelegateByComplexInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/delegateByComplexInheritance.kt", this::doTest);
            }

            @TestMetadata("dereference.kt")
            public void testDereference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/dereference.kt", this::doTest);
            }

            @TestMetadata("elvis.kt")
            public void testElvis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/elvis.kt", this::doTest);
            }

            @TestMetadata("explicitFlexibleNoPackage.kt")
            public void testExplicitFlexibleNoPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/explicitFlexibleNoPackage.kt", this::doTest);
            }

            @TestMetadata("explicitFlexibleWithPackage.kt")
            public void testExplicitFlexibleWithPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/explicitFlexibleWithPackage.kt", this::doTest);
            }

            @TestMetadata("getParentOfType.kt")
            public void testGetParentOfType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/getParentOfType.kt", this::doTest);
            }

            @TestMetadata("inference.kt")
            public void testInference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/inference.kt", this::doTest);
            }

            @TestMetadata("intVsIntegerAmbiguity.kt")
            public void testIntVsIntegerAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/intVsIntegerAmbiguity.kt", this::doTest);
            }

            @TestMetadata("javaEmptyList.kt")
            public void testJavaEmptyList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/javaEmptyList.kt", this::doTest);
            }

            @TestMetadata("methodTypeParameterDefaultBound.kt")
            public void testMethodTypeParameterDefaultBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodTypeParameterDefaultBound.kt", this::doTest);
            }

            @TestMetadata("noAnnotationInClassPath.kt")
            public void testNoAnnotationInClassPath() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/noAnnotationInClassPath.kt", this::doTest);
            }

            @TestMetadata("nullableTypeArgument.kt")
            public void testNullableTypeArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullableTypeArgument.kt", this::doTest);
            }

            @TestMetadata("override.kt")
            public void testOverride() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/override.kt", this::doTest);
            }

            @TestMetadata("rawOverrides.kt")
            public void testRawOverrides() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawOverrides.kt", this::doTest);
            }

            @TestMetadata("rawSamOverrides.kt")
            public void testRawSamOverrides() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawSamOverrides.kt", this::doTest);
            }

            @TestMetadata("safeCall.kt")
            public void testSafeCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/safeCall.kt", this::doTest);
            }

            @TestMetadata("samAdapterInConstructor.kt")
            public void testSamAdapterInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/samAdapterInConstructor.kt", this::doTest);
            }

            @TestMetadata("samConstructor.kt")
            public void testSamConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/samConstructor.kt", this::doTest);
            }

            @TestMetadata("supertypeArgumentsExplicit.kt")
            public void testSupertypeArgumentsExplicit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/supertypeArgumentsExplicit.kt", this::doTest);
            }

            @TestMetadata("supertypeTypeArguments.kt")
            public void testSupertypeTypeArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/supertypeTypeArguments.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CommonSupertype extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCommonSupertype() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/commonSupertype"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("collectionOrNull.kt")
                public void testCollectionOrNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/collectionOrNull.kt", this::doTest);
                }

                @TestMetadata("inferenceWithBound.kt")
                public void testInferenceWithBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/inferenceWithBound.kt", this::doTest);
                }

                @TestMetadata("mixedElvis.kt")
                public void testMixedElvis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/mixedElvis.kt", this::doTest);
                }

                @TestMetadata("mixedIf.kt")
                public void testMixedIf() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/mixedIf.kt", this::doTest);
                }

                @TestMetadata("recursiveGeneric.kt")
                public void testRecursiveGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/recursiveGeneric.kt", this::doTest);
                }

                @TestMetadata("stringOrNull.kt")
                public void testStringOrNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/stringOrNull.kt", this::doTest);
                }

                @TestMetadata("typeOfElvis.kt")
                public void testTypeOfElvis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/typeOfElvis.kt", this::doTest);
                }

                @TestMetadata("withNothing.kt")
                public void testWithNothing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/withNothing.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class GenericVarianceViolation extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInGenericVarianceViolation() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("listSuperType.kt")
                public void testListSuperType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/listSuperType.kt", this::doTest);
                }

                @TestMetadata("rawTypes.kt")
                public void testRawTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/rawTypes.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/simple.kt", this::doTest);
                }

                @TestMetadata("smartCast.kt")
                public void testSmartCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/smartCast.kt", this::doTest);
                }

                @TestMetadata("strangeVariance.kt")
                public void testStrangeVariance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/strangeVariance.kt", this::doTest);
                }

                @TestMetadata("userDefinedOut.kt")
                public void testUserDefinedOut() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/userDefinedOut.kt", this::doTest);
                }

                @TestMetadata("valueFromJava.kt")
                public void testValueFromJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/valueFromJava.kt", this::doTest);
                }

                @TestMetadata("wildcards.kt")
                public void testWildcards() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/wildcards.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/intersection")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Intersection extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInIntersection() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/intersection"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("map.kt")
                public void testMap() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/intersection/map.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class MethodCall extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInMethodCall() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/methodCall"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("entrySet.kt")
                public void testEntrySet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/entrySet.kt", this::doTest);
                }

                @TestMetadata("genericsAndArrays.kt")
                public void testGenericsAndArrays() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/genericsAndArrays.kt", this::doTest);
                }

                @TestMetadata("int.kt")
                public void testInt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/int.kt", this::doTest);
                }

                @TestMetadata("intArray.kt")
                public void testIntArray() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/intArray.kt", this::doTest);
                }

                @TestMetadata("javaCollectionToKotlin.kt")
                public void testJavaCollectionToKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaCollectionToKotlin.kt", this::doTest);
                }

                @TestMetadata("javaToJava.kt")
                public void testJavaToJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaToJava.kt", this::doTest);
                }

                @TestMetadata("javaToKotlin.kt")
                public void testJavaToKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaToKotlin.kt", this::doTest);
                }

                @TestMetadata("kotlinCollectionToJava.kt")
                public void testKotlinCollectionToJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/kotlinCollectionToJava.kt", this::doTest);
                }

                @TestMetadata("list.kt")
                public void testList() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/list.kt", this::doTest);
                }

                @TestMetadata("multipleExactBounds.kt")
                public void testMultipleExactBounds() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/multipleExactBounds.kt", this::doTest);
                }

                @TestMetadata("multipleExactBoundsNullable.kt")
                public void testMultipleExactBoundsNullable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/multipleExactBoundsNullable.kt", this::doTest);
                }

                @TestMetadata("objectArray.kt")
                public void testObjectArray() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/objectArray.kt", this::doTest);
                }

                @TestMetadata("overloadingForSubclass.kt")
                public void testOverloadingForSubclass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/overloadingForSubclass.kt", this::doTest);
                }

                @TestMetadata("sam.kt")
                public void testSam() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/sam.kt", this::doTest);
                }

                @TestMetadata("singleton.kt")
                public void testSingleton() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/singleton.kt", this::doTest);
                }

                @TestMetadata("string.kt")
                public void testString() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/string.kt", this::doTest);
                }

                @TestMetadata("visitor.kt")
                public void testVisitor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/visitor.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NotNullTypeParameter extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNotNullTypeParameter() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("enhancementFromAnnotation.kt")
                public void testEnhancementFromAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/enhancementFromAnnotation.kt", this::doTest);
                }

                @TestMetadata("enhancementFromKotlin.kt")
                public void testEnhancementFromKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/enhancementFromKotlin.kt", this::doTest);
                }

                @TestMetadata("methodTypeParameter.kt")
                public void testMethodTypeParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/methodTypeParameter.kt", this::doTest);
                }

                @TestMetadata("noInheritanceReturnType.kt")
                public void testNoInheritanceReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/noInheritanceReturnType.kt", this::doTest);
                }

                @TestMetadata("noInheritanceValueParameter.kt")
                public void testNoInheritanceValueParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/noInheritanceValueParameter.kt", this::doTest);
                }

                @TestMetadata("onTypeProjection.kt")
                public void testOnTypeProjection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/onTypeProjection.kt", this::doTest);
                }

                @TestMetadata("substitutionInSuperType.kt")
                public void testSubstitutionInSuperType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/substitutionInSuperType.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NullabilityWarnings extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNullabilityWarnings() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("arithmetic.kt")
                public void testArithmetic() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/arithmetic.kt", this::doTest);
                }

                @TestMetadata("array.kt")
                public void testArray() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/array.kt", this::doTest);
                }

                @TestMetadata("assignToVar.kt")
                public void testAssignToVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/assignToVar.kt", this::doTest);
                }

                @TestMetadata("conditions.kt")
                public void testConditions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/conditions.kt", this::doTest);
                }

                @TestMetadata("dataFlowInfo.kt")
                public void testDataFlowInfo() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/dataFlowInfo.kt", this::doTest);
                }

                @TestMetadata("defaultParameters.kt")
                public void testDefaultParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/defaultParameters.kt", this::doTest);
                }

                @TestMetadata("delegatedProperties.kt")
                public void testDelegatedProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/delegatedProperties.kt", this::doTest);
                }

                @TestMetadata("delegation.kt")
                public void testDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/delegation.kt", this::doTest);
                }

                @TestMetadata("derefenceExtension.kt")
                public void testDerefenceExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/derefenceExtension.kt", this::doTest);
                }

                @TestMetadata("derefenceMember.kt")
                public void testDerefenceMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/derefenceMember.kt", this::doTest);
                }

                @TestMetadata("elvis.kt")
                public void testElvis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/elvis.kt", this::doTest);
                }

                @TestMetadata("expectedType.kt")
                public void testExpectedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/expectedType.kt", this::doTest);
                }

                @TestMetadata("for.kt")
                public void testFor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/for.kt", this::doTest);
                }

                @TestMetadata("functionArguments.kt")
                public void testFunctionArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/functionArguments.kt", this::doTest);
                }

                @TestMetadata("inferenceInConditionals.kt")
                public void testInferenceInConditionals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/inferenceInConditionals.kt", this::doTest);
                }

                @TestMetadata("invoke.kt")
                public void testInvoke() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/invoke.kt", this::doTest);
                }

                @TestMetadata("kt6829.kt")
                public void testKt6829() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/kt6829.kt", this::doTest);
                }

                @TestMetadata("multiDeclaration.kt")
                public void testMultiDeclaration() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/multiDeclaration.kt", this::doTest);
                }

                @TestMetadata("noWarningOnDoubleElvis.kt")
                public void testNoWarningOnDoubleElvis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/noWarningOnDoubleElvis.kt", this::doTest);
                }

                @TestMetadata("notNullAfterSafeCall.kt")
                public void testNotNullAfterSafeCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAfterSafeCall.kt", this::doTest);
                }

                @TestMetadata("notNullAssertion.kt")
                public void testNotNullAssertion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAssertion.kt", this::doTest);
                }

                @TestMetadata("notNullAssertionInCall.kt")
                public void testNotNullAssertionInCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAssertionInCall.kt", this::doTest);
                }

                @TestMetadata("notNullTypeMarkedWithNullableAnnotation.kt")
                public void testNotNullTypeMarkedWithNullableAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullTypeMarkedWithNullableAnnotation.kt", this::doTest);
                }

                @TestMetadata("passToJava.kt")
                public void testPassToJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/passToJava.kt", this::doTest);
                }

                @TestMetadata("primitiveArray.kt")
                public void testPrimitiveArray() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/primitiveArray.kt", this::doTest);
                }

                @TestMetadata("safeCall.kt")
                public void testSafeCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/safeCall.kt", this::doTest);
                }

                @TestMetadata("senselessComparisonEquals.kt")
                public void testSenselessComparisonEquals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/senselessComparisonEquals.kt", this::doTest);
                }

                @TestMetadata("senselessComparisonIdentityEquals.kt")
                public void testSenselessComparisonIdentityEquals() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/senselessComparisonIdentityEquals.kt", this::doTest);
                }

                @TestMetadata("throw.kt")
                public void testThrow() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/throw.kt", this::doTest);
                }

                @TestMetadata("uselessElvisInCall.kt")
                public void testUselessElvisInCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/uselessElvisInCall.kt", this::doTest);
                }

                @TestMetadata("uselessElvisRightIsNull.kt")
                public void testUselessElvisRightIsNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/uselessElvisRightIsNull.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/rawTypes")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class RawTypes extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInRawTypes() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/rawTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("arrays.kt")
                public void testArrays() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/arrays.kt", this::doTest);
                }

                @TestMetadata("errorType.kt")
                public void testErrorType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/errorType.kt", this::doTest);
                }

                @TestMetadata("genericInnerClass.kt")
                public void testGenericInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/genericInnerClass.kt", this::doTest);
                }

                @TestMetadata("interClassesRecursion.kt")
                public void testInterClassesRecursion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/interClassesRecursion.kt", this::doTest);
                }

                @TestMetadata("nonGenericRawMember.kt")
                public void testNonGenericRawMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonGenericRawMember.kt", this::doTest);
                }

                @TestMetadata("nonTrivialErasure.kt")
                public void testNonTrivialErasure() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonTrivialErasure.kt", this::doTest);
                }

                @TestMetadata("rawEnhancment.kt")
                public void testRawEnhancment() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawEnhancment.kt", this::doTest);
                }

                @TestMetadata("rawSupertype.kt")
                public void testRawSupertype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawSupertype.kt", this::doTest);
                }

                @TestMetadata("rawSupertypeOverride.kt")
                public void testRawSupertypeOverride() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawSupertypeOverride.kt", this::doTest);
                }

                @TestMetadata("rawTypeInUpperBound.kt")
                public void testRawTypeInUpperBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawTypeInUpperBound.kt", this::doTest);
                }

                @TestMetadata("rawWithInProjection.kt")
                public void testRawWithInProjection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawWithInProjection.kt", this::doTest);
                }

                @TestMetadata("recursiveBound.kt")
                public void testRecursiveBound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/recursiveBound.kt", this::doTest);
                }

                @TestMetadata("samRaw.kt")
                public void testSamRaw() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/samRaw.kt", this::doTest);
                }

                @TestMetadata("saveRawCapabilitiesAfterSubtitution.kt")
                public void testSaveRawCapabilitiesAfterSubtitution() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/saveRawCapabilitiesAfterSubtitution.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/simple.kt", this::doTest);
                }

                @TestMetadata("starProjectionToRaw.kt")
                public void testStarProjectionToRaw() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/starProjectionToRaw.kt", this::doTest);
                }

                @TestMetadata("typeEnhancement.kt")
                public void testTypeEnhancement() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/typeEnhancement.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeEnhancement extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInTypeEnhancement() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("overriddenExtensions.kt")
                public void testOverriddenExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/overriddenExtensions.kt", this::doTest);
                }

                @TestMetadata("saveAnnotationAfterSubstitution.kt")
                public void testSaveAnnotationAfterSubstitution() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/saveAnnotationAfterSubstitution.kt", this::doTest);
                }

                @TestMetadata("supertypeDifferentParameterNullability.kt")
                public void testSupertypeDifferentParameterNullability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/supertypeDifferentParameterNullability.kt", this::doTest);
                }

                @TestMetadata("supertypeDifferentReturnNullability.kt")
                public void testSupertypeDifferentReturnNullability() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/supertypeDifferentReturnNullability.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/privateInFile")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class PrivateInFile extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInPrivateInFile() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/privateInFile"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt12429.kt")
            public void testKt12429() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/privateInFile/kt12429.kt", this::doTest);
            }

            @TestMetadata("topLevelAnnotationCall.kt")
            public void testTopLevelAnnotationCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/privateInFile/topLevelAnnotationCall.kt", this::doTest);
            }

            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/privateInFile/visibility.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/properties")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Properties extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInProperties() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/properties"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("extensionPropertyMustHaveAccessorsOrBeAbstract.kt")
            public void testExtensionPropertyMustHaveAccessorsOrBeAbstract() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/extensionPropertyMustHaveAccessorsOrBeAbstract.kt", this::doTest);
            }

            @TestMetadata("lateinitOnTopLevel.kt")
            public void testLateinitOnTopLevel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/lateinitOnTopLevel.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/properties/inferenceFromGetters")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class InferenceFromGetters extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInferenceFromGetters() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/properties/inferenceFromGetters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("blockBodyGetter.kt")
                public void testBlockBodyGetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/blockBodyGetter.kt", this::doTest);
                }

                @TestMetadata("cantBeInferred.kt")
                public void testCantBeInferred() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/cantBeInferred.kt", this::doTest);
                }

                @TestMetadata("explicitGetterType.kt")
                public void testExplicitGetterType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/explicitGetterType.kt", this::doTest);
                }

                @TestMetadata("members.kt")
                public void testMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/members.kt", this::doTest);
                }

                @TestMetadata("nullAsNothing.kt")
                public void testNullAsNothing() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/nullAsNothing.kt", this::doTest);
                }

                @TestMetadata("objectExpression.kt")
                public void testObjectExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/objectExpression.kt", this::doTest);
                }

                @TestMetadata("overrides.kt")
                public void testOverrides() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/overrides.kt", this::doTest);
                }

                @TestMetadata("primaryConstructorParameter.kt")
                public void testPrimaryConstructorParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/primaryConstructorParameter.kt", this::doTest);
                }

                @TestMetadata("recursiveGetter.kt")
                public void testRecursiveGetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/recursiveGetter.kt", this::doTest);
                }

                @TestMetadata("topLevel.kt")
                public void testTopLevel() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/topLevel.kt", this::doTest);
                }

                @TestMetadata("unsupportedInferenceFromGetters.kt")
                public void testUnsupportedInferenceFromGetters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/unsupportedInferenceFromGetters.kt", this::doTest);
                }

                @TestMetadata("vars.kt")
                public void testVars() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/vars.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/qualifiedExpression")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class QualifiedExpression extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInQualifiedExpression() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/qualifiedExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("calleeExpressionAsCallExpression.kt")
            public void testCalleeExpressionAsCallExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/calleeExpressionAsCallExpression.kt", this::doTest);
            }

            @TestMetadata("GenericClassVsPackage.kt")
            public void testGenericClassVsPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/GenericClassVsPackage.kt", this::doTest);
            }

            @TestMetadata("JavaQualifier.kt")
            public void testJavaQualifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/JavaQualifier.kt", this::doTest);
            }

            @TestMetadata("nullCalleeExpression.kt")
            public void testNullCalleeExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/nullCalleeExpression.kt", this::doTest);
            }

            @TestMetadata("PackageVsClass.kt")
            public void testPackageVsClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsClass.kt", this::doTest);
            }

            @TestMetadata("PackageVsClass2.kt")
            public void testPackageVsClass2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsClass2.kt", this::doTest);
            }

            @TestMetadata("PackageVsRootClass.kt")
            public void testPackageVsRootClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsRootClass.kt", this::doTest);
            }

            @TestMetadata("TypeWithError.kt")
            public void testTypeWithError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/TypeWithError.kt", this::doTest);
            }

            @TestMetadata("visibleClassVsQualifiedClass.kt")
            public void testVisibleClassVsQualifiedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/qualifiedExpression/visibleClassVsQualifiedClass.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/reassignment")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Reassignment extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("afterfor.kt")
            public void testAfterfor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/afterfor.kt", this::doTest);
            }

            public void testAllFilesPresentInReassignment() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/reassignment"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("dowhile.kt")
            public void testDowhile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/dowhile.kt", this::doTest);
            }

            @TestMetadata("else.kt")
            public void testElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/else.kt", this::doTest);
            }

            @TestMetadata("foronly.kt")
            public void testForonly() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/foronly.kt", this::doTest);
            }

            @TestMetadata("if.kt")
            public void testIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/if.kt", this::doTest);
            }

            @TestMetadata("ifelse.kt")
            public void testIfelse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/ifelse.kt", this::doTest);
            }

            @TestMetadata("noifelse.kt")
            public void testNoifelse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/noifelse.kt", this::doTest);
            }

            @TestMetadata("when.kt")
            public void testWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/when.kt", this::doTest);
            }

            @TestMetadata("whiletrue.kt")
            public void testWhiletrue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reassignment/whiletrue.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/recovery")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Recovery extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("absentLeftHandSide.kt")
            public void testAbsentLeftHandSide() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/recovery/absentLeftHandSide.kt", this::doTest);
            }

            public void testAllFilesPresentInRecovery() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/recovery"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("emptyTypeArgs.kt")
            public void testEmptyTypeArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/recovery/emptyTypeArgs.kt", this::doTest);
            }

            @TestMetadata("namelessInJava.kt")
            public void testNamelessInJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/recovery/namelessInJava.kt", this::doTest);
            }

            @TestMetadata("namelessMembers.kt")
            public void testNamelessMembers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/recovery/namelessMembers.kt", this::doTest);
            }

            @TestMetadata("namelessToplevelDeclarations.kt")
            public void testNamelessToplevelDeclarations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/recovery/namelessToplevelDeclarations.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/redeclarations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Redeclarations extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInRedeclarations() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/redeclarations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ClassRedeclarationInDifferentFiles.kt")
            public void testClassRedeclarationInDifferentFiles() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/ClassRedeclarationInDifferentFiles.kt", this::doTest);
            }

            @TestMetadata("ConflictingExtensionProperties.kt")
            public void testConflictingExtensionProperties() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/ConflictingExtensionProperties.kt", this::doTest);
            }

            @TestMetadata("DuplicateParameterNamesInFunctionType.kt")
            public void testDuplicateParameterNamesInFunctionType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/DuplicateParameterNamesInFunctionType.kt", this::doTest);
            }

            @TestMetadata("EnumName.kt")
            public void testEnumName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/EnumName.kt", this::doTest);
            }

            @TestMetadata("FunVsCtorInDifferentFiles.kt")
            public void testFunVsCtorInDifferentFiles() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/FunVsCtorInDifferentFiles.kt", this::doTest);
            }

            @TestMetadata("interfaceTypeParameters.kt")
            public void testInterfaceTypeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/interfaceTypeParameters.kt", this::doTest);
            }

            @TestMetadata("kt2418.kt")
            public void testKt2418() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/kt2418.kt", this::doTest);
            }

            @TestMetadata("kt2438.kt")
            public void testKt2438() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/kt2438.kt", this::doTest);
            }

            @TestMetadata("kt470.kt")
            public void testKt470() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/kt470.kt", this::doTest);
            }

            @TestMetadata("MultiFilePackageRedeclaration.kt")
            public void testMultiFilePackageRedeclaration() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/MultiFilePackageRedeclaration.kt", this::doTest);
            }

            @TestMetadata("NoRedeclarationForClassesInDefaultObject.kt")
            public void testNoRedeclarationForClassesInDefaultObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/NoRedeclarationForClassesInDefaultObject.kt", this::doTest);
            }

            @TestMetadata("NoRedeclarationForEnumEntriesAndDefaultObjectMembers.kt")
            public void testNoRedeclarationForEnumEntriesAndDefaultObjectMembers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/NoRedeclarationForEnumEntriesAndDefaultObjectMembers.kt", this::doTest);
            }

            @TestMetadata("PropertyAndFunInClass.kt")
            public void testPropertyAndFunInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/PropertyAndFunInClass.kt", this::doTest);
            }

            @TestMetadata("PropertyAndInnerClass.kt")
            public void testPropertyAndInnerClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/PropertyAndInnerClass.kt", this::doTest);
            }

            @TestMetadata("RedeclarationInDefaultObject.kt")
            public void testRedeclarationInDefaultObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationInDefaultObject.kt", this::doTest);
            }

            @TestMetadata("RedeclarationInMultiFile.kt")
            public void testRedeclarationInMultiFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationInMultiFile.kt", this::doTest);
            }

            @TestMetadata("RedeclarationMainInFile.kt")
            public void testRedeclarationMainInFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationMainInFile.kt", this::doTest);
            }

            @TestMetadata("RedeclarationMainInMultiFile.kt")
            public void testRedeclarationMainInMultiFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationMainInMultiFile.kt", this::doTest);
            }

            @TestMetadata("Redeclarations.kt")
            public void testRedeclarations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/Redeclarations.kt", this::doTest);
            }

            @TestMetadata("RedeclarationsInObjects.kt")
            public void testRedeclarationsInObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationsInObjects.kt", this::doTest);
            }

            @TestMetadata("RedeclaredTypeParameters.kt")
            public void testRedeclaredTypeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclaredTypeParameters.kt", this::doTest);
            }

            @TestMetadata("RedeclaringPrivateToFile.kt")
            public void testRedeclaringPrivateToFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclaringPrivateToFile.kt", this::doTest);
            }

            @TestMetadata("ScriptAndClassConflict.kt")
            public void testScriptAndClassConflict() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/ScriptAndClassConflict.kt", this::doTest);
            }

            @TestMetadata("SingletonAndFunctionSameName.kt")
            public void testSingletonAndFunctionSameName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/SingletonAndFunctionSameName.kt", this::doTest);
            }

            @TestMetadata("TopLevelPropertyVsClassifier.kt")
            public void testTopLevelPropertyVsClassifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/TopLevelPropertyVsClassifier.kt", this::doTest);
            }

            @TestMetadata("TypeAliasCtorVsFun.kt")
            public void testTypeAliasCtorVsFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/TypeAliasCtorVsFun.kt", this::doTest);
            }

            @TestMetadata("TypeAliasVsClass.kt")
            public void testTypeAliasVsClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/TypeAliasVsClass.kt", this::doTest);
            }

            @TestMetadata("TypeAliasVsProperty.kt")
            public void testTypeAliasVsProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/TypeAliasVsProperty.kt", this::doTest);
            }

            @TestMetadata("typeParameterWithTwoBounds.kt")
            public void testTypeParameterWithTwoBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/typeParameterWithTwoBounds.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ShadowedExtension extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInShadowedExtension() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("extensionFunShadowedByInnerClassConstructor.kt")
                public void testExtensionFunShadowedByInnerClassConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByInnerClassConstructor.kt", this::doTest);
                }

                @TestMetadata("extensionFunShadowedByMemberFun.kt")
                public void testExtensionFunShadowedByMemberFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByMemberFun.kt", this::doTest);
                }

                @TestMetadata("extensionFunShadowedByMemberPropertyWithInvoke.kt")
                public void testExtensionFunShadowedByMemberPropertyWithInvoke() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByMemberPropertyWithInvoke.kt", this::doTest);
                }

                @TestMetadata("extensionFunShadowedBySynthesizedMemberFun.kt")
                public void testExtensionFunShadowedBySynthesizedMemberFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedBySynthesizedMemberFun.kt", this::doTest);
                }

                @TestMetadata("extensionFunVsMemberExtensionFun.kt")
                public void testExtensionFunVsMemberExtensionFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunVsMemberExtensionFun.kt", this::doTest);
                }

                @TestMetadata("extensionOnErrorType.kt")
                public void testExtensionOnErrorType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionOnErrorType.kt", this::doTest);
                }

                @TestMetadata("extensionOnNullableReceiver.kt")
                public void testExtensionOnNullableReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionOnNullableReceiver.kt", this::doTest);
                }

                @TestMetadata("extensionPropertyShadowedByMemberProperty.kt")
                public void testExtensionPropertyShadowedByMemberProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionPropertyShadowedByMemberProperty.kt", this::doTest);
                }

                @TestMetadata("extensionShadowedByDelegatedMember.kt")
                public void testExtensionShadowedByDelegatedMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionShadowedByDelegatedMember.kt", this::doTest);
                }

                @TestMetadata("extensionVsNonPublicMember.kt")
                public void testExtensionVsNonPublicMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionVsNonPublicMember.kt", this::doTest);
                }

                @TestMetadata("infixExtensionVsNonInfixMember.kt")
                public void testInfixExtensionVsNonInfixMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/infixExtensionVsNonInfixMember.kt", this::doTest);
                }

                @TestMetadata("localExtensionShadowedByMember.kt")
                public void testLocalExtensionShadowedByMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/localExtensionShadowedByMember.kt", this::doTest);
                }

                @TestMetadata("memberExtensionShadowedByMember.kt")
                public void testMemberExtensionShadowedByMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/memberExtensionShadowedByMember.kt", this::doTest);
                }

                @TestMetadata("operatorExtensionVsNonOperatorMember.kt")
                public void testOperatorExtensionVsNonOperatorMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/operatorExtensionVsNonOperatorMember.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/reflection")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Reflection extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInReflection() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/reflection"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("noReflectionInClassPath.kt")
            public void testNoReflectionInClassPath() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/reflection/noReflectionInClassPath.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/regressions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Regressions extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInRegressions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/regressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AmbiguityOnLazyTypeComputation.kt")
            public void testAmbiguityOnLazyTypeComputation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/AmbiguityOnLazyTypeComputation.kt", this::doTest);
            }

            @TestMetadata("AssignmentsUnderOperators.kt")
            public void testAssignmentsUnderOperators() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/AssignmentsUnderOperators.kt", this::doTest);
            }

            @TestMetadata("CoercionToUnit.kt")
            public void testCoercionToUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/CoercionToUnit.kt", this::doTest);
            }

            @TestMetadata("correctResultSubstitutorForErrorCandidate.kt")
            public void testCorrectResultSubstitutorForErrorCandidate() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/correctResultSubstitutorForErrorCandidate.kt", this::doTest);
            }

            @TestMetadata("delegationWithReceiver.kt")
            public void testDelegationWithReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/delegationWithReceiver.kt", this::doTest);
            }

            @TestMetadata("DoubleDefine.kt")
            public void testDoubleDefine() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/DoubleDefine.kt", this::doTest);
            }

            @TestMetadata("ea40964.kt")
            public void testEa40964() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ea40964.kt", this::doTest);
            }

            @TestMetadata("ea43298.kt")
            public void testEa43298() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ea43298.kt", this::doTest);
            }

            @TestMetadata("ea53340.kt")
            public void testEa53340() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ea53340.kt", this::doTest);
            }

            @TestMetadata("ea65509.kt")
            public void testEa65509() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ea65509.kt", this::doTest);
            }

            @TestMetadata("ea66984.kt")
            public void testEa66984() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ea66984.kt", this::doTest);
            }

            @TestMetadata("ea69735.kt")
            public void testEa69735() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ea69735.kt", this::doTest);
            }

            @TestMetadata("ea72837.kt")
            public void testEa72837() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ea72837.kt", this::doTest);
            }

            @TestMetadata("ea76264.kt")
            public void testEa76264() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ea76264.kt", this::doTest);
            }

            @TestMetadata("ErrorsOnIbjectExpressionsAsParameters.kt")
            public void testErrorsOnIbjectExpressionsAsParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/ErrorsOnIbjectExpressionsAsParameters.kt", this::doTest);
            }

            @TestMetadata("intchar.kt")
            public void testIntchar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/intchar.kt", this::doTest);
            }

            @TestMetadata("itselfAsUpperBound.kt")
            public void testItselfAsUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBound.kt", this::doTest);
            }

            @TestMetadata("itselfAsUpperBoundInClass.kt")
            public void testItselfAsUpperBoundInClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundInClass.kt", this::doTest);
            }

            @TestMetadata("itselfAsUpperBoundInClassNotNull.kt")
            public void testItselfAsUpperBoundInClassNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundInClassNotNull.kt", this::doTest);
            }

            @TestMetadata("itselfAsUpperBoundLocal.kt")
            public void testItselfAsUpperBoundLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundLocal.kt", this::doTest);
            }

            @TestMetadata("itselfAsUpperBoundMember.kt")
            public void testItselfAsUpperBoundMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundMember.kt", this::doTest);
            }

            @TestMetadata("itselfAsUpperBoundNotNull.kt")
            public void testItselfAsUpperBoundNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundNotNull.kt", this::doTest);
            }

            @TestMetadata("Jet11.kt")
            public void testJet11() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet11.kt", this::doTest);
            }

            @TestMetadata("Jet121.kt")
            public void testJet121() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet121.kt", this::doTest);
            }

            @TestMetadata("Jet124.kt")
            public void testJet124() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet124.kt", this::doTest);
            }

            @TestMetadata("Jet169.kt")
            public void testJet169() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet169.kt", this::doTest);
            }

            @TestMetadata("Jet17.kt")
            public void testJet17() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet17.kt", this::doTest);
            }

            @TestMetadata("Jet183.kt")
            public void testJet183() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet183.kt", this::doTest);
            }

            @TestMetadata("Jet183-1.kt")
            public void testJet183_1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet183-1.kt", this::doTest);
            }

            @TestMetadata("Jet53.kt")
            public void testJet53() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet53.kt", this::doTest);
            }

            @TestMetadata("Jet67.kt")
            public void testJet67() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet67.kt", this::doTest);
            }

            @TestMetadata("Jet68.kt")
            public void testJet68() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet68.kt", this::doTest);
            }

            @TestMetadata("Jet69.kt")
            public void testJet69() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet69.kt", this::doTest);
            }

            @TestMetadata("Jet72.kt")
            public void testJet72() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet72.kt", this::doTest);
            }

            @TestMetadata("Jet81.kt")
            public void testJet81() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/Jet81.kt", this::doTest);
            }

            @TestMetadata("kt10243.kt")
            public void testKt10243() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt10243.kt", this::doTest);
            }

            @TestMetadata("kt10243a.kt")
            public void testKt10243a() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt10243a.kt", this::doTest);
            }

            @TestMetadata("kt10633.kt")
            public void testKt10633() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt10633.kt", this::doTest);
            }

            @TestMetadata("kt10824.kt")
            public void testKt10824() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt10824.kt", this::doTest);
            }

            @TestMetadata("kt10843.kt")
            public void testKt10843() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt10843.kt", this::doTest);
            }

            @TestMetadata("kt127.kt")
            public void testKt127() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt127.kt", this::doTest);
            }

            @TestMetadata("kt128.kt")
            public void testKt128() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt128.kt", this::doTest);
            }

            @TestMetadata("kt13685.kt")
            public void testKt13685() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt13685.kt", this::doTest);
            }

            @TestMetadata("kt13954.kt")
            public void testKt13954() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt13954.kt", this::doTest);
            }

            @TestMetadata("kt14740.kt")
            public void testKt14740() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt14740.kt", this::doTest);
            }

            @TestMetadata("kt1489_1728.kt")
            public void testKt1489_1728() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt1489_1728.kt", this::doTest);
            }

            @TestMetadata("kt1550.kt")
            public void testKt1550() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt1550.kt", this::doTest);
            }

            @TestMetadata("kt16086.kt")
            public void testKt16086() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt16086.kt", this::doTest);
            }

            @TestMetadata("kt16086_2.kt")
            public void testKt16086_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt16086_2.kt", this::doTest);
            }

            @TestMetadata("kt1639-JFrame.kt")
            public void testKt1639_JFrame() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt1639-JFrame.kt", this::doTest);
            }

            @TestMetadata("kt1647.kt")
            public void testKt1647() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt1647.kt", this::doTest);
            }

            @TestMetadata("kt1736.kt")
            public void testKt1736() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt1736.kt", this::doTest);
            }

            @TestMetadata("kt174.kt")
            public void testKt174() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt174.kt", this::doTest);
            }

            @TestMetadata("kt201.kt")
            public void testKt201() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt201.kt", this::doTest);
            }

            @TestMetadata("kt235.kt")
            public void testKt235() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt235.kt", this::doTest);
            }

            @TestMetadata("kt2376.kt")
            public void testKt2376() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt2376.kt", this::doTest);
            }

            @TestMetadata("kt251.kt")
            public void testKt251() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt251.kt", this::doTest);
            }

            @TestMetadata("kt258.kt")
            public void testKt258() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt258.kt", this::doTest);
            }

            @TestMetadata("kt26.kt")
            public void testKt26() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt26.kt", this::doTest);
            }

            @TestMetadata("kt26-1.kt")
            public void testKt26_1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt26-1.kt", this::doTest);
            }

            @TestMetadata("kt2768.kt")
            public void testKt2768() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt2768.kt", this::doTest);
            }

            @TestMetadata("kt282.kt")
            public void testKt282() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt282.kt", this::doTest);
            }

            @TestMetadata("kt287.kt")
            public void testKt287() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt287.kt", this::doTest);
            }

            @TestMetadata("kt2956.kt")
            public void testKt2956() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt2956.kt", this::doTest);
            }

            @TestMetadata("kt302.kt")
            public void testKt302() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt302.kt", this::doTest);
            }

            @TestMetadata("kt306.kt")
            public void testKt306() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt306.kt", this::doTest);
            }

            @TestMetadata("kt307.kt")
            public void testKt307() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt307.kt", this::doTest);
            }

            @TestMetadata("kt312.kt")
            public void testKt312() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt312.kt", this::doTest);
            }

            @TestMetadata("kt313.kt")
            public void testKt313() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt313.kt", this::doTest);
            }

            @TestMetadata("kt316.kt")
            public void testKt316() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt316.kt", this::doTest);
            }

            @TestMetadata("kt328.kt")
            public void testKt328() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt328.kt", this::doTest);
            }

            @TestMetadata("kt334.kt")
            public void testKt334() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt334.kt", this::doTest);
            }

            @TestMetadata("kt335.336.kt")
            public void testKt335_336() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt335.336.kt", this::doTest);
            }

            @TestMetadata("kt337.kt")
            public void testKt337() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt337.kt", this::doTest);
            }

            @TestMetadata("kt352.kt")
            public void testKt352() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt352.kt", this::doTest);
            }

            @TestMetadata("kt353.kt")
            public void testKt353() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt353.kt", this::doTest);
            }

            @TestMetadata("kt3535.kt")
            public void testKt3535() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt3535.kt", this::doTest);
            }

            @TestMetadata("kt3647.kt")
            public void testKt3647() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt3647.kt", this::doTest);
            }

            @TestMetadata("kt3731.kt")
            public void testKt3731() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt3731.kt", this::doTest);
            }

            @TestMetadata("kt3810.kt")
            public void testKt3810() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt3810.kt", this::doTest);
            }

            @TestMetadata("kt385.109.441.kt")
            public void testKt385_109_441() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt385.109.441.kt", this::doTest);
            }

            @TestMetadata("kt394.kt")
            public void testKt394() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt394.kt", this::doTest);
            }

            @TestMetadata("kt398.kt")
            public void testKt398() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt398.kt", this::doTest);
            }

            @TestMetadata("kt399.kt")
            public void testKt399() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt399.kt", this::doTest);
            }

            @TestMetadata("kt402.kt")
            public void testKt402() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt402.kt", this::doTest);
            }

            @TestMetadata("kt41.kt")
            public void testKt41() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt41.kt", this::doTest);
            }

            @TestMetadata("kt411.kt")
            public void testKt411() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt411.kt", this::doTest);
            }

            @TestMetadata("kt439.kt")
            public void testKt439() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt439.kt", this::doTest);
            }

            @TestMetadata("kt442.kt")
            public void testKt442() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt442.kt", this::doTest);
            }

            @TestMetadata("kt443.kt")
            public void testKt443() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt443.kt", this::doTest);
            }

            @TestMetadata("kt455.kt")
            public void testKt455() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt455.kt", this::doTest);
            }

            @TestMetadata("kt456.kt")
            public void testKt456() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt456.kt", this::doTest);
            }

            @TestMetadata("kt459.kt")
            public void testKt459() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt459.kt", this::doTest);
            }

            @TestMetadata("kt469.kt")
            public void testKt469() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt469.kt", this::doTest);
            }

            @TestMetadata("kt4693.kt")
            public void testKt4693() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt4693.kt", this::doTest);
            }

            @TestMetadata("kt4827.kt")
            public void testKt4827() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt4827.kt", this::doTest);
            }

            @TestMetadata("kt498.kt")
            public void testKt498() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt498.kt", this::doTest);
            }

            @TestMetadata("kt524.kt")
            public void testKt524() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt524.kt", this::doTest);
            }

            @TestMetadata("kt526UnresolvedReferenceInnerStatic.kt")
            public void testKt526UnresolvedReferenceInnerStatic() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt526UnresolvedReferenceInnerStatic.kt", this::doTest);
            }

            @TestMetadata("kt5326.kt")
            public void testKt5326() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt5326.kt", this::doTest);
            }

            @TestMetadata("kt5362.kt")
            public void testKt5362() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt5362.kt", this::doTest);
            }

            @TestMetadata("kt549.kt")
            public void testKt549() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt549.kt", this::doTest);
            }

            @TestMetadata("kt557.kt")
            public void testKt557() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt557.kt", this::doTest);
            }

            @TestMetadata("kt571.kt")
            public void testKt571() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt571.kt", this::doTest);
            }

            @TestMetadata("kt575.kt")
            public void testKt575() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt575.kt", this::doTest);
            }

            @TestMetadata("kt58.kt")
            public void testKt58() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt58.kt", this::doTest);
            }

            @TestMetadata("kt580.kt")
            public void testKt580() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt580.kt", this::doTest);
            }

            @TestMetadata("kt588.kt")
            public void testKt588() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt588.kt", this::doTest);
            }

            @TestMetadata("kt597.kt")
            public void testKt597() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt597.kt", this::doTest);
            }

            @TestMetadata("kt600.kt")
            public void testKt600() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt600.kt", this::doTest);
            }

            @TestMetadata("kt604.kt")
            public void testKt604() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt604.kt", this::doTest);
            }

            @TestMetadata("kt618.kt")
            public void testKt618() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt618.kt", this::doTest);
            }

            @TestMetadata("kt629.kt")
            public void testKt629() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt629.kt", this::doTest);
            }

            @TestMetadata("kt630.kt")
            public void testKt630() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt630.kt", this::doTest);
            }

            @TestMetadata("kt6508.kt")
            public void testKt6508() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt6508.kt", this::doTest);
            }

            @TestMetadata("kt688.kt")
            public void testKt688() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt688.kt", this::doTest);
            }

            @TestMetadata("kt691.kt")
            public void testKt691() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt691.kt", this::doTest);
            }

            @TestMetadata("kt701.kt")
            public void testKt701() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt701.kt", this::doTest);
            }

            @TestMetadata("kt716.kt")
            public void testKt716() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt716.kt", this::doTest);
            }

            @TestMetadata("kt743.kt")
            public void testKt743() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt743.kt", this::doTest);
            }

            @TestMetadata("kt750.kt")
            public void testKt750() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt750.kt", this::doTest);
            }

            @TestMetadata("kt762.kt")
            public void testKt762() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt762.kt", this::doTest);
            }

            @TestMetadata("kt7804.kt")
            public void testKt7804() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt7804.kt", this::doTest);
            }

            @TestMetadata("kt847.kt")
            public void testKt847() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt847.kt", this::doTest);
            }

            @TestMetadata("kt860.kt")
            public void testKt860() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt860.kt", this::doTest);
            }

            @TestMetadata("kt9620.kt")
            public void testKt9620() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt9620.kt", this::doTest);
            }

            @TestMetadata("kt9633.kt")
            public void testKt9633() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt9633.kt", this::doTest);
            }

            @TestMetadata("kt9682.kt")
            public void testKt9682() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt9682.kt", this::doTest);
            }

            @TestMetadata("kt9808.kt")
            public void testKt9808() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt9808.kt", this::doTest);
            }

            @TestMetadata("noThis.kt")
            public void testNoThis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/noThis.kt", this::doTest);
            }

            @TestMetadata("OrphanStarProjection.kt")
            public void testOrphanStarProjection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/OrphanStarProjection.kt", this::doTest);
            }

            @TestMetadata("OutProjections.kt")
            public void testOutProjections() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/OutProjections.kt", this::doTest);
            }

            @TestMetadata("OverrideResolution.kt")
            public void testOverrideResolution() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/OverrideResolution.kt", this::doTest);
            }

            @TestMetadata("propertyWithExtensionTypeInvoke.kt")
            public void testPropertyWithExtensionTypeInvoke() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/propertyWithExtensionTypeInvoke.kt", this::doTest);
            }

            @TestMetadata("resolveSubclassOfList.kt")
            public void testResolveSubclassOfList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/resolveSubclassOfList.kt", this::doTest);
            }

            @TestMetadata("SpecififcityByReceiver.kt")
            public void testSpecififcityByReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/SpecififcityByReceiver.kt", this::doTest);
            }

            @TestMetadata("TypeMismatchOnUnaryOperations.kt")
            public void testTypeMismatchOnUnaryOperations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/TypeMismatchOnUnaryOperations.kt", this::doTest);
            }

            @TestMetadata("TypeParameterAsASupertype.kt")
            public void testTypeParameterAsASupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/TypeParameterAsASupertype.kt", this::doTest);
            }

            @TestMetadata("UnavaliableQualifiedThis.kt")
            public void testUnavaliableQualifiedThis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/UnavaliableQualifiedThis.kt", this::doTest);
            }

            @TestMetadata("WrongTraceInCallResolver.kt")
            public void testWrongTraceInCallResolver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/WrongTraceInCallResolver.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/regressions/kt7585")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Kt7585 extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInKt7585() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/regressions/kt7585"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("base.kt")
                public void testBase() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt7585/base.kt", this::doTest);
                }

                @TestMetadata("java.kt")
                public void testJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt7585/java.kt", this::doTest);
                }

                @TestMetadata("twoparents.kt")
                public void testTwoparents() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/regressions/kt7585/twoparents.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/resolve")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Resolve extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInResolve() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ambiguityOnPropertiesWithTheSamePackageName.kt")
            public void testAmbiguityOnPropertiesWithTheSamePackageName() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/ambiguityOnPropertiesWithTheSamePackageName.kt", this::doTest);
            }

            @TestMetadata("ambiguityWithTwoCorrespondingFunctionTypes.kt")
            public void testAmbiguityWithTwoCorrespondingFunctionTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/ambiguityWithTwoCorrespondingFunctionTypes.kt", this::doTest);
            }

            @TestMetadata("anonymousObjectFromTopLevelMember.kt")
            public void testAnonymousObjectFromTopLevelMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/anonymousObjectFromTopLevelMember.kt", this::doTest);
            }

            @TestMetadata("capturedTypesInLambdaParameter.kt")
            public void testCapturedTypesInLambdaParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/capturedTypesInLambdaParameter.kt", this::doTest);
            }

            @TestMetadata("constructorVsCompanion.kt")
            public void testConstructorVsCompanion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/constructorVsCompanion.kt", this::doTest);
            }

            @TestMetadata("CycleInTypeArgs.kt")
            public void testCycleInTypeArgs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/CycleInTypeArgs.kt", this::doTest);
            }

            @TestMetadata("HiddenDeclarations.kt")
            public void testHiddenDeclarations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/HiddenDeclarations.kt", this::doTest);
            }

            @TestMetadata("implicitReceiverProperty.kt")
            public void testImplicitReceiverProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/implicitReceiverProperty.kt", this::doTest);
            }

            @TestMetadata("incompleteConstructorInvocation.kt")
            public void testIncompleteConstructorInvocation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/incompleteConstructorInvocation.kt", this::doTest);
            }

            @TestMetadata("inferenceInLinkedLambdas.kt")
            public void testInferenceInLinkedLambdas() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/inferenceInLinkedLambdas.kt", this::doTest);
            }

            @TestMetadata("inferenceInLinkedLambdasDependentOnExpectedType.kt")
            public void testInferenceInLinkedLambdasDependentOnExpectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/inferenceInLinkedLambdasDependentOnExpectedType.kt", this::doTest);
            }

            @TestMetadata("localObject.kt")
            public void testLocalObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/localObject.kt", this::doTest);
            }

            @TestMetadata("objectLiteralAsArgument.kt")
            public void testObjectLiteralAsArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/objectLiteralAsArgument.kt", this::doTest);
            }

            @TestMetadata("parameterAsDefaultValueInLocalFunction.kt")
            public void testParameterAsDefaultValueInLocalFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/parameterAsDefaultValueInLocalFunction.kt", this::doTest);
            }

            @TestMetadata("resolveAnnotatedLambdaArgument.kt")
            public void testResolveAnnotatedLambdaArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveAnnotatedLambdaArgument.kt", this::doTest);
            }

            @TestMetadata("resolveTypeArgsForUnresolvedCall.kt")
            public void testResolveTypeArgsForUnresolvedCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveTypeArgsForUnresolvedCall.kt", this::doTest);
            }

            @TestMetadata("resolveWithFunctionLiteralWithId.kt")
            public void testResolveWithFunctionLiteralWithId() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralWithId.kt", this::doTest);
            }

            @TestMetadata("resolveWithFunctionLiterals.kt")
            public void testResolveWithFunctionLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiterals.kt", this::doTest);
            }

            @TestMetadata("resolveWithFunctionLiteralsOverload.kt")
            public void testResolveWithFunctionLiteralsOverload() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralsOverload.kt", this::doTest);
            }

            @TestMetadata("resolveWithGenerics.kt")
            public void testResolveWithGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveWithGenerics.kt", this::doTest);
            }

            @TestMetadata("resolveWithRedeclarationError.kt")
            public void testResolveWithRedeclarationError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveWithRedeclarationError.kt", this::doTest);
            }

            @TestMetadata("resolveWithSpecifiedFunctionLiteralWithId.kt")
            public void testResolveWithSpecifiedFunctionLiteralWithId() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveWithSpecifiedFunctionLiteralWithId.kt", this::doTest);
            }

            @TestMetadata("resolveWithoutGenerics.kt")
            public void testResolveWithoutGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/resolveWithoutGenerics.kt", this::doTest);
            }

            @TestMetadata("typeParameterInDefaultValueInLocalFunction.kt")
            public void testTypeParameterInDefaultValueInLocalFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/typeParameterInDefaultValueInLocalFunction.kt", this::doTest);
            }

            @TestMetadata("wrongNumberOfTypeArguments.kt")
            public void testWrongNumberOfTypeArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/wrongNumberOfTypeArguments.kt", this::doTest);
            }

            @TestMetadata("wrongReceiver.kt")
            public void testWrongReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/wrongReceiver.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/dslMarker")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DslMarker extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInDslMarker() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/dslMarker"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotatedTypeArgument.kt")
                public void testAnnotatedTypeArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/annotatedTypeArgument.kt", this::doTest);
                }

                @TestMetadata("dslMarkerOnTypealias.kt")
                public void testDslMarkerOnTypealias() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/dslMarkerOnTypealias.kt", this::doTest);
                }

                @TestMetadata("dslMarkerWithTypealiasRecursion.kt")
                public void testDslMarkerWithTypealiasRecursion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/dslMarkerWithTypealiasRecursion.kt", this::doTest);
                }

                @TestMetadata("inheritedMarker.kt")
                public void testInheritedMarker() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/inheritedMarker.kt", this::doTest);
                }

                @TestMetadata("insideTopLevelExtension.kt")
                public void testInsideTopLevelExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/insideTopLevelExtension.kt", this::doTest);
                }

                @TestMetadata("insideTopLevelExtensionAnnotatedType.kt")
                public void testInsideTopLevelExtensionAnnotatedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/insideTopLevelExtensionAnnotatedType.kt", this::doTest);
                }

                @TestMetadata("markersIntersection.kt")
                public void testMarkersIntersection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/markersIntersection.kt", this::doTest);
                }

                @TestMetadata("nestedWithSameReceiver.kt")
                public void testNestedWithSameReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/nestedWithSameReceiver.kt", this::doTest);
                }

                @TestMetadata("properties.kt")
                public void testProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/properties.kt", this::doTest);
                }

                @TestMetadata("simpleAnnotatedClasses.kt")
                public void testSimpleAnnotatedClasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/simpleAnnotatedClasses.kt", this::doTest);
                }

                @TestMetadata("simpleAnnotatedTypes.kt")
                public void testSimpleAnnotatedTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/simpleAnnotatedTypes.kt", this::doTest);
                }

                @TestMetadata("substitutedReceiverAnnotatedClasses.kt")
                public void testSubstitutedReceiverAnnotatedClasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/substitutedReceiverAnnotatedClasses.kt", this::doTest);
                }

                @TestMetadata("substitutedReceiverAnnotatedType.kt")
                public void testSubstitutedReceiverAnnotatedType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/substitutedReceiverAnnotatedType.kt", this::doTest);
                }

                @TestMetadata("threeImplicitReceivers.kt")
                public void testThreeImplicitReceivers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/threeImplicitReceivers.kt", this::doTest);
                }

                @TestMetadata("threeImplicitReceivers2.kt")
                public void testThreeImplicitReceivers2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/threeImplicitReceivers2.kt", this::doTest);
                }

                @TestMetadata("twoImplicitReceivers.kt")
                public void testTwoImplicitReceivers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/twoImplicitReceivers.kt", this::doTest);
                }

                @TestMetadata("twoLanguages.kt")
                public void testTwoLanguages() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/twoLanguages.kt", this::doTest);
                }

                @TestMetadata("unsupportedFeature.kt")
                public void testUnsupportedFeature() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/unsupportedFeature.kt", this::doTest);
                }

                @TestMetadata("useOfExtensions.kt")
                public void testUseOfExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/useOfExtensions.kt", this::doTest);
                }

                @TestMetadata("usingWith.kt")
                public void testUsingWith() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/usingWith.kt", this::doTest);
                }

                @TestMetadata("usingWithThis.kt")
                public void testUsingWithThis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/usingWithThis.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Invoke extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInvoke() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/invoke"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("extensionValueAsNonExtension.kt")
                public void testExtensionValueAsNonExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/extensionValueAsNonExtension.kt", this::doTest);
                }

                @TestMetadata("functionExpectedWhenSeveralInvokesExist.kt")
                public void testFunctionExpectedWhenSeveralInvokesExist() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/functionExpectedWhenSeveralInvokesExist.kt", this::doTest);
                }

                @TestMetadata("implicitInvoke.kt")
                public void testImplicitInvoke() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/implicitInvoke.kt", this::doTest);
                }

                @TestMetadata("invokeAndSmartCast.kt")
                public void testInvokeAndSmartCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAndSmartCast.kt", this::doTest);
                }

                @TestMetadata("invokeAsExtension.kt")
                public void testInvokeAsExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsExtension.kt", this::doTest);
                }

                @TestMetadata("invokeAsMember.kt")
                public void testInvokeAsMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMember.kt", this::doTest);
                }

                @TestMetadata("invokeAsMemberExtension.kt")
                public void testInvokeAsMemberExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtension.kt", this::doTest);
                }

                @TestMetadata("invokeAsMemberExtensionToExplicitReceiver.kt")
                public void testInvokeAsMemberExtensionToExplicitReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtensionToExplicitReceiver.kt", this::doTest);
                }

                @TestMetadata("invokeNonExtensionLambdaInContext.kt")
                public void testInvokeNonExtensionLambdaInContext() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeNonExtensionLambdaInContext.kt", this::doTest);
                }

                @TestMetadata("invokeOnVariableWithExtensionFunctionType.kt")
                public void testInvokeOnVariableWithExtensionFunctionType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeOnVariableWithExtensionFunctionType.kt", this::doTest);
                }

                @TestMetadata("KT-4372.kt")
                public void testKT_4372() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/KT-4372.kt", this::doTest);
                }

                @TestMetadata("kt3772.kt")
                public void testKt3772() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt3772.kt", this::doTest);
                }

                @TestMetadata("kt3833-invokeInsideNestedClass.kt")
                public void testKt3833_invokeInsideNestedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt3833-invokeInsideNestedClass.kt", this::doTest);
                }

                @TestMetadata("kt4204-completeNestedCallsForInvoke.kt")
                public void testKt4204_completeNestedCallsForInvoke() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt4204-completeNestedCallsForInvoke.kt", this::doTest);
                }

                @TestMetadata("kt4321InvokeOnEnum.kt")
                public void testKt4321InvokeOnEnum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt4321InvokeOnEnum.kt", this::doTest);
                }

                @TestMetadata("kt9517.kt")
                public void testKt9517() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt9517.kt", this::doTest);
                }

                @TestMetadata("kt9805.kt")
                public void testKt9805() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt9805.kt", this::doTest);
                }

                @TestMetadata("reportFunctionExpectedWhenOneInvokeExist.kt")
                public void testReportFunctionExpectedWhenOneInvokeExist() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/reportFunctionExpectedWhenOneInvokeExist.kt", this::doTest);
                }

                @TestMetadata("valNamedInvoke.kt")
                public void testValNamedInvoke() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/valNamedInvoke.kt", this::doTest);
                }

                @TestMetadata("wrongInvokeExtension.kt")
                public void testWrongInvokeExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/wrongInvokeExtension.kt", this::doTest);
                }

                @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Errors extends AbstractDiagnosticsUsingJavacTest {
                    public void testAllFilesPresentInErrors() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/invoke/errors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("ambiguityForInvoke.kt")
                    public void testAmbiguityForInvoke() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/ambiguityForInvoke.kt", this::doTest);
                    }

                    @TestMetadata("invisibleInvoke.kt")
                    public void testInvisibleInvoke() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/invisibleInvoke.kt", this::doTest);
                    }

                    @TestMetadata("receiverPresenceErrorForInvoke.kt")
                    public void testReceiverPresenceErrorForInvoke() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/receiverPresenceErrorForInvoke.kt", this::doTest);
                    }

                    @TestMetadata("typeInferenceErrorForInvoke.kt")
                    public void testTypeInferenceErrorForInvoke() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/typeInferenceErrorForInvoke.kt", this::doTest);
                    }

                    @TestMetadata("unresolvedInvoke.kt")
                    public void testUnresolvedInvoke() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/unresolvedInvoke.kt", this::doTest);
                    }

                    @TestMetadata("unsafeCallWithInvoke.kt")
                    public void testUnsafeCallWithInvoke() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/unsafeCallWithInvoke.kt", this::doTest);
                    }

                    @TestMetadata("wrongReceiverForInvokeOnExpression.kt")
                    public void testWrongReceiverForInvokeOnExpression() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/wrongReceiverForInvokeOnExpression.kt", this::doTest);
                    }

                    @TestMetadata("wrongReceiverTypeForInvoke.kt")
                    public void testWrongReceiverTypeForInvoke() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/wrongReceiverTypeForInvoke.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NestedCalls extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNestedCalls() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/nestedCalls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("analyzeArgsInFreeExpressionPosition.kt")
                public void testAnalyzeArgsInFreeExpressionPosition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeArgsInFreeExpressionPosition.kt", this::doTest);
                }

                @TestMetadata("analyzeUnmappedArguments.kt")
                public void testAnalyzeUnmappedArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeUnmappedArguments.kt", this::doTest);
                }

                @TestMetadata("argumentsInParentheses.kt")
                public void testArgumentsInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/argumentsInParentheses.kt", this::doTest);
                }

                @TestMetadata("completeTypeInferenceForNestedInNoneApplicable.kt")
                public void testCompleteTypeInferenceForNestedInNoneApplicable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/completeTypeInferenceForNestedInNoneApplicable.kt", this::doTest);
                }

                @TestMetadata("completeUnmappedArguments.kt")
                public void testCompleteUnmappedArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/completeUnmappedArguments.kt", this::doTest);
                }

                @TestMetadata("kt5971NestedSafeCall.kt")
                public void testKt5971NestedSafeCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/kt5971NestedSafeCall.kt", this::doTest);
                }

                @TestMetadata("kt7597.kt")
                public void testKt7597() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/kt7597.kt", this::doTest);
                }

                @TestMetadata("manyInapplicableCandidatesWithLambdas.kt")
                public void testManyInapplicableCandidatesWithLambdas() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/manyInapplicableCandidatesWithLambdas.kt", this::doTest);
                }

                @TestMetadata("twoTypeParameters.kt")
                public void testTwoTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/twoTypeParameters.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/noCandidates")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NoCandidates extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNoCandidates() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/noCandidates"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("kt2787.kt")
                public void testKt2787() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/noCandidates/kt2787.kt", this::doTest);
                }

                @TestMetadata("resolvedToClassifier.kt")
                public void testResolvedToClassifier() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/noCandidates/resolvedToClassifier.kt", this::doTest);
                }

                @TestMetadata("resolvedToClassifierWithReceiver.kt")
                public void testResolvedToClassifierWithReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/noCandidates/resolvedToClassifierWithReceiver.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/overloadConflicts")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class OverloadConflicts extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInOverloadConflicts() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/overloadConflicts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("allLambdas.kt")
                public void testAllLambdas() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/allLambdas.kt", this::doTest);
                }

                @TestMetadata("extensionReceiverAndVarargs.kt")
                public void testExtensionReceiverAndVarargs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/extensionReceiverAndVarargs.kt", this::doTest);
                }

                @TestMetadata("genericWithProjection.kt")
                public void testGenericWithProjection() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/genericWithProjection.kt", this::doTest);
                }

                @TestMetadata("kt10472.kt")
                public void testKt10472() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt10472.kt", this::doTest);
                }

                @TestMetadata("kt10640.kt")
                public void testKt10640() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt10640.kt", this::doTest);
                }

                @TestMetadata("numberOfDefaults.kt")
                public void testNumberOfDefaults() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/numberOfDefaults.kt", this::doTest);
                }

                @TestMetadata("originalExamples.kt")
                public void testOriginalExamples() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/originalExamples.kt", this::doTest);
                }

                @TestMetadata("varargWithMoreSpecificSignature.kt")
                public void testVarargWithMoreSpecificSignature() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargWithMoreSpecificSignature.kt", this::doTest);
                }

                @TestMetadata("varargs.kt")
                public void testVarargs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargs.kt", this::doTest);
                }

                @TestMetadata("varargsInDifferentPositions.kt")
                public void testVarargsInDifferentPositions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsInDifferentPositions.kt", this::doTest);
                }

                @TestMetadata("varargsMixed.kt")
                public void testVarargsMixed() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsMixed.kt", this::doTest);
                }

                @TestMetadata("varargsWithRecursiveGenerics.kt")
                public void testVarargsWithRecursiveGenerics() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsWithRecursiveGenerics.kt", this::doTest);
                }

                @TestMetadata("withVariance.kt")
                public void testWithVariance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/withVariance.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/priority")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Priority extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInPriority() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/priority"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("invokeExtensionVsOther.kt")
                public void testInvokeExtensionVsOther() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/invokeExtensionVsOther.kt", this::doTest);
                }

                @TestMetadata("invokeExtensionVsOther2.kt")
                public void testInvokeExtensionVsOther2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/invokeExtensionVsOther2.kt", this::doTest);
                }

                @TestMetadata("kt10219.kt")
                public void testKt10219() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/kt10219.kt", this::doTest);
                }

                @TestMetadata("kt10510.kt")
                public void testKt10510() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/kt10510.kt", this::doTest);
                }

                @TestMetadata("kt9810.kt")
                public void testKt9810() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/kt9810.kt", this::doTest);
                }

                @TestMetadata("kt9965.kt")
                public void testKt9965() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/kt9965.kt", this::doTest);
                }

                @TestMetadata("localExtVsNonLocalExt.kt")
                public void testLocalExtVsNonLocalExt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/localExtVsNonLocalExt.kt", this::doTest);
                }

                @TestMetadata("memberVsLocalExt.kt")
                public void testMemberVsLocalExt() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/memberVsLocalExt.kt", this::doTest);
                }

                @TestMetadata("staticVsImplicitReceiverMember.kt")
                public void testStaticVsImplicitReceiverMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/staticVsImplicitReceiverMember.kt", this::doTest);
                }

                @TestMetadata("synthesizedMembersVsExtension.kt")
                public void testSynthesizedMembersVsExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/synthesizedMembersVsExtension.kt", this::doTest);
                }

                @TestMetadata("syntheticPropertiesVsExtensions.kt")
                public void testSyntheticPropertiesVsExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/syntheticPropertiesVsExtensions.kt", this::doTest);
                }

                @TestMetadata("syntheticPropertiesVsMembers.kt")
                public void testSyntheticPropertiesVsMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/priority/syntheticPropertiesVsMembers.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SpecialConstructions extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSpecialConstructions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/specialConstructions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("constantsInIf.kt")
                public void testConstantsInIf() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/constantsInIf.kt", this::doTest);
                }

                @TestMetadata("elvisAsCall.kt")
                public void testElvisAsCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/elvisAsCall.kt", this::doTest);
                }

                @TestMetadata("exclExclAsCall.kt")
                public void testExclExclAsCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/exclExclAsCall.kt", this::doTest);
                }

                @TestMetadata("inferenceForElvis.kt")
                public void testInferenceForElvis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/inferenceForElvis.kt", this::doTest);
                }

                @TestMetadata("multipleSuperClasses.kt")
                public void testMultipleSuperClasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/multipleSuperClasses.kt", this::doTest);
                }

                @TestMetadata("reportTypeMismatchDeeplyOnBranches.kt")
                public void testReportTypeMismatchDeeplyOnBranches() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/reportTypeMismatchDeeplyOnBranches.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/scopes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Scopes extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInScopes() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AmbiguityBetweenRootAndPackage.kt")
            public void testAmbiguityBetweenRootAndPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/AmbiguityBetweenRootAndPackage.kt", this::doTest);
            }

            @TestMetadata("AmbiguousNonExtensions.kt")
            public void testAmbiguousNonExtensions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/AmbiguousNonExtensions.kt", this::doTest);
            }

            @TestMetadata("genericVsNested.kt")
            public void testGenericVsNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/genericVsNested.kt", this::doTest);
            }

            @TestMetadata("implicitReceiverMemberVsParameter.kt")
            public void testImplicitReceiverMemberVsParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/implicitReceiverMemberVsParameter.kt", this::doTest);
            }

            @TestMetadata("initializerScopeOfExtensionProperty.kt")
            public void testInitializerScopeOfExtensionProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/initializerScopeOfExtensionProperty.kt", this::doTest);
            }

            @TestMetadata("invisibleSetter.kt")
            public void testInvisibleSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/invisibleSetter.kt", this::doTest);
            }

            @TestMetadata("kt1078.kt")
            public void testKt1078() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1078.kt", this::doTest);
            }

            @TestMetadata("kt1080.kt")
            public void testKt1080() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1080.kt", this::doTest);
            }

            @TestMetadata("kt1244.kt")
            public void testKt1244() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1244.kt", this::doTest);
            }

            @TestMetadata("kt1248.kt")
            public void testKt1248() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1248.kt", this::doTest);
            }

            @TestMetadata("kt151.kt")
            public void testKt151() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt151.kt", this::doTest);
            }

            @TestMetadata("kt1579.kt")
            public void testKt1579() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1579.kt", this::doTest);
            }

            @TestMetadata("kt1579_map_entry.kt")
            public void testKt1579_map_entry() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1579_map_entry.kt", this::doTest);
            }

            @TestMetadata("kt1580.kt")
            public void testKt1580() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1580.kt", this::doTest);
            }

            @TestMetadata("kt1642.kt")
            public void testKt1642() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1642.kt", this::doTest);
            }

            @TestMetadata("kt1738.kt")
            public void testKt1738() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1738.kt", this::doTest);
            }

            @TestMetadata("kt1805.kt")
            public void testKt1805() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1805.kt", this::doTest);
            }

            @TestMetadata("kt1806.kt")
            public void testKt1806() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1806.kt", this::doTest);
            }

            @TestMetadata("kt1822.kt")
            public void testKt1822() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1822.kt", this::doTest);
            }

            @TestMetadata("kt1942.kt")
            public void testKt1942() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt1942.kt", this::doTest);
            }

            @TestMetadata("kt2262.kt")
            public void testKt2262() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt2262.kt", this::doTest);
            }

            @TestMetadata("kt250.617.10.kt")
            public void testKt250_617_10() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt250.617.10.kt", this::doTest);
            }

            @TestMetadata("kt323.kt")
            public void testKt323() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt323.kt", this::doTest);
            }

            @TestMetadata("kt37.kt")
            public void testKt37() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt37.kt", this::doTest);
            }

            @TestMetadata("kt587.kt")
            public void testKt587() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt587.kt", this::doTest);
            }

            @TestMetadata("kt900.kt")
            public void testKt900() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt900.kt", this::doTest);
            }

            @TestMetadata("kt900-1.kt")
            public void testKt900_1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt900-1.kt", this::doTest);
            }

            @TestMetadata("kt900-2.kt")
            public void testKt900_2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt900-2.kt", this::doTest);
            }

            @TestMetadata("kt939.kt")
            public void testKt939() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt939.kt", this::doTest);
            }

            @TestMetadata("kt9430.kt")
            public void testKt9430() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/kt9430.kt", this::doTest);
            }

            @TestMetadata("NoAmbiguityBetweenRootAndPackage.kt")
            public void testNoAmbiguityBetweenRootAndPackage() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/NoAmbiguityBetweenRootAndPackage.kt", this::doTest);
            }

            @TestMetadata("sameClassNameResolve.kt")
            public void testSameClassNameResolve() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/sameClassNameResolve.kt", this::doTest);
            }

            @TestMetadata("stopResolutionOnAmbiguity.kt")
            public void testStopResolutionOnAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/stopResolutionOnAmbiguity.kt", this::doTest);
            }

            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/visibility.kt", this::doTest);
            }

            @TestMetadata("visibility2.kt")
            public void testVisibility2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/visibility2.kt", this::doTest);
            }

            @TestMetadata("visibility3.kt")
            public void testVisibility3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/visibility3.kt", this::doTest);
            }

            @TestMetadata("VisibilityInClassObject.kt")
            public void testVisibilityInClassObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/VisibilityInClassObject.kt", this::doTest);
            }

            @TestMetadata("VisibilityInheritModifier.kt")
            public void testVisibilityInheritModifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/VisibilityInheritModifier.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/scopes/classHeader")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ClassHeader extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInClassHeader() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/classHeader"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotationOnClass.kt")
                public void testAnnotationOnClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/annotationOnClass.kt", this::doTest);
                }

                @TestMetadata("annotationOnConstructors.kt")
                public void testAnnotationOnConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/annotationOnConstructors.kt", this::doTest);
                }

                @TestMetadata("classGenericParameters.kt")
                public void testClassGenericParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/classGenericParameters.kt", this::doTest);
                }

                @TestMetadata("classParents.kt")
                public void testClassParents() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/classParents.kt", this::doTest);
                }

                @TestMetadata("companionObjectParents.kt")
                public void testCompanionObjectParents() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/companionObjectParents.kt", this::doTest);
                }

                @TestMetadata("companionObjectSuperConstructorArguments.kt")
                public void testCompanionObjectSuperConstructorArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/companionObjectSuperConstructorArguments.kt", this::doTest);
                }

                @TestMetadata("constructors.kt")
                public void testConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/constructors.kt", this::doTest);
                }

                @TestMetadata("delegation.kt")
                public void testDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/delegation.kt", this::doTest);
                }

                @TestMetadata("objectParents.kt")
                public void testObjectParents() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/objectParents.kt", this::doTest);
                }

                @TestMetadata("objectSuperConstructorArguments.kt")
                public void testObjectSuperConstructorArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/objectSuperConstructorArguments.kt", this::doTest);
                }

                @TestMetadata("simpleDelegation.kt")
                public void testSimpleDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/simpleDelegation.kt", this::doTest);
                }

                @TestMetadata("superConstructorArguments.kt")
                public void testSuperConstructorArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/superConstructorArguments.kt", this::doTest);
                }

                @TestMetadata("superConstructorArgumentsInSecondaryConstructor.kt")
                public void testSuperConstructorArgumentsInSecondaryConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/classHeader/superConstructorArgumentsInSecondaryConstructor.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inheritance extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInheritance() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/inheritance"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("companionObject.kt")
                public void testCompanionObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/companionObject.kt", this::doTest);
                }

                @TestMetadata("companionObjectAfterJava.kt")
                public void testCompanionObjectAfterJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/companionObjectAfterJava.kt", this::doTest);
                }

                @TestMetadata("companionObjectsOrder.kt")
                public void testCompanionObjectsOrder() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/companionObjectsOrder.kt", this::doTest);
                }

                @TestMetadata("innerClasses.kt")
                public void testInnerClasses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/innerClasses.kt", this::doTest);
                }

                @TestMetadata("kt3856.kt")
                public void testKt3856() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/kt3856.kt", this::doTest);
                }

                @TestMetadata("methodsPriority.kt")
                public void testMethodsPriority() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/methodsPriority.kt", this::doTest);
                }

                @TestMetadata("nestedClassesFromInterface.kt")
                public void testNestedClassesFromInterface() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedClassesFromInterface.kt", this::doTest);
                }

                @TestMetadata("nestedCompanionClass.kt")
                public void testNestedCompanionClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClass.kt", this::doTest);
                }

                @TestMetadata("nestedCompanionClassVsNested.kt")
                public void testNestedCompanionClassVsNested() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClassVsNested.kt", this::doTest);
                }

                @TestMetadata("nestedCompanionClassVsNestedJava.kt")
                public void testNestedCompanionClassVsNestedJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClassVsNestedJava.kt", this::doTest);
                }

                @TestMetadata("nestedFromJava.kt")
                public void testNestedFromJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedFromJava.kt", this::doTest);
                }

                @TestMetadata("nestedFromJavaAfterKotlin.kt")
                public void testNestedFromJavaAfterKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedFromJavaAfterKotlin.kt", this::doTest);
                }

                @TestMetadata("nestedVsToplevelClass.kt")
                public void testNestedVsToplevelClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedVsToplevelClass.kt", this::doTest);
                }

                @TestMetadata("severalCompanions.kt")
                public void testSeveralCompanions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/severalCompanions.kt", this::doTest);
                }

                @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance/statics")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Statics extends AbstractDiagnosticsUsingJavacTest {
                    public void testAllFilesPresentInStatics() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/inheritance/statics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("hidePrivateByPublic.kt")
                    public void testHidePrivateByPublic() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/hidePrivateByPublic.kt", this::doTest);
                    }

                    @TestMetadata("jjkj.kt")
                    public void testJjkj() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/jjkj.kt", this::doTest);
                    }

                    @TestMetadata("kjk.kt")
                    public void testKjk() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/kjk.kt", this::doTest);
                    }

                    @TestMetadata("localVsStatic.kt")
                    public void testLocalVsStatic() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/localVsStatic.kt", this::doTest);
                    }

                    @TestMetadata("nameClash0.kt")
                    public void testNameClash0() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash0.kt", this::doTest);
                    }

                    @TestMetadata("nameClash1.kt")
                    public void testNameClash1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash1.kt", this::doTest);
                    }

                    @TestMetadata("nameClash2.kt")
                    public void testNameClash2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash2.kt", this::doTest);
                    }

                    @TestMetadata("oneInterfaceManyTimes.kt")
                    public void testOneInterfaceManyTimes() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/oneInterfaceManyTimes.kt", this::doTest);
                    }

                    @TestMetadata("overloadStatic.kt")
                    public void testOverloadStatic() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/overloadStatic.kt", this::doTest);
                    }

                    @TestMetadata("staticFunVsImport.kt")
                    public void testStaticFunVsImport() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticFunVsImport.kt", this::doTest);
                    }

                    @TestMetadata("staticPropertyVsImport.kt")
                    public void testStaticPropertyVsImport() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticPropertyVsImport.kt", this::doTest);
                    }

                    @TestMetadata("staticVsCompanion.kt")
                    public void testStaticVsCompanion() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsCompanion.kt", this::doTest);
                    }

                    @TestMetadata("staticVsMember.kt")
                    public void testStaticVsMember() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsMember.kt", this::doTest);
                    }

                    @TestMetadata("staticVsOuter.kt")
                    public void testStaticVsOuter() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsOuter.kt", this::doTest);
                    }

                    @TestMetadata("staticsFromjava.kt")
                    public void testStaticsFromjava() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticsFromjava.kt", this::doTest);
                    }

                    @TestMetadata("staticsFromjavaAfterKotlin.kt")
                    public void testStaticsFromjavaAfterKotlin() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticsFromjavaAfterKotlin.kt", this::doTest);
                    }

                    @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class CompanionObject extends AbstractDiagnosticsUsingJavacTest {
                        @TestMetadata("accessToStaticMembersOfParentClass.kt")
                        public void testAccessToStaticMembersOfParentClass() throws Exception {
                            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClass.kt", this::doTest);
                        }

                        @TestMetadata("accessToStaticMembersOfParentClassJKJ.kt")
                        public void testAccessToStaticMembersOfParentClassJKJ() throws Exception {
                            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClassJKJ.kt", this::doTest);
                        }

                        public void testAllFilesPresentInCompanionObject() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }

                        @TestMetadata("inheritFromContainingClass.kt")
                        public void testInheritFromContainingClass() throws Exception {
                            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromContainingClass.kt", this::doTest);
                        }

                        @TestMetadata("inheritFromJava.kt")
                        public void testInheritFromJava() throws Exception {
                            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJava.kt", this::doTest);
                        }

                        @TestMetadata("inheritFromJavaAfterKotlin.kt")
                        public void testInheritFromJavaAfterKotlin() throws Exception {
                            KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJavaAfterKotlin.kt", this::doTest);
                        }
                    }
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/scopes/protectedVisibility")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ProtectedVisibility extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInProtectedVisibility() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/protectedVisibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("complexCompanion.kt")
                public void testComplexCompanion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/complexCompanion.kt", this::doTest);
                }

                @TestMetadata("constructors.kt")
                public void testConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/constructors.kt", this::doTest);
                }

                @TestMetadata("constructorsInner.kt")
                public void testConstructorsInner() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/constructorsInner.kt", this::doTest);
                }

                @TestMetadata("innerClassInJava.kt")
                public void testInnerClassInJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/innerClassInJava.kt", this::doTest);
                }

                @TestMetadata("innerProtectedClass.kt")
                public void testInnerProtectedClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/innerProtectedClass.kt", this::doTest);
                }

                @TestMetadata("javaInheritedInKotlin.kt")
                public void testJavaInheritedInKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/javaInheritedInKotlin.kt", this::doTest);
                }

                @TestMetadata("kt7971.kt")
                public void testKt7971() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/kt7971.kt", this::doTest);
                }

                @TestMetadata("nonSuperCallConstructor.kt")
                public void testNonSuperCallConstructor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructor.kt", this::doTest);
                }

                @TestMetadata("nonSuperCallConstructorJavaDifferentPackage.kt")
                public void testNonSuperCallConstructorJavaDifferentPackage() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructorJavaDifferentPackage.kt", this::doTest);
                }

                @TestMetadata("nonSuperCallConstructorJavaSamePackage.kt")
                public void testNonSuperCallConstructorJavaSamePackage() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructorJavaSamePackage.kt", this::doTest);
                }

                @TestMetadata("protectedCallOnSubClass.kt")
                public void testProtectedCallOnSubClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/protectedCallOnSubClass.kt", this::doTest);
                }

                @TestMetadata("smartcastOnExtensionReceiver.kt")
                public void testSmartcastOnExtensionReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/smartcastOnExtensionReceiver.kt", this::doTest);
                }

                @TestMetadata("syntheticPropertyExtensions.kt")
                public void testSyntheticPropertyExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/syntheticPropertyExtensions.kt", this::doTest);
                }

                @TestMetadata("syntheticSAMExtensions.kt")
                public void testSyntheticSAMExtensions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/syntheticSAMExtensions.kt", this::doTest);
                }

                @TestMetadata("unstableSmartCast.kt")
                public void testUnstableSmartCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/unstableSmartCast.kt", this::doTest);
                }

                @TestMetadata("withSmartcast.kt")
                public void testWithSmartcast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/withSmartcast.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/script")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Script extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInScript() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/script"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("varInScript.kt")
            public void testVarInScript() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/script/varInScript.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/sealed")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Sealed extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInSealed() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/sealed"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("DerivedTopLevel.kt")
            public void testDerivedTopLevel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/DerivedTopLevel.kt", this::doTest);
            }

            @TestMetadata("DoubleInner.kt")
            public void testDoubleInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/DoubleInner.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveOnRoot.kt")
            public void testExhaustiveOnRoot() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveOnRoot.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveOnTree.kt")
            public void testExhaustiveOnTree() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveOnTree.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveOnTriangleStar.kt")
            public void testExhaustiveOnTriangleStar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveOnTriangleStar.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhen.kt")
            public void testExhaustiveWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhen.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhenDoubleInner.kt")
            public void testExhaustiveWhenDoubleInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenDoubleInner.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhenMultipleInner.kt")
            public void testExhaustiveWhenMultipleInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenMultipleInner.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhenNegated.kt")
            public void testExhaustiveWhenNegated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenNegated.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhenNegatedTwice.kt")
            public void testExhaustiveWhenNegatedTwice() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenNegatedTwice.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhenOnNestedSealed.kt")
            public void testExhaustiveWhenOnNestedSealed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenOnNestedSealed.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhenOnNullable.kt")
            public void testExhaustiveWhenOnNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenOnNullable.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhenWithAdditionalMember.kt")
            public void testExhaustiveWhenWithAdditionalMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenWithAdditionalMember.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWhenWithElse.kt")
            public void testExhaustiveWhenWithElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenWithElse.kt", this::doTest);
            }

            @TestMetadata("Local.kt")
            public void testLocal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/Local.kt", this::doTest);
            }

            @TestMetadata("LocalSealed.kt")
            public void testLocalSealed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/LocalSealed.kt", this::doTest);
            }

            @TestMetadata("NestedSealed.kt")
            public void testNestedSealed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NestedSealed.kt", this::doTest);
            }

            @TestMetadata("NeverConstructed.kt")
            public void testNeverConstructed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NeverConstructed.kt", this::doTest);
            }

            @TestMetadata("NeverDerivedFromNested.kt")
            public void testNeverDerivedFromNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NeverDerivedFromNested.kt", this::doTest);
            }

            @TestMetadata("NeverEnum.kt")
            public void testNeverEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NeverEnum.kt", this::doTest);
            }

            @TestMetadata("NeverFinal.kt")
            public void testNeverFinal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NeverFinal.kt", this::doTest);
            }

            @TestMetadata("NeverInterface.kt")
            public void testNeverInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NeverInterface.kt", this::doTest);
            }

            @TestMetadata("NeverObject.kt")
            public void testNeverObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NeverObject.kt", this::doTest);
            }

            @TestMetadata("NeverOpen.kt")
            public void testNeverOpen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NeverOpen.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWhen.kt")
            public void testNonExhaustiveWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhen.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWhenNegated.kt")
            public void testNonExhaustiveWhenNegated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenNegated.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWhenWithAdditionalCase.kt")
            public void testNonExhaustiveWhenWithAdditionalCase() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenWithAdditionalCase.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWhenWithAnyCase.kt")
            public void testNonExhaustiveWhenWithAnyCase() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenWithAnyCase.kt", this::doTest);
            }

            @TestMetadata("NonPrivateConstructor.kt")
            public void testNonPrivateConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NonPrivateConstructor.kt", this::doTest);
            }

            @TestMetadata("NotFinal.kt")
            public void testNotFinal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/NotFinal.kt", this::doTest);
            }

            @TestMetadata("OperationWhen.kt")
            public void testOperationWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/OperationWhen.kt", this::doTest);
            }

            @TestMetadata("RedundantAbstract.kt")
            public void testRedundantAbstract() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/RedundantAbstract.kt", this::doTest);
            }

            @TestMetadata("TreeWhen.kt")
            public void testTreeWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/TreeWhen.kt", this::doTest);
            }

            @TestMetadata("TreeWhenFunctional.kt")
            public void testTreeWhenFunctional() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/TreeWhenFunctional.kt", this::doTest);
            }

            @TestMetadata("TreeWhenFunctionalNoIs.kt")
            public void testTreeWhenFunctionalNoIs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/TreeWhenFunctionalNoIs.kt", this::doTest);
            }

            @TestMetadata("WhenOnEmptySealed.kt")
            public void testWhenOnEmptySealed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/WhenOnEmptySealed.kt", this::doTest);
            }

            @TestMetadata("WithInterface.kt")
            public void testWithInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sealed/WithInterface.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SecondaryConstructors extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInSecondaryConstructors() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/secondaryConstructors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("argumentsResolveInBodyAndDelegationCall.kt")
            public void testArgumentsResolveInBodyAndDelegationCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/argumentsResolveInBodyAndDelegationCall.kt", this::doTest);
            }

            @TestMetadata("classInitializersWithoutPrimary.kt")
            public void testClassInitializersWithoutPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/classInitializersWithoutPrimary.kt", this::doTest);
            }

            @TestMetadata("companionObjectScope.kt")
            public void testCompanionObjectScope() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/companionObjectScope.kt", this::doTest);
            }

            @TestMetadata("constructorCallType.kt")
            public void testConstructorCallType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/constructorCallType.kt", this::doTest);
            }

            @TestMetadata("constructorInObject.kt")
            public void testConstructorInObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/constructorInObject.kt", this::doTest);
            }

            @TestMetadata("constructorInTrait.kt")
            public void testConstructorInTrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/constructorInTrait.kt", this::doTest);
            }

            @TestMetadata("ctrsAnnotationResolve.kt")
            public void testCtrsAnnotationResolve() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/ctrsAnnotationResolve.kt", this::doTest);
            }

            @TestMetadata("cyclicDelegationCalls.kt")
            public void testCyclicDelegationCalls() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/cyclicDelegationCalls.kt", this::doTest);
            }

            @TestMetadata("dataClasses.kt")
            public void testDataClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/dataClasses.kt", this::doTest);
            }

            @TestMetadata("dataFlowInDelegationCall.kt")
            public void testDataFlowInDelegationCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/dataFlowInDelegationCall.kt", this::doTest);
            }

            @TestMetadata("delegationByWithoutPrimary.kt")
            public void testDelegationByWithoutPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/delegationByWithoutPrimary.kt", this::doTest);
            }

            @TestMetadata("enums.kt")
            public void testEnums() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/enums.kt", this::doTest);
            }

            @TestMetadata("errorsOnEmptyDelegationCall.kt")
            public void testErrorsOnEmptyDelegationCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/errorsOnEmptyDelegationCall.kt", this::doTest);
            }

            @TestMetadata("expectedPrimaryConstructorCall.kt")
            public void testExpectedPrimaryConstructorCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/expectedPrimaryConstructorCall.kt", this::doTest);
            }

            @TestMetadata("generics.kt")
            public void testGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/generics.kt", this::doTest);
            }

            @TestMetadata("generics2.kt")
            public void testGenerics2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/generics2.kt", this::doTest);
            }

            @TestMetadata("generics3.kt")
            public void testGenerics3() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/generics3.kt", this::doTest);
            }

            @TestMetadata("headerSupertypeInitialization.kt")
            public void testHeaderSupertypeInitialization() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerSupertypeInitialization.kt", this::doTest);
            }

            @TestMetadata("implicitSuperCallErrorsIfPrimary.kt")
            public void testImplicitSuperCallErrorsIfPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/implicitSuperCallErrorsIfPrimary.kt", this::doTest);
            }

            @TestMetadata("initializationFromOtherInstance.kt")
            public void testInitializationFromOtherInstance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/initializationFromOtherInstance.kt", this::doTest);
            }

            @TestMetadata("kt6992.kt")
            public void testKt6992() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/kt6992.kt", this::doTest);
            }

            @TestMetadata("kt6993.kt")
            public void testKt6993() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/kt6993.kt", this::doTest);
            }

            @TestMetadata("kt6994.kt")
            public void testKt6994() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/kt6994.kt", this::doTest);
            }

            @TestMetadata("lambdaInDelegation.kt")
            public void testLambdaInDelegation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/lambdaInDelegation.kt", this::doTest);
            }

            @TestMetadata("nestedExtendsInner.kt")
            public void testNestedExtendsInner() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/nestedExtendsInner.kt", this::doTest);
            }

            @TestMetadata("noDefaultIfEmptySecondary.kt")
            public void testNoDefaultIfEmptySecondary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/noDefaultIfEmptySecondary.kt", this::doTest);
            }

            @TestMetadata("noPrimaryConstructor.kt")
            public void testNoPrimaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/noPrimaryConstructor.kt", this::doTest);
            }

            @TestMetadata("noSupertypeInitWithSecondaryConstructors.kt")
            public void testNoSupertypeInitWithSecondaryConstructors() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/noSupertypeInitWithSecondaryConstructors.kt", this::doTest);
            }

            @TestMetadata("propertyInitializationWithPrimary.kt")
            public void testPropertyInitializationWithPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/propertyInitializationWithPrimary.kt", this::doTest);
            }

            @TestMetadata("propertyInitializationWithoutPrimary.kt")
            public void testPropertyInitializationWithoutPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/propertyInitializationWithoutPrimary.kt", this::doTest);
            }

            @TestMetadata("redeclarations.kt")
            public void testRedeclarations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/redeclarations.kt", this::doTest);
            }

            @TestMetadata("redeclarationsOfConstructorsIgnored.kt")
            public void testRedeclarationsOfConstructorsIgnored() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/redeclarationsOfConstructorsIgnored.kt", this::doTest);
            }

            @TestMetadata("reportResolutionErrorOnImplicitOnce.kt")
            public void testReportResolutionErrorOnImplicitOnce() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/reportResolutionErrorOnImplicitOnce.kt", this::doTest);
            }

            @TestMetadata("resolvePropertyInitializerWithoutPrimary.kt")
            public void testResolvePropertyInitializerWithoutPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/resolvePropertyInitializerWithoutPrimary.kt", this::doTest);
            }

            @TestMetadata("return.kt")
            public void testReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/return.kt", this::doTest);
            }

            @TestMetadata("superAnyNonEmpty.kt")
            public void testSuperAnyNonEmpty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/superAnyNonEmpty.kt", this::doTest);
            }

            @TestMetadata("superSecondaryNonExisting.kt")
            public void testSuperSecondaryNonExisting() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/superSecondaryNonExisting.kt", this::doTest);
            }

            @TestMetadata("thisNonExisting.kt")
            public void testThisNonExisting() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/thisNonExisting.kt", this::doTest);
            }

            @TestMetadata("unreachableCode.kt")
            public void testUnreachableCode() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/unreachableCode.kt", this::doTest);
            }

            @TestMetadata("useOfPropertiesWithPrimary.kt")
            public void testUseOfPropertiesWithPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/useOfPropertiesWithPrimary.kt", this::doTest);
            }

            @TestMetadata("useOfPropertiesWithoutPrimary.kt")
            public void testUseOfPropertiesWithoutPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/useOfPropertiesWithoutPrimary.kt", this::doTest);
            }

            @TestMetadata("valOrValAndModifiersInCtr.kt")
            public void testValOrValAndModifiersInCtr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/valOrValAndModifiersInCtr.kt", this::doTest);
            }

            @TestMetadata("varargsInDelegationCallToPrimary.kt")
            public void testVarargsInDelegationCallToPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/varargsInDelegationCallToPrimary.kt", this::doTest);
            }

            @TestMetadata("varargsInDelegationCallToSecondary.kt")
            public void testVarargsInDelegationCallToSecondary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/varargsInDelegationCallToSecondary.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class HeaderCallChecker extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("accessBaseGenericFromInnerExtendingSameBase.kt")
                public void testAccessBaseGenericFromInnerExtendingSameBase() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseGenericFromInnerExtendingSameBase.kt", this::doTest);
                }

                @TestMetadata("accessBaseGenericFromInnerExtendingSameBase2.kt")
                public void testAccessBaseGenericFromInnerExtendingSameBase2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseGenericFromInnerExtendingSameBase2.kt", this::doTest);
                }

                @TestMetadata("accessBaseWithSameExtension.kt")
                public void testAccessBaseWithSameExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseWithSameExtension.kt", this::doTest);
                }

                @TestMetadata("accessGenericBaseWithSameExtension.kt")
                public void testAccessGenericBaseWithSameExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessGenericBaseWithSameExtension.kt", this::doTest);
                }

                public void testAllFilesPresentInHeaderCallChecker() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("innerInstanceCreation.kt")
                public void testInnerInstanceCreation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/innerInstanceCreation.kt", this::doTest);
                }

                @TestMetadata("lambdaAsArgument.kt")
                public void testLambdaAsArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/lambdaAsArgument.kt", this::doTest);
                }

                @TestMetadata("memberFunAccess.kt")
                public void testMemberFunAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/memberFunAccess.kt", this::doTest);
                }

                @TestMetadata("objectLiteralAsArgument.kt")
                public void testObjectLiteralAsArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/objectLiteralAsArgument.kt", this::doTest);
                }

                @TestMetadata("objectLiteralAsDefaultValueParameter.kt")
                public void testObjectLiteralAsDefaultValueParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/objectLiteralAsDefaultValueParameter.kt", this::doTest);
                }

                @TestMetadata("operatorCall.kt")
                public void testOperatorCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/operatorCall.kt", this::doTest);
                }

                @TestMetadata("passingInstance.kt")
                public void testPassingInstance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/passingInstance.kt", this::doTest);
                }

                @TestMetadata("propertyAccess.kt")
                public void testPropertyAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/propertyAccess.kt", this::doTest);
                }

                @TestMetadata("propertyAccessUnitialized.kt")
                public void testPropertyAccessUnitialized() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/propertyAccessUnitialized.kt", this::doTest);
                }

                @TestMetadata("superFunAccess.kt")
                public void testSuperFunAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superFunAccess.kt", this::doTest);
                }

                @TestMetadata("superFunAccessOverriden.kt")
                public void testSuperFunAccessOverriden() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superFunAccessOverriden.kt", this::doTest);
                }

                @TestMetadata("superPropertyAccess.kt")
                public void testSuperPropertyAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superPropertyAccess.kt", this::doTest);
                }

                @TestMetadata("thisAsExtensionReceiver.kt")
                public void testThisAsExtensionReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/thisAsExtensionReceiver.kt", this::doTest);
                }

                @TestMetadata("usingOuterInstance.kt")
                public void testUsingOuterInstance() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/usingOuterInstance.kt", this::doTest);
                }

                @TestMetadata("usingOuterProperty.kt")
                public void testUsingOuterProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/usingOuterProperty.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/senselessComparison")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SenselessComparison extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInSenselessComparison() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/senselessComparison"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("noExplicitType.kt")
            public void testNoExplicitType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/senselessComparison/noExplicitType.kt", this::doTest);
            }

            @TestMetadata("parenthesized.kt")
            public void testParenthesized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/senselessComparison/parenthesized.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/shadowing")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Shadowing extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInShadowing() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/shadowing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("noNameShadowingForSimpleParameters.kt")
            public void testNoNameShadowingForSimpleParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/noNameShadowingForSimpleParameters.kt", this::doTest);
            }

            @TestMetadata("ShadowLambdaParameter.kt")
            public void testShadowLambdaParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowLambdaParameter.kt", this::doTest);
            }

            @TestMetadata("ShadowMultiDeclarationWithFunParameter.kt")
            public void testShadowMultiDeclarationWithFunParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowMultiDeclarationWithFunParameter.kt", this::doTest);
            }

            @TestMetadata("ShadowParameterInFunctionBody.kt")
            public void testShadowParameterInFunctionBody() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInFunctionBody.kt", this::doTest);
            }

            @TestMetadata("ShadowParameterInNestedBlockInFor.kt")
            public void testShadowParameterInNestedBlockInFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInNestedBlockInFor.kt", this::doTest);
            }

            @TestMetadata("ShadowPropertyInClosure.kt")
            public void testShadowPropertyInClosure() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInClosure.kt", this::doTest);
            }

            @TestMetadata("ShadowPropertyInFor.kt")
            public void testShadowPropertyInFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFor.kt", this::doTest);
            }

            @TestMetadata("ShadowPropertyInFunction.kt")
            public void testShadowPropertyInFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFunction.kt", this::doTest);
            }

            @TestMetadata("ShadowVariableInFor.kt")
            public void testShadowVariableInFor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInFor.kt", this::doTest);
            }

            @TestMetadata("ShadowVariableInNestedBlock.kt")
            public void testShadowVariableInNestedBlock() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedBlock.kt", this::doTest);
            }

            @TestMetadata("ShadowVariableInNestedClosure.kt")
            public void testShadowVariableInNestedClosure() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosure.kt", this::doTest);
            }

            @TestMetadata("ShadowVariableInNestedClosureParam.kt")
            public void testShadowVariableInNestedClosureParam() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosureParam.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/smartCasts")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SmartCasts extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("afterBinaryExpr.kt")
            public void testAfterBinaryExpr() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/afterBinaryExpr.kt", this::doTest);
            }

            public void testAllFilesPresentInSmartCasts() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("alwaysNull.kt")
            public void testAlwaysNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/alwaysNull.kt", this::doTest);
            }

            @TestMetadata("alwaysNullWithJava.kt")
            public void testAlwaysNullWithJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/alwaysNullWithJava.kt", this::doTest);
            }

            @TestMetadata("classObjectMember.kt")
            public void testClassObjectMember() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/classObjectMember.kt", this::doTest);
            }

            @TestMetadata("combineWithNoSelectorInfo.kt")
            public void testCombineWithNoSelectorInfo() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/combineWithNoSelectorInfo.kt", this::doTest);
            }

            @TestMetadata("comparisonUnderAnd.kt")
            public void testComparisonUnderAnd() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/comparisonUnderAnd.kt", this::doTest);
            }

            @TestMetadata("complexComparison.kt")
            public void testComplexComparison() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/complexComparison.kt", this::doTest);
            }

            @TestMetadata("complexConditionsWithExcl.kt")
            public void testComplexConditionsWithExcl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/complexConditionsWithExcl.kt", this::doTest);
            }

            @TestMetadata("dataFlowInfoForArguments.kt")
            public void testDataFlowInfoForArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/dataFlowInfoForArguments.kt", this::doTest);
            }

            @TestMetadata("doubleLambdaArgument.kt")
            public void testDoubleLambdaArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/doubleLambdaArgument.kt", this::doTest);
            }

            @TestMetadata("elvisExclExcl.kt")
            public void testElvisExclExcl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExclExcl.kt", this::doTest);
            }

            @TestMetadata("elvisExclExclMerge.kt")
            public void testElvisExclExclMerge() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExclExclMerge.kt", this::doTest);
            }

            @TestMetadata("elvisExclExclPlatform.kt")
            public void testElvisExclExclPlatform() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExclExclPlatform.kt", this::doTest);
            }

            @TestMetadata("elvisExprNotNull.kt")
            public void testElvisExprNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExprNotNull.kt", this::doTest);
            }

            @TestMetadata("elvisNothingRHS.kt")
            public void testElvisNothingRHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvisNothingRHS.kt", this::doTest);
            }

            @TestMetadata("elvisRHS.kt")
            public void testElvisRHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvisRHS.kt", this::doTest);
            }

            @TestMetadata("equals.kt")
            public void testEquals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/equals.kt", this::doTest);
            }

            @TestMetadata("exclUnderAnd.kt")
            public void testExclUnderAnd() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/exclUnderAnd.kt", this::doTest);
            }

            @TestMetadata("explicitDefaultGetter.kt")
            public void testExplicitDefaultGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/explicitDefaultGetter.kt", this::doTest);
            }

            @TestMetadata("extensionSafeCall.kt")
            public void testExtensionSafeCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/extensionSafeCall.kt", this::doTest);
            }

            @TestMetadata("fakeSmartCastOnEquality.kt")
            public void testFakeSmartCastOnEquality() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/fakeSmartCastOnEquality.kt", this::doTest);
            }

            @TestMetadata("falseReceiverSmartCast.kt")
            public void testFalseReceiverSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/falseReceiverSmartCast.kt", this::doTest);
            }

            @TestMetadata("falseUnnecessaryCall.kt")
            public void testFalseUnnecessaryCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/falseUnnecessaryCall.kt", this::doTest);
            }

            @TestMetadata("fieldExclExcl.kt")
            public void testFieldExclExcl() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/fieldExclExcl.kt", this::doTest);
            }

            @TestMetadata("fieldInGetter.kt")
            public void testFieldInGetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/fieldInGetter.kt", this::doTest);
            }

            @TestMetadata("fieldPlus.kt")
            public void testFieldPlus() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/fieldPlus.kt", this::doTest);
            }

            @TestMetadata("genericIntersection.kt")
            public void testGenericIntersection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/genericIntersection.kt", this::doTest);
            }

            @TestMetadata("genericSet.kt")
            public void testGenericSet() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/genericSet.kt", this::doTest);
            }

            @TestMetadata("ifCascadeExprNotNull.kt")
            public void testIfCascadeExprNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/ifCascadeExprNotNull.kt", this::doTest);
            }

            @TestMetadata("ifExprInConditionNonNull.kt")
            public void testIfExprInConditionNonNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprInConditionNonNull.kt", this::doTest);
            }

            @TestMetadata("ifExprInWhenSubjectNonNull.kt")
            public void testIfExprInWhenSubjectNonNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprInWhenSubjectNonNull.kt", this::doTest);
            }

            @TestMetadata("ifExprNonNull.kt")
            public void testIfExprNonNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprNonNull.kt", this::doTest);
            }

            @TestMetadata("ifWhenExprNonNull.kt")
            public void testIfWhenExprNonNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/ifWhenExprNonNull.kt", this::doTest);
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/implicitReceiver.kt", this::doTest);
            }

            @TestMetadata("implicitToGrandSon.kt")
            public void testImplicitToGrandSon() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/implicitToGrandSon.kt", this::doTest);
            }

            @TestMetadata("incDecToNull.kt")
            public void testIncDecToNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/incDecToNull.kt", this::doTest);
            }

            @TestMetadata("kt10232.kt")
            public void testKt10232() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt10232.kt", this::doTest);
            }

            @TestMetadata("kt10444.kt")
            public void testKt10444() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt10444.kt", this::doTest);
            }

            @TestMetadata("kt10483.kt")
            public void testKt10483() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt10483.kt", this::doTest);
            }

            @TestMetadata("kt1461.kt")
            public void testKt1461() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt1461.kt", this::doTest);
            }

            @TestMetadata("kt2422.kt")
            public void testKt2422() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt2422.kt", this::doTest);
            }

            @TestMetadata("kt2865.kt")
            public void testKt2865() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt2865.kt", this::doTest);
            }

            @TestMetadata("kt3224.kt")
            public void testKt3224() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt3224.kt", this::doTest);
            }

            @TestMetadata("kt3244.kt")
            public void testKt3244() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt3244.kt", this::doTest);
            }

            @TestMetadata("kt3572.kt")
            public void testKt3572() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt3572.kt", this::doTest);
            }

            @TestMetadata("kt3711.kt")
            public void testKt3711() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt3711.kt", this::doTest);
            }

            @TestMetadata("kt3899.kt")
            public void testKt3899() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt3899.kt", this::doTest);
            }

            @TestMetadata("kt3993.kt")
            public void testKt3993() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt3993.kt", this::doTest);
            }

            @TestMetadata("kt5427.kt")
            public void testKt5427() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt5427.kt", this::doTest);
            }

            @TestMetadata("kt5455.kt")
            public void testKt5455() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt5455.kt", this::doTest);
            }

            @TestMetadata("kt6819.kt")
            public void testKt6819() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt6819.kt", this::doTest);
            }

            @TestMetadata("kt7561.kt")
            public void testKt7561() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/kt7561.kt", this::doTest);
            }

            @TestMetadata("lambdaAndArgument.kt")
            public void testLambdaAndArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaAndArgument.kt", this::doTest);
            }

            @TestMetadata("lambdaAndArgumentFun.kt")
            public void testLambdaAndArgumentFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaAndArgumentFun.kt", this::doTest);
            }

            @TestMetadata("lambdaArgumentNoSubstitutedReturn.kt")
            public void testLambdaArgumentNoSubstitutedReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentNoSubstitutedReturn.kt", this::doTest);
            }

            @TestMetadata("lambdaArgumentWithBoundWithoutType.kt")
            public void testLambdaArgumentWithBoundWithoutType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithBoundWithoutType.kt", this::doTest);
            }

            @TestMetadata("lambdaArgumentWithExpectedGenericType.kt")
            public void testLambdaArgumentWithExpectedGenericType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithExpectedGenericType.kt", this::doTest);
            }

            @TestMetadata("lambdaArgumentWithoutType.kt")
            public void testLambdaArgumentWithoutType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutType.kt", this::doTest);
            }

            @TestMetadata("lambdaArgumentWithoutTypeIf.kt")
            public void testLambdaArgumentWithoutTypeIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeIf.kt", this::doTest);
            }

            @TestMetadata("lambdaArgumentWithoutTypeIfMerge.kt")
            public void testLambdaArgumentWithoutTypeIfMerge() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeIfMerge.kt", this::doTest);
            }

            @TestMetadata("lambdaArgumentWithoutTypeWhen.kt")
            public void testLambdaArgumentWithoutTypeWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeWhen.kt", this::doTest);
            }

            @TestMetadata("lambdaCall.kt")
            public void testLambdaCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaCall.kt", this::doTest);
            }

            @TestMetadata("lambdaCallAnnotated.kt")
            public void testLambdaCallAnnotated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaCallAnnotated.kt", this::doTest);
            }

            @TestMetadata("lambdaDeclaresAndModifies.kt")
            public void testLambdaDeclaresAndModifies() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifies.kt", this::doTest);
            }

            @TestMetadata("lambdaDeclaresAndModifiesInLoop.kt")
            public void testLambdaDeclaresAndModifiesInLoop() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesInLoop.kt", this::doTest);
            }

            @TestMetadata("lambdaDeclaresAndModifiesInSecondary.kt")
            public void testLambdaDeclaresAndModifiesInSecondary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesInSecondary.kt", this::doTest);
            }

            @TestMetadata("lambdaDeclaresAndModifiesWithDirectEq.kt")
            public void testLambdaDeclaresAndModifiesWithDirectEq() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesWithDirectEq.kt", this::doTest);
            }

            @TestMetadata("lambdaUsesOwnerModifies.kt")
            public void testLambdaUsesOwnerModifies() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaUsesOwnerModifies.kt", this::doTest);
            }

            @TestMetadata("level_1_0.kt")
            public void testLevel_1_0() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/level_1_0.kt", this::doTest);
            }

            @TestMetadata("localClassChanges.kt")
            public void testLocalClassChanges() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/localClassChanges.kt", this::doTest);
            }

            @TestMetadata("localFunBetween.kt")
            public void testLocalFunBetween() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/localFunBetween.kt", this::doTest);
            }

            @TestMetadata("localFunChanges.kt")
            public void testLocalFunChanges() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/localFunChanges.kt", this::doTest);
            }

            @TestMetadata("localObjectChanges.kt")
            public void testLocalObjectChanges() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/localObjectChanges.kt", this::doTest);
            }

            @TestMetadata("multipleResolvedCalls.kt")
            public void testMultipleResolvedCalls() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/multipleResolvedCalls.kt", this::doTest);
            }

            @TestMetadata("noErrorCheckForPackageLevelVal.kt")
            public void testNoErrorCheckForPackageLevelVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/noErrorCheckForPackageLevelVal.kt", this::doTest);
            }

            @TestMetadata("noUnnecessarySmartCastForReceiver.kt")
            public void testNoUnnecessarySmartCastForReceiver() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/noUnnecessarySmartCastForReceiver.kt", this::doTest);
            }

            @TestMetadata("notNullorNotNull.kt")
            public void testNotNullorNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/notNullorNotNull.kt", this::doTest);
            }

            @TestMetadata("openInSealed.kt")
            public void testOpenInSealed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/openInSealed.kt", this::doTest);
            }

            @TestMetadata("ownerDeclaresBothModifies.kt")
            public void testOwnerDeclaresBothModifies() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/ownerDeclaresBothModifies.kt", this::doTest);
            }

            @TestMetadata("propertyAsCondition.kt")
            public void testPropertyAsCondition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/propertyAsCondition.kt", this::doTest);
            }

            @TestMetadata("propertyToNotNull.kt")
            public void testPropertyToNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/propertyToNotNull.kt", this::doTest);
            }

            @TestMetadata("safeAs.kt")
            public void testSafeAs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safeAs.kt", this::doTest);
            }

            @TestMetadata("severalSmartCastsOnReified.kt")
            public void testSeveralSmartCastsOnReified() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/severalSmartCastsOnReified.kt", this::doTest);
            }

            @TestMetadata("shortIfExprNotNull.kt")
            public void testShortIfExprNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/shortIfExprNotNull.kt", this::doTest);
            }

            @TestMetadata("smartCastAndArgumentApproximation.kt")
            public void testSmartCastAndArgumentApproximation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastAndArgumentApproximation.kt", this::doTest);
            }

            @TestMetadata("smartCastOnElvis.kt")
            public void testSmartCastOnElvis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnElvis.kt", this::doTest);
            }

            @TestMetadata("smartCastOnIf.kt")
            public void testSmartCastOnIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnIf.kt", this::doTest);
            }

            @TestMetadata("smartCastOnWhen.kt")
            public void testSmartCastOnWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnWhen.kt", this::doTest);
            }

            @TestMetadata("thisWithLabel.kt")
            public void testThisWithLabel() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/thisWithLabel.kt", this::doTest);
            }

            @TestMetadata("thisWithLabelAsReceiverPart.kt")
            public void testThisWithLabelAsReceiverPart() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/thisWithLabelAsReceiverPart.kt", this::doTest);
            }

            @TestMetadata("threeImplicitReceivers.kt")
            public void testThreeImplicitReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/threeImplicitReceivers.kt", this::doTest);
            }

            @TestMetadata("twoImplicitReceivers.kt")
            public void testTwoImplicitReceivers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/twoImplicitReceivers.kt", this::doTest);
            }

            @TestMetadata("typeDegradation.kt")
            public void testTypeDegradation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/typeDegradation.kt", this::doTest);
            }

            @TestMetadata("typeInComparison.kt")
            public void testTypeInComparison() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/typeInComparison.kt", this::doTest);
            }

            @TestMetadata("unstableToStable.kt")
            public void testUnstableToStable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/unstableToStable.kt", this::doTest);
            }

            @TestMetadata("unstableToStableTypes.kt")
            public void testUnstableToStableTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/unstableToStableTypes.kt", this::doTest);
            }

            @TestMetadata("varChangedInInitializer.kt")
            public void testVarChangedInInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varChangedInInitializer.kt", this::doTest);
            }

            @TestMetadata("varChangedInLocalInitializer.kt")
            public void testVarChangedInLocalInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varChangedInLocalInitializer.kt", this::doTest);
            }

            @TestMetadata("varInAccessor.kt")
            public void testVarInAccessor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varInAccessor.kt", this::doTest);
            }

            @TestMetadata("varInInitNoPrimary.kt")
            public void testVarInInitNoPrimary() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varInInitNoPrimary.kt", this::doTest);
            }

            @TestMetadata("varInInitializer.kt")
            public void testVarInInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varInInitializer.kt", this::doTest);
            }

            @TestMetadata("varInSecondaryConstructor.kt")
            public void testVarInSecondaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varInSecondaryConstructor.kt", this::doTest);
            }

            @TestMetadata("varInsideLocalFun.kt")
            public void testVarInsideLocalFun() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varInsideLocalFun.kt", this::doTest);
            }

            @TestMetadata("whenExprNonNull.kt")
            public void testWhenExprNonNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/whenExprNonNull.kt", this::doTest);
            }

            @TestMetadata("whenIfExprNonNull.kt")
            public void testWhenIfExprNonNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/whenIfExprNonNull.kt", this::doTest);
            }

            @TestMetadata("whenSubjectImpossible.kt")
            public void testWhenSubjectImpossible() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/whenSubjectImpossible.kt", this::doTest);
            }

            @TestMetadata("whenSubjectImpossibleJava.kt")
            public void testWhenSubjectImpossibleJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/whenSubjectImpossibleJava.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/castchecks")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Castchecks extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInCastchecks() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/castchecks"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("basicOff.kt")
                public void testBasicOff() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/basicOff.kt", this::doTest);
                }

                @TestMetadata("basicOn.kt")
                public void testBasicOn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/basicOn.kt", this::doTest);
                }

                @TestMetadata("impossible.kt")
                public void testImpossible() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/impossible.kt", this::doTest);
                }

                @TestMetadata("insideCall.kt")
                public void testInsideCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/insideCall.kt", this::doTest);
                }

                @TestMetadata("variables.kt")
                public void testVariables() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/variables.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/elvis")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Elvis extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInElvis() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/elvis"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("basicOff.kt")
                public void testBasicOff() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvis/basicOff.kt", this::doTest);
                }

                @TestMetadata("basicOn.kt")
                public void testBasicOn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvis/basicOn.kt", this::doTest);
                }

                @TestMetadata("impossible.kt")
                public void testImpossible() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/elvis/impossible.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/inference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inference extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInference() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/inference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("dependentOnPrevArg.kt")
                public void testDependentOnPrevArg() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/dependentOnPrevArg.kt", this::doTest);
                }

                @TestMetadata("intersectionTypes.kt")
                public void testIntersectionTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/intersectionTypes.kt", this::doTest);
                }

                @TestMetadata("kt1275.kt")
                public void testKt1275() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt1275.kt", this::doTest);
                }

                @TestMetadata("kt1355.kt")
                public void testKt1355() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt1355.kt", this::doTest);
                }

                @TestMetadata("kt2746.kt")
                public void testKt2746() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt2746.kt", this::doTest);
                }

                @TestMetadata("kt2851.kt")
                public void testKt2851() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt2851.kt", this::doTest);
                }

                @TestMetadata("kt4009.kt")
                public void testKt4009() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4009.kt", this::doTest);
                }

                @TestMetadata("kt4403.kt")
                public void testKt4403() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4403.kt", this::doTest);
                }

                @TestMetadata("kt4415.kt")
                public void testKt4415() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4415.kt", this::doTest);
                }

                @TestMetadata("kt6242.kt")
                public void testKt6242() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt6242.kt", this::doTest);
                }

                @TestMetadata("smartCastOnReceiver.kt")
                public void testSmartCastOnReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/inference/smartCastOnReceiver.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/intersectionScope")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class IntersectionScope extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInIntersectionScope() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/intersectionScope"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("conflictTypeParameters.kt")
                public void testConflictTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/conflictTypeParameters.kt", this::doTest);
                }

                @TestMetadata("conflictingReturnType.kt")
                public void testConflictingReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/conflictingReturnType.kt", this::doTest);
                }

                @TestMetadata("flexibleTypes.kt")
                public void testFlexibleTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/flexibleTypes.kt", this::doTest);
                }

                @TestMetadata("moreSpecificSetter.kt")
                public void testMoreSpecificSetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/moreSpecificSetter.kt", this::doTest);
                }

                @TestMetadata("moreSpecificVisibility.kt")
                public void testMoreSpecificVisibility() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/moreSpecificVisibility.kt", this::doTest);
                }

                @TestMetadata("mostSpecific.kt")
                public void testMostSpecific() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/mostSpecific.kt", this::doTest);
                }

                @TestMetadata("mostSpecificIrrelevant.kt")
                public void testMostSpecificIrrelevant() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/mostSpecificIrrelevant.kt", this::doTest);
                }

                @TestMetadata("properties.kt")
                public void testProperties() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/properties.kt", this::doTest);
                }

                @TestMetadata("propertiesConflict.kt")
                public void testPropertiesConflict() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/propertiesConflict.kt", this::doTest);
                }

                @TestMetadata("refineReturnType.kt")
                public void testRefineReturnType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/refineReturnType.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/simple.kt", this::doTest);
                }

                @TestMetadata("unstableSmartCast.kt")
                public void testUnstableSmartCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/unstableSmartCast.kt", this::doTest);
                }

                @TestMetadata("validTypeParameters.kt")
                public void testValidTypeParameters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/validTypeParameters.kt", this::doTest);
                }

                @TestMetadata("validTypeParametersNoSmartCast.kt")
                public void testValidTypeParametersNoSmartCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/validTypeParametersNoSmartCast.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/loops")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Loops extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInLoops() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/loops"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("assignElvisIfBreakInsideWhileTrue.kt")
                public void testAssignElvisIfBreakInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/assignElvisIfBreakInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("assignWhenInsideWhileTrue.kt")
                public void testAssignWhenInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/assignWhenInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("callBreakBetweenInsideDoWhile.kt")
                public void testCallBreakBetweenInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakBetweenInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("callBreakFirstInsideDoWhile.kt")
                public void testCallBreakFirstInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakFirstInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("callBreakInsideDoWhile.kt")
                public void testCallBreakInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("callBreakSecondInsideDoWhile.kt")
                public void testCallBreakSecondInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakSecondInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("callBreakThirdInsideDoWhile.kt")
                public void testCallBreakThirdInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakThirdInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("doWhile.kt")
                public void testDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhile.kt", this::doTest);
                }

                @TestMetadata("doWhileBreak.kt")
                public void testDoWhileBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileBreak.kt", this::doTest);
                }

                @TestMetadata("doWhileContinue.kt")
                public void testDoWhileContinue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileContinue.kt", this::doTest);
                }

                @TestMetadata("doWhileEarlyBreak.kt")
                public void testDoWhileEarlyBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileEarlyBreak.kt", this::doTest);
                }

                @TestMetadata("doWhileEarlyContinue.kt")
                public void testDoWhileEarlyContinue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileEarlyContinue.kt", this::doTest);
                }

                @TestMetadata("doWhileInCondition.kt")
                public void testDoWhileInCondition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileInCondition.kt", this::doTest);
                }

                @TestMetadata("doWhileInConditionWithBreak.kt")
                public void testDoWhileInConditionWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileInConditionWithBreak.kt", this::doTest);
                }

                @TestMetadata("doWhileLiteral.kt")
                public void testDoWhileLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileLiteral.kt", this::doTest);
                }

                @TestMetadata("doWhileNotNullBreak.kt")
                public void testDoWhileNotNullBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNotNullBreak.kt", this::doTest);
                }

                @TestMetadata("doWhileNull.kt")
                public void testDoWhileNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNull.kt", this::doTest);
                }

                @TestMetadata("doWhileNullWithBreak.kt")
                public void testDoWhileNullWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNullWithBreak.kt", this::doTest);
                }

                @TestMetadata("elvisBreakInsideDoWhile.kt")
                public void testElvisBreakInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisBreakInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("elvisIfBreakInsideWhileTrue.kt")
                public void testElvisIfBreakInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisIfBreakInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("elvisInsideDoWhile.kt")
                public void testElvisInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("elvisLeftBreakInsideWhileTrue.kt")
                public void testElvisLeftBreakInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisLeftBreakInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("ifBlockInsideDoWhile.kt")
                public void testIfBlockInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBlockInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("ifBreakAssignInsideDoWhile.kt")
                public void testIfBreakAssignInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakAssignInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("ifBreakAssignInsideWhileTrue.kt")
                public void testIfBreakAssignInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakAssignInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("ifBreakExprInsideWhileTrue.kt")
                public void testIfBreakExprInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakExprInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("ifElseBlockInsideDoWhile.kt")
                public void testIfElseBlockInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifElseBlockInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("ifInsideDoWhile.kt")
                public void testIfInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("leftElvisBreakInsideWhileTrue.kt")
                public void testLeftElvisBreakInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/leftElvisBreakInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("nestedDoWhile.kt")
                public void testNestedDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedDoWhile.kt", this::doTest);
                }

                @TestMetadata("nestedDoWhileWithLongContinue.kt")
                public void testNestedDoWhileWithLongContinue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedDoWhileWithLongContinue.kt", this::doTest);
                }

                @TestMetadata("nestedLoops.kt")
                public void testNestedLoops() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoops.kt", this::doTest);
                }

                @TestMetadata("nestedLoopsShort.kt")
                public void testNestedLoopsShort() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsShort.kt", this::doTest);
                }

                @TestMetadata("nestedLoopsWithBreak.kt")
                public void testNestedLoopsWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithBreak.kt", this::doTest);
                }

                @TestMetadata("nestedLoopsWithLongBreak.kt")
                public void testNestedLoopsWithLongBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithLongBreak.kt", this::doTest);
                }

                @TestMetadata("nestedLoopsWithLongContinue.kt")
                public void testNestedLoopsWithLongContinue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithLongContinue.kt", this::doTest);
                }

                @TestMetadata("plusAssignWhenInsideDoWhile.kt")
                public void testPlusAssignWhenInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/plusAssignWhenInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("safeCallBreakInsideDoWhile.kt")
                public void testSafeCallBreakInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/safeCallBreakInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("safeCallInsideDoWhile.kt")
                public void testSafeCallInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/safeCallInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("useInsideDoWhile.kt")
                public void testUseInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/useInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("whenInsideWhileTrue.kt")
                public void testWhenInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whenInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("whenReturnInsideWhileTrue.kt")
                public void testWhenReturnInsideWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whenReturnInsideWhileTrue.kt", this::doTest);
                }

                @TestMetadata("whileInCondition.kt")
                public void testWhileInCondition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileInCondition.kt", this::doTest);
                }

                @TestMetadata("whileInConditionWithBreak.kt")
                public void testWhileInConditionWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileInConditionWithBreak.kt", this::doTest);
                }

                @TestMetadata("whileNull.kt")
                public void testWhileNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileNull.kt", this::doTest);
                }

                @TestMetadata("whileNullWithBreak.kt")
                public void testWhileNullWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileNullWithBreak.kt", this::doTest);
                }

                @TestMetadata("whileSimple.kt")
                public void testWhileSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileSimple.kt", this::doTest);
                }

                @TestMetadata("whileTrivial.kt")
                public void testWhileTrivial() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrivial.kt", this::doTest);
                }

                @TestMetadata("whileTrue.kt")
                public void testWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrue.kt", this::doTest);
                }

                @TestMetadata("whileTrueBreakReturn.kt")
                public void testWhileTrueBreakReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueBreakReturn.kt", this::doTest);
                }

                @TestMetadata("whileTrueEarlyBreak.kt")
                public void testWhileTrueEarlyBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueEarlyBreak.kt", this::doTest);
                }

                @TestMetadata("whileTrueReturn.kt")
                public void testWhileTrueReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueReturn.kt", this::doTest);
                }

                @TestMetadata("WhileTrueWithBreakInIfCondition.kt")
                public void testWhileTrueWithBreakInIfCondition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/loops/WhileTrueWithBreakInIfCondition.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ObjectLiterals extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInObjectLiterals() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/objectLiterals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/assignment.kt", this::doTest);
                }

                @TestMetadata("base.kt")
                public void testBase() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/base.kt", this::doTest);
                }

                @TestMetadata("captured.kt")
                public void testCaptured() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/captured.kt", this::doTest);
                }

                @TestMetadata("exclexcl.kt")
                public void testExclexcl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexcl.kt", this::doTest);
                }

                @TestMetadata("exclexclArgument.kt")
                public void testExclexclArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexclArgument.kt", this::doTest);
                }

                @TestMetadata("exclexclTwoArgument.kt")
                public void testExclexclTwoArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexclTwoArgument.kt", this::doTest);
                }

                @TestMetadata("kt7110.kt")
                public void testKt7110() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/kt7110.kt", this::doTest);
                }

                @TestMetadata("receiver.kt")
                public void testReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/receiver.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PublicVals extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInPublicVals() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/publicVals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("customGetter.kt")
                public void testCustomGetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/customGetter.kt", this::doTest);
                }

                @TestMetadata("delegate.kt")
                public void testDelegate() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/delegate.kt", this::doTest);
                }

                @TestMetadata("kt4409.kt")
                public void testKt4409() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/kt4409.kt", this::doTest);
                }

                @TestMetadata("kt5502.kt")
                public void testKt5502() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/kt5502.kt", this::doTest);
                }

                @TestMetadata("open.kt")
                public void testOpen() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/open.kt", this::doTest);
                }

                @TestMetadata("otherModule.kt")
                public void testOtherModule() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModule.kt", this::doTest);
                }

                @TestMetadata("protected.kt")
                public void testProtected() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/protected.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/simple.kt", this::doTest);
                }

                @TestMetadata("var.kt")
                public void testVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/var.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Safecalls extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSafecalls() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/safecalls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("anotherVal.kt")
                public void testAnotherVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/anotherVal.kt", this::doTest);
                }

                @TestMetadata("argument.kt")
                public void testArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/argument.kt", this::doTest);
                }

                @TestMetadata("chainAndUse.kt")
                public void testChainAndUse() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainAndUse.kt", this::doTest);
                }

                @TestMetadata("chainInChain.kt")
                public void testChainInChain() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainInChain.kt", this::doTest);
                }

                @TestMetadata("chainMixedUnsafe.kt")
                public void testChainMixedUnsafe() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainMixedUnsafe.kt", this::doTest);
                }

                @TestMetadata("doubleCall.kt")
                public void testDoubleCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/doubleCall.kt", this::doTest);
                }

                @TestMetadata("extension.kt")
                public void testExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/extension.kt", this::doTest);
                }

                @TestMetadata("extensionCall.kt")
                public void testExtensionCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/extensionCall.kt", this::doTest);
                }

                @TestMetadata("falseArgument.kt")
                public void testFalseArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseArgument.kt", this::doTest);
                }

                @TestMetadata("falseChain.kt")
                public void testFalseChain() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseChain.kt", this::doTest);
                }

                @TestMetadata("falseExtension.kt")
                public void testFalseExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseExtension.kt", this::doTest);
                }

                @TestMetadata("falseSecondArgument.kt")
                public void testFalseSecondArgument() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseSecondArgument.kt", this::doTest);
                }

                @TestMetadata("innerReceiver.kt")
                public void testInnerReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/innerReceiver.kt", this::doTest);
                }

                @TestMetadata("insideCall.kt")
                public void testInsideCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/insideCall.kt", this::doTest);
                }

                @TestMetadata("insideIfExpr.kt")
                public void testInsideIfExpr() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/insideIfExpr.kt", this::doTest);
                }

                @TestMetadata("longChain.kt")
                public void testLongChain() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/longChain.kt", this::doTest);
                }

                @TestMetadata("nullableReceiver.kt")
                public void testNullableReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiver.kt", this::doTest);
                }

                @TestMetadata("nullableReceiverInLongChain.kt")
                public void testNullableReceiverInLongChain() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverInLongChain.kt", this::doTest);
                }

                @TestMetadata("nullableReceiverWithExclExcl.kt")
                public void testNullableReceiverWithExclExcl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverWithExclExcl.kt", this::doTest);
                }

                @TestMetadata("nullableReceiverWithFlexible.kt")
                public void testNullableReceiverWithFlexible() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverWithFlexible.kt", this::doTest);
                }

                @TestMetadata("property.kt")
                public void testProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/property.kt", this::doTest);
                }

                @TestMetadata("propertyChain.kt")
                public void testPropertyChain() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/propertyChain.kt", this::doTest);
                }

                @TestMetadata("receiver.kt")
                public void testReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiver.kt", this::doTest);
                }

                @TestMetadata("receiverAndChain.kt")
                public void testReceiverAndChain() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiverAndChain.kt", this::doTest);
                }

                @TestMetadata("receiverAndChainFalse.kt")
                public void testReceiverAndChainFalse() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiverAndChainFalse.kt", this::doTest);
                }

                @TestMetadata("safeAccessReceiverNotNull.kt")
                public void testSafeAccessReceiverNotNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/safeAccessReceiverNotNull.kt", this::doTest);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/simple.kt", this::doTest);
                }

                @TestMetadata("simpleNullableReceiver.kt")
                public void testSimpleNullableReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/simpleNullableReceiver.kt", this::doTest);
                }

                @TestMetadata("twoArgs.kt")
                public void testTwoArgs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/twoArgs.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/variables")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Variables extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("accessorAndFunction.kt")
                public void testAccessorAndFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/accessorAndFunction.kt", this::doTest);
                }

                public void testAllFilesPresentInVariables() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/variables"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/assignment.kt", this::doTest);
                }

                @TestMetadata("assignmentConversion.kt")
                public void testAssignmentConversion() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/assignmentConversion.kt", this::doTest);
                }

                @TestMetadata("doWhileWithMiddleBreak.kt")
                public void testDoWhileWithMiddleBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/doWhileWithMiddleBreak.kt", this::doTest);
                }

                @TestMetadata("ifElseBlockInsideDoWhile.kt")
                public void testIfElseBlockInsideDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifElseBlockInsideDoWhile.kt", this::doTest);
                }

                @TestMetadata("ifElseBlockInsideDoWhileWithBreak.kt")
                public void testIfElseBlockInsideDoWhileWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifElseBlockInsideDoWhileWithBreak.kt", this::doTest);
                }

                @TestMetadata("ifNullAssignment.kt")
                public void testIfNullAssignment() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifNullAssignment.kt", this::doTest);
                }

                @TestMetadata("ifVarIs.kt")
                public void testIfVarIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIs.kt", this::doTest);
                }

                @TestMetadata("ifVarIsAnd.kt")
                public void testIfVarIsAnd() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIsAnd.kt", this::doTest);
                }

                @TestMetadata("ifVarIsChanged.kt")
                public void testIfVarIsChanged() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIsChanged.kt", this::doTest);
                }

                @TestMetadata("inPropertySam.kt")
                public void testInPropertySam() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/inPropertySam.kt", this::doTest);
                }

                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/infix.kt", this::doTest);
                }

                @TestMetadata("initialization.kt")
                public void testInitialization() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/initialization.kt", this::doTest);
                }

                @TestMetadata("kt7599.kt")
                public void testKt7599() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/kt7599.kt", this::doTest);
                }

                @TestMetadata("lambdaBetweenArguments.kt")
                public void testLambdaBetweenArguments() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/lambdaBetweenArguments.kt", this::doTest);
                }

                @TestMetadata("property.kt")
                public void testProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/property.kt", this::doTest);
                }

                @TestMetadata("propertyNotNeeded.kt")
                public void testPropertyNotNeeded() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertyNotNeeded.kt", this::doTest);
                }

                @TestMetadata("propertySubtype.kt")
                public void testPropertySubtype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtype.kt", this::doTest);
                }

                @TestMetadata("propertySubtypeInMember.kt")
                public void testPropertySubtypeInMember() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtypeInMember.kt", this::doTest);
                }

                @TestMetadata("propertySubtypeInMemberCheck.kt")
                public void testPropertySubtypeInMemberCheck() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtypeInMemberCheck.kt", this::doTest);
                }

                @TestMetadata("varAsUse.kt")
                public void testVarAsUse() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/varAsUse.kt", this::doTest);
                }

                @TestMetadata("varChangedInLoop.kt")
                public void testVarChangedInLoop() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/varChangedInLoop.kt", this::doTest);
                }

                @TestMetadata("varNotChangedInLoop.kt")
                public void testVarNotChangedInLoop() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/varNotChangedInLoop.kt", this::doTest);
                }

                @TestMetadata("whileTrue.kt")
                public void testWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/whileTrue.kt", this::doTest);
                }

                @TestMetadata("whileWithBreak.kt")
                public void testWhileWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/variables/whileWithBreak.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Varnotnull extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInVarnotnull() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/varnotnull"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("assignNestedWhile.kt")
                public void testAssignNestedWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/assignNestedWhile.kt", this::doTest);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/assignment.kt", this::doTest);
                }

                @TestMetadata("boundInitializer.kt")
                public void testBoundInitializer() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/boundInitializer.kt", this::doTest);
                }

                @TestMetadata("boundInitializerWrong.kt")
                public void testBoundInitializerWrong() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/boundInitializerWrong.kt", this::doTest);
                }

                @TestMetadata("capturedInClosureModifiedBefore.kt")
                public void testCapturedInClosureModifiedBefore() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/capturedInClosureModifiedBefore.kt", this::doTest);
                }

                @TestMetadata("capturedInClosureOff.kt")
                public void testCapturedInClosureOff() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/capturedInClosureOff.kt", this::doTest);
                }

                @TestMetadata("doWhileWithBreak.kt")
                public void testDoWhileWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/doWhileWithBreak.kt", this::doTest);
                }

                @TestMetadata("doWhileWithMiddleBreak.kt")
                public void testDoWhileWithMiddleBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/doWhileWithMiddleBreak.kt", this::doTest);
                }

                @TestMetadata("forEach.kt")
                public void testForEach() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEach.kt", this::doTest);
                }

                @TestMetadata("forEachWithBreak.kt")
                public void testForEachWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEachWithBreak.kt", this::doTest);
                }

                @TestMetadata("forEachWithContinue.kt")
                public void testForEachWithContinue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEachWithContinue.kt", this::doTest);
                }

                @TestMetadata("ifVarNotNull.kt")
                public void testIfVarNotNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNotNull.kt", this::doTest);
                }

                @TestMetadata("ifVarNotNullAnd.kt")
                public void testIfVarNotNullAnd() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNotNullAnd.kt", this::doTest);
                }

                @TestMetadata("ifVarNullElse.kt")
                public void testIfVarNullElse() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNullElse.kt", this::doTest);
                }

                @TestMetadata("ifVarNullReturn.kt")
                public void testIfVarNullReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNullReturn.kt", this::doTest);
                }

                @TestMetadata("inference.kt")
                public void testInference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/inference.kt", this::doTest);
                }

                @TestMetadata("infiniteWhileWithBreak.kt")
                public void testInfiniteWhileWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/infiniteWhileWithBreak.kt", this::doTest);
                }

                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/infix.kt", this::doTest);
                }

                @TestMetadata("initInTryReturnInCatch.kt")
                public void testInitInTryReturnInCatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/initInTryReturnInCatch.kt", this::doTest);
                }

                @TestMetadata("initialization.kt")
                public void testInitialization() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/initialization.kt", this::doTest);
                }

                @TestMetadata("iterations.kt")
                public void testIterations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/iterations.kt", this::doTest);
                }

                @TestMetadata("nestedDoWhile.kt")
                public void testNestedDoWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedDoWhile.kt", this::doTest);
                }

                @TestMetadata("nestedLoops.kt")
                public void testNestedLoops() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedLoops.kt", this::doTest);
                }

                @TestMetadata("nestedWhile.kt")
                public void testNestedWhile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedWhile.kt", this::doTest);
                }

                @TestMetadata("plusplusMinusminus.kt")
                public void testPlusplusMinusminus() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/plusplusMinusminus.kt", this::doTest);
                }

                @TestMetadata("postfixNotnullClassIncrement.kt")
                public void testPostfixNotnullClassIncrement() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNotnullClassIncrement.kt", this::doTest);
                }

                @TestMetadata("postfixNullableClassIncrement.kt")
                public void testPostfixNullableClassIncrement() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNullableClassIncrement.kt", this::doTest);
                }

                @TestMetadata("postfixNullableIncrement.kt")
                public void testPostfixNullableIncrement() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNullableIncrement.kt", this::doTest);
                }

                @TestMetadata("prefixNotnullClassIncrement.kt")
                public void testPrefixNotnullClassIncrement() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNotnullClassIncrement.kt", this::doTest);
                }

                @TestMetadata("prefixNullableClassIncrement.kt")
                public void testPrefixNullableClassIncrement() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNullableClassIncrement.kt", this::doTest);
                }

                @TestMetadata("prefixNullableIncrement.kt")
                public void testPrefixNullableIncrement() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNullableIncrement.kt", this::doTest);
                }

                @TestMetadata("setNotNullInTry.kt")
                public void testSetNotNullInTry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNotNullInTry.kt", this::doTest);
                }

                @TestMetadata("setNullInTry.kt")
                public void testSetNullInTry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNullInTry.kt", this::doTest);
                }

                @TestMetadata("setNullInTryFinally.kt")
                public void testSetNullInTryFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNullInTryFinally.kt", this::doTest);
                }

                @TestMetadata("setNullInTryUnsound.kt")
                public void testSetNullInTryUnsound() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNullInTryUnsound.kt", this::doTest);
                }

                @TestMetadata("setSameInTry.kt")
                public void testSetSameInTry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setSameInTry.kt", this::doTest);
                }

                @TestMetadata("toFlexibleType.kt")
                public void testToFlexibleType() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/toFlexibleType.kt", this::doTest);
                }

                @TestMetadata("unnecessary.kt")
                public void testUnnecessary() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessary.kt", this::doTest);
                }

                @TestMetadata("unnecessaryWithBranch.kt")
                public void testUnnecessaryWithBranch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessaryWithBranch.kt", this::doTest);
                }

                @TestMetadata("unnecessaryWithMap.kt")
                public void testUnnecessaryWithMap() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessaryWithMap.kt", this::doTest);
                }

                @TestMetadata("varCapturedInClosure.kt")
                public void testVarCapturedInClosure() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInClosure.kt", this::doTest);
                }

                @TestMetadata("varCapturedInInlineClosure.kt")
                public void testVarCapturedInInlineClosure() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInInlineClosure.kt", this::doTest);
                }

                @TestMetadata("varCapturedInSafeClosure.kt")
                public void testVarCapturedInSafeClosure() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInSafeClosure.kt", this::doTest);
                }

                @TestMetadata("varChangedInLoop.kt")
                public void testVarChangedInLoop() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varChangedInLoop.kt", this::doTest);
                }

                @TestMetadata("varCheck.kt")
                public void testVarCheck() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCheck.kt", this::doTest);
                }

                @TestMetadata("varIntNull.kt")
                public void testVarIntNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varIntNull.kt", this::doTest);
                }

                @TestMetadata("varNotChangedInLoop.kt")
                public void testVarNotChangedInLoop() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varNotChangedInLoop.kt", this::doTest);
                }

                @TestMetadata("varNull.kt")
                public void testVarNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varNull.kt", this::doTest);
                }

                @TestMetadata("whileTrue.kt")
                public void testWhileTrue() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrue.kt", this::doTest);
                }

                @TestMetadata("whileTrueWithBracketSet.kt")
                public void testWhileTrueWithBracketSet() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrueWithBracketSet.kt", this::doTest);
                }

                @TestMetadata("whileTrueWithBrackets.kt")
                public void testWhileTrueWithBrackets() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrueWithBrackets.kt", this::doTest);
                }

                @TestMetadata("whileWithBreak.kt")
                public void testWhileWithBreak() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileWithBreak.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SourceCompatibility extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInSourceCompatibility() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/sourceCompatibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("inlineFunctionAlways.kt")
            public void testInlineFunctionAlways() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/inlineFunctionAlways.kt", this::doTest);
            }

            @TestMetadata("noCallableReferencesWithEmptyLHS.kt")
            public void testNoCallableReferencesWithEmptyLHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noCallableReferencesWithEmptyLHS.kt", this::doTest);
            }

            @TestMetadata("noDataClassInheritance.kt")
            public void testNoDataClassInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noDataClassInheritance.kt", this::doTest);
            }

            @TestMetadata("noInlineProperty.kt")
            public void testNoInlineProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noInlineProperty.kt", this::doTest);
            }

            @TestMetadata("noLocalDelegatedProperty.kt")
            public void testNoLocalDelegatedProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noLocalDelegatedProperty.kt", this::doTest);
            }

            @TestMetadata("noLocalDelegatedPropertyInScript.kt")
            public void testNoLocalDelegatedPropertyInScript() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noLocalDelegatedPropertyInScript.kt", this::doTest);
            }

            @TestMetadata("noMultiplatformProjects.kt")
            public void testNoMultiplatformProjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noMultiplatformProjects.kt", this::doTest);
            }

            @TestMetadata("noTopLevelSealedInheritance.kt")
            public void testNoTopLevelSealedInheritance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noTopLevelSealedInheritance.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ApiVersion extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInApiVersion() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotations.kt")
                public void testAnnotations() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/annotations.kt", this::doTest);
                }

                @TestMetadata("classesAndConstructors.kt")
                public void testClassesAndConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/classesAndConstructors.kt", this::doTest);
                }

                @TestMetadata("overriddenMembers.kt")
                public void testOverriddenMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/overriddenMembers.kt", this::doTest);
                }

                @TestMetadata("propertyAccessors.kt")
                public void testPropertyAccessors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/propertyAccessors.kt", this::doTest);
                }

                @TestMetadata("simpleMembers.kt")
                public void testSimpleMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/simpleMembers.kt", this::doTest);
                }

                @TestMetadata("sinceOldVersionIsOK.kt")
                public void testSinceOldVersionIsOK() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/sinceOldVersionIsOK.kt", this::doTest);
                }

                @TestMetadata("typealiasesAsCompanionObjects.kt")
                public void testTypealiasesAsCompanionObjects() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsCompanionObjects.kt", this::doTest);
                }

                @TestMetadata("typealiasesAsConstructors.kt")
                public void testTypealiasesAsConstructors() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsConstructors.kt", this::doTest);
                }

                @TestMetadata("typealiasesAsObjects.kt")
                public void testTypealiasesAsObjects() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsObjects.kt", this::doTest);
                }

                @TestMetadata("typealiasesAsTypes.kt")
                public void testTypealiasesAsTypes() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsTypes.kt", this::doTest);
                }

                @TestMetadata("typealiasesOnImport.kt")
                public void testTypealiasesOnImport() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesOnImport.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility/noBoundCallableReferences")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NoBoundCallableReferences extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInNoBoundCallableReferences() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/sourceCompatibility/noBoundCallableReferences"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("boundCallableReference.kt")
                public void testBoundCallableReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noBoundCallableReferences/boundCallableReference.kt", this::doTest);
                }

                @TestMetadata("boundClassLiteral.kt")
                public void testBoundClassLiteral() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noBoundCallableReferences/boundClassLiteral.kt", this::doTest);
                }

                @TestMetadata("qualifiedJavaClassLiteralInKClassExtension.kt")
                public void testQualifiedJavaClassLiteralInKClassExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noBoundCallableReferences/qualifiedJavaClassLiteralInKClassExtension.kt", this::doTest);
                }

                @TestMetadata("qualifiedJavaClassReferenceInKClassExtension.kt")
                public void testQualifiedJavaClassReferenceInKClassExtension() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noBoundCallableReferences/qualifiedJavaClassReferenceInKClassExtension.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/substitutions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Substitutions extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInSubstitutions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/substitutions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt1558-short.kt")
            public void testKt1558_short() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/substitutions/kt1558-short.kt", this::doTest);
            }

            @TestMetadata("kt4887.kt")
            public void testKt4887() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/substitutions/kt4887.kt", this::doTest);
            }

            @TestMetadata("starProjections.kt")
            public void testStarProjections() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/substitutions/starProjections.kt", this::doTest);
            }

            @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt")
            public void testUpperBoundsSubstitutionForOverloadResolutionWithAmbiguity() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt", this::doTest);
            }

            @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt")
            public void testUpperBoundsSubstitutionForOverloadResolutionWithErrorTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/subtyping")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Subtyping extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInSubtyping() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/subtyping"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("extFunctionTypeAsSuperType.kt")
            public void testExtFunctionTypeAsSuperType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/extFunctionTypeAsSuperType.kt", this::doTest);
            }

            @TestMetadata("findClosestCorrespondingSupertype.kt")
            public void testFindClosestCorrespondingSupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/findClosestCorrespondingSupertype.kt", this::doTest);
            }

            @TestMetadata("functionTypeAsSuperType.kt")
            public void testFunctionTypeAsSuperType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/functionTypeAsSuperType.kt", this::doTest);
            }

            @TestMetadata("invariantArgumentForTypeParameterWithMultipleBounds.kt")
            public void testInvariantArgumentForTypeParameterWithMultipleBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/invariantArgumentForTypeParameterWithMultipleBounds.kt", this::doTest);
            }

            @TestMetadata("javaAndKotlinSuperType.kt")
            public void testJavaAndKotlinSuperType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/javaAndKotlinSuperType.kt", this::doTest);
            }

            @TestMetadata("kt2069.kt")
            public void testKt2069() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/kt2069.kt", this::doTest);
            }

            @TestMetadata("kt2744.kt")
            public void testKt2744() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/kt2744.kt", this::doTest);
            }

            @TestMetadata("kt304.kt")
            public void testKt304() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/kt304.kt", this::doTest);
            }

            @TestMetadata("kt3159.kt")
            public void testKt3159() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/kt3159.kt", this::doTest);
            }

            @TestMetadata("kt-1457.kt")
            public void testKt_1457() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/kt-1457.kt", this::doTest);
            }

            @TestMetadata("localAnonymousObjects.kt")
            public void testLocalAnonymousObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/localAnonymousObjects.kt", this::doTest);
            }

            @TestMetadata("localClasses.kt")
            public void testLocalClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/localClasses.kt", this::doTest);
            }

            @TestMetadata("memberAnonymousObjects.kt")
            public void testMemberAnonymousObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/memberAnonymousObjects.kt", this::doTest);
            }

            @TestMetadata("nestedIntoLocalClasses.kt")
            public void testNestedIntoLocalClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/nestedIntoLocalClasses.kt", this::doTest);
            }

            @TestMetadata("nestedLocalClasses.kt")
            public void testNestedLocalClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/nestedLocalClasses.kt", this::doTest);
            }

            @TestMetadata("topLevelAnonymousObjects.kt")
            public void testTopLevelAnonymousObjects() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/topLevelAnonymousObjects.kt", this::doTest);
            }

            @TestMetadata("unresolvedSupertype.kt")
            public void testUnresolvedSupertype() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/subtyping/unresolvedSupertype.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/suppress")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Suppress extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInSuppress() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AllWarnings extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInAllWarnings() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/allWarnings"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("suppressWarningsOnAnonymousObjectInVariable.kt")
                public void testSuppressWarningsOnAnonymousObjectInVariable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnAnonymousObjectInVariable.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnClass.kt")
                public void testSuppressWarningsOnClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClass.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnClassObject.kt")
                public void testSuppressWarningsOnClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClassObject.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnExpression.kt")
                public void testSuppressWarningsOnExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnExpression.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnFile.kt")
                public void testSuppressWarningsOnFile() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnFile.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnFunction.kt")
                public void testSuppressWarningsOnFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnFunction.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnObject.kt")
                public void testSuppressWarningsOnObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnObject.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnParameter.kt")
                public void testSuppressWarningsOnParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnParameter.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnProperty.kt")
                public void testSuppressWarningsOnProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnProperty.kt", this::doTest);
                }

                @TestMetadata("suppressWarningsOnPropertyAccessor.kt")
                public void testSuppressWarningsOnPropertyAccessor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnPropertyAccessor.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ManyWarnings extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInManyWarnings() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/manyWarnings"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("mixed.kt")
                public void testMixed() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/mixed.kt", this::doTest);
                }

                @TestMetadata("onClass.kt")
                public void testOnClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClass.kt", this::doTest);
                }

                @TestMetadata("onClassObject.kt")
                public void testOnClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClassObject.kt", this::doTest);
                }

                @TestMetadata("onExpression.kt")
                public void testOnExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onExpression.kt", this::doTest);
                }

                @TestMetadata("onFunction.kt")
                public void testOnFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onFunction.kt", this::doTest);
                }

                @TestMetadata("onObject.kt")
                public void testOnObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onObject.kt", this::doTest);
                }

                @TestMetadata("onParameter.kt")
                public void testOnParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onParameter.kt", this::doTest);
                }

                @TestMetadata("onProperty.kt")
                public void testOnProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onProperty.kt", this::doTest);
                }

                @TestMetadata("onPropertyAccessor.kt")
                public void testOnPropertyAccessor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onPropertyAccessor.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class OneWarning extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInOneWarning() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/oneWarning"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("onBlockStatement.kt")
                public void testOnBlockStatement() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onBlockStatement.kt", this::doTest);
                }

                @TestMetadata("onBlockStatementSameLine.kt")
                public void testOnBlockStatementSameLine() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onBlockStatementSameLine.kt", this::doTest);
                }

                @TestMetadata("onClass.kt")
                public void testOnClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onClass.kt", this::doTest);
                }

                @TestMetadata("onClassObject.kt")
                public void testOnClassObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onClassObject.kt", this::doTest);
                }

                @TestMetadata("onExpression.kt")
                public void testOnExpression() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onExpression.kt", this::doTest);
                }

                @TestMetadata("onFunction.kt")
                public void testOnFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onFunction.kt", this::doTest);
                }

                @TestMetadata("onLocalVariable.kt")
                public void testOnLocalVariable() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onLocalVariable.kt", this::doTest);
                }

                @TestMetadata("onObject.kt")
                public void testOnObject() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onObject.kt", this::doTest);
                }

                @TestMetadata("onParameter.kt")
                public void testOnParameter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onParameter.kt", this::doTest);
                }

                @TestMetadata("onProperty.kt")
                public void testOnProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onProperty.kt", this::doTest);
                }

                @TestMetadata("onPropertyAccessor.kt")
                public void testOnPropertyAccessor() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onPropertyAccessor.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SyntheticExtensions extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInSyntheticExtensions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/syntheticExtensions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class JavaProperties extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("AbbreviationName.kt")
                public void testAbbreviationName() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/AbbreviationName.kt", this::doTest);
                }

                public void testAllFilesPresentInJavaProperties() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("Bases.kt")
                public void testBases() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Bases.kt", this::doTest);
                }

                @TestMetadata("CompiledClass.kt")
                public void testCompiledClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/CompiledClass.kt", this::doTest);
                }

                @TestMetadata("Deprecated.kt")
                public void testDeprecated() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Deprecated.kt", this::doTest);
                }

                @TestMetadata("FalseGetters.kt")
                public void testFalseGetters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FalseGetters.kt", this::doTest);
                }

                @TestMetadata("FalseSetters.kt")
                public void testFalseSetters() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FalseSetters.kt", this::doTest);
                }

                @TestMetadata("FromTwoBases.kt")
                public void testFromTwoBases() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FromTwoBases.kt", this::doTest);
                }

                @TestMetadata("GenericClass.kt")
                public void testGenericClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GenericClass.kt", this::doTest);
                }

                @TestMetadata("GetA.kt")
                public void testGetA() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GetA.kt", this::doTest);
                }

                @TestMetadata("Getter.kt")
                public void testGetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Getter.kt", this::doTest);
                }

                @TestMetadata("GetterAndSetter.kt")
                public void testGetterAndSetter() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GetterAndSetter.kt", this::doTest);
                }

                @TestMetadata("ImplicitReceiver.kt")
                public void testImplicitReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/ImplicitReceiver.kt", this::doTest);
                }

                @TestMetadata("IsNaming.kt")
                public void testIsNaming() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/IsNaming.kt", this::doTest);
                }

                @TestMetadata("JavaOverridesKotlin.kt")
                public void testJavaOverridesKotlin() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/JavaOverridesKotlin.kt", this::doTest);
                }

                @TestMetadata("KotlinOverridesJava.kt")
                public void testKotlinOverridesJava() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava.kt", this::doTest);
                }

                @TestMetadata("KotlinOverridesJava2.kt")
                public void testKotlinOverridesJava2() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava2.kt", this::doTest);
                }

                @TestMetadata("KotlinOverridesJava3.kt")
                public void testKotlinOverridesJava3() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava3.kt", this::doTest);
                }

                @TestMetadata("KotlinOverridesJava4.kt")
                public void testKotlinOverridesJava4() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava4.kt", this::doTest);
                }

                @TestMetadata("KotlinOverridesJava5.kt")
                public void testKotlinOverridesJava5() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava5.kt", this::doTest);
                }

                @TestMetadata("OnlyAscii.kt")
                public void testOnlyAscii() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OnlyAscii.kt", this::doTest);
                }

                @TestMetadata("OnlyPublic.kt")
                public void testOnlyPublic() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OnlyPublic.kt", this::doTest);
                }

                @TestMetadata("OverrideGetterOnly.kt")
                public void testOverrideGetterOnly() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OverrideGetterOnly.kt", this::doTest);
                }

                @TestMetadata("SetterHasHigherAccess.kt")
                public void testSetterHasHigherAccess() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SetterHasHigherAccess.kt", this::doTest);
                }

                @TestMetadata("SetterOnly.kt")
                public void testSetterOnly() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SetterOnly.kt", this::doTest);
                }

                @TestMetadata("SmartCast.kt")
                public void testSmartCast() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SmartCast.kt", this::doTest);
                }

                @TestMetadata("SmartCastImplicitReceiver.kt")
                public void testSmartCastImplicitReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SmartCastImplicitReceiver.kt", this::doTest);
                }

                @TestMetadata("SyntheticJavaPropertyReference.kt")
                public void testSyntheticJavaPropertyReference() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SyntheticJavaPropertyReference.kt", this::doTest);
                }

                @TestMetadata("TypeAnnotation.kt")
                public void testTypeAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/TypeAnnotation.kt", this::doTest);
                }

                @TestMetadata("TypeParameterReceiver.kt")
                public void testTypeParameterReceiver() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/TypeParameterReceiver.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SamAdapters extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInSamAdapters() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("Deprecated.kt")
                public void testDeprecated() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Deprecated.kt", this::doTest);
                }

                @TestMetadata("GenericClass.kt")
                public void testGenericClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericClass.kt", this::doTest);
                }

                @TestMetadata("GenericMethod.kt")
                public void testGenericMethod() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericMethod.kt", this::doTest);
                }

                @TestMetadata("GenericMethodInGenericClass.kt")
                public void testGenericMethodInGenericClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericMethodInGenericClass.kt", this::doTest);
                }

                @TestMetadata("InnerClassInGeneric.kt")
                public void testInnerClassInGeneric() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/InnerClassInGeneric.kt", this::doTest);
                }

                @TestMetadata("NoNamedArgsAllowed.kt")
                public void testNoNamedArgsAllowed() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/NoNamedArgsAllowed.kt", this::doTest);
                }

                @TestMetadata("overloadResolution.kt")
                public void testOverloadResolution() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/overloadResolution.kt", this::doTest);
                }

                @TestMetadata("overloadResolutionStatic.kt")
                public void testOverloadResolutionStatic() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/overloadResolutionStatic.kt", this::doTest);
                }

                @TestMetadata("overloadResolutionStaticWithoutRefinedSams.kt")
                public void testOverloadResolutionStaticWithoutRefinedSams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/overloadResolutionStaticWithoutRefinedSams.kt", this::doTest);
                }

                @TestMetadata("overloadResolutionWithoutRefinedSams.kt")
                public void testOverloadResolutionWithoutRefinedSams() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/overloadResolutionWithoutRefinedSams.kt", this::doTest);
                }

                @TestMetadata("PackageLocal.kt")
                public void testPackageLocal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/PackageLocal.kt", this::doTest);
                }

                @TestMetadata("ParameterTypeAnnotation.kt")
                public void testParameterTypeAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/ParameterTypeAnnotation.kt", this::doTest);
                }

                @TestMetadata("PassNull.kt")
                public void testPassNull() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/PassNull.kt", this::doTest);
                }

                @TestMetadata("Private.kt")
                public void testPrivate() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Private.kt", this::doTest);
                }

                @TestMetadata("Protected.kt")
                public void testProtected() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Protected.kt", this::doTest);
                }

                @TestMetadata("ReturnTypeAnnotation.kt")
                public void testReturnTypeAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/ReturnTypeAnnotation.kt", this::doTest);
                }

                @TestMetadata("Simple.kt")
                public void testSimple() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Simple.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/targetedBuiltIns")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TargetedBuiltIns extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInTargetedBuiltIns() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/targetedBuiltIns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("concurrentMapRemove.kt")
            public void testConcurrentMapRemove() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/concurrentMapRemove.kt", this::doTest);
            }

            @TestMetadata("forEachRemainingNullability.kt")
            public void testForEachRemainingNullability() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/forEachRemainingNullability.kt", this::doTest);
            }

            @TestMetadata("getOrDefault.kt")
            public void testGetOrDefault() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/getOrDefault.kt", this::doTest);
            }

            @TestMetadata("mutableMapRemove.kt")
            public void testMutableMapRemove() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/mutableMapRemove.kt", this::doTest);
            }

            @TestMetadata("removeIf.kt")
            public void testRemoveIf() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/removeIf.kt", this::doTest);
            }

            @TestMetadata("stream.kt")
            public void testStream() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/stream.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class BackwardCompatibility extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInBackwardCompatibility() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("basic.kt")
                public void testBasic() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/basic.kt", this::doTest);
                }

                @TestMetadata("delegation.kt")
                public void testDelegation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/delegation.kt", this::doTest);
                }

                @TestMetadata("derivedInterfaces.kt")
                public void testDerivedInterfaces() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/derivedInterfaces.kt", this::doTest);
                }

                @TestMetadata("derivedInterfacesWithKotlinFun.kt")
                public void testDerivedInterfacesWithKotlinFun() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/derivedInterfacesWithKotlinFun.kt", this::doTest);
                }

                @TestMetadata("fillInStackTrace.kt")
                public void testFillInStackTrace() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/fillInStackTrace.kt", this::doTest);
                }

                @TestMetadata("finalize.kt")
                public void testFinalize() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/finalize.kt", this::doTest);
                }

                @TestMetadata("hashMapGetOrDefault.kt")
                public void testHashMapGetOrDefault() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/hashMapGetOrDefault.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ThisAndSuper extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInThisAndSuper() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/thisAndSuper"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ambigousLabelOnThis.kt")
            public void testAmbigousLabelOnThis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/ambigousLabelOnThis.kt", this::doTest);
            }

            @TestMetadata("genericQualifiedSuperOverridden.kt")
            public void testGenericQualifiedSuperOverridden() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/genericQualifiedSuperOverridden.kt", this::doTest);
            }

            @TestMetadata("notAccessibleSuperInTrait.kt")
            public void testNotAccessibleSuperInTrait() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/notAccessibleSuperInTrait.kt", this::doTest);
            }

            @TestMetadata("qualifiedSuperOverridden.kt")
            public void testQualifiedSuperOverridden() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/qualifiedSuperOverridden.kt", this::doTest);
            }

            @TestMetadata("QualifiedThis.kt")
            public void testQualifiedThis() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/QualifiedThis.kt", this::doTest);
            }

            @TestMetadata("Super.kt")
            public void testSuper() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/Super.kt", this::doTest);
            }

            @TestMetadata("superInExtensionFunction.kt")
            public void testSuperInExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("superInExtensionFunctionCall.kt")
            public void testSuperInExtensionFunctionCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunctionCall.kt", this::doTest);
            }

            @TestMetadata("superInToplevelFunction.kt")
            public void testSuperInToplevelFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/superInToplevelFunction.kt", this::doTest);
            }

            @TestMetadata("superIsNotAnExpression.kt")
            public void testSuperIsNotAnExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/superIsNotAnExpression.kt", this::doTest);
            }

            @TestMetadata("thisInFunctionLiterals.kt")
            public void testThisInFunctionLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInFunctionLiterals.kt", this::doTest);
            }

            @TestMetadata("thisInInnerClasses.kt")
            public void testThisInInnerClasses() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInInnerClasses.kt", this::doTest);
            }

            @TestMetadata("thisInPropertyInitializer.kt")
            public void testThisInPropertyInitializer() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInPropertyInitializer.kt", this::doTest);
            }

            @TestMetadata("thisInToplevelFunction.kt")
            public void testThisInToplevelFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInToplevelFunction.kt", this::doTest);
            }

            @TestMetadata("traitSuperCall.kt")
            public void testTraitSuperCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/traitSuperCall.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class UnqualifiedSuper extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInUnqualifiedSuper() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("ambiguousSuperWithGenerics.kt")
                public void testAmbiguousSuperWithGenerics() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/ambiguousSuperWithGenerics.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuper.kt")
                public void testUnqualifiedSuper() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuper.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuperWithAbstractMembers.kt")
                public void testUnqualifiedSuperWithAbstractMembers() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithAbstractMembers.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuperWithCallableProperty.kt")
                public void testUnqualifiedSuperWithCallableProperty() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithCallableProperty.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
                public void testUnqualifiedSuperWithDeeperHierarchies() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithDeeperHierarchies.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuperWithGenerics.kt")
                public void testUnqualifiedSuperWithGenerics() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithGenerics.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuperWithInnerClass.kt")
                public void testUnqualifiedSuperWithInnerClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithInnerClass.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuperWithInterfaces.kt")
                public void testUnqualifiedSuperWithInterfaces() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithInterfaces.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuperWithLocalClass.kt")
                public void testUnqualifiedSuperWithLocalClass() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithLocalClass.kt", this::doTest);
                }

                @TestMetadata("unqualifiedSuperWithUnresolvedBase.kt")
                public void testUnqualifiedSuperWithUnresolvedBase() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithUnresolvedBase.kt", this::doTest);
                }

                @TestMetadata("withMethodOfAnyOverridenInInterface.kt")
                public void testWithMethodOfAnyOverridenInInterface() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodOfAnyOverridenInInterface.kt", this::doTest);
                }

                @TestMetadata("withMethodOverriddenInAnotherSupertype.kt")
                public void testWithMethodOverriddenInAnotherSupertype() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodOverriddenInAnotherSupertype.kt", this::doTest);
                }

                @TestMetadata("withMethodsOfAny.kt")
                public void testWithMethodsOfAny() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodsOfAny.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/traitWithRequired")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TraitWithRequired extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInTraitWithRequired() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/traitWithRequired"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("traitRequiresAny.kt")
            public void testTraitRequiresAny() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/traitWithRequired/traitRequiresAny.kt", this::doTest);
            }

            @TestMetadata("traitSupertypeList.kt")
            public void testTraitSupertypeList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/traitWithRequired/traitSupertypeList.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/typeParameters")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TypeParameters extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInTypeParameters() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/typeParameters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("cannotHaveManyClassUpperBounds.kt")
            public void testCannotHaveManyClassUpperBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/cannotHaveManyClassUpperBounds.kt", this::doTest);
            }

            @TestMetadata("deprecatedSyntax.kt")
            public void testDeprecatedSyntax() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/deprecatedSyntax.kt", this::doTest);
            }

            @TestMetadata("extFunctionTypeAsUpperBound.kt")
            public void testExtFunctionTypeAsUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/extFunctionTypeAsUpperBound.kt", this::doTest);
            }

            @TestMetadata("functionTypeAsUpperBound.kt")
            public void testFunctionTypeAsUpperBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/functionTypeAsUpperBound.kt", this::doTest);
            }

            @TestMetadata("misplacedConstraints.kt")
            public void testMisplacedConstraints() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/misplacedConstraints.kt", this::doTest);
            }

            @TestMetadata("propertyTypeParameters.kt")
            public void testPropertyTypeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/propertyTypeParameters.kt", this::doTest);
            }

            @TestMetadata("propertyTypeParametersWithUpperBounds.kt")
            public void testPropertyTypeParametersWithUpperBounds() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/propertyTypeParametersWithUpperBounds.kt", this::doTest);
            }

            @TestMetadata("repeatedBound.kt")
            public void testRepeatedBound() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/repeatedBound.kt", this::doTest);
            }

            @TestMetadata("upperBoundCannotBeArray.kt")
            public void testUpperBoundCannotBeArray() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typeParameters/upperBoundCannotBeArray.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/typealias")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Typealias extends AbstractDiagnosticsUsingJavacTest {
            @TestMetadata("aliasesOnly.kt")
            public void testAliasesOnly() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/aliasesOnly.kt", this::doTest);
            }

            public void testAllFilesPresentInTypealias() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/typealias"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("annotationsOnTypeAliases.kt")
            public void testAnnotationsOnTypeAliases() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/annotationsOnTypeAliases.kt", this::doTest);
            }

            @TestMetadata("boundViolationInTypeAliasConstructor.kt")
            public void testBoundViolationInTypeAliasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/boundViolationInTypeAliasConstructor.kt", this::doTest);
            }

            @TestMetadata("boundsViolationInDeepTypeAliasExpansion.kt")
            public void testBoundsViolationInDeepTypeAliasExpansion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/boundsViolationInDeepTypeAliasExpansion.kt", this::doTest);
            }

            @TestMetadata("boundsViolationInTypeAliasExpansion.kt")
            public void testBoundsViolationInTypeAliasExpansion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/boundsViolationInTypeAliasExpansion.kt", this::doTest);
            }

            @TestMetadata("boundsViolationInTypeAliasRHS.kt")
            public void testBoundsViolationInTypeAliasRHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/boundsViolationInTypeAliasRHS.kt", this::doTest);
            }

            @TestMetadata("capturingTypeParametersFromOuterClass.kt")
            public void testCapturingTypeParametersFromOuterClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/capturingTypeParametersFromOuterClass.kt", this::doTest);
            }

            @TestMetadata("classReference.kt")
            public void testClassReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/classReference.kt", this::doTest);
            }

            @TestMetadata("conflictingProjections.kt")
            public void testConflictingProjections() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/conflictingProjections.kt", this::doTest);
            }

            @TestMetadata("constructorCallThroughPrivateAlias.kt")
            public void testConstructorCallThroughPrivateAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/constructorCallThroughPrivateAlias.kt", this::doTest);
            }

            @TestMetadata("cyclicInheritanceViaTypeAlias.kt")
            public void testCyclicInheritanceViaTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/cyclicInheritanceViaTypeAlias.kt", this::doTest);
            }

            @TestMetadata("enumEntryQualifier.kt")
            public void testEnumEntryQualifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/enumEntryQualifier.kt", this::doTest);
            }

            @TestMetadata("exposedExpandedType.kt")
            public void testExposedExpandedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/exposedExpandedType.kt", this::doTest);
            }

            @TestMetadata("functionTypeInTypeAlias.kt")
            public void testFunctionTypeInTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/functionTypeInTypeAlias.kt", this::doTest);
            }

            @TestMetadata("genericTypeAliasConstructor.kt")
            public void testGenericTypeAliasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/genericTypeAliasConstructor.kt", this::doTest);
            }

            @TestMetadata("genericTypeAliasObject.kt")
            public void testGenericTypeAliasObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/genericTypeAliasObject.kt", this::doTest);
            }

            @TestMetadata("illegalTypeInTypeAliasExpansion.kt")
            public void testIllegalTypeInTypeAliasExpansion() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/illegalTypeInTypeAliasExpansion.kt", this::doTest);
            }

            @TestMetadata("import.kt")
            public void testImport() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/import.kt", this::doTest);
            }

            @TestMetadata("importFromTypeAliasObject.kt")
            public void testImportFromTypeAliasObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/importFromTypeAliasObject.kt", this::doTest);
            }

            @TestMetadata("inGenerics.kt")
            public void testInGenerics() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/inGenerics.kt", this::doTest);
            }

            @TestMetadata("inSupertypesList.kt")
            public void testInSupertypesList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/inSupertypesList.kt", this::doTest);
            }

            @TestMetadata("inheritedNestedTypeAlias.kt")
            public void testInheritedNestedTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/inheritedNestedTypeAlias.kt", this::doTest);
            }

            @TestMetadata("inhreritedTypeAliasQualifiedByDerivedClass.kt")
            public void testInhreritedTypeAliasQualifiedByDerivedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/inhreritedTypeAliasQualifiedByDerivedClass.kt", this::doTest);
            }

            @TestMetadata("innerClassTypeAliasConstructor.kt")
            public void testInnerClassTypeAliasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/innerClassTypeAliasConstructor.kt", this::doTest);
            }

            @TestMetadata("innerClassTypeAliasConstructorInSupertypes.kt")
            public void testInnerClassTypeAliasConstructorInSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/innerClassTypeAliasConstructorInSupertypes.kt", this::doTest);
            }

            @TestMetadata("innerTypeAliasAsType.kt")
            public void testInnerTypeAliasAsType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/innerTypeAliasAsType.kt", this::doTest);
            }

            @TestMetadata("innerTypeAliasAsType2.kt")
            public void testInnerTypeAliasAsType2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/innerTypeAliasAsType2.kt", this::doTest);
            }

            @TestMetadata("innerTypeAliasConstructor.kt")
            public void testInnerTypeAliasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/innerTypeAliasConstructor.kt", this::doTest);
            }

            @TestMetadata("isAsWithTypeAlias.kt")
            public void testIsAsWithTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/isAsWithTypeAlias.kt", this::doTest);
            }

            @TestMetadata("javaStaticMembersViaTypeAlias.kt")
            public void testJavaStaticMembersViaTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/javaStaticMembersViaTypeAlias.kt", this::doTest);
            }

            @TestMetadata("kt14498.kt")
            public void testKt14498() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/kt14498.kt", this::doTest);
            }

            @TestMetadata("kt14498a.kt")
            public void testKt14498a() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/kt14498a.kt", this::doTest);
            }

            @TestMetadata("kt14518.kt")
            public void testKt14518() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/kt14518.kt", this::doTest);
            }

            @TestMetadata("kt14641.kt")
            public void testKt14641() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/kt14641.kt", this::doTest);
            }

            @TestMetadata("kt15734.kt")
            public void testKt15734() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/kt15734.kt", this::doTest);
            }

            @TestMetadata("kt19601.kt")
            public void testKt19601() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/kt19601.kt", this::doTest);
            }

            @TestMetadata("localTypeAlias.kt")
            public void testLocalTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/localTypeAlias.kt", this::doTest);
            }

            @TestMetadata("localTypeAliasConstructor.kt")
            public void testLocalTypeAliasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/localTypeAliasConstructor.kt", this::doTest);
            }

            @TestMetadata("localTypeAliasModifiers.kt")
            public void testLocalTypeAliasModifiers() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/localTypeAliasModifiers.kt", this::doTest);
            }

            @TestMetadata("localTypeAliasRecursive.kt")
            public void testLocalTypeAliasRecursive() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/localTypeAliasRecursive.kt", this::doTest);
            }

            @TestMetadata("methodReference.kt")
            public void testMethodReference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/methodReference.kt", this::doTest);
            }

            @TestMetadata("nested.kt")
            public void testNested() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/nested.kt", this::doTest);
            }

            @TestMetadata("nestedCapturingTypeParameters.kt")
            public void testNestedCapturingTypeParameters() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/nestedCapturingTypeParameters.kt", this::doTest);
            }

            @TestMetadata("nestedSubstituted.kt")
            public void testNestedSubstituted() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/nestedSubstituted.kt", this::doTest);
            }

            @TestMetadata("noApproximationInTypeAliasArgumentSubstitution.kt")
            public void testNoApproximationInTypeAliasArgumentSubstitution() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/noApproximationInTypeAliasArgumentSubstitution.kt", this::doTest);
            }

            @TestMetadata("noRHS.kt")
            public void testNoRHS() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/noRHS.kt", this::doTest);
            }

            @TestMetadata("parameterRestrictions.kt")
            public void testParameterRestrictions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/parameterRestrictions.kt", this::doTest);
            }

            @TestMetadata("parameterSubstitution.kt")
            public void testParameterSubstitution() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/parameterSubstitution.kt", this::doTest);
            }

            @TestMetadata("privateInFile.kt")
            public void testPrivateInFile() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/privateInFile.kt", this::doTest);
            }

            @TestMetadata("projectionsInTypeAliasConstructor.kt")
            public void testProjectionsInTypeAliasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/projectionsInTypeAliasConstructor.kt", this::doTest);
            }

            @TestMetadata("recursive.kt")
            public void testRecursive() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/recursive.kt", this::doTest);
            }

            @TestMetadata("returnTypeNothingShouldBeSpecifiedExplicitly.kt")
            public void testReturnTypeNothingShouldBeSpecifiedExplicitly() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/returnTypeNothingShouldBeSpecifiedExplicitly.kt", this::doTest);
            }

            @TestMetadata("simpleTypeAlias.kt")
            public void testSimpleTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/simpleTypeAlias.kt", this::doTest);
            }

            @TestMetadata("starProjection.kt")
            public void testStarProjection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/starProjection.kt", this::doTest);
            }

            @TestMetadata("starProjectionInTypeAliasArgument.kt")
            public void testStarProjectionInTypeAliasArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/starProjectionInTypeAliasArgument.kt", this::doTest);
            }

            @TestMetadata("substitutionVariance.kt")
            public void testSubstitutionVariance() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/substitutionVariance.kt", this::doTest);
            }

            @TestMetadata("throwJLException.kt")
            public void testThrowJLException() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/throwJLException.kt", this::doTest);
            }

            @TestMetadata("topLevelTypeAliasesOnly.kt")
            public void testTopLevelTypeAliasesOnly() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/topLevelTypeAliasesOnly.kt", this::doTest);
            }

            @TestMetadata("typeAliasArgumentsInCompanionObject.kt")
            public void testTypeAliasArgumentsInCompanionObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasArgumentsInCompanionObject.kt", this::doTest);
            }

            @TestMetadata("typeAliasArgumentsInConstructor.kt")
            public void testTypeAliasArgumentsInConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasArgumentsInConstructor.kt", this::doTest);
            }

            @TestMetadata("typeAliasAsBareType.kt")
            public void testTypeAliasAsBareType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasAsBareType.kt", this::doTest);
            }

            @TestMetadata("typeAliasAsQualifier.kt")
            public void testTypeAliasAsQualifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasAsQualifier.kt", this::doTest);
            }

            @TestMetadata("typeAliasAsSuperQualifier.kt")
            public void testTypeAliasAsSuperQualifier() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasAsSuperQualifier.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructor.kt")
            public void testTypeAliasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructor.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorCrazyProjections.kt")
            public void testTypeAliasConstructorCrazyProjections() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorCrazyProjections.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorForInterface.kt")
            public void testTypeAliasConstructorForInterface() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForInterface.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorForProjection.kt")
            public void testTypeAliasConstructorForProjection() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForProjection.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorForProjectionInSupertypes.kt")
            public void testTypeAliasConstructorForProjectionInSupertypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForProjectionInSupertypes.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorInSuperCall.kt")
            public void testTypeAliasConstructorInSuperCall() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorInSuperCall.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorInferenceInSupertypesList.kt")
            public void testTypeAliasConstructorInferenceInSupertypesList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorInferenceInSupertypesList.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorReturnType.kt")
            public void testTypeAliasConstructorReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorReturnType.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorTypeArgumentsInference.kt")
            public void testTypeAliasConstructorTypeArgumentsInference() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInference.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithNestedCalls.kt")
            public void testTypeAliasConstructorTypeArgumentsInferenceWithNestedCalls() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithNestedCalls.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithNestedCalls2.kt")
            public void testTypeAliasConstructorTypeArgumentsInferenceWithNestedCalls2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithNestedCalls2.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithPhantomTypes.kt")
            public void testTypeAliasConstructorTypeArgumentsInferenceWithPhantomTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithPhantomTypes.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorVsFunction.kt")
            public void testTypeAliasConstructorVsFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorVsFunction.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorWrongClass.kt")
            public void testTypeAliasConstructorWrongClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorWrongClass.kt", this::doTest);
            }

            @TestMetadata("typeAliasConstructorWrongVisibility.kt")
            public void testTypeAliasConstructorWrongVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorWrongVisibility.kt", this::doTest);
            }

            @TestMetadata("typeAliasExpansionRepeatedAnnotations.kt")
            public void testTypeAliasExpansionRepeatedAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasExpansionRepeatedAnnotations.kt", this::doTest);
            }

            @TestMetadata("typeAliasForProjectionInSuperInterfaces.kt")
            public void testTypeAliasForProjectionInSuperInterfaces() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasForProjectionInSuperInterfaces.kt", this::doTest);
            }

            @TestMetadata("typeAliasInAnonymousObjectType.kt")
            public void testTypeAliasInAnonymousObjectType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasInAnonymousObjectType.kt", this::doTest);
            }

            @TestMetadata("typeAliasInvisibleObject.kt")
            public void testTypeAliasInvisibleObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasInvisibleObject.kt", this::doTest);
            }

            @TestMetadata("typeAliasNotNull.kt")
            public void testTypeAliasNotNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasNotNull.kt", this::doTest);
            }

            @TestMetadata("typeAliasObject.kt")
            public void testTypeAliasObject() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasObject.kt", this::doTest);
            }

            @TestMetadata("typeAliasObjectWithInvoke.kt")
            public void testTypeAliasObjectWithInvoke() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasObjectWithInvoke.kt", this::doTest);
            }

            @TestMetadata("typeAliasShouldExpandToClass.kt")
            public void testTypeAliasShouldExpandToClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typeAliasShouldExpandToClass.kt", this::doTest);
            }

            @TestMetadata("typealiasRhsAnnotations.kt")
            public void testTypealiasRhsAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsAnnotations.kt", this::doTest);
            }

            @TestMetadata("typealiasRhsAnnotationsInArguments.kt")
            public void testTypealiasRhsAnnotationsInArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsAnnotationsInArguments.kt", this::doTest);
            }

            @TestMetadata("typealiasRhsRepeatedAnnotationInArguments.kt")
            public void testTypealiasRhsRepeatedAnnotationInArguments() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsRepeatedAnnotationInArguments.kt", this::doTest);
            }

            @TestMetadata("typealiasRhsRepeatedAnnotations.kt")
            public void testTypealiasRhsRepeatedAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsRepeatedAnnotations.kt", this::doTest);
            }

            @TestMetadata("unsupportedTypeAlias.kt")
            public void testUnsupportedTypeAlias() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/unsupportedTypeAlias.kt", this::doTest);
            }

            @TestMetadata("unusedTypeAliasParameter.kt")
            public void testUnusedTypeAliasParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/unusedTypeAliasParameter.kt", this::doTest);
            }

            @TestMetadata("wrongNumberOfArgumentsInTypeAliasConstructor.kt")
            public void testWrongNumberOfArgumentsInTypeAliasConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/typealias/wrongNumberOfArgumentsInTypeAliasConstructor.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/underscoresInNumericLiterals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class UnderscoresInNumericLiterals extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInUnderscoresInNumericLiterals() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/underscoresInNumericLiterals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("illegalUnderscores.kt")
            public void testIllegalUnderscores() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/underscoresInNumericLiterals/illegalUnderscores.kt", this::doTest);
            }

            @TestMetadata("noUnderscores.kt")
            public void testNoUnderscores() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/underscoresInNumericLiterals/noUnderscores.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/unit")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Unit extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInUnit() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/unit"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("nullableUnit.kt")
            public void testNullableUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/unit/nullableUnit.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/varargs")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Varargs extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInVarargs() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/varargs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AmbiguousVararg.kt")
            public void testAmbiguousVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/AmbiguousVararg.kt", this::doTest);
            }

            @TestMetadata("assignNonConstSingleArrayElementAsVarargInAnnotation.kt")
            public void testAssignNonConstSingleArrayElementAsVarargInAnnotation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/assignNonConstSingleArrayElementAsVarargInAnnotation.kt", this::doTest);
            }

            @TestMetadata("assignNonConstSingleArrayElementAsVarargInAnnotationError.kt")
            public void testAssignNonConstSingleArrayElementAsVarargInAnnotationError() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/assignNonConstSingleArrayElementAsVarargInAnnotationError.kt", this::doTest);
            }

            @TestMetadata("assigningArraysToVarargsInAnnotations.kt")
            public void testAssigningArraysToVarargsInAnnotations() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/assigningArraysToVarargsInAnnotations.kt", this::doTest);
            }

            @TestMetadata("assigningSingleElementsInNamedFormAnnDeprecation.kt")
            public void testAssigningSingleElementsInNamedFormAnnDeprecation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormAnnDeprecation.kt", this::doTest);
            }

            @TestMetadata("assigningSingleElementsInNamedFormFunDeprecation.kt")
            public void testAssigningSingleElementsInNamedFormFunDeprecation() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormFunDeprecation.kt", this::doTest);
            }

            @TestMetadata("kt1781.kt")
            public void testKt1781() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/kt1781.kt", this::doTest);
            }

            @TestMetadata("kt1835.kt")
            public void testKt1835() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/kt1835.kt", this::doTest);
            }

            @TestMetadata("kt1838-param.kt")
            public void testKt1838_param() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/kt1838-param.kt", this::doTest);
            }

            @TestMetadata("kt1838-val.kt")
            public void testKt1838_val() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/kt1838-val.kt", this::doTest);
            }

            @TestMetadata("kt2163.kt")
            public void testKt2163() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/kt2163.kt", this::doTest);
            }

            @TestMetadata("kt422.kt")
            public void testKt422() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/kt422.kt", this::doTest);
            }

            @TestMetadata("MoreSpecificVarargsOfEqualLength.kt")
            public void testMoreSpecificVarargsOfEqualLength() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/MoreSpecificVarargsOfEqualLength.kt", this::doTest);
            }

            @TestMetadata("MostSepcificVarargsWithJava.kt")
            public void testMostSepcificVarargsWithJava() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/MostSepcificVarargsWithJava.kt", this::doTest);
            }

            @TestMetadata("NilaryVsVararg.kt")
            public void testNilaryVsVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/NilaryVsVararg.kt", this::doTest);
            }

            @TestMetadata("noAssigningArraysToVarargsFeature.kt")
            public void testNoAssigningArraysToVarargsFeature() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/noAssigningArraysToVarargsFeature.kt", this::doTest);
            }

            @TestMetadata("NullableTypeForVarargArgument.kt")
            public void testNullableTypeForVarargArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/NullableTypeForVarargArgument.kt", this::doTest);
            }

            @TestMetadata("UnaryVsVararg.kt")
            public void testUnaryVsVararg() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/UnaryVsVararg.kt", this::doTest);
            }

            @TestMetadata("varargInSetter.kt")
            public void testVarargInSetter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/varargInSetter.kt", this::doTest);
            }

            @TestMetadata("varargIterator.kt")
            public void testVarargIterator() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/varargIterator.kt", this::doTest);
            }

            @TestMetadata("varargOfNothing.kt")
            public void testVarargOfNothing() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/varargOfNothing.kt", this::doTest);
            }

            @TestMetadata("varargsAndFunctionLiterals.kt")
            public void testVarargsAndFunctionLiterals() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/varargsAndFunctionLiterals.kt", this::doTest);
            }

            @TestMetadata("varargsAndOut1.kt")
            public void testVarargsAndOut1() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/varargsAndOut1.kt", this::doTest);
            }

            @TestMetadata("varargsAndOut2.kt")
            public void testVarargsAndOut2() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/varargsAndOut2.kt", this::doTest);
            }

            @TestMetadata("varargsAndPair.kt")
            public void testVarargsAndPair() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/varargs/varargsAndPair.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/variance")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Variance extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInVariance() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/variance"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("Class.kt")
            public void testClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/Class.kt", this::doTest);
            }

            @TestMetadata("ea1337846.kt")
            public void testEa1337846() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/ea1337846.kt", this::doTest);
            }

            @TestMetadata("Function.kt")
            public void testFunction() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/Function.kt", this::doTest);
            }

            @TestMetadata("FunctionTypes.kt")
            public void testFunctionTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/FunctionTypes.kt", this::doTest);
            }

            @TestMetadata("InPosition.kt")
            public void testInPosition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/InPosition.kt", this::doTest);
            }

            @TestMetadata("InvariantPosition.kt")
            public void testInvariantPosition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/InvariantPosition.kt", this::doTest);
            }

            @TestMetadata("NullableTypes.kt")
            public void testNullableTypes() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/NullableTypes.kt", this::doTest);
            }

            @TestMetadata("OutPosition.kt")
            public void testOutPosition() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/OutPosition.kt", this::doTest);
            }

            @TestMetadata("PrimaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/PrimaryConstructor.kt", this::doTest);
            }

            @TestMetadata("ValProperty.kt")
            public void testValProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/ValProperty.kt", this::doTest);
            }

            @TestMetadata("VarProperty.kt")
            public void testVarProperty() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/VarProperty.kt", this::doTest);
            }

            @TestMetadata("Visibility.kt")
            public void testVisibility() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/Visibility.kt", this::doTest);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/variance/privateToThis")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PrivateToThis extends AbstractDiagnosticsUsingJavacTest {
                @TestMetadata("Abstract.kt")
                public void testAbstract() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/privateToThis/Abstract.kt", this::doTest);
                }

                public void testAllFilesPresentInPrivateToThis() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/variance/privateToThis"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("FunctionCall.kt")
                public void testFunctionCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/privateToThis/FunctionCall.kt", this::doTest);
                }

                @TestMetadata("GetVal.kt")
                public void testGetVal() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/privateToThis/GetVal.kt", this::doTest);
                }

                @TestMetadata("SetVar.kt")
                public void testSetVar() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/privateToThis/SetVar.kt", this::doTest);
                }

                @TestMetadata("ValReassigned.kt")
                public void testValReassigned() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/variance/privateToThis/ValReassigned.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/when")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class When extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInWhen() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/when"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AnnotatedWhenStatement.kt")
            public void testAnnotatedWhenStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/AnnotatedWhenStatement.kt", this::doTest);
            }

            @TestMetadata("BranchBypassVal.kt")
            public void testBranchBypassVal() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/BranchBypassVal.kt", this::doTest);
            }

            @TestMetadata("BranchBypassVar.kt")
            public void testBranchBypassVar() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/BranchBypassVar.kt", this::doTest);
            }

            @TestMetadata("BranchFalseBypass.kt")
            public void testBranchFalseBypass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/BranchFalseBypass.kt", this::doTest);
            }

            @TestMetadata("BranchFalseBypassElse.kt")
            public void testBranchFalseBypassElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/BranchFalseBypassElse.kt", this::doTest);
            }

            @TestMetadata("CommaInWhenConditionWithoutArgument.kt")
            public void testCommaInWhenConditionWithoutArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/CommaInWhenConditionWithoutArgument.kt", this::doTest);
            }

            @TestMetadata("DuplicatedLabels.kt")
            public void testDuplicatedLabels() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/DuplicatedLabels.kt", this::doTest);
            }

            @TestMetadata("ElseOnNullableEnum.kt")
            public void testElseOnNullableEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ElseOnNullableEnum.kt", this::doTest);
            }

            @TestMetadata("ElseOnNullableEnumWithSmartCast.kt")
            public void testElseOnNullableEnumWithSmartCast() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ElseOnNullableEnumWithSmartCast.kt", this::doTest);
            }

            @TestMetadata("EmptyConditionWithExpression.kt")
            public void testEmptyConditionWithExpression() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/EmptyConditionWithExpression.kt", this::doTest);
            }

            @TestMetadata("EmptyConditionWithExpressionEnum.kt")
            public void testEmptyConditionWithExpressionEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/EmptyConditionWithExpressionEnum.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveBoolean.kt")
            public void testExhaustiveBoolean() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBoolean.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveBooleanBrackets.kt")
            public void testExhaustiveBooleanBrackets() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanBrackets.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveBooleanComplex.kt")
            public void testExhaustiveBooleanComplex() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanComplex.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveBooleanNullable.kt")
            public void testExhaustiveBooleanNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanNullable.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveBreakContinue.kt")
            public void testExhaustiveBreakContinue() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBreakContinue.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveEnumIs.kt")
            public void testExhaustiveEnumIs() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveEnumIs.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveEnumMixed.kt")
            public void testExhaustiveEnumMixed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveEnumMixed.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveInitialization.kt")
            public void testExhaustiveInitialization() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveInitialization.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveNoInitialization.kt")
            public void testExhaustiveNoInitialization() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveNoInitialization.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveNullable.kt")
            public void testExhaustiveNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveNullable.kt", this::doTest);
            }

            @TestMetadata("ExhaustivePlatformEnum.kt")
            public void testExhaustivePlatformEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnum.kt", this::doTest);
            }

            @TestMetadata("ExhaustivePlatformEnumAnnotated.kt")
            public void testExhaustivePlatformEnumAnnotated() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumAnnotated.kt", this::doTest);
            }

            @TestMetadata("ExhaustivePlatformEnumElse.kt")
            public void testExhaustivePlatformEnumElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumElse.kt", this::doTest);
            }

            @TestMetadata("ExhaustivePlatformEnumNull.kt")
            public void testExhaustivePlatformEnumNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumNull.kt", this::doTest);
            }

            @TestMetadata("ExhaustivePlatformEnumStatement.kt")
            public void testExhaustivePlatformEnumStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumStatement.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveReturn.kt")
            public void testExhaustiveReturn() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveReturn.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveReturnThrow.kt")
            public void testExhaustiveReturnThrow() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveReturnThrow.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveValOverConditionalInit.kt")
            public void testExhaustiveValOverConditionalInit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveValOverConditionalInit.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveVarOverConditionalInit.kt")
            public void testExhaustiveVarOverConditionalInit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveVarOverConditionalInit.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWithNullabilityCheck.kt")
            public void testExhaustiveWithNullabilityCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheck.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWithNullabilityCheckBefore.kt")
            public void testExhaustiveWithNullabilityCheckBefore() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBefore.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWithNullabilityCheckBoolean.kt")
            public void testExhaustiveWithNullabilityCheckBoolean() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBoolean.kt", this::doTest);
            }

            @TestMetadata("ExhaustiveWithNullabilityCheckElse.kt")
            public void testExhaustiveWithNullabilityCheckElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckElse.kt", this::doTest);
            }

            @TestMetadata("kt10439.kt")
            public void testKt10439() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/kt10439.kt", this::doTest);
            }

            @TestMetadata("kt10809.kt")
            public void testKt10809() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/kt10809.kt", this::doTest);
            }

            @TestMetadata("kt10811.kt")
            public void testKt10811() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/kt10811.kt", this::doTest);
            }

            @TestMetadata("kt4434.kt")
            public void testKt4434() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/kt4434.kt", this::doTest);
            }

            @TestMetadata("kt9929.kt")
            public void testKt9929() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/kt9929.kt", this::doTest);
            }

            @TestMetadata("kt9972.kt")
            public void testKt9972() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/kt9972.kt", this::doTest);
            }

            @TestMetadata("NoElseExpectedUnit.kt")
            public void testNoElseExpectedUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NoElseExpectedUnit.kt", this::doTest);
            }

            @TestMetadata("NoElseNoExpectedType.kt")
            public void testNoElseNoExpectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NoElseNoExpectedType.kt", this::doTest);
            }

            @TestMetadata("NoElseReturnedCoercionToUnit.kt")
            public void testNoElseReturnedCoercionToUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedCoercionToUnit.kt", this::doTest);
            }

            @TestMetadata("NoElseReturnedFromLambdaExpectedInt.kt")
            public void testNoElseReturnedFromLambdaExpectedInt() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedFromLambdaExpectedInt.kt", this::doTest);
            }

            @TestMetadata("NoElseReturnedNonUnit.kt")
            public void testNoElseReturnedNonUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedNonUnit.kt", this::doTest);
            }

            @TestMetadata("NoElseReturnedUnit.kt")
            public void testNoElseReturnedUnit() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedUnit.kt", this::doTest);
            }

            @TestMetadata("NoElseWhenStatement.kt")
            public void testNoElseWhenStatement() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NoElseWhenStatement.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveBooleanNullable.kt")
            public void testNonExhaustiveBooleanNullable() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveBooleanNullable.kt", this::doTest);
            }

            @TestMetadata("NonExhaustivePlatformEnum.kt")
            public void testNonExhaustivePlatformEnum() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NonExhaustivePlatformEnum.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWarning.kt")
            public void testNonExhaustiveWarning() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarning.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWarningElse.kt")
            public void testNonExhaustiveWarningElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningElse.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWarningFalse.kt")
            public void testNonExhaustiveWarningFalse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningFalse.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWarningForSealedClass.kt")
            public void testNonExhaustiveWarningForSealedClass() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningForSealedClass.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWarningNull.kt")
            public void testNonExhaustiveWarningNull() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningNull.kt", this::doTest);
            }

            @TestMetadata("NonExhaustiveWithNullabilityCheck.kt")
            public void testNonExhaustiveWithNullabilityCheck() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWithNullabilityCheck.kt", this::doTest);
            }

            @TestMetadata("PropertyNotInitialized.kt")
            public void testPropertyNotInitialized() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/PropertyNotInitialized.kt", this::doTest);
            }

            @TestMetadata("RedundantElse.kt")
            public void testRedundantElse() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/RedundantElse.kt", this::doTest);
            }

            @TestMetadata("ReservedExhaustiveWhen.kt")
            public void testReservedExhaustiveWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/ReservedExhaustiveWhen.kt", this::doTest);
            }

            @TestMetadata("TopLevelSealed.kt")
            public void testTopLevelSealed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/TopLevelSealed.kt", this::doTest);
            }

            @TestMetadata("When.kt")
            public void testWhen() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/When.kt", this::doTest);
            }

            @TestMetadata("whenAndLambdaWithExpectedType.kt")
            public void testWhenAndLambdaWithExpectedType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/whenAndLambdaWithExpectedType.kt", this::doTest);
            }

            @TestMetadata("WhenTypeDisjunctions.kt")
            public void testWhenTypeDisjunctions() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/WhenTypeDisjunctions.kt", this::doTest);
            }

            @TestMetadata("whenWithNothingAndLambdas.kt")
            public void testWhenWithNothingAndLambdas() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/diagnostics/tests/when/whenWithNothingAndLambdas.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/box/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Diagnostics extends AbstractDiagnosticsUsingJavacTest {
        public void testAllFilesPresentInDiagnostics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/codegen/box/diagnostics/functions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Functions extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInFunctions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/inference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inference extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInference() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/inference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("kt6176.kt")
                public void testKt6176() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/inference/kt6176.kt", this::doTest);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Invoke extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInInvoke() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class OnObjects extends AbstractDiagnosticsUsingJavacTest {
                    public void testAllFilesPresentInOnObjects() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("invokeOnClassObject1.kt")
                    public void testInvokeOnClassObject1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnClassObject2.kt")
                    public void testInvokeOnClassObject2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject2.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnClassObjectOfNestedClass1.kt")
                    public void testInvokeOnClassObjectOfNestedClass1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnClassObjectOfNestedClass2.kt")
                    public void testInvokeOnClassObjectOfNestedClass2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass2.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnEnum1.kt")
                    public void testInvokeOnEnum1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnEnum2.kt")
                    public void testInvokeOnEnum2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum2.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnImportedEnum1.kt")
                    public void testInvokeOnImportedEnum1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnImportedEnum2.kt")
                    public void testInvokeOnImportedEnum2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum2.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnObject1.kt")
                    public void testInvokeOnObject1() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject1.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnObject2.kt")
                    public void testInvokeOnObject2() throws Exception {
                        KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject2.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TailRecursion extends AbstractDiagnosticsUsingJavacTest {
                public void testAllFilesPresentInTailRecursion() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/tailRecursion"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("defaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs.kt", this::doTest);
                }

                @TestMetadata("defaultArgsOverridden.kt")
                public void testDefaultArgsOverridden() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsOverridden.kt", this::doTest);
                }

                @TestMetadata("extensionTailCall.kt")
                public void testExtensionTailCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/extensionTailCall.kt", this::doTest);
                }

                @TestMetadata("functionWithNoTails.kt")
                public void testFunctionWithNoTails() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNoTails.kt", this::doTest);
                }

                @TestMetadata("functionWithNonTailRecursions.kt")
                public void testFunctionWithNonTailRecursions() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNonTailRecursions.kt", this::doTest);
                }

                @TestMetadata("functionWithoutAnnotation.kt")
                public void testFunctionWithoutAnnotation() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithoutAnnotation.kt", this::doTest);
                }

                @TestMetadata("infixCall.kt")
                public void testInfixCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixCall.kt", this::doTest);
                }

                @TestMetadata("infixRecursiveCall.kt")
                public void testInfixRecursiveCall() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixRecursiveCall.kt", this::doTest);
                }

                @TestMetadata("insideElvis.kt")
                public void testInsideElvis() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/insideElvis.kt", this::doTest);
                }

                @TestMetadata("labeledThisReferences.kt")
                public void testLabeledThisReferences() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/labeledThisReferences.kt", this::doTest);
                }

                @TestMetadata("loops.kt")
                public void testLoops() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/loops.kt", this::doTest);
                }

                @TestMetadata("multilevelBlocks.kt")
                public void testMultilevelBlocks() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/multilevelBlocks.kt", this::doTest);
                }

                @TestMetadata("realIteratorFoldl.kt")
                public void testRealIteratorFoldl() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realIteratorFoldl.kt", this::doTest);
                }

                @TestMetadata("realStringEscape.kt")
                public void testRealStringEscape() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringEscape.kt", this::doTest);
                }

                @TestMetadata("realStringRepeat.kt")
                public void testRealStringRepeat() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringRepeat.kt", this::doTest);
                }

                @TestMetadata("recursiveCallInLambda.kt")
                public void testRecursiveCallInLambda() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLambda.kt", this::doTest);
                }

                @TestMetadata("recursiveCallInLocalFunction.kt")
                public void testRecursiveCallInLocalFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLocalFunction.kt", this::doTest);
                }

                @TestMetadata("recursiveInnerFunction.kt")
                public void testRecursiveInnerFunction() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveInnerFunction.kt", this::doTest);
                }

                @TestMetadata("returnIf.kt")
                public void testReturnIf() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnIf.kt", this::doTest);
                }

                @TestMetadata("returnInCatch.kt")
                public void testReturnInCatch() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInCatch.kt", this::doTest);
                }

                @TestMetadata("returnInFinally.kt")
                public void testReturnInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInFinally.kt", this::doTest);
                }

                @TestMetadata("returnInIfInFinally.kt")
                public void testReturnInIfInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInIfInFinally.kt", this::doTest);
                }

                @TestMetadata("returnInParentheses.kt")
                public void testReturnInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInParentheses.kt", this::doTest);
                }

                @TestMetadata("returnInTry.kt")
                public void testReturnInTry() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInTry.kt", this::doTest);
                }

                @TestMetadata("simpleBlock.kt")
                public void testSimpleBlock() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleBlock.kt", this::doTest);
                }

                @TestMetadata("simpleReturn.kt")
                public void testSimpleReturn() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturn.kt", this::doTest);
                }

                @TestMetadata("simpleReturnWithElse.kt")
                public void testSimpleReturnWithElse() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturnWithElse.kt", this::doTest);
                }

                @TestMetadata("sum.kt")
                public void testSum() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/sum.kt", this::doTest);
                }

                @TestMetadata("tailCallInBlockInParentheses.kt")
                public void testTailCallInBlockInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInBlockInParentheses.kt", this::doTest);
                }

                @TestMetadata("tailCallInParentheses.kt")
                public void testTailCallInParentheses() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInParentheses.kt", this::doTest);
                }

                @TestMetadata("tailRecursionInFinally.kt")
                public void testTailRecursionInFinally() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailRecursionInFinally.kt", this::doTest);
                }

                @TestMetadata("thisReferences.kt")
                public void testThisReferences() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/thisReferences.kt", this::doTest);
                }

                @TestMetadata("unitBlocks.kt")
                public void testUnitBlocks() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/unitBlocks.kt", this::doTest);
                }

                @TestMetadata("whenWithCondition.kt")
                public void testWhenWithCondition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithCondition.kt", this::doTest);
                }

                @TestMetadata("whenWithInRange.kt")
                public void testWhenWithInRange() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithInRange.kt", this::doTest);
                }

                @TestMetadata("whenWithIs.kt")
                public void testWhenWithIs() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithIs.kt", this::doTest);
                }

                @TestMetadata("whenWithoutCondition.kt")
                public void testWhenWithoutCondition() throws Exception {
                    KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithoutCondition.kt", this::doTest);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/diagnostics/vararg")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Vararg extends AbstractDiagnosticsUsingJavacTest {
            public void testAllFilesPresentInVararg() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/vararg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("kt4172.kt")
            public void testKt4172() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/codegen/box/diagnostics/vararg/kt4172.kt", this::doTest);
            }
        }
    }
}
