/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.resolve.calls;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/resolvedCalls")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class ResolvedCallsTestGenerated extends AbstractResolvedCallsTest {
    public void testAllFilesPresentInResolvedCalls() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true, "enhancedSignatures");
    }

    @TestMetadata("explicitReceiverIsDispatchReceiver.kt")
    public void testExplicitReceiverIsDispatchReceiver() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/resolvedCalls/explicitReceiverIsDispatchReceiver.kt", this::doTest);
    }

    @TestMetadata("explicitReceiverIsExtensionReceiver.kt")
    public void testExplicitReceiverIsExtensionReceiver() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/resolvedCalls/explicitReceiverIsExtensionReceiver.kt", this::doTest);
    }

    @TestMetadata("hasBothDispatchAndExtensionReceivers.kt")
    public void testHasBothDispatchAndExtensionReceivers() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/resolvedCalls/hasBothDispatchAndExtensionReceivers.kt", this::doTest);
    }

    @TestMetadata("hasBothDispatchAndExtensionReceiversWithoutExplicitReceiver.kt")
    public void testHasBothDispatchAndExtensionReceiversWithoutExplicitReceiver() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/resolvedCalls/hasBothDispatchAndExtensionReceiversWithoutExplicitReceiver.kt", this::doTest);
    }

    @TestMetadata("implicitReceiverIsDispatchReceiver.kt")
    public void testImplicitReceiverIsDispatchReceiver() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/resolvedCalls/implicitReceiverIsDispatchReceiver.kt", this::doTest);
    }

    @TestMetadata("implicitReceiverIsExtensionReceiver.kt")
    public void testImplicitReceiverIsExtensionReceiver() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/resolvedCalls/implicitReceiverIsExtensionReceiver.kt", this::doTest);
    }

    @TestMetadata("impliedThisNoExplicitReceiver.kt")
    public void testImpliedThisNoExplicitReceiver() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/resolvedCalls/impliedThisNoExplicitReceiver.kt", this::doTest);
    }

    @TestMetadata("simpleCall.kt")
    public void testSimpleCall() throws Exception {
        KotlinTestUtils.runTest("compiler/testData/resolvedCalls/simpleCall.kt", this::doTest);
    }

    @TestMetadata("compiler/testData/resolvedCalls/arguments")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Arguments extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInArguments() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/arguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/resolvedCalls/arguments/functionLiterals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FunctionLiterals extends AbstractResolvedCallsTest {
            public void testAllFilesPresentInFunctionLiterals() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/arguments/functionLiterals"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("chainedLambdas.kt")
            public void testChainedLambdas() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/functionLiterals/chainedLambdas.kt", this::doTest);
            }

            @TestMetadata("notInferredLambdaReturnType.kt")
            public void testNotInferredLambdaReturnType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/functionLiterals/notInferredLambdaReturnType.kt", this::doTest);
            }

            @TestMetadata("notInferredLambdaType.kt")
            public void testNotInferredLambdaType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/functionLiterals/notInferredLambdaType.kt", this::doTest);
            }

            @TestMetadata("simpleGenericLambda.kt")
            public void testSimpleGenericLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/functionLiterals/simpleGenericLambda.kt", this::doTest);
            }

            @TestMetadata("simpleLambda.kt")
            public void testSimpleLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/functionLiterals/simpleLambda.kt", this::doTest);
            }

            @TestMetadata("unmappedLambda.kt")
            public void testUnmappedLambda() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/functionLiterals/unmappedLambda.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/resolvedCalls/arguments/genericCalls")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class GenericCalls extends AbstractResolvedCallsTest {
            public void testAllFilesPresentInGenericCalls() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/arguments/genericCalls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("inferredParameter.kt")
            public void testInferredParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/genericCalls/inferredParameter.kt", this::doTest);
            }

            @TestMetadata("simpleGeneric.kt")
            public void testSimpleGeneric() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/genericCalls/simpleGeneric.kt", this::doTest);
            }

            @TestMetadata("uninferredParameter.kt")
            public void testUninferredParameter() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/genericCalls/uninferredParameter.kt", this::doTest);
            }

            @TestMetadata("uninferredParameterTypeMismatch.kt")
            public void testUninferredParameterTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/genericCalls/uninferredParameterTypeMismatch.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/resolvedCalls/arguments/namedArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NamedArguments extends AbstractResolvedCallsTest {
            public void testAllFilesPresentInNamedArguments() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/arguments/namedArguments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("positionedAfterNamed.kt")
            public void testPositionedAfterNamed() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/namedArguments/positionedAfterNamed.kt", this::doTest);
            }

            @TestMetadata("shiftedArgsMatch.kt")
            public void testShiftedArgsMatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/namedArguments/shiftedArgsMatch.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/resolvedCalls/arguments/oneArgument")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class OneArgument extends AbstractResolvedCallsTest {
            public void testAllFilesPresentInOneArgument() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/arguments/oneArgument"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("argumentHasNoType.kt")
            public void testArgumentHasNoType() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/oneArgument/argumentHasNoType.kt", this::doTest);
            }

            @TestMetadata("simpleMatch.kt")
            public void testSimpleMatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/oneArgument/simpleMatch.kt", this::doTest);
            }

            @TestMetadata("typeMismatch.kt")
            public void testTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/oneArgument/typeMismatch.kt", this::doTest);
            }

            @TestMetadata("unmappedArgument.kt")
            public void testUnmappedArgument() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/oneArgument/unmappedArgument.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/resolvedCalls/arguments/realExamples")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class RealExamples extends AbstractResolvedCallsTest {
            public void testAllFilesPresentInRealExamples() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/arguments/realExamples"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("emptyList.kt")
            public void testEmptyList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/realExamples/emptyList.kt", this::doTest);
            }

            @TestMetadata("emptyMutableList.kt")
            public void testEmptyMutableList() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/realExamples/emptyMutableList.kt", this::doTest);
            }
        }

        @TestMetadata("compiler/testData/resolvedCalls/arguments/severalCandidates")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SeveralCandidates extends AbstractResolvedCallsTest {
            public void testAllFilesPresentInSeveralCandidates() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/arguments/severalCandidates"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("mostSpecific.kt")
            public void testMostSpecific() throws Exception {
                KotlinTestUtils.runTest("compiler/testData/resolvedCalls/arguments/severalCandidates/mostSpecific.kt", this::doTest);
            }
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/differentCallElements")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DifferentCallElements extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInDifferentCallElements() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/differentCallElements"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("annotationCall.kt")
        public void testAnnotationCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/differentCallElements/annotationCall.kt", this::doTest);
        }

        @TestMetadata("delegatorToSuperCall.kt")
        public void testDelegatorToSuperCall() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/differentCallElements/delegatorToSuperCall.kt", this::doTest);
        }

        @TestMetadata("simpleArrayAccess.kt")
        public void testSimpleArrayAccess() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/differentCallElements/simpleArrayAccess.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/dynamic")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Dynamic extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInDynamic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/dynamic"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("explicitReceiverIsDispatchReceiver.kt")
        public void testExplicitReceiverIsDispatchReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/dynamic/explicitReceiverIsDispatchReceiver.kt", this::doTest);
        }

        @TestMetadata("explicitReceiverIsExtensionReceiver.kt")
        public void testExplicitReceiverIsExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/dynamic/explicitReceiverIsExtensionReceiver.kt", this::doTest);
        }

        @TestMetadata("hasBothDispatchAndExtensionReceivers.kt")
        public void testHasBothDispatchAndExtensionReceivers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/dynamic/hasBothDispatchAndExtensionReceivers.kt", this::doTest);
        }

        @TestMetadata("hasBothDispatchAndExtensionReceiversWithoutExplicitReceiver.kt")
        public void testHasBothDispatchAndExtensionReceiversWithoutExplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/dynamic/hasBothDispatchAndExtensionReceiversWithoutExplicitReceiver.kt", this::doTest);
        }

        @TestMetadata("implicitReceiverIsDispatchReceiver.kt")
        public void testImplicitReceiverIsDispatchReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/dynamic/implicitReceiverIsDispatchReceiver.kt", this::doTest);
        }

        @TestMetadata("implicitReceiverIsExtensionReceiver.kt")
        public void testImplicitReceiverIsExtensionReceiver() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/dynamic/implicitReceiverIsExtensionReceiver.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/functionTypes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionTypes extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInFunctionTypes() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/functionTypes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("invokeForExtensionFunctionType.kt")
        public void testInvokeForExtensionFunctionType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/functionTypes/invokeForExtensionFunctionType.kt", this::doTest);
        }

        @TestMetadata("invokeForFunctionType.kt")
        public void testInvokeForFunctionType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/functionTypes/invokeForFunctionType.kt", this::doTest);
        }

        @TestMetadata("valOfExtensionFunctionType.kt")
        public void testValOfExtensionFunctionType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/functionTypes/valOfExtensionFunctionType.kt", this::doTest);
        }

        @TestMetadata("valOfExtensionFunctionTypeInvoke.kt")
        public void testValOfExtensionFunctionTypeInvoke() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/functionTypes/valOfExtensionFunctionTypeInvoke.kt", this::doTest);
        }

        @TestMetadata("valOfFunctionType.kt")
        public void testValOfFunctionType() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/functionTypes/valOfFunctionType.kt", this::doTest);
        }

        @TestMetadata("valOfFunctionTypeInvoke.kt")
        public void testValOfFunctionTypeInvoke() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/functionTypes/valOfFunctionTypeInvoke.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/invoke")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Invoke extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInInvoke() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/invoke"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("bothReceivers.kt")
        public void testBothReceivers() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/bothReceivers.kt", this::doTest);
        }

        @TestMetadata("dispatchReceiverAsReceiverForInvoke.kt")
        public void testDispatchReceiverAsReceiverForInvoke() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/dispatchReceiverAsReceiverForInvoke.kt", this::doTest);
        }

        @TestMetadata("extensionReceiverAsReceiverForInvoke.kt")
        public void testExtensionReceiverAsReceiverForInvoke() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/extensionReceiverAsReceiverForInvoke.kt", this::doTest);
        }

        @TestMetadata("implicitReceiverForInvoke.kt")
        public void testImplicitReceiverForInvoke() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/implicitReceiverForInvoke.kt", this::doTest);
        }

        @TestMetadata("invokeOnClassObject1.kt")
        public void testInvokeOnClassObject1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/invokeOnClassObject1.kt", this::doTest);
        }

        @TestMetadata("invokeOnClassObject2.kt")
        public void testInvokeOnClassObject2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/invokeOnClassObject2.kt", this::doTest);
        }

        @TestMetadata("invokeOnEnumEntry1.kt")
        public void testInvokeOnEnumEntry1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/invokeOnEnumEntry1.kt", this::doTest);
        }

        @TestMetadata("invokeOnEnumEntry2.kt")
        public void testInvokeOnEnumEntry2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/invokeOnEnumEntry2.kt", this::doTest);
        }

        @TestMetadata("invokeOnObject1.kt")
        public void testInvokeOnObject1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/invokeOnObject1.kt", this::doTest);
        }

        @TestMetadata("invokeOnObject2.kt")
        public void testInvokeOnObject2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/invoke/invokeOnObject2.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/objectsAndClassObjects")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ObjectsAndClassObjects extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInObjectsAndClassObjects() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/objectsAndClassObjects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/objectsAndClassObjects/classObject.kt", this::doTest);
        }

        @TestMetadata("kt5308IntRangeConstant.kt")
        public void testKt5308IntRangeConstant() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/objectsAndClassObjects/kt5308IntRangeConstant.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/objectsAndClassObjects/object.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/realExamples")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RealExamples extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInRealExamples() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/realExamples"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("stringPlusInBuilders.kt")
        public void testStringPlusInBuilders() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/realExamples/stringPlusInBuilders.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/resolve")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Resolve extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInResolve() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/resolve"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("mostSpecificUninferredParam.kt")
        public void testMostSpecificUninferredParam() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/resolve/mostSpecificUninferredParam.kt", this::doTest);
        }

        @TestMetadata("mostSpecificWithLambda.kt")
        public void testMostSpecificWithLambda() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/resolve/mostSpecificWithLambda.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/secondaryConstructors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SecondaryConstructors extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInSecondaryConstructors() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/secondaryConstructors"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classWithGenerics.kt")
        public void testClassWithGenerics() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/classWithGenerics.kt", this::doTest);
        }

        @TestMetadata("classWithGenerics2.kt")
        public void testClassWithGenerics2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/classWithGenerics2.kt", this::doTest);
        }

        @TestMetadata("classWithGenerics3.kt")
        public void testClassWithGenerics3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/classWithGenerics3.kt", this::doTest);
        }

        @TestMetadata("explicitPrimaryArgs.kt")
        public void testExplicitPrimaryArgs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/explicitPrimaryArgs.kt", this::doTest);
        }

        @TestMetadata("explicitPrimaryCallSecondary.kt")
        public void testExplicitPrimaryCallSecondary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/explicitPrimaryCallSecondary.kt", this::doTest);
        }

        @TestMetadata("explicitPrimaryNoArgs.kt")
        public void testExplicitPrimaryNoArgs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/explicitPrimaryNoArgs.kt", this::doTest);
        }

        @TestMetadata("implicitPrimary.kt")
        public void testImplicitPrimary() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/implicitPrimary.kt", this::doTest);
        }

        @TestMetadata("overload1.kt")
        public void testOverload1() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/overload1.kt", this::doTest);
        }

        @TestMetadata("overload2.kt")
        public void testOverload2() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/overload2.kt", this::doTest);
        }

        @TestMetadata("overload3.kt")
        public void testOverload3() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/overload3.kt", this::doTest);
        }

        @TestMetadata("overloadDefault.kt")
        public void testOverloadDefault() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/overloadDefault.kt", this::doTest);
        }

        @TestMetadata("overloadNamed.kt")
        public void testOverloadNamed() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/overloadNamed.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/simple.kt", this::doTest);
        }

        @TestMetadata("varargs.kt")
        public void testVarargs() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/secondaryConstructors/varargs.kt", this::doTest);
        }
    }

    @TestMetadata("compiler/testData/resolvedCalls/thisOrSuper")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ThisOrSuper extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInThisOrSuper() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/resolvedCalls/thisOrSuper"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("labeledSuper.kt")
        public void testLabeledSuper() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/thisOrSuper/labeledSuper.kt", this::doTest);
        }

        @TestMetadata("labeledThis.kt")
        public void testLabeledThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/thisOrSuper/labeledThis.kt", this::doTest);
        }

        @TestMetadata("simpleSuper.kt")
        public void testSimpleSuper() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/thisOrSuper/simpleSuper.kt", this::doTest);
        }

        @TestMetadata("simpleThis.kt")
        public void testSimpleThis() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/thisOrSuper/simpleThis.kt", this::doTest);
        }

        @TestMetadata("thisInExtensionFunction.kt")
        public void testThisInExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("compiler/testData/resolvedCalls/thisOrSuper/thisInExtensionFunction.kt", this::doTest);
        }
    }
}
