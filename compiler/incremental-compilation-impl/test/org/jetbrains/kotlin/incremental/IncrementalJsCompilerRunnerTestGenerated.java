/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.incremental;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class IncrementalJsCompilerRunnerTestGenerated extends AbstractIncrementalJsCompilerRunnerTest {
    @TestMetadata("jps-plugin/testData/incremental/pureKotlin")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PureKotlin extends AbstractIncrementalJsCompilerRunnerTest {
        @TestMetadata("accessingFunctionsViaPackagePart")
        public void testAccessingFunctionsViaPackagePart() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/accessingFunctionsViaPackagePart/", this::doTest);
        }

        @TestMetadata("accessingPropertiesViaField")
        public void testAccessingPropertiesViaField() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/accessingPropertiesViaField/", this::doTest);
        }

        @TestMetadata("addClass")
        public void testAddClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/addClass/", this::doTest);
        }

        @TestMetadata("addFileWithFunctionOverload")
        public void testAddFileWithFunctionOverload() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/addFileWithFunctionOverload/", this::doTest);
        }

        @TestMetadata("addMemberTypeAlias")
        public void testAddMemberTypeAlias() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/addMemberTypeAlias/", this::doTest);
        }

        @TestMetadata("addTopLevelTypeAlias")
        public void testAddTopLevelTypeAlias() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/addTopLevelTypeAlias/", this::doTest);
        }

        @TestMetadata("allConstants")
        public void testAllConstants() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/allConstants/", this::doTest);
        }

        public void testAllFilesPresentInPureKotlin() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/incremental/pureKotlin"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
        }

        @TestMetadata("annotations")
        public void testAnnotations() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/annotations/", this::doTest);
        }

        @TestMetadata("anonymousObjectChanged")
        public void testAnonymousObjectChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/anonymousObjectChanged/", this::doTest);
        }

        @TestMetadata("changeTypeImplicitlyWithCircularDependency")
        public void testChangeTypeImplicitlyWithCircularDependency() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/changeTypeImplicitlyWithCircularDependency/", this::doTest);
        }

        @TestMetadata("changeWithRemovingUsage")
        public void testChangeWithRemovingUsage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/changeWithRemovingUsage/", this::doTest);
        }

        @TestMetadata("classInlineFunctionChanged")
        public void testClassInlineFunctionChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/classInlineFunctionChanged/", this::doTest);
        }

        @TestMetadata("classObjectConstantChanged")
        public void testClassObjectConstantChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/classObjectConstantChanged/", this::doTest);
        }

        @TestMetadata("classRecreated")
        public void testClassRecreated() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/classRecreated/", this::doTest);
        }

        @TestMetadata("classSignatureChanged")
        public void testClassSignatureChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/classSignatureChanged/", this::doTest);
        }

        @TestMetadata("classSignatureUnchanged")
        public void testClassSignatureUnchanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/classSignatureUnchanged/", this::doTest);
        }

        @TestMetadata("compilationErrorThenFixedOtherPackage")
        public void testCompilationErrorThenFixedOtherPackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/compilationErrorThenFixedOtherPackage/", this::doTest);
        }

        @TestMetadata("compilationErrorThenFixedSamePackage")
        public void testCompilationErrorThenFixedSamePackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/compilationErrorThenFixedSamePackage/", this::doTest);
        }

        @TestMetadata("compilationErrorThenFixedWithPhantomPart")
        public void testCompilationErrorThenFixedWithPhantomPart() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/compilationErrorThenFixedWithPhantomPart/", this::doTest);
        }

        @TestMetadata("compilationErrorThenFixedWithPhantomPart2")
        public void testCompilationErrorThenFixedWithPhantomPart2() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/compilationErrorThenFixedWithPhantomPart2/", this::doTest);
        }

        @TestMetadata("compilationErrorThenFixedWithPhantomPart3")
        public void testCompilationErrorThenFixedWithPhantomPart3() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/compilationErrorThenFixedWithPhantomPart3/", this::doTest);
        }

        @TestMetadata("constantRemoved")
        public void testConstantRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/constantRemoved/", this::doTest);
        }

        @TestMetadata("constantValueChanged")
        public void testConstantValueChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/constantValueChanged/", this::doTest);
        }

        @TestMetadata("constantsUnchanged")
        public void testConstantsUnchanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/constantsUnchanged/", this::doTest);
        }

        @TestMetadata("defaultArgumentInConstructorAdded")
        public void testDefaultArgumentInConstructorAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/defaultArgumentInConstructorAdded/", this::doTest);
        }

        @TestMetadata("defaultArgumentInConstructorRemoved")
        public void testDefaultArgumentInConstructorRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/defaultArgumentInConstructorRemoved/", this::doTest);
        }

        @TestMetadata("defaultValueAdded")
        public void testDefaultValueAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/defaultValueAdded/", this::doTest);
        }

        @TestMetadata("defaultValueChanged")
        public void testDefaultValueChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/defaultValueChanged/", this::doTest);
        }

        @TestMetadata("defaultValueInConstructorChanged")
        public void testDefaultValueInConstructorChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/defaultValueInConstructorChanged/", this::doTest);
        }

        @TestMetadata("defaultValueInConstructorRemoved")
        public void testDefaultValueInConstructorRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/defaultValueInConstructorRemoved/", this::doTest);
        }

        @TestMetadata("defaultValueRemoved1")
        public void testDefaultValueRemoved1() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/defaultValueRemoved1/", this::doTest);
        }

        @TestMetadata("defaultValueRemoved2")
        public void testDefaultValueRemoved2() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/defaultValueRemoved2/", this::doTest);
        }

        @TestMetadata("delegatedPropertyInlineExtensionAccessor")
        public void testDelegatedPropertyInlineExtensionAccessor() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/delegatedPropertyInlineExtensionAccessor/", this::doTest);
        }

        @TestMetadata("delegatedPropertyInlineMethodAccessor")
        public void testDelegatedPropertyInlineMethodAccessor() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/delegatedPropertyInlineMethodAccessor/", this::doTest);
        }

        @TestMetadata("dependencyClassReferenced")
        public void testDependencyClassReferenced() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/dependencyClassReferenced/", this::doTest);
        }

        @TestMetadata("fileWithConstantRemoved")
        public void testFileWithConstantRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/fileWithConstantRemoved/", this::doTest);
        }

        @TestMetadata("fileWithInlineFunctionRemoved")
        public void testFileWithInlineFunctionRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/fileWithInlineFunctionRemoved/", this::doTest);
        }

        @TestMetadata("filesExchangePackages")
        public void testFilesExchangePackages() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/filesExchangePackages/", this::doTest);
        }

        @TestMetadata("funRedeclaration")
        public void testFunRedeclaration() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/funRedeclaration/", this::doTest);
        }

        @TestMetadata("funVsConstructorOverloadConflict")
        public void testFunVsConstructorOverloadConflict() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/funVsConstructorOverloadConflict/", this::doTest);
        }

        @TestMetadata("functionBecameInline")
        public void testFunctionBecameInline() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/functionBecameInline/", this::doTest);
        }

        @TestMetadata("functionReferencingClass")
        public void testFunctionReferencingClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/functionReferencingClass/", this::doTest);
        }

        @TestMetadata("independentClasses")
        public void testIndependentClasses() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/independentClasses/", this::doTest);
        }

        @TestMetadata("inlineFunctionBecomesNonInline")
        public void testInlineFunctionBecomesNonInline() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlineFunctionBecomesNonInline/", this::doTest);
        }

        @TestMetadata("inlineFunctionUsageAdded")
        public void testInlineFunctionUsageAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlineFunctionUsageAdded/", this::doTest);
        }

        @TestMetadata("inlineFunctionsCircularDependency")
        public void testInlineFunctionsCircularDependency() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlineFunctionsCircularDependency/", this::doTest);
        }

        @TestMetadata("inlineFunctionsUnchanged")
        public void testInlineFunctionsUnchanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlineFunctionsUnchanged/", this::doTest);
        }

        @TestMetadata("inlineLinesChanged")
        public void testInlineLinesChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlineLinesChanged/", this::doTest);
        }

        @TestMetadata("inlineModifiedWithUsage")
        public void testInlineModifiedWithUsage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlineModifiedWithUsage/", this::doTest);
        }

        @TestMetadata("inlinePrivateFunctionAdded")
        public void testInlinePrivateFunctionAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlinePrivateFunctionAdded/", this::doTest);
        }

        @TestMetadata("inlinePropertyInClass")
        public void testInlinePropertyInClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlinePropertyInClass/", this::doTest);
        }

        @TestMetadata("inlinePropertyOnTopLevel")
        public void testInlinePropertyOnTopLevel() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlinePropertyOnTopLevel/", this::doTest);
        }

        @TestMetadata("inlineTwoFunctionsOneChanged")
        public void testInlineTwoFunctionsOneChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlineTwoFunctionsOneChanged/", this::doTest);
        }

        @TestMetadata("inlineUsedWhereDeclared")
        public void testInlineUsedWhereDeclared() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/inlineUsedWhereDeclared/", this::doTest);
        }

        @TestMetadata("internalClassChanged")
        public void testInternalClassChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/internalClassChanged/", this::doTest);
        }

        @TestMetadata("internalMemberInClassChanged")
        public void testInternalMemberInClassChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/internalMemberInClassChanged/", this::doTest);
        }

        @TestMetadata("internalTypealias")
        public void testInternalTypealias() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/internalTypealias/", this::doTest);
        }

        @TestMetadata("internalTypealiasConstructor")
        public void testInternalTypealiasConstructor() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/internalTypealiasConstructor/", this::doTest);
        }

        @TestMetadata("internalTypealiasObject")
        public void testInternalTypealiasObject() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/internalTypealiasObject/", this::doTest);
        }

        @TestMetadata("localClassChanged")
        public void testLocalClassChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/localClassChanged/", this::doTest);
        }

        @TestMetadata("moveClass")
        public void testMoveClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/moveClass/", this::doTest);
        }

        @TestMetadata("moveFileWithChangingPackage")
        public void testMoveFileWithChangingPackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/moveFileWithChangingPackage/", this::doTest);
        }

        @TestMetadata("moveFileWithoutChangingPackage")
        public void testMoveFileWithoutChangingPackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/moveFileWithoutChangingPackage/", this::doTest);
        }

        @TestMetadata("multiplePackagesModified")
        public void testMultiplePackagesModified() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/multiplePackagesModified/", this::doTest);
        }

        @TestMetadata("objectConstantChanged")
        public void testObjectConstantChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/objectConstantChanged/", this::doTest);
        }

        @TestMetadata("ourClassReferenced")
        public void testOurClassReferenced() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/ourClassReferenced/", this::doTest);
        }

        @TestMetadata("packageConstantChanged")
        public void testPackageConstantChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageConstantChanged/", this::doTest);
        }

        @TestMetadata("packageFileAdded")
        public void testPackageFileAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageFileAdded/", this::doTest);
        }

        @TestMetadata("packageFileChangedPackage")
        public void testPackageFileChangedPackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageFileChangedPackage/", this::doTest);
        }

        @TestMetadata("packageFileChangedThenOtherRemoved")
        public void testPackageFileChangedThenOtherRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageFileChangedThenOtherRemoved/", this::doTest);
        }

        @TestMetadata("packageFileRemoved")
        public void testPackageFileRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageFileRemoved/", this::doTest);
        }

        @TestMetadata("packageFilesChangedInTurn")
        public void testPackageFilesChangedInTurn() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageFilesChangedInTurn/", this::doTest);
        }

        @TestMetadata("packageInlineFunctionAccessingField")
        public void testPackageInlineFunctionAccessingField() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageInlineFunctionAccessingField/", this::doTest);
        }

        @TestMetadata("packageInlineFunctionFromOurPackage")
        public void testPackageInlineFunctionFromOurPackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageInlineFunctionFromOurPackage/", this::doTest);
        }

        @TestMetadata("packagePrivateOnlyChanged")
        public void testPackagePrivateOnlyChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packagePrivateOnlyChanged/", this::doTest);
        }

        @TestMetadata("packageRecreated")
        public void testPackageRecreated() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageRecreated/", this::doTest);
        }

        @TestMetadata("packageRecreatedAfterRenaming")
        public void testPackageRecreatedAfterRenaming() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageRecreatedAfterRenaming/", this::doTest);
        }

        @TestMetadata("packageRemoved")
        public void testPackageRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/packageRemoved/", this::doTest);
        }

        @TestMetadata("privateConstantsChanged")
        public void testPrivateConstantsChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateConstantsChanged/", this::doTest);
        }

        @TestMetadata("privateMethodAdded")
        public void testPrivateMethodAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateMethodAdded/", this::doTest);
        }

        @TestMetadata("privateMethodDeleted")
        public void testPrivateMethodDeleted() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateMethodDeleted/", this::doTest);
        }

        @TestMetadata("privateMethodSignatureChanged")
        public void testPrivateMethodSignatureChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateMethodSignatureChanged/", this::doTest);
        }

        @TestMetadata("privateSecondaryConstructorAdded")
        public void testPrivateSecondaryConstructorAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateSecondaryConstructorAdded/", this::doTest);
        }

        @TestMetadata("privateSecondaryConstructorDeleted")
        public void testPrivateSecondaryConstructorDeleted() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateSecondaryConstructorDeleted/", this::doTest);
        }

        @TestMetadata("privateValAccessorChanged")
        public void testPrivateValAccessorChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateValAccessorChanged/", this::doTest);
        }

        @TestMetadata("privateValAdded")
        public void testPrivateValAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateValAdded/", this::doTest);
        }

        @TestMetadata("privateValDeleted")
        public void testPrivateValDeleted() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateValDeleted/", this::doTest);
        }

        @TestMetadata("privateValSignatureChanged")
        public void testPrivateValSignatureChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateValSignatureChanged/", this::doTest);
        }

        @TestMetadata("privateVarAdded")
        public void testPrivateVarAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateVarAdded/", this::doTest);
        }

        @TestMetadata("privateVarDeleted")
        public void testPrivateVarDeleted() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateVarDeleted/", this::doTest);
        }

        @TestMetadata("privateVarSignatureChanged")
        public void testPrivateVarSignatureChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/privateVarSignatureChanged/", this::doTest);
        }

        @TestMetadata("propertyRedeclaration")
        public void testPropertyRedeclaration() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/propertyRedeclaration/", this::doTest);
        }

        @TestMetadata("publicPropertyWithPrivateSetter")
        public void testPublicPropertyWithPrivateSetter() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/publicPropertyWithPrivateSetter/", this::doTest);
        }

        @TestMetadata("removeAndRestoreCompanion")
        public void testRemoveAndRestoreCompanion() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/removeAndRestoreCompanion/", this::doTest);
        }

        @TestMetadata("removeAndRestoreCompanionWithImplicitUsages")
        public void testRemoveAndRestoreCompanionWithImplicitUsages() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/removeAndRestoreCompanionWithImplicitUsages/", this::doTest);
        }

        @TestMetadata("removeClass")
        public void testRemoveClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/removeClass/", this::doTest);
        }

        @TestMetadata("removeClassInDefaultPackage")
        public void testRemoveClassInDefaultPackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/removeClassInDefaultPackage/", this::doTest);
        }

        @TestMetadata("removeFileWithFunctionOverload")
        public void testRemoveFileWithFunctionOverload() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/removeFileWithFunctionOverload/", this::doTest);
        }

        @TestMetadata("removeMemberTypeAlias")
        public void testRemoveMemberTypeAlias() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/removeMemberTypeAlias/", this::doTest);
        }

        @TestMetadata("removeTopLevelTypeAlias")
        public void testRemoveTopLevelTypeAlias() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/removeTopLevelTypeAlias/", this::doTest);
        }

        @TestMetadata("removeUnusedFile")
        public void testRemoveUnusedFile() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/removeUnusedFile/", this::doTest);
        }

        @TestMetadata("renameClass")
        public void testRenameClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/renameClass/", this::doTest);
        }

        @TestMetadata("renameFileWithFunctionOverload")
        public void testRenameFileWithFunctionOverload() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/renameFileWithFunctionOverload/", this::doTest);
        }

        @TestMetadata("returnTypeChanged")
        public void testReturnTypeChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/returnTypeChanged/", this::doTest);
        }

        @TestMetadata("simpleClassDependency")
        public void testSimpleClassDependency() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/simpleClassDependency/", this::doTest);
        }

        @TestMetadata("soleFileChangesPackage")
        public void testSoleFileChangesPackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/soleFileChangesPackage/", this::doTest);
        }

        @TestMetadata("subpackage")
        public void testSubpackage() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/subpackage/", this::doTest);
        }

        @TestMetadata("suspendWithStateMachine")
        public void testSuspendWithStateMachine() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/suspendWithStateMachine/", this::doTest);
        }

        @TestMetadata("topLevelFunctionSameSignature")
        public void testTopLevelFunctionSameSignature() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/topLevelFunctionSameSignature/", this::doTest);
        }

        @TestMetadata("topLevelMembersInTwoFiles")
        public void testTopLevelMembersInTwoFiles() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/topLevelMembersInTwoFiles/", this::doTest);
        }

        @TestMetadata("topLevelPrivateValUsageAdded")
        public void testTopLevelPrivateValUsageAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/topLevelPrivateValUsageAdded/", this::doTest);
        }

        @TestMetadata("traitClassObjectConstantChanged")
        public void testTraitClassObjectConstantChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/traitClassObjectConstantChanged/", this::doTest);
        }

        @TestMetadata("valAddCustomAccessor")
        public void testValAddCustomAccessor() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/valAddCustomAccessor/", this::doTest);
        }

        @TestMetadata("valRemoveCustomAccessor")
        public void testValRemoveCustomAccessor() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/pureKotlin/valRemoveCustomAccessor/", this::doTest);
        }
    }

    @TestMetadata("jps-plugin/testData/incremental/classHierarchyAffected")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassHierarchyAffected extends AbstractIncrementalJsCompilerRunnerTest {
        public void testAllFilesPresentInClassHierarchyAffected() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/incremental/classHierarchyAffected"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
        }

        @TestMetadata("annotationFlagRemoved")
        public void testAnnotationFlagRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/annotationFlagRemoved/", this::doTest);
        }

        @TestMetadata("annotationListChanged")
        public void testAnnotationListChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/annotationListChanged/", this::doTest);
        }

        @TestMetadata("bridgeGenerated")
        public void testBridgeGenerated() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/bridgeGenerated/", this::doTest);
        }

        @TestMetadata("classBecameFinal")
        public void testClassBecameFinal() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/classBecameFinal/", this::doTest);
        }

        @TestMetadata("classBecameInterface")
        public void testClassBecameInterface() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/classBecameInterface/", this::doTest);
        }

        @TestMetadata("classBecamePrivate")
        public void testClassBecamePrivate() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/classBecamePrivate/", this::doTest);
        }

        @TestMetadata("classMovedIntoOtherClass")
        public void testClassMovedIntoOtherClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/classMovedIntoOtherClass/", this::doTest);
        }

        @TestMetadata("classRemoved")
        public void testClassRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/classRemoved/", this::doTest);
        }

        @TestMetadata("classRemovedAndRestored")
        public void testClassRemovedAndRestored() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/classRemovedAndRestored/", this::doTest);
        }

        @TestMetadata("companionObjectInheritedMemberChanged")
        public void testCompanionObjectInheritedMemberChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/companionObjectInheritedMemberChanged/", this::doTest);
        }

        @TestMetadata("companionObjectMemberChanged")
        public void testCompanionObjectMemberChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/companionObjectMemberChanged/", this::doTest);
        }

        @TestMetadata("companionObjectNameChanged")
        public void testCompanionObjectNameChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/companionObjectNameChanged/", this::doTest);
        }

        @TestMetadata("companionObjectToSimpleObject")
        public void testCompanionObjectToSimpleObject() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/companionObjectToSimpleObject/", this::doTest);
        }

        @TestMetadata("constructorVisibilityChanged")
        public void testConstructorVisibilityChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/constructorVisibilityChanged/", this::doTest);
        }

        @TestMetadata("enumEntryAdded")
        public void testEnumEntryAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/enumEntryAdded/", this::doTest);
        }

        @TestMetadata("enumEntryRemoved")
        public void testEnumEntryRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/enumEntryRemoved/", this::doTest);
        }

        @TestMetadata("enumMemberChanged")
        public void testEnumMemberChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/enumMemberChanged/", this::doTest);
        }

        @TestMetadata("flagsAndMemberInDifferentClassesChanged")
        public void testFlagsAndMemberInDifferentClassesChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/flagsAndMemberInDifferentClassesChanged/", this::doTest);
        }

        @TestMetadata("flagsAndMemberInSameClassChanged")
        public void testFlagsAndMemberInSameClassChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/flagsAndMemberInSameClassChanged/", this::doTest);
        }

        @TestMetadata("implcitUpcast")
        public void testImplcitUpcast() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/implcitUpcast/", this::doTest);
        }

        @TestMetadata("inferredTypeArgumentChanged")
        public void testInferredTypeArgumentChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/inferredTypeArgumentChanged/", this::doTest);
        }

        @TestMetadata("inferredTypeChanged")
        public void testInferredTypeChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/inferredTypeChanged/", this::doTest);
        }

        @TestMetadata("lambdaParameterAffected")
        public void testLambdaParameterAffected() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/lambdaParameterAffected/", this::doTest);
        }

        @TestMetadata("methodAdded")
        public void testMethodAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/methodAdded/", this::doTest);
        }

        @TestMetadata("methodAnnotationAdded")
        public void testMethodAnnotationAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/methodAnnotationAdded/", this::doTest);
        }

        @TestMetadata("methodNullabilityChanged")
        public void testMethodNullabilityChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/methodNullabilityChanged/", this::doTest);
        }

        @TestMetadata("methodParameterWithDefaultValueAdded")
        public void testMethodParameterWithDefaultValueAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/methodParameterWithDefaultValueAdded/", this::doTest);
        }

        @TestMetadata("methodRemoved")
        public void testMethodRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/methodRemoved/", this::doTest);
        }

        @TestMetadata("overrideExplicit")
        public void testOverrideExplicit() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/overrideExplicit/", this::doTest);
        }

        @TestMetadata("overrideImplicit")
        public void testOverrideImplicit() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/overrideImplicit/", this::doTest);
        }

        @TestMetadata("propertyNullabilityChanged")
        public void testPropertyNullabilityChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/propertyNullabilityChanged/", this::doTest);
        }

        @TestMetadata("sealedClassImplAdded")
        public void testSealedClassImplAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/sealedClassImplAdded/", this::doTest);
        }

        @TestMetadata("sealedClassIndirectImplAdded")
        public void testSealedClassIndirectImplAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/sealedClassIndirectImplAdded/", this::doTest);
        }

        @TestMetadata("sealedClassNestedImplAdded")
        public void testSealedClassNestedImplAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/sealedClassNestedImplAdded/", this::doTest);
        }

        @TestMetadata("secondaryConstructorAdded")
        public void testSecondaryConstructorAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/secondaryConstructorAdded/", this::doTest);
        }

        @TestMetadata("starProjectionUpperBoundChanged")
        public void testStarProjectionUpperBoundChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/starProjectionUpperBoundChanged/", this::doTest);
        }

        @TestMetadata("supertypesListChanged")
        public void testSupertypesListChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/supertypesListChanged/", this::doTest);
        }

        @TestMetadata("typeParameterListChanged")
        public void testTypeParameterListChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/typeParameterListChanged/", this::doTest);
        }

        @TestMetadata("varianceChanged")
        public void testVarianceChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/incremental/classHierarchyAffected/varianceChanged/", this::doTest);
        }
    }

    @TestMetadata("jps-plugin/testData/incremental/js")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Js extends AbstractIncrementalJsCompilerRunnerTest {
        public void testAllFilesPresentInJs() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/incremental/js"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("jps-plugin/testData/incremental/js/friendsModuleDisabled")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FriendsModuleDisabled extends AbstractIncrementalJsCompilerRunnerTest {
            public void testAllFilesPresentInFriendsModuleDisabled() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/incremental/js/friendsModuleDisabled"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("internalInlineFunctionIsChanged")
            public void testInternalInlineFunctionIsChanged() throws Exception {
                KotlinTestUtils.runTest("jps-plugin/testData/incremental/js/friendsModuleDisabled/internalInlineFunctionIsChanged/", this::doTest);
            }
        }
    }
}
