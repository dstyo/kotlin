/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.maven;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/idea-maven/testData/maven-inspections")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class KotlinMavenInspectionTestGenerated extends AbstractKotlinMavenInspectionTest {
    public void testAllFilesPresentInMaven_inspections() throws Exception {
        KotlinTestUtils.assertAllTestsPresentInSingleGeneratedClass(this.getClass(), new File("idea/idea-maven/testData/maven-inspections"), Pattern.compile("^([\\w\\-]+).xml$"), TargetBackend.ANY);
    }

    @TestMetadata("bothCompileAndTestCompileInTheSameExecution.xml")
    public void testBothCompileAndTestCompileInTheSameExecution() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/bothCompileAndTestCompileInTheSameExecution.xml", this::doTest);
    }

    @TestMetadata("dependencyWithNoExecution.xml")
    public void testDependencyWithNoExecution() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/dependencyWithNoExecution.xml", this::doTest);
    }

    @TestMetadata("deprecatedJre.xml")
    public void testDeprecatedJre() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/deprecatedJre.xml", this::doTest);
    }

    @TestMetadata("deprecatedJreWithDependencyManagement.xml")
    public void testDeprecatedJreWithDependencyManagement() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/deprecatedJreWithDependencyManagement.xml", this::doTest);
    }

    @TestMetadata("ideAndMavenVersions.xml")
    public void testIdeAndMavenVersions() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/ideAndMavenVersions.xml", this::doTest);
    }

    @TestMetadata("ideAndMavenVersionsSuppression.xml")
    public void testIdeAndMavenVersionsSuppression() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/ideAndMavenVersionsSuppression.xml", this::doTest);
    }

    @TestMetadata("kotlinTestWithJunit.xml")
    public void testKotlinTestWithJunit() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/kotlinTestWithJunit.xml", this::doTest);
    }

    @TestMetadata("missingDependencies.xml")
    public void testMissingDependencies() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/missingDependencies.xml", this::doTest);
    }

    @TestMetadata("noExecutions.xml")
    public void testNoExecutions() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/noExecutions.xml", this::doTest);
    }

    @TestMetadata("oldVersionWithJre.xml")
    public void testOldVersionWithJre() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/oldVersionWithJre.xml", this::doTest);
    }

    @TestMetadata("sameVersionPluginLibrary.xml")
    public void testSameVersionPluginLibrary() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/sameVersionPluginLibrary.xml", this::doTest);
    }

    @TestMetadata("sameVersionPluginLibrarySuppression.xml")
    public void testSameVersionPluginLibrarySuppression() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/sameVersionPluginLibrarySuppression.xml", this::doTest);
    }

    @TestMetadata("wrongJsExecution.xml")
    public void testWrongJsExecution() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/wrongJsExecution.xml", this::doTest);
    }

    @TestMetadata("wrongPhaseExecution.xml")
    public void testWrongPhaseExecution() throws Exception {
        KotlinTestUtils.runTest("idea/idea-maven/testData/maven-inspections/wrongPhaseExecution.xml", this::doTest);
    }
}
