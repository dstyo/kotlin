/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.completion.test.handlers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/idea-completion/testData/handlers/charFilter")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class CompletionCharFilterTestGenerated extends AbstractCompletionCharFilterTest {
    public void testAllFilesPresentInCharFilter() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/idea-completion/testData/handlers/charFilter"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("Colon.kt")
    public void testColon() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Colon.kt", this::doTest);
    }

    @TestMetadata("Comma1.kt")
    public void testComma1() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Comma1.kt", this::doTest);
    }

    @TestMetadata("Comma2.kt")
    public void testComma2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Comma2.kt", this::doTest);
    }

    @TestMetadata("Comma3.kt")
    public void testComma3() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Comma3.kt", this::doTest);
    }

    @TestMetadata("Comma4.kt")
    public void testComma4() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Comma4.kt", this::doTest);
    }

    @TestMetadata("Comma5.kt")
    public void testComma5() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Comma5.kt", this::doTest);
    }

    @TestMetadata("CommaForFunction1.kt")
    public void testCommaForFunction1() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/CommaForFunction1.kt", this::doTest);
    }

    @TestMetadata("CommaForFunction2.kt")
    public void testCommaForFunction2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/CommaForFunction2.kt", this::doTest);
    }

    @TestMetadata("ConstructorWithLambdaArg1.kt")
    public void testConstructorWithLambdaArg1() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/ConstructorWithLambdaArg1.kt", this::doTest);
    }

    @TestMetadata("ConstructorWithLambdaArg2.kt")
    public void testConstructorWithLambdaArg2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/ConstructorWithLambdaArg2.kt", this::doTest);
    }

    @TestMetadata("Dot.kt")
    public void testDot() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Dot.kt", this::doTest);
    }

    @TestMetadata("DotAfterFun1.kt")
    public void testDotAfterFun1() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/DotAfterFun1.kt", this::doTest);
    }

    @TestMetadata("DotAfterFun2.kt")
    public void testDotAfterFun2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/DotAfterFun2.kt", this::doTest);
    }

    @TestMetadata("Eq1.kt")
    public void testEq1() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Eq1.kt", this::doTest);
    }

    @TestMetadata("Eq2.kt")
    public void testEq2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Eq2.kt", this::doTest);
    }

    @TestMetadata("FunctionLiteralParameter1.kt")
    public void testFunctionLiteralParameter1() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/FunctionLiteralParameter1.kt", this::doTest);
    }

    @TestMetadata("FunctionLiteralParameter2.kt")
    public void testFunctionLiteralParameter2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/FunctionLiteralParameter2.kt", this::doTest);
    }

    @TestMetadata("FunctionLiteralParameter3.kt")
    public void testFunctionLiteralParameter3() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/FunctionLiteralParameter3.kt", this::doTest);
    }

    @TestMetadata("FunctionWithLambdaArg1.kt")
    public void testFunctionWithLambdaArg1() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/FunctionWithLambdaArg1.kt", this::doTest);
    }

    @TestMetadata("FunctionWithLambdaArg2.kt")
    public void testFunctionWithLambdaArg2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/FunctionWithLambdaArg2.kt", this::doTest);
    }

    @TestMetadata("InfixCallAndSpace.kt")
    public void testInfixCallAndSpace() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/InfixCallAndSpace.kt", this::doTest);
    }

    @TestMetadata("KeywordAndSpace.kt")
    public void testKeywordAndSpace() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/KeywordAndSpace.kt", this::doTest);
    }

    @TestMetadata("LParenth.kt")
    public void testLParenth() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/LParenth.kt", this::doTest);
    }

    @TestMetadata("NamedParameter1.kt")
    public void testNamedParameter1() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/NamedParameter1.kt", this::doTest);
    }

    @TestMetadata("NamedParameter2.kt")
    public void testNamedParameter2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/NamedParameter2.kt", this::doTest);
    }

    @TestMetadata("QualifiedThis.kt")
    public void testQualifiedThis() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/QualifiedThis.kt", this::doTest);
    }

    @TestMetadata("RangeTyping.kt")
    public void testRangeTyping() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/RangeTyping.kt", this::doTest);
    }

    @TestMetadata("Space.kt")
    public void testSpace() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/Space.kt", this::doTest);
    }

    @TestMetadata("VariableName.kt")
    public void testVariableName() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/VariableName.kt", this::doTest);
    }

    @TestMetadata("VariableName2.kt")
    public void testVariableName2() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/VariableName2.kt", this::doTest);
    }

    @TestMetadata("VariableName3.kt")
    public void testVariableName3() throws Exception {
        KotlinTestUtils.runTest("idea/idea-completion/testData/handlers/charFilter/VariableName3.kt", this::doTest);
    }
}
