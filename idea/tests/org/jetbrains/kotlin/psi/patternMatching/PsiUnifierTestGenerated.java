/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.psi.patternMatching;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/unifier")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class PsiUnifierTestGenerated extends AbstractPsiUnifierTest {
    public void testAllFilesPresentInUnifier() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("idea/testData/unifier/equivalence")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Equivalence extends AbstractPsiUnifierTest {
        public void testAllFilesPresentInEquivalence() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/unifier/equivalence/controlStructures")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ControlStructures extends AbstractPsiUnifierTest {
            public void testAllFilesPresentInControlStructures() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/controlStructures"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("break.kt")
            public void testBreak() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/break.kt", this::doTest);
            }

            @TestMetadata("continue.kt")
            public void testContinue() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/continue.kt", this::doTest);
            }

            @TestMetadata("doWhileRuntime.kt")
            public void testDoWhileRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/doWhileRuntime.kt", this::doTest);
            }

            @TestMetadata("forRuntime.kt")
            public void testForRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/forRuntime.kt", this::doTest);
            }

            @TestMetadata("ifElseRuntime.kt")
            public void testIfElseRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/ifElseRuntime.kt", this::doTest);
            }

            @TestMetadata("ifRuntime.kt")
            public void testIfRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/ifRuntime.kt", this::doTest);
            }

            @TestMetadata("labeledReturn.kt")
            public void testLabeledReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/labeledReturn.kt", this::doTest);
            }

            @TestMetadata("throwRuntime.kt")
            public void testThrowRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/throwRuntime.kt", this::doTest);
            }

            @TestMetadata("unitReturn.kt")
            public void testUnitReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/unitReturn.kt", this::doTest);
            }

            @TestMetadata("valuedReturn.kt")
            public void testValuedReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/valuedReturn.kt", this::doTest);
            }

            @TestMetadata("whenWithSubjectRuntime.kt")
            public void testWhenWithSubjectRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/whenWithSubjectRuntime.kt", this::doTest);
            }

            @TestMetadata("whenWithoutSubjectRuntime.kt")
            public void testWhenWithoutSubjectRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/whenWithoutSubjectRuntime.kt", this::doTest);
            }

            @TestMetadata("whileRuntime.kt")
            public void testWhileRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/whileRuntime.kt", this::doTest);
            }

            @TestMetadata("idea/testData/unifier/equivalence/controlStructures/blocks")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Blocks extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInBlocks() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/controlStructures/blocks"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("anonymousObjectsRuntime.kt")
                public void testAnonymousObjectsRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/blocks/anonymousObjectsRuntime.kt", this::doTest);
                }

                @TestMetadata("localFunctionsRuntime.kt")
                public void testLocalFunctionsRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/blocks/localFunctionsRuntime.kt", this::doTest);
                }

                @TestMetadata("localVarsRuntime.kt")
                public void testLocalVarsRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/controlStructures/blocks/localVarsRuntime.kt", this::doTest);
                }
            }
        }

        @TestMetadata("idea/testData/unifier/equivalence/declarations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Declarations extends AbstractPsiUnifierTest {
            public void testAllFilesPresentInDeclarations() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/declarations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("idea/testData/unifier/equivalence/declarations/classesAndObjects")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ClassesAndObjects extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInClassesAndObjects() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/declarations/classesAndObjects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("anonymousObjectBody.kt")
                public void testAnonymousObjectBody() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/classesAndObjects/anonymousObjectBody.kt", this::doTest);
                }

                @TestMetadata("delegation.kt")
                public void testDelegation() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/classesAndObjects/delegation.kt", this::doTest);
                }

                @TestMetadata("emptyBody.kt")
                public void testEmptyBody() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/classesAndObjects/emptyBody.kt", this::doTest);
                }

                @TestMetadata("localClassBody.kt")
                public void testLocalClassBody() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/classesAndObjects/localClassBody.kt", this::doTest);
                }

                @TestMetadata("localObjectBody.kt")
                public void testLocalObjectBody() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/classesAndObjects/localObjectBody.kt", this::doTest);
                }

                @TestMetadata("members.kt")
                public void testMembers() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/classesAndObjects/members.kt", this::doTest);
                }
            }

            @TestMetadata("idea/testData/unifier/equivalence/declarations/localCallables")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class LocalCallables extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInLocalCallables() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/declarations/localCallables"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("localExtensionFunctions.kt")
                public void testLocalExtensionFunctions() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/localExtensionFunctions.kt", this::doTest);
                }

                @TestMetadata("localFunctions.kt")
                public void testLocalFunctions() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/localFunctions.kt", this::doTest);
                }

                @TestMetadata("localVariables.kt")
                public void testLocalVariables() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/localVariables.kt", this::doTest);
                }

                @TestMetadata("multiDeclaration.kt")
                public void testMultiDeclaration() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/multiDeclaration.kt", this::doTest);
                }

                @TestMetadata("idea/testData/unifier/equivalence/declarations/localCallables/lambdas")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Lambdas extends AbstractPsiUnifierTest {
                    public void testAllFilesPresentInLambdas() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/declarations/localCallables/lambdas"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("multipleParamsRuntime.kt")
                    public void testMultipleParamsRuntime() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/lambdas/multipleParamsRuntime.kt", this::doTest);
                    }

                    @TestMetadata("noParams.kt")
                    public void testNoParams() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/lambdas/noParams.kt", this::doTest);
                    }

                    @TestMetadata("receiverArgumentsRuntime.kt")
                    public void testReceiverArgumentsRuntime() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/lambdas/receiverArgumentsRuntime.kt", this::doTest);
                    }

                    @TestMetadata("singleParam.kt")
                    public void testSingleParam() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/lambdas/singleParam.kt", this::doTest);
                    }

                    @TestMetadata("unitCoercion.kt")
                    public void testUnitCoercion() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/localCallables/lambdas/unitCoercion.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("idea/testData/unifier/equivalence/declarations/typeParameters")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeParameters extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInTypeParameters() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/declarations/typeParameters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("boundsAndConstraints.kt")
                public void testBoundsAndConstraints() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/declarations/typeParameters/boundsAndConstraints.kt", this::doTest);
                }
            }
        }

        @TestMetadata("idea/testData/unifier/equivalence/expressions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Expressions extends AbstractPsiUnifierTest {
            public void testAllFilesPresentInExpressions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("arrayAccess.kt")
            public void testArrayAccess() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/arrayAccess.kt", this::doTest);
            }

            @TestMetadata("const.kt")
            public void testConst() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/const.kt", this::doTest);
            }

            @TestMetadata("qualifiedName.kt")
            public void testQualifiedName() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/qualifiedName.kt", this::doTest);
            }

            @TestMetadata("simpleNameRuntime.kt")
            public void testSimpleNameRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/simpleNameRuntime.kt", this::doTest);
            }

            @TestMetadata("stringTemplate.kt")
            public void testStringTemplate() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/stringTemplate.kt", this::doTest);
            }

            @TestMetadata("idea/testData/unifier/equivalence/expressions/callableReferences")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CallableReferences extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInCallableReferences() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/callableReferences"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classRefRuntime.kt")
                public void testClassRefRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/callableReferences/classRefRuntime.kt", this::doTest);
                }

                @TestMetadata("expressionReceivers.kt")
                public void testExpressionReceivers() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/callableReferences/expressionReceivers.kt", this::doTest);
                }

                @TestMetadata("functionRefRuntime.kt")
                public void testFunctionRefRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/callableReferences/functionRefRuntime.kt", this::doTest);
                }
            }

            @TestMetadata("idea/testData/unifier/equivalence/expressions/calls")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Calls extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInCalls() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/calls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("callAndCalleeRuntime.kt")
                public void testCallAndCalleeRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/callAndCalleeRuntime.kt", this::doTest);
                }

                @TestMetadata("callTypeArgumentsRuntime.kt")
                public void testCallTypeArgumentsRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/callTypeArgumentsRuntime.kt", this::doTest);
                }

                @TestMetadata("callUnderSmartCast.kt")
                public void testCallUnderSmartCast() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/callUnderSmartCast.kt", this::doTest);
                }

                @TestMetadata("externalArgumentsRuntime.kt")
                public void testExternalArgumentsRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/externalArgumentsRuntime.kt", this::doTest);
                }

                @TestMetadata("extraArguments.kt")
                public void testExtraArguments() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/extraArguments.kt", this::doTest);
                }

                @TestMetadata("implicitReceiverArgument.kt")
                public void testImplicitReceiverArgument() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/implicitReceiverArgument.kt", this::doTest);
                }

                @TestMetadata("implicitThis.kt")
                public void testImplicitThis() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/implicitThis.kt", this::doTest);
                }

                @TestMetadata("safeCall.kt")
                public void testSafeCall() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/safeCall.kt", this::doTest);
                }

                @TestMetadata("unresolved.kt")
                public void testUnresolved() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/unresolved.kt", this::doTest);
                }

                @TestMetadata("varargs.kt")
                public void testVarargs() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/calls/varargs.kt", this::doTest);
                }
            }

            @TestMetadata("idea/testData/unifier/equivalence/expressions/casts")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Casts extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInCasts() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/casts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("as.kt")
                public void testAs() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/casts/as.kt", this::doTest);
                }

                @TestMetadata("is.kt")
                public void testIs() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/casts/is.kt", this::doTest);
                }

                @TestMetadata("safeAs.kt")
                public void testSafeAs() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/casts/safeAs.kt", this::doTest);
                }
            }

            @TestMetadata("idea/testData/unifier/equivalence/expressions/conventions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Conventions extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInConventions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/conventions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("containsRuntime.kt")
                public void testContainsRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/containsRuntime.kt", this::doTest);
                }

                @TestMetadata("equals.kt")
                public void testEquals() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/equals.kt", this::doTest);
                }

                @TestMetadata("getRuntime.kt")
                public void testGetRuntime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/getRuntime.kt", this::doTest);
                }

                @TestMetadata("inc.kt")
                public void testInc() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/inc.kt", this::doTest);
                }

                @TestMetadata("infixCall.kt")
                public void testInfixCall() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/infixCall.kt", this::doTest);
                }

                @TestMetadata("lessThan.kt")
                public void testLessThan() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/lessThan.kt", this::doTest);
                }

                @TestMetadata("notContains.kt")
                public void testNotContains() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/notContains.kt", this::doTest);
                }

                @TestMetadata("notEquals.kt")
                public void testNotEquals() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/notEquals.kt", this::doTest);
                }

                @TestMetadata("plus.kt")
                public void testPlus() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/plus.kt", this::doTest);
                }

                @TestMetadata("unaryMinus.kt")
                public void testUnaryMinus() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/unaryMinus.kt", this::doTest);
                }

                @TestMetadata("idea/testData/unifier/equivalence/expressions/conventions/assignments")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Assignments extends AbstractPsiUnifierTest {
                    public void testAllFilesPresentInAssignments() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/conventions/assignments"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("indexedPlusAssignRuntime.kt")
                    public void testIndexedPlusAssignRuntime() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/assignments/indexedPlusAssignRuntime.kt", this::doTest);
                    }

                    @TestMetadata("plusAndAssign.kt")
                    public void testPlusAndAssign() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/assignments/plusAndAssign.kt", this::doTest);
                    }

                    @TestMetadata("plusAndAssignWithSet.kt")
                    public void testPlusAndAssignWithSet() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/assignments/plusAndAssignWithSet.kt", this::doTest);
                    }

                    @TestMetadata("plusAssign.kt")
                    public void testPlusAssign() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/assignments/plusAssign.kt", this::doTest);
                    }

                    @TestMetadata("setRuntime.kt")
                    public void testSetRuntime() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/assignments/setRuntime.kt", this::doTest);
                    }
                }

                @TestMetadata("idea/testData/unifier/equivalence/expressions/conventions/invoke")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Invoke extends AbstractPsiUnifierTest {
                    public void testAllFilesPresentInInvoke() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/conventions/invoke"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("invokeOnCall.kt")
                    public void testInvokeOnCall() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/invoke/invokeOnCall.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnConst.kt")
                    public void testInvokeOnConst() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/invoke/invokeOnConst.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnQualified.kt")
                    public void testInvokeOnQualified() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/invoke/invokeOnQualified.kt", this::doTest);
                    }

                    @TestMetadata("invokeOnVar.kt")
                    public void testInvokeOnVar() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/conventions/invoke/invokeOnVar.kt", this::doTest);
                    }
                }
            }

            @TestMetadata("idea/testData/unifier/equivalence/expressions/misc")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Misc extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInMisc() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/misc"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("misc1.kt")
                public void testMisc1() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/misc/misc1.kt", this::doTest);
                }

                @TestMetadata("misc2.kt")
                public void testMisc2() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/misc/misc2.kt", this::doTest);
                }

                @TestMetadata("misc3.kt")
                public void testMisc3() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/misc/misc3.kt", this::doTest);
                }
            }

            @TestMetadata("idea/testData/unifier/equivalence/expressions/super")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Super extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInSuper() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/super"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("multipleSuperTypes.kt")
                public void testMultipleSuperTypes() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/super/multipleSuperTypes.kt", this::doTest);
                }

                @TestMetadata("qualifiedByClass1.kt")
                public void testQualifiedByClass1() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/super/qualifiedByClass1.kt", this::doTest);
                }

                @TestMetadata("qualifiedByClass2.kt")
                public void testQualifiedByClass2() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/super/qualifiedByClass2.kt", this::doTest);
                }

                @TestMetadata("qualifiedByClass3.kt")
                public void testQualifiedByClass3() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/super/qualifiedByClass3.kt", this::doTest);
                }
            }

            @TestMetadata("idea/testData/unifier/equivalence/expressions/this")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class This extends AbstractPsiUnifierTest {
                public void testAllFilesPresentInThis() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/expressions/this"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("anonymousObjects.kt")
                public void testAnonymousObjects() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/anonymousObjects.kt", this::doTest);
                }

                @TestMetadata("qualifiedByClass1.kt")
                public void testQualifiedByClass1() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/qualifiedByClass1.kt", this::doTest);
                }

                @TestMetadata("qualifiedByClass2.kt")
                public void testQualifiedByClass2() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/qualifiedByClass2.kt", this::doTest);
                }

                @TestMetadata("qualifiedByClass3.kt")
                public void testQualifiedByClass3() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/qualifiedByClass3.kt", this::doTest);
                }

                @TestMetadata("qualifiedByFunction1.kt")
                public void testQualifiedByFunction1() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/qualifiedByFunction1.kt", this::doTest);
                }

                @TestMetadata("qualifiedByFunction2.kt")
                public void testQualifiedByFunction2() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/qualifiedByFunction2.kt", this::doTest);
                }

                @TestMetadata("qualifiedByFunction3.kt")
                public void testQualifiedByFunction3() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/qualifiedByFunction3.kt", this::doTest);
                }

                @TestMetadata("simpleThis1Runtime.kt")
                public void testSimpleThis1Runtime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/simpleThis1Runtime.kt", this::doTest);
                }

                @TestMetadata("simpleThis2Runtime.kt")
                public void testSimpleThis2Runtime() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/simpleThis2Runtime.kt", this::doTest);
                }

                @TestMetadata("thisAsCallee.kt")
                public void testThisAsCallee() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/unifier/equivalence/expressions/this/thisAsCallee.kt", this::doTest);
                }
            }
        }

        @TestMetadata("idea/testData/unifier/equivalence/types")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Types extends AbstractPsiUnifierTest {
            public void testAllFilesPresentInTypes() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/unifier/equivalence/types"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("function0.kt")
            public void testFunction0() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/types/function0.kt", this::doTest);
            }

            @TestMetadata("function1.kt")
            public void testFunction1() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/types/function1.kt", this::doTest);
            }

            @TestMetadata("function2.kt")
            public void testFunction2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/types/function2.kt", this::doTest);
            }

            @TestMetadata("nonNullable.kt")
            public void testNonNullable() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/types/nonNullable.kt", this::doTest);
            }

            @TestMetadata("nullable.kt")
            public void testNullable() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/types/nullable.kt", this::doTest);
            }

            @TestMetadata("userTypeRuntime.kt")
            public void testUserTypeRuntime() throws Exception {
                KotlinTestUtils.runTest("idea/testData/unifier/equivalence/types/userTypeRuntime.kt", this::doTest);
            }
        }
    }
}
