/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/dataFlowValueRendering")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class DataFlowValueRenderingTestGenerated extends AbstractDataFlowValueRenderingTest {
    public void testAllFilesPresentInDataFlowValueRendering() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/dataFlowValueRendering"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("classProperty.kt")
    public void testClassProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/classProperty.kt", this::doTest);
    }

    @TestMetadata("complexIdentifier.kt")
    public void testComplexIdentifier() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/complexIdentifier.kt", this::doTest);
    }

    @TestMetadata("complexIdentifierWithImplicitReceiver.kt")
    public void testComplexIdentifierWithImplicitReceiver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/complexIdentifierWithImplicitReceiver.kt", this::doTest);
    }

    @TestMetadata("complexIdentifierWithInitiallyNullableReceiver.kt")
    public void testComplexIdentifierWithInitiallyNullableReceiver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/complexIdentifierWithInitiallyNullableReceiver.kt", this::doTest);
    }

    @TestMetadata("complexIdentifierWithReceiver.kt")
    public void testComplexIdentifierWithReceiver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/complexIdentifierWithReceiver.kt", this::doTest);
    }

    @TestMetadata("multipleVariables.kt")
    public void testMultipleVariables() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/multipleVariables.kt", this::doTest);
    }

    @TestMetadata("packageProperty.kt")
    public void testPackageProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/packageProperty.kt", this::doTest);
    }

    @TestMetadata("receivers.kt")
    public void testReceivers() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/receivers.kt", this::doTest);
    }

    @TestMetadata("smartCast.kt")
    public void testSmartCast() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/smartCast.kt", this::doTest);
    }

    @TestMetadata("smartNotNull.kt")
    public void testSmartNotNull() throws Exception {
        KotlinTestUtils.runTest("idea/testData/dataFlowValueRendering/smartNotNull.kt", this::doTest);
    }
}
