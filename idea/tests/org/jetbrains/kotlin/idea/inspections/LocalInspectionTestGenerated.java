/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.inspections;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/inspectionsLocal")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class LocalInspectionTestGenerated extends AbstractLocalInspectionTest {
    public void testAllFilesPresentInInspectionsLocal() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
    }

    @TestMetadata("idea/testData/inspectionsLocal/arrayInDataClass")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ArrayInDataClass extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInArrayInDataClass() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/arrayInDataClass"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("test.kt")
        public void testTest() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/arrayInDataClass/test.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/branched")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Branched extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInBranched() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/branched"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IfThenToSafeAccess extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInIfThenToSafeAccess() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("blockHasMoreThanOneStatement.kt")
            public void testBlockHasMoreThanOneStatement() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/blockHasMoreThanOneStatement.kt", this::doTest);
            }

            @TestMetadata("blockUsesDifferentVar.kt")
            public void testBlockUsesDifferentVar() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/blockUsesDifferentVar.kt", this::doTest);
            }

            @TestMetadata("conditionComparesNullWithNull.kt")
            public void testConditionComparesNullWithNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/conditionComparesNullWithNull.kt", this::doTest);
            }

            @TestMetadata("conditionInvalidBinaryExp.kt")
            public void testConditionInvalidBinaryExp() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/conditionInvalidBinaryExp.kt", this::doTest);
            }

            @TestMetadata("conditionNotBinaryExpr.kt")
            public void testConditionNotBinaryExpr() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/conditionNotBinaryExpr.kt", this::doTest);
            }

            @TestMetadata("doesNotinlineValueIfUsedMoreThanOnce.kt")
            public void testDoesNotinlineValueIfUsedMoreThanOnce() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/doesNotinlineValueIfUsedMoreThanOnce.kt", this::doTest);
            }

            @TestMetadata("doesNotinlineValueOutsideOfScope.kt")
            public void testDoesNotinlineValueOutsideOfScope() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/doesNotinlineValueOutsideOfScope.kt", this::doTest);
            }

            @TestMetadata("emptyCondition.kt")
            public void testEmptyCondition() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/emptyCondition.kt", this::doTest);
            }

            @TestMetadata("emptyElseBlock.kt")
            public void testEmptyElseBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/emptyElseBlock.kt", this::doTest);
            }

            @TestMetadata("emptyThenBlock.kt")
            public void testEmptyThenBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/emptyThenBlock.kt", this::doTest);
            }

            @TestMetadata("ifAndElseBothInBlocks.kt")
            public void testIfAndElseBothInBlocks() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/ifAndElseBothInBlocks.kt", this::doTest);
            }

            @TestMetadata("ifAndElseNotInBlocks.kt")
            public void testIfAndElseNotInBlocks() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/ifAndElseNotInBlocks.kt", this::doTest);
            }

            @TestMetadata("ifAsExpression.kt")
            public void testIfAsExpression() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/ifAsExpression.kt", this::doTest);
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/implicitReceiver.kt", this::doTest);
            }

            @TestMetadata("implicitReceiverInApply.kt")
            public void testImplicitReceiverInApply() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/implicitReceiverInApply.kt", this::doTest);
            }

            @TestMetadata("isCheckSimple.kt")
            public void testIsCheckSimple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/isCheckSimple.kt", this::doTest);
            }

            @TestMetadata("isCheckWithSelectorChain.kt")
            public void testIsCheckWithSelectorChain() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/isCheckWithSelectorChain.kt", this::doTest);
            }

            @TestMetadata("isCondition.kt")
            public void testIsCondition() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/isCondition.kt", this::doTest);
            }

            @TestMetadata("isNotCondition.kt")
            public void testIsNotCondition() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/isNotCondition.kt", this::doTest);
            }

            @TestMetadata("isNotNullable.kt")
            public void testIsNotNullable() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/isNotNullable.kt", this::doTest);
            }

            @TestMetadata("isNullable.kt")
            public void testIsNullable() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/isNullable.kt", this::doTest);
            }

            @TestMetadata("lhsEqualsNull.kt")
            public void testLhsEqualsNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/lhsEqualsNull.kt", this::doTest);
            }

            @TestMetadata("lhsNotEqualsNull.kt")
            public void testLhsNotEqualsNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/lhsNotEqualsNull.kt", this::doTest);
            }

            @TestMetadata("missingNecessaryElseClause.kt")
            public void testMissingNecessaryElseClause() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/missingNecessaryElseClause.kt", this::doTest);
            }

            @TestMetadata("missingNecessaryThenClause.kt")
            public void testMissingNecessaryThenClause() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/missingNecessaryThenClause.kt", this::doTest);
            }

            @TestMetadata("noCondition.kt")
            public void testNoCondition() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/noCondition.kt", this::doTest);
            }

            @TestMetadata("noElseBlock.kt")
            public void testNoElseBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/noElseBlock.kt", this::doTest);
            }

            @TestMetadata("noElseBlockAsExpression.kt")
            public void testNoElseBlockAsExpression() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/noElseBlockAsExpression.kt", this::doTest);
            }

            @TestMetadata("noNullInCondition.kt")
            public void testNoNullInCondition() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/noNullInCondition.kt", this::doTest);
            }

            @TestMetadata("noNullInCondition2.kt")
            public void testNoNullInCondition2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/noNullInCondition2.kt", this::doTest);
            }

            @TestMetadata("noThenBlock.kt")
            public void testNoThenBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/noThenBlock.kt", this::doTest);
            }

            @TestMetadata("notApplicableForFunction.kt")
            public void testNotApplicableForFunction() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/notApplicableForFunction.kt", this::doTest);
            }

            @TestMetadata("notApplicableForLocalVar.kt")
            public void testNotApplicableForLocalVar() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/notApplicableForLocalVar.kt", this::doTest);
            }

            @TestMetadata("nullCheckSimple.kt")
            public void testNullCheckSimple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/nullCheckSimple.kt", this::doTest);
            }

            @TestMetadata("nullCheckWithSelectorCallChain.kt")
            public void testNullCheckWithSelectorCallChain() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/nullCheckWithSelectorCallChain.kt", this::doTest);
            }

            @TestMetadata("otherBlockHasMoreThanOneStatement.kt")
            public void testOtherBlockHasMoreThanOneStatement() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/otherBlockHasMoreThanOneStatement.kt", this::doTest);
            }

            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/property.kt", this::doTest);
            }

            @TestMetadata("propertyNotNull.kt")
            public void testPropertyNotNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/propertyNotNull.kt", this::doTest);
            }

            @TestMetadata("propertyWithProperty.kt")
            public void testPropertyWithProperty() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/propertyWithProperty.kt", this::doTest);
            }

            @TestMetadata("rhsEqualsNull.kt")
            public void testRhsEqualsNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/rhsEqualsNull.kt", this::doTest);
            }

            @TestMetadata("rhsNotEqualsNull.kt")
            public void testRhsNotEqualsNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/rhsNotEqualsNull.kt", this::doTest);
            }

            @TestMetadata("thenAndElseBothNull.kt")
            public void testThenAndElseBothNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/thenAndElseBothNull.kt", this::doTest);
            }

            @TestMetadata("thenAndElseNotNull.kt")
            public void testThenAndElseNotNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/thenAndElseNotNull.kt", this::doTest);
            }

            @TestMetadata("unacceptableEmptyElseBlock.kt")
            public void testUnacceptableEmptyElseBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/unacceptableEmptyElseBlock.kt", this::doTest);
            }

            @TestMetadata("unacceptableEmptyThenBlock.kt")
            public void testUnacceptableEmptyThenBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/unacceptableEmptyThenBlock.kt", this::doTest);
            }

            @TestMetadata("unacceptableNoElseBlock.kt")
            public void testUnacceptableNoElseBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/unacceptableNoElseBlock.kt", this::doTest);
            }

            @TestMetadata("unacceptableNoThenBlock.kt")
            public void testUnacceptableNoThenBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/unacceptableNoThenBlock.kt", this::doTest);
            }

            @TestMetadata("willNotInlineClassProperty.kt")
            public void testWillNotInlineClassProperty() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/ifThenToSafeAccess/willNotInlineClassProperty.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/branched/introduceWhenSubject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IntroduceWhenSubject extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInIntroduceWhenSubject() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/branched/introduceWhenSubject"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("lineBreaksAndComments.kt")
            public void testLineBreaksAndComments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/lineBreaksAndComments.kt", this::doTest);
            }

            @TestMetadata("whenWithEqualityTests.kt")
            public void testWhenWithEqualityTests() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithEqualityTests.kt", this::doTest);
            }

            @TestMetadata("whenWithMultipleConditionTypes.kt")
            public void testWhenWithMultipleConditionTypes() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithMultipleConditionTypes.kt", this::doTest);
            }

            @TestMetadata("whenWithNegativePatterns.kt")
            public void testWhenWithNegativePatterns() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithNegativePatterns.kt", this::doTest);
            }

            @TestMetadata("whenWithNegativeRangeTests.kt")
            public void testWhenWithNegativeRangeTests() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithNegativeRangeTests.kt", this::doTest);
            }

            @TestMetadata("whenWithNondivisibleConditions.kt")
            public void testWhenWithNondivisibleConditions() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithNondivisibleConditions.kt", this::doTest);
            }

            @TestMetadata("whenWithPatterns.kt")
            public void testWhenWithPatterns() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithPatterns.kt", this::doTest);
            }

            @TestMetadata("whenWithRangeTests.kt")
            public void testWhenWithRangeTests() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithRangeTests.kt", this::doTest);
            }

            @TestMetadata("whenWithSubject.kt")
            public void testWhenWithSubject() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithSubject.kt", this::doTest);
            }

            @TestMetadata("whenWithSwappedEqualityTests.kt")
            public void testWhenWithSwappedEqualityTests() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithSwappedEqualityTests.kt", this::doTest);
            }

            @TestMetadata("whenWithUnmatchedCandidateSubjects.kt")
            public void testWhenWithUnmatchedCandidateSubjects() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithUnmatchedCandidateSubjects.kt", this::doTest);
            }
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/canBeVal")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CanBeVal extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInCanBeVal() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/canBeVal"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("lateinitVar.kt")
        public void testLateinitVar() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/canBeVal/lateinitVar.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/cascadeIf")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CascadeIf extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInCascadeIf() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/cascadeIf"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("complex.kt")
        public void testComplex() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/complex.kt", this::doTest);
        }

        @TestMetadata("four.kt")
        public void testFour() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/four.kt", this::doTest);
        }

        @TestMetadata("ifTree.kt")
        public void testIfTree() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/ifTree.kt", this::doTest);
        }

        @TestMetadata("insideOtherIf.kt")
        public void testInsideOtherIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/insideOtherIf.kt", this::doTest);
        }

        @TestMetadata("middleIf.kt")
        public void testMiddleIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/middleIf.kt", this::doTest);
        }

        @TestMetadata("noSecondElse.kt")
        public void testNoSecondElse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/noSecondElse.kt", this::doTest);
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/normal.kt", this::doTest);
        }

        @TestMetadata("oneLiner.kt")
        public void testOneLiner() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/oneLiner.kt", this::doTest);
        }

        @TestMetadata("shortIf.kt")
        public void testShortIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/shortIf.kt", this::doTest);
        }

        @TestMetadata("withAnnotation.kt")
        public void testWithAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/withAnnotation.kt", this::doTest);
        }

        @TestMetadata("withBreak.kt")
        public void testWithBreak() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/cascadeIf/withBreak.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/collections")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Collections extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInCollections() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/collections"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/inspectionsLocal/collections/simplifiableCallChain")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SimplifiableCallChain extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInSimplifiableCallChain() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/collections/simplifiableCallChain"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("filterFirst.kt")
            public void testFilterFirst() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterFirst.kt", this::doTest);
            }

            @TestMetadata("filterFirstFake.kt")
            public void testFilterFirstFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterFirstFake.kt", this::doTest);
            }

            @TestMetadata("filterFirstFakeReference.kt")
            public void testFilterFirstFakeReference() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterFirstFakeReference.kt", this::doTest);
            }

            @TestMetadata("filterFirstOrNullReference.kt")
            public void testFilterFirstOrNullReference() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterFirstOrNullReference.kt", this::doTest);
            }

            @TestMetadata("filterIsEmpty.kt")
            public void testFilterIsEmpty() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterIsEmpty.kt", this::doTest);
            }

            @TestMetadata("filterIsNotEmpty.kt")
            public void testFilterIsNotEmpty() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterIsNotEmpty.kt", this::doTest);
            }

            @TestMetadata("filterLastExplicit.kt")
            public void testFilterLastExplicit() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterLastExplicit.kt", this::doTest);
            }

            @TestMetadata("filterTextIsEmpty.kt")
            public void testFilterTextIsEmpty() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterTextIsEmpty.kt", this::doTest);
            }

            @TestMetadata("filterTextSingleOrNull.kt")
            public void testFilterTextSingleOrNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/filterTextSingleOrNull.kt", this::doTest);
            }

            @TestMetadata("joinTo.kt")
            public void testJoinTo() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinTo.kt", this::doTest);
            }

            @TestMetadata("joinToFake.kt")
            public void testJoinToFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToFake.kt", this::doTest);
            }

            @TestMetadata("joinToFakeWithLambda.kt")
            public void testJoinToFakeWithLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToFakeWithLambda.kt", this::doTest);
            }

            @TestMetadata("joinToForHashMap.kt")
            public void testJoinToForHashMap() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToForHashMap.kt", this::doTest);
            }

            @TestMetadata("joinToForMap.kt")
            public void testJoinToForMap() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToForMap.kt", this::doTest);
            }

            @TestMetadata("joinToString.kt")
            public void testJoinToString() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToString.kt", this::doTest);
            }

            @TestMetadata("joinToStringOnMap.kt")
            public void testJoinToStringOnMap() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToStringOnMap.kt", this::doTest);
            }

            @TestMetadata("joinToStringViaBuilder.kt")
            public void testJoinToStringViaBuilder() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToStringViaBuilder.kt", this::doTest);
            }

            @TestMetadata("joinToStringWithReference.kt")
            public void testJoinToStringWithReference() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToStringWithReference.kt", this::doTest);
            }

            @TestMetadata("joinToStringWithReferenceFake.kt")
            public void testJoinToStringWithReferenceFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/joinToStringWithReferenceFake.kt", this::doTest);
            }

            @TestMetadata("listOfNotNull.kt")
            public void testListOfNotNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/listOfNotNull.kt", this::doTest);
            }

            @TestMetadata("mapNotNull.kt")
            public void testMapNotNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/mapNotNull.kt", this::doTest);
            }

            @TestMetadata("mapWithReturn.kt")
            public void testMapWithReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/simplifiableCallChain/mapWithReturn.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/collections/uselessCallOnCollection")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class UselessCallOnCollection extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInUselessCallOnCollection() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/collections/uselessCallOnCollection"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("FilterIsExactInstance.kt")
            public void testFilterIsExactInstance() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/FilterIsExactInstance.kt", this::doTest);
            }

            @TestMetadata("FilterIsExactInstanceFake.kt")
            public void testFilterIsExactInstanceFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/FilterIsExactInstanceFake.kt", this::doTest);
            }

            @TestMetadata("FilterIsForFlexible.kt")
            public void testFilterIsForFlexible() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/FilterIsForFlexible.kt", this::doTest);
            }

            @TestMetadata("FilterIsSupertypeInstance.kt")
            public void testFilterIsSupertypeInstance() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/FilterIsSupertypeInstance.kt", this::doTest);
            }

            @TestMetadata("FilterIsSupertypeInstanceFake.kt")
            public void testFilterIsSupertypeInstanceFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/FilterIsSupertypeInstanceFake.kt", this::doTest);
            }

            @TestMetadata("FilterNotNull.kt")
            public void testFilterNotNull() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/FilterNotNull.kt", this::doTest);
            }

            @TestMetadata("filterNotNullFake.kt")
            public void testFilterNotNullFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/filterNotNullFake.kt", this::doTest);
            }

            @TestMetadata("MapIndexedNotNullTo.kt")
            public void testMapIndexedNotNullTo() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/MapIndexedNotNullTo.kt", this::doTest);
            }

            @TestMetadata("MapNotNullTo.kt")
            public void testMapNotNullTo() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/MapNotNullTo.kt", this::doTest);
            }

            @TestMetadata("MapNotNullWithLambda.kt")
            public void testMapNotNullWithLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/MapNotNullWithLambda.kt", this::doTest);
            }

            @TestMetadata("MapNotNullWithLambdaFake.kt")
            public void testMapNotNullWithLambdaFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/MapNotNullWithLambdaFake.kt", this::doTest);
            }

            @TestMetadata("MapNotNullWithReference.kt")
            public void testMapNotNullWithReference() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/MapNotNullWithReference.kt", this::doTest);
            }

            @TestMetadata("MapNotNullWithReferenceFake.kt")
            public void testMapNotNullWithReferenceFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnCollection/MapNotNullWithReferenceFake.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class UselessCallOnNotNull extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInUselessCallOnNotNull() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("NotNullType.kt")
            public void testNotNullType() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/NotNullType.kt", this::doTest);
            }

            @TestMetadata("NotNullTypeChain.kt")
            public void testNotNullTypeChain() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/NotNullTypeChain.kt", this::doTest);
            }

            @TestMetadata("NullOrBlankSafe.kt")
            public void testNullOrBlankSafe() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/NullOrBlankSafe.kt", this::doTest);
            }

            @TestMetadata("NullOrEmpty.kt")
            public void testNullOrEmpty() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/NullOrEmpty.kt", this::doTest);
            }

            @TestMetadata("NullOrEmptyFake.kt")
            public void testNullOrEmptyFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/NullOrEmptyFake.kt", this::doTest);
            }

            @TestMetadata("NullOrEmptySafe.kt")
            public void testNullOrEmptySafe() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/NullOrEmptySafe.kt", this::doTest);
            }

            @TestMetadata("OrEmptyFake.kt")
            public void testOrEmptyFake() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/OrEmptyFake.kt", this::doTest);
            }

            @TestMetadata("SafeCall.kt")
            public void testSafeCall() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/SafeCall.kt", this::doTest);
            }

            @TestMetadata("String.kt")
            public void testString() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/collections/uselessCallOnNotNull/String.kt", this::doTest);
            }
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/constantConditionIf")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConstantConditionIf extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInConstantConditionIf() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/constantConditionIf"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("delete.kt")
        public void testDelete() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/delete.kt", this::doTest);
        }

        @TestMetadata("endWithElseIf.kt")
        public void testEndWithElseIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/endWithElseIf.kt", this::doTest);
        }

        @TestMetadata("endWithElseIfNoBraces.kt")
        public void testEndWithElseIfNoBraces() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/endWithElseIfNoBraces.kt", this::doTest);
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/expression.kt", this::doTest);
        }

        @TestMetadata("expressionElseIfBlock.kt")
        public void testExpressionElseIfBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/expressionElseIfBlock.kt", this::doTest);
        }

        @TestMetadata("noStatements.kt")
        public void testNoStatements() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/noStatements.kt", this::doTest);
        }

        @TestMetadata("noStatementsElseIf.kt")
        public void testNoStatementsElseIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/noStatementsElseIf.kt", this::doTest);
        }

        @TestMetadata("simpleBlock.kt")
        public void testSimpleBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/simpleBlock.kt", this::doTest);
        }

        @TestMetadata("simpleFalse.kt")
        public void testSimpleFalse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/simpleFalse.kt", this::doTest);
        }

        @TestMetadata("simpleTrue.kt")
        public void testSimpleTrue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/simpleTrue.kt", this::doTest);
        }

        @TestMetadata("statement.kt")
        public void testStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/statement.kt", this::doTest);
        }

        @TestMetadata("statementElseIf.kt")
        public void testStatementElseIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/constantConditionIf/statementElseIf.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/conventionNameCalls")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConventionNameCalls extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInConventionNameCalls() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/conventionNameCalls"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ReplaceCallWithBinaryOperator extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInReplaceCallWithBinaryOperator() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("divSanityTest.kt")
            public void testDivSanityTest() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/divSanityTest.kt", this::doTest);
            }

            @TestMetadata("equals.kt")
            public void testEquals() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/equals.kt", this::doTest);
            }

            @TestMetadata("equalsCompareTo.kt")
            public void testEqualsCompareTo() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/equalsCompareTo.kt", this::doTest);
            }

            @TestMetadata("equalsExtensionFunction.kt")
            public void testEqualsExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/equalsExtensionFunction.kt", this::doTest);
            }

            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/extensionFunction.kt", this::doTest);
            }

            @TestMetadata("functionLiteralArgument.kt")
            public void testFunctionLiteralArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/functionLiteralArgument.kt", this::doTest);
            }

            @TestMetadata("greater.kt")
            public void testGreater() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/greater.kt", this::doTest);
            }

            @TestMetadata("lessEquals.kt")
            public void testLessEquals() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/lessEquals.kt", this::doTest);
            }

            @TestMetadata("minusSanityTest.kt")
            public void testMinusSanityTest() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/minusSanityTest.kt", this::doTest);
            }

            @TestMetadata("missingDefaultArgument.kt")
            public void testMissingDefaultArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/missingDefaultArgument.kt", this::doTest);
            }

            @TestMetadata("modSanityTest.kt")
            public void testModSanityTest() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/modSanityTest.kt", this::doTest);
            }

            @TestMetadata("multipleArguments.kt")
            public void testMultipleArguments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/multipleArguments.kt", this::doTest);
            }

            @TestMetadata("notEquals.kt")
            public void testNotEquals() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/notEquals.kt", this::doTest);
            }

            @TestMetadata("notEqualsBrackets.kt")
            public void testNotEqualsBrackets() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/notEqualsBrackets.kt", this::doTest);
            }

            @TestMetadata("notEqualsBracketsComplex.kt")
            public void testNotEqualsBracketsComplex() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/notEqualsBracketsComplex.kt", this::doTest);
            }

            @TestMetadata("plusSanityTest.kt")
            public void testPlusSanityTest() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/plusSanityTest.kt", this::doTest);
            }

            @TestMetadata("qualifier.kt")
            public void testQualifier() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/qualifier.kt", this::doTest);
            }

            @TestMetadata("rangeToSanityTest.kt")
            public void testRangeToSanityTest() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/rangeToSanityTest.kt", this::doTest);
            }

            @TestMetadata("remSanityTest.kt")
            public void testRemSanityTest() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/remSanityTest.kt", this::doTest);
            }

            @TestMetadata("safeCompareTo.kt")
            public void testSafeCompareTo() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/safeCompareTo.kt", this::doTest);
            }

            @TestMetadata("super.kt")
            public void testSuper() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/super.kt", this::doTest);
            }

            @TestMetadata("timesSanityTest.kt")
            public void testTimesSanityTest() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/timesSanityTest.kt", this::doTest);
            }

            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/typeArguments.kt", this::doTest);
            }

            @TestMetadata("unacceptableVararg1.kt")
            public void testUnacceptableVararg1() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/unacceptableVararg1.kt", this::doTest);
            }

            @TestMetadata("unacceptableVararg2.kt")
            public void testUnacceptableVararg2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/unacceptableVararg2.kt", this::doTest);
            }

            @TestMetadata("validNamedArgument.kt")
            public void testValidNamedArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceCallWithBinaryOperator/validNamedArgument.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ReplaceGetOrSet extends AbstractLocalInspectionTest {
            @TestMetadata("acceptableVararg.kt")
            public void testAcceptableVararg() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/acceptableVararg.kt", this::doTest);
            }

            public void testAllFilesPresentInReplaceGetOrSet() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("argumentAndFunction.kt")
            public void testArgumentAndFunction() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/argumentAndFunction.kt", this::doTest);
            }

            @TestMetadata("duplicateArguments.kt")
            public void testDuplicateArguments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/duplicateArguments.kt", this::doTest);
            }

            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/extensionFunction.kt", this::doTest);
            }

            @TestMetadata("functionalArgument.kt")
            public void testFunctionalArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/functionalArgument.kt", this::doTest);
            }

            @TestMetadata("invalidArgument.kt")
            public void testInvalidArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/invalidArgument.kt", this::doTest);
            }

            @TestMetadata("missingDefaultArgument.kt")
            public void testMissingDefaultArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/missingDefaultArgument.kt", this::doTest);
            }

            @TestMetadata("multiArgument.kt")
            public void testMultiArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/multiArgument.kt", this::doTest);
            }

            @TestMetadata("noArgument.kt")
            public void testNoArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/noArgument.kt", this::doTest);
            }

            @TestMetadata("notOperator.kt")
            public void testNotOperator() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/notOperator.kt", this::doTest);
            }

            @TestMetadata("qualifier.kt")
            public void testQualifier() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/qualifier.kt", this::doTest);
            }

            @TestMetadata("sanityCheck.kt")
            public void testSanityCheck() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/sanityCheck.kt", this::doTest);
            }

            @TestMetadata("set.kt")
            public void testSet() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/set.kt", this::doTest);
            }

            @TestMetadata("set2.kt")
            public void testSet2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/set2.kt", this::doTest);
            }

            @TestMetadata("setValueUsed.kt")
            public void testSetValueUsed() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setValueUsed.kt", this::doTest);
            }

            @TestMetadata("setWithNoParameters.kt")
            public void testSetWithNoParameters() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setWithNoParameters.kt", this::doTest);
            }

            @TestMetadata("setWithVararg.kt")
            public void testSetWithVararg() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setWithVararg.kt", this::doTest);
            }

            @TestMetadata("singleArgument.kt")
            public void testSingleArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/singleArgument.kt", this::doTest);
            }

            @TestMetadata("staticMethod.kt")
            public void testStaticMethod() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/staticMethod.kt", this::doTest);
            }

            @TestMetadata("super.kt")
            public void testSuper() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/super.kt", this::doTest);
            }

            @TestMetadata("topLevelFun.kt")
            public void testTopLevelFun() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/topLevelFun.kt", this::doTest);
            }

            @TestMetadata("unacceptableVararg.kt")
            public void testUnacceptableVararg() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/unacceptableVararg.kt", this::doTest);
            }

            @TestMetadata("unnamedAndNamed.kt")
            public void testUnnamedAndNamed() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/unnamedAndNamed.kt", this::doTest);
            }
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/convertPairConstructorToToFunction")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConvertPairConstructorToToFunction extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInConvertPairConstructorToToFunction() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/convertPairConstructorToToFunction"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("invalidArgs.kt")
        public void testInvalidArgs() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertPairConstructorToToFunction/invalidArgs.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertPairConstructorToToFunction/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/convertSealedSubClassToObject")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConvertSealedSubClassToObject extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInConvertSealedSubClassToObject() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/convertSealedSubClassToObject"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("convertSubClassWithModifiers.kt")
        public void testConvertSubClassWithModifiers() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithModifiers.kt", this::doTest);
        }

        @TestMetadata("convertSubClassWithParentheses.kt")
        public void testConvertSubClassWithParentheses() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithParentheses.kt", this::doTest);
        }

        @TestMetadata("convertSubClassWithoutParentheses.kt")
        public void testConvertSubClassWithoutParentheses() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithoutParentheses.kt", this::doTest);
        }

        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertSealedSubClassToObject/generic.kt", this::doTest);
        }

        @TestMetadata("nonEmptyConstructor.kt")
        public void testNonEmptyConstructor() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertSealedSubClassToObject/nonEmptyConstructor.kt", this::doTest);
        }

        @TestMetadata("openSubclass.kt")
        public void testOpenSubclass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertSealedSubClassToObject/openSubclass.kt", this::doTest);
        }

        @TestMetadata("withCompanion.kt")
        public void testWithCompanion() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertSealedSubClassToObject/withCompanion.kt", this::doTest);
        }

        @TestMetadata("withInner.kt")
        public void testWithInner() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/convertSealedSubClassToObject/withInner.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/copyWithoutNamedArguments")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CopyWithoutNamedArguments extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInCopyWithoutNamedArguments() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/copyWithoutNamedArguments"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/copyWithoutNamedArguments/base.kt", this::doTest);
        }

        @TestMetadata("notAllNamed.kt")
        public void testNotAllNamed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/copyWithoutNamedArguments/notAllNamed.kt", this::doTest);
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/copyWithoutNamedArguments/this.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DeprecatedCallableAddReplaceWith extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInDeprecatedCallableAddReplaceWith() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("AlreadyWithReplaceWith.kt")
        public void testAlreadyWithReplaceWith() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/AlreadyWithReplaceWith.kt", this::doTest);
        }

        @TestMetadata("CommentInBody.kt")
        public void testCommentInBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/CommentInBody.kt", this::doTest);
        }

        @TestMetadata("DeclarationInside.kt")
        public void testDeclarationInside() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/DeclarationInside.kt", this::doTest);
        }

        @TestMetadata("DeprecationLevelHidden.kt")
        public void testDeprecationLevelHidden() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/DeprecationLevelHidden.kt", this::doTest);
        }

        @TestMetadata("destructuringWithLambdaInScript.kts")
        public void testDestructuringWithLambdaInScript() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/destructuringWithLambdaInScript.kts", this::doTest);
        }

        @TestMetadata("ExceptionInPropertyDestructuringEntry.kt")
        public void testExceptionInPropertyDestructuringEntry() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/ExceptionInPropertyDestructuringEntry.kt", this::doTest);
        }

        @TestMetadata("ExpressionBody.kt")
        public void testExpressionBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/ExpressionBody.kt", this::doTest);
        }

        @TestMetadata("If.kt")
        public void testIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/If.kt", this::doTest);
        }

        @TestMetadata("Imports.kt")
        public void testImports() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/Imports.kt", this::doTest);
        }

        @TestMetadata("justLambdaInScript.kts")
        public void testJustLambdaInScript() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/justLambdaInScript.kts", this::doTest);
        }

        @TestMetadata("NoCompanionObjectImport.kt")
        public void testNoCompanionObjectImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/NoCompanionObjectImport.kt", this::doTest);
        }

        @TestMetadata("NoDefaultImport.kt")
        public void testNoDefaultImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/NoDefaultImport.kt", this::doTest);
        }

        @TestMetadata("NoReturn.kt")
        public void testNoReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/NoReturn.kt", this::doTest);
        }

        @TestMetadata("NotAvailableOnDocComment.kt")
        public void testNotAvailableOnDocComment() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/NotAvailableOnDocComment.kt", this::doTest);
        }

        @TestMetadata("PrivateSymbolUsed.kt")
        public void testPrivateSymbolUsed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/PrivateSymbolUsed.kt", this::doTest);
        }

        @TestMetadata("QualifiedCall.kt")
        public void testQualifiedCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/QualifiedCall.kt", this::doTest);
        }

        @TestMetadata("Return.kt")
        public void testReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/Return.kt", this::doTest);
        }

        @TestMetadata("ReturnInside.kt")
        public void testReturnInside() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/ReturnInside.kt", this::doTest);
        }

        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/Simple.kt", this::doTest);
        }

        @TestMetadata("StringLiteral.kt")
        public void testStringLiteral() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/StringLiteral.kt", this::doTest);
        }

        @TestMetadata("StringTemplate.kt")
        public void testStringTemplate() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/StringTemplate.kt", this::doTest);
        }

        @TestMetadata("TwoStatements.kt")
        public void testTwoStatements() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/TwoStatements.kt", this::doTest);
        }

        @TestMetadata("ValProperty.kt")
        public void testValProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/ValProperty.kt", this::doTest);
        }

        @TestMetadata("ValPropertyWithReturn.kt")
        public void testValPropertyWithReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/deprecatedCallableAddReplaceWith/ValPropertyWithReturn.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/doubleNegation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DoubleNegation extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInDoubleNegation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/doubleNegation"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/doubleNegation/function.kt", this::doTest);
        }

        @TestMetadata("invalid.kt")
        public void testInvalid() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/doubleNegation/invalid.kt", this::doTest);
        }

        @TestMetadata("parenthesized.kt")
        public void testParenthesized() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/doubleNegation/parenthesized.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/doubleNegation/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/emptyRange")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class EmptyRange extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInEmptyRange() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/emptyRange"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/emptyRange/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/explicitThis")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ExplicitThis extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInExplicitThis() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/explicitThis"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("differentReceiverInstance.kt")
        public void testDifferentReceiverInstance() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/differentReceiverInstance.kt", this::doTest);
        }

        @TestMetadata("differentReceiverInstanceExtension.kt")
        public void testDifferentReceiverInstanceExtension() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/differentReceiverInstanceExtension.kt", this::doTest);
        }

        @TestMetadata("differentReceiverType.kt")
        public void testDifferentReceiverType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/differentReceiverType.kt", this::doTest);
        }

        @TestMetadata("differentReceiverTypeExtension.kt")
        public void testDifferentReceiverTypeExtension() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/differentReceiverTypeExtension.kt", this::doTest);
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/extension.kt", this::doTest);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/function.kt", this::doTest);
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/functionReference.kt", this::doTest);
        }

        @TestMetadata("multipleReceivers.kt")
        public void testMultipleReceivers() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/multipleReceivers.kt", this::doTest);
        }

        @TestMetadata("multipleReceiversExtension.kt")
        public void testMultipleReceiversExtension() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/multipleReceiversExtension.kt", this::doTest);
        }

        @TestMetadata("nestedReceivers.kt")
        public void testNestedReceivers() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/nestedReceivers.kt", this::doTest);
        }

        @TestMetadata("nestedReceiversDifferentParameters.kt")
        public void testNestedReceiversDifferentParameters() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/nestedReceiversDifferentParameters.kt", this::doTest);
        }

        @TestMetadata("nestedReceiversExtension.kt")
        public void testNestedReceiversExtension() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/nestedReceiversExtension.kt", this::doTest);
        }

        @TestMetadata("nestedReceiversExtensionDifferentParameters.kt")
        public void testNestedReceiversExtensionDifferentParameters() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/nestedReceiversExtensionDifferentParameters.kt", this::doTest);
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/property.kt", this::doTest);
        }

        @TestMetadata("propertyReference.kt")
        public void testPropertyReference() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/propertyReference.kt", this::doTest);
        }

        @TestMetadata("variableWithSameName.kt")
        public void testVariableWithSameName() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/explicitThis/variableWithSameName.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/ImplicitNullableNothingType")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ImplicitNullableNothingType extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInImplicitNullableNothingType() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/ImplicitNullableNothingType"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("final.kt")
        public void testFinal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/ImplicitNullableNothingType/final.kt", this::doTest);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/ImplicitNullableNothingType/function.kt", this::doTest);
        }

        @TestMetadata("top.kt")
        public void testTop() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/ImplicitNullableNothingType/top.kt", this::doTest);
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/ImplicitNullableNothingType/val.kt", this::doTest);
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/ImplicitNullableNothingType/variable.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/implicitThis")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ImplicitThis extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInImplicitThis() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/implicitThis"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("already.kt")
        public void testAlready() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/already.kt", this::doTest);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/function.kt", this::doTest);
        }

        @TestMetadata("functionPartOfCall.kt")
        public void testFunctionPartOfCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/functionPartOfCall.kt", this::doTest);
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/functionReference.kt", this::doTest);
        }

        @TestMetadata("functionWithReceiver.kt")
        public void testFunctionWithReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/functionWithReceiver.kt", this::doTest);
        }

        @TestMetadata("multipleReceivers.kt")
        public void testMultipleReceivers() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/multipleReceivers.kt", this::doTest);
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/nested.kt", this::doTest);
        }

        @TestMetadata("nestedCall.kt")
        public void testNestedCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/nestedCall.kt", this::doTest);
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/property.kt", this::doTest);
        }

        @TestMetadata("propertyPartOfCall.kt")
        public void testPropertyPartOfCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/propertyPartOfCall.kt", this::doTest);
        }

        @TestMetadata("propertyReference.kt")
        public void testPropertyReference() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/propertyReference.kt", this::doTest);
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/implicitThis/topLevel.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/javaCollectionsStaticMethod")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaCollectionsStaticMethod extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInJavaCollectionsStaticMethod() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/javaCollectionsStaticMethod"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("fill.kt")
        public void testFill() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/fill.kt", this::doTest);
        }

        @TestMetadata("reverse.kt")
        public void testReverse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/reverse.kt", this::doTest);
        }

        @TestMetadata("reverseImmutableList.kt")
        public void testReverseImmutableList() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/reverseImmutableList.kt", this::doTest);
        }

        @TestMetadata("shuffle.kt")
        public void testShuffle() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/shuffle.kt", this::doTest);
        }

        @TestMetadata("shuffleRandom.kt")
        public void testShuffleRandom() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/shuffleRandom.kt", this::doTest);
        }

        @TestMetadata("sort.kt")
        public void testSort() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/sort.kt", this::doTest);
        }

        @TestMetadata("sortArrayList.kt")
        public void testSortArrayList() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/sortArrayList.kt", this::doTest);
        }

        @TestMetadata("sortImmutableList.kt")
        public void testSortImmutableList() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/sortImmutableList.kt", this::doTest);
        }

        @TestMetadata("sortLinkedList.kt")
        public void testSortLinkedList() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/sortLinkedList.kt", this::doTest);
        }

        @TestMetadata("sortVector.kt")
        public void testSortVector() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/sortVector.kt", this::doTest);
        }

        @TestMetadata("sortWith.kt")
        public void testSortWith() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/javaCollectionsStaticMethod/sortWith.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/kdocMissingDocumentation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class KdocMissingDocumentation extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInKdocMissingDocumentation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/kdocMissingDocumentation"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("primaryConstructorProperty.kt")
        public void testPrimaryConstructorProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/kdocMissingDocumentation/primaryConstructorProperty.kt", this::doTest);
        }

        @TestMetadata("primaryConstructorPropertyAsParam.kt")
        public void testPrimaryConstructorPropertyAsParam() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/kdocMissingDocumentation/primaryConstructorPropertyAsParam.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/kdocMissingDocumentation/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/leakingThis")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LeakingThis extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInLeakingThis() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/leakingThis"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("noOpenForInterface.kt")
        public void testNoOpenForInterface() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/leakingThis/noOpenForInterface.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/liftOut")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LiftOut extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInLiftOut() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/liftOut"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/inspectionsLocal/liftOut/ifToAssignment")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IfToAssignment extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInIfToAssignment() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/liftOut/ifToAssignment"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("cascadeIf.kt")
            public void testCascadeIf() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/cascadeIf.kt", this::doTest);
            }

            @TestMetadata("elseIfOnly.kt")
            public void testElseIfOnly() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/elseIfOnly.kt", this::doTest);
            }

            @TestMetadata("ifElseIf.kt")
            public void testIfElseIf() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/ifElseIf.kt", this::doTest);
            }

            @TestMetadata("ifElseIfElse.kt")
            public void testIfElseIfElse() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/ifElseIfElse.kt", this::doTest);
            }

            @TestMetadata("ifElseifElseInconsistent.kt")
            public void testIfElseifElseInconsistent() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/ifElseifElseInconsistent.kt", this::doTest);
            }

            @TestMetadata("innerIfTransformed.kt")
            public void testInnerIfTransformed() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/innerIfTransformed.kt", this::doTest);
            }

            @TestMetadata("multipleAssignments.kt")
            public void testMultipleAssignments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/multipleAssignments.kt", this::doTest);
            }

            @TestMetadata("simpleIf.kt")
            public void testSimpleIf() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIf.kt", this::doTest);
            }

            @TestMetadata("simpleIfWithAugmentedAssignment.kt")
            public void testSimpleIfWithAugmentedAssignment() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithAugmentedAssignment.kt", this::doTest);
            }

            @TestMetadata("simpleIfWithBlocks.kt")
            public void testSimpleIfWithBlocks() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithBlocks.kt", this::doTest);
            }

            @TestMetadata("simpleIfWithShadowedVar.kt")
            public void testSimpleIfWithShadowedVar() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithShadowedVar.kt", this::doTest);
            }

            @TestMetadata("simpleIfWithUnmatchedAssignmentOps.kt")
            public void testSimpleIfWithUnmatchedAssignmentOps() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithUnmatchedAssignmentOps.kt", this::doTest);
            }

            @TestMetadata("simpleIfWithUnmatchedAssignments.kt")
            public void testSimpleIfWithUnmatchedAssignments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithUnmatchedAssignments.kt", this::doTest);
            }

            @TestMetadata("simpleIfWithoutElse.kt")
            public void testSimpleIfWithoutElse() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithoutElse.kt", this::doTest);
            }

            @TestMetadata("simpleIfWithoutTerminatingAssignment.kt")
            public void testSimpleIfWithoutTerminatingAssignment() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithoutTerminatingAssignment.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/liftOut/ifToReturn")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IfToReturn extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInIfToReturn() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/liftOut/ifToReturn"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("cascadeIf.kt")
            public void testCascadeIf() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToReturn/cascadeIf.kt", this::doTest);
            }

            @TestMetadata("ifElseIf.kt")
            public void testIfElseIf() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToReturn/ifElseIf.kt", this::doTest);
            }

            @TestMetadata("ifElseIfElse.kt")
            public void testIfElseIfElse() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToReturn/ifElseIfElse.kt", this::doTest);
            }

            @TestMetadata("ifElseIfElseInconsistent.kt")
            public void testIfElseIfElseInconsistent() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToReturn/ifElseIfElseInconsistent.kt", this::doTest);
            }

            @TestMetadata("ifVeryLong.kt")
            public void testIfVeryLong() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToReturn/ifVeryLong.kt", this::doTest);
            }

            @TestMetadata("innerIfTransformed.kt")
            public void testInnerIfTransformed() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToReturn/innerIfTransformed.kt", this::doTest);
            }

            @TestMetadata("simpleIf.kt")
            public void testSimpleIf() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToReturn/simpleIf.kt", this::doTest);
            }

            @TestMetadata("simpleIfWithBlocks.kt")
            public void testSimpleIfWithBlocks() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/ifToReturn/simpleIfWithBlocks.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/liftOut/tryToAssignment")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TryToAssignment extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInTryToAssignment() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/liftOut/tryToAssignment"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/basic.kt", this::doTest);
            }

            @TestMetadata("block.kt")
            public void testBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/block.kt", this::doTest);
            }

            @TestMetadata("cascade.kt")
            public void testCascade() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/cascade.kt", this::doTest);
            }

            @TestMetadata("finally.kt")
            public void testFinally() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/finally.kt", this::doTest);
            }

            @TestMetadata("finallyWithAssignment.kt")
            public void testFinallyWithAssignment() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/finallyWithAssignment.kt", this::doTest);
            }

            @TestMetadata("finallyWithCascadeAssignment.kt")
            public void testFinallyWithCascadeAssignment() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/finallyWithCascadeAssignment.kt", this::doTest);
            }

            @TestMetadata("finallyWithCascadeUnmatchedAssignment.kt")
            public void testFinallyWithCascadeUnmatchedAssignment() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/finallyWithCascadeUnmatchedAssignment.kt", this::doTest);
            }

            @TestMetadata("finallyWithUnmatchedAssignments.kt")
            public void testFinallyWithUnmatchedAssignments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/finallyWithUnmatchedAssignments.kt", this::doTest);
            }

            @TestMetadata("inner.kt")
            public void testInner() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/inner.kt", this::doTest);
            }

            @TestMetadata("withUnmatchedAssignments.kt")
            public void testWithUnmatchedAssignments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/withUnmatchedAssignments.kt", this::doTest);
            }

            @TestMetadata("withoutTerminatingAssignment.kt")
            public void testWithoutTerminatingAssignment() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToAssignment/withoutTerminatingAssignment.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/liftOut/tryToReturn")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TryToReturn extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInTryToReturn() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/liftOut/tryToReturn"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToReturn/basic.kt", this::doTest);
            }

            @TestMetadata("block.kt")
            public void testBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToReturn/block.kt", this::doTest);
            }

            @TestMetadata("cascade.kt")
            public void testCascade() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToReturn/cascade.kt", this::doTest);
            }

            @TestMetadata("finally.kt")
            public void testFinally() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToReturn/finally.kt", this::doTest);
            }

            @TestMetadata("finallyWithCascadeReturn.kt")
            public void testFinallyWithCascadeReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToReturn/finallyWithCascadeReturn.kt", this::doTest);
            }

            @TestMetadata("finallyWithReturn.kt")
            public void testFinallyWithReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToReturn/finallyWithReturn.kt", this::doTest);
            }

            @TestMetadata("inner.kt")
            public void testInner() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToReturn/inner.kt", this::doTest);
            }

            @TestMetadata("withoutReturn.kt")
            public void testWithoutReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/tryToReturn/withoutReturn.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/liftOut/whenToAssignment")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WhenToAssignment extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInWhenToAssignment() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/liftOut/whenToAssignment"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("cascadeWhen.kt")
            public void testCascadeWhen() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/cascadeWhen.kt", this::doTest);
            }

            @TestMetadata("innerWhenTransformed.kt")
            public void testInnerWhenTransformed() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/innerWhenTransformed.kt", this::doTest);
            }

            @TestMetadata("insideLoop.kt")
            public void testInsideLoop() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/insideLoop.kt", this::doTest);
            }

            @TestMetadata("simpleWhen.kt")
            public void testSimpleWhen() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhen.kt", this::doTest);
            }

            @TestMetadata("simpleWhenWithBlocks.kt")
            public void testSimpleWhenWithBlocks() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhenWithBlocks.kt", this::doTest);
            }

            @TestMetadata("simpleWhenWithShadowedVar.kt")
            public void testSimpleWhenWithShadowedVar() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhenWithShadowedVar.kt", this::doTest);
            }

            @TestMetadata("simpleWhenWithUnmatchedAssignments.kt")
            public void testSimpleWhenWithUnmatchedAssignments() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhenWithUnmatchedAssignments.kt", this::doTest);
            }

            @TestMetadata("simpleWhenWithoutTerminatingAssignment.kt")
            public void testSimpleWhenWithoutTerminatingAssignment() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhenWithoutTerminatingAssignment.kt", this::doTest);
            }

            @TestMetadata("whenHasMissingCase.kt")
            public void testWhenHasMissingCase() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/whenHasMissingCase.kt", this::doTest);
            }

            @TestMetadata("whenHasNoMissingCase.kt")
            public void testWhenHasNoMissingCase() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/whenHasNoMissingCase.kt", this::doTest);
            }

            @TestMetadata("whenHasNoMissingCaseWithElse.kt")
            public void testWhenHasNoMissingCaseWithElse() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToAssignment/whenHasNoMissingCaseWithElse.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/liftOut/whenToReturn")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WhenToReturn extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInWhenToReturn() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/liftOut/whenToReturn"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("cascadeWhen.kt")
            public void testCascadeWhen() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/cascadeWhen.kt", this::doTest);
            }

            @TestMetadata("innerWhenTransformed.kt")
            public void testInnerWhenTransformed() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/innerWhenTransformed.kt", this::doTest);
            }

            @TestMetadata("insideLoop.kt")
            public void testInsideLoop() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/insideLoop.kt", this::doTest);
            }

            @TestMetadata("localReturns.kt")
            public void testLocalReturns() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/localReturns.kt", this::doTest);
            }

            @TestMetadata("otherReturns.kt")
            public void testOtherReturns() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/otherReturns.kt", this::doTest);
            }

            @TestMetadata("simpleWhen.kt")
            public void testSimpleWhen() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/simpleWhen.kt", this::doTest);
            }

            @TestMetadata("simpleWhenWithBlocks.kt")
            public void testSimpleWhenWithBlocks() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/simpleWhenWithBlocks.kt", this::doTest);
            }

            @TestMetadata("whenHasMissingCase.kt")
            public void testWhenHasMissingCase() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/whenHasMissingCase.kt", this::doTest);
            }

            @TestMetadata("whenHasNoMissingCase.kt")
            public void testWhenHasNoMissingCase() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/whenHasNoMissingCase.kt", this::doTest);
            }

            @TestMetadata("whenHasNoMissingCaseWithElse.kt")
            public void testWhenHasNoMissingCaseWithElse() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/whenHasNoMissingCaseWithElse.kt", this::doTest);
            }

            @TestMetadata("whenOneReturn.kt")
            public void testWhenOneReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/whenOneReturn.kt", this::doTest);
            }

            @TestMetadata("whenThrowOnly.kt")
            public void testWhenThrowOnly() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/whenThrowOnly.kt", this::doTest);
            }

            @TestMetadata("whenWithLambda.kt")
            public void testWhenWithLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/liftOut/whenToReturn/whenWithLambda.kt", this::doTest);
            }
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/mayBeConstant")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MayBeConstant extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInMayBeConstant() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/mayBeConstant"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("array.kt")
        public void testArray() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/array.kt", this::doTest);
        }

        @TestMetadata("cascadeConst.kt")
        public void testCascadeConst() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/cascadeConst.kt", this::doTest);
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/companion.kt", this::doTest);
        }

        @TestMetadata("const.kt")
        public void testConst() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/const.kt", this::doTest);
        }

        @TestMetadata("constInExpr.kt")
        public void testConstInExpr() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/constInExpr.kt", this::doTest);
        }

        @TestMetadata("ecplicitType.kt")
        public void testEcplicitType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/ecplicitType.kt", this::doTest);
        }

        @TestMetadata("ecplicitType2.kt")
        public void testEcplicitType2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/ecplicitType2.kt", this::doTest);
        }

        @TestMetadata("ecplicitType3.kt")
        public void testEcplicitType3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/ecplicitType3.kt", this::doTest);
        }

        @TestMetadata("ecplicitType4.kt")
        public void testEcplicitType4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/ecplicitType4.kt", this::doTest);
        }

        @TestMetadata("ecplicitType5.kt")
        public void testEcplicitType5() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/ecplicitType5.kt", this::doTest);
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/enum.kt", this::doTest);
        }

        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/getter.kt", this::doTest);
        }

        @TestMetadata("getterWithInitializer.kt")
        public void testGetterWithInitializer() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/getterWithInitializer.kt", this::doTest);
        }

        @TestMetadata("inClass.kt")
        public void testInClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/inClass.kt", this::doTest);
        }

        @TestMetadata("nonConstInExpr.kt")
        public void testNonConstInExpr() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/nonConstInExpr.kt", this::doTest);
        }

        @TestMetadata("nonJvmFieldAnnotated.kt")
        public void testNonJvmFieldAnnotated() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/nonJvmFieldAnnotated.kt", this::doTest);
        }

        @TestMetadata("null.kt")
        public void testNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/null.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/object.kt", this::doTest);
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/override.kt", this::doTest);
        }

        @TestMetadata("script.kts")
        public void testScript() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/script.kts", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/simple.kt", this::doTest);
        }

        @TestMetadata("simplest.kt")
        public void testSimplest() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/simplest.kt", this::doTest);
        }

        @TestMetadata("var.kt")
        public void testVar() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/mayBeConstant/var.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/memberVisibilityCanBePrivate")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MemberVisibilityCanBePrivate extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInMemberVisibilityCanBePrivate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/memberVisibilityCanBePrivate"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/memberVisibilityCanBePrivate/annotation.kt", this::doTest);
        }

        @TestMetadata("JvmFieldOnParameter.kt")
        public void testJvmFieldOnParameter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/memberVisibilityCanBePrivate/JvmFieldOnParameter.kt", this::doTest);
        }

        @TestMetadata("JvmFieldOnProperty.kt")
        public void testJvmFieldOnProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/memberVisibilityCanBePrivate/JvmFieldOnProperty.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/migrateDiagnosticSuppression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MigrateDiagnosticSuppression extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInMigrateDiagnosticSuppression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/migrateDiagnosticSuppression"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/migrateDiagnosticSuppression/base.kt", this::doTest);
        }

        @TestMetadata("multiple.kt")
        public void testMultiple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/migrateDiagnosticSuppression/multiple.kt", this::doTest);
        }

        @TestMetadata("new.kt")
        public void testNew() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/migrateDiagnosticSuppression/new.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MoveLambdaOutsideParentheses extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInMoveLambdaOutsideParentheses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ambigousOverload.kt")
        public void testAmbigousOverload() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/ambigousOverload.kt", this::doTest);
        }

        @TestMetadata("functionalValueCall.kt")
        public void testFunctionalValueCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/functionalValueCall.kt", this::doTest);
        }

        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/inapplicable1.kt", this::doTest);
        }

        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/inapplicable2.kt", this::doTest);
        }

        @TestMetadata("inapplicable3.kt")
        public void testInapplicable3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/inapplicable3.kt", this::doTest);
        }

        @TestMetadata("inapplicableAlreadyHasFunctionLiteral.kt")
        public void testInapplicableAlreadyHasFunctionLiteral() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/inapplicableAlreadyHasFunctionLiteral.kt", this::doTest);
        }

        @TestMetadata("inapplicableOptionalParametersAfter.kt")
        public void testInapplicableOptionalParametersAfter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/inapplicableOptionalParametersAfter.kt", this::doTest);
        }

        @TestMetadata("labeledLambda.kt")
        public void testLabeledLambda() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/labeledLambda.kt", this::doTest);
        }

        @TestMetadata("lambdaWithCommas.kt")
        public void testLambdaWithCommas() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/lambdaWithCommas.kt", this::doTest);
        }

        @TestMetadata("lambdaWithCommas2.kt")
        public void testLambdaWithCommas2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/lambdaWithCommas2.kt", this::doTest);
        }

        @TestMetadata("lambdaWithCommas3.kt")
        public void testLambdaWithCommas3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/lambdaWithCommas3.kt", this::doTest);
        }

        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/moveLambda1.kt", this::doTest);
        }

        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/moveLambda2.kt", this::doTest);
        }

        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/moveLambda3.kt", this::doTest);
        }

        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/moveLambda4.kt", this::doTest);
        }

        @TestMetadata("moveLambda5.kt")
        public void testMoveLambda5() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/moveLambda5.kt", this::doTest);
        }

        @TestMetadata("moveLambda6.kt")
        public void testMoveLambda6() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/moveLambda6.kt", this::doTest);
        }

        @TestMetadata("noTwoConsequentLambdas.kt")
        public void testNoTwoConsequentLambdas() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveLambdaOutsideParentheses/noTwoConsequentLambdas.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MoveSuspiciousCallableReferenceIntoParentheses extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInMoveSuspiciousCallableReferenceIntoParentheses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("defaultParameter.kt")
        public void testDefaultParameter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/defaultParameter.kt", this::doTest);
        }

        @TestMetadata("expectedFunction.kt")
        public void testExpectedFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/expectedFunction.kt", this::doTest);
        }

        @TestMetadata("explicitThisReceiver.kt")
        public void testExplicitThisReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/explicitThisReceiver.kt", this::doTest);
        }

        @TestMetadata("implicitThisReceiver.kt")
        public void testImplicitThisReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/implicitThisReceiver.kt", this::doTest);
        }

        @TestMetadata("it.kt")
        public void testIt() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/it.kt", this::doTest);
        }

        @TestMetadata("lambdaWithArg.kt")
        public void testLambdaWithArg() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/lambdaWithArg.kt", this::doTest);
        }

        @TestMetadata("multipleLines.kt")
        public void testMultipleLines() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/multipleLines.kt", this::doTest);
        }

        @TestMetadata("noBody.kt")
        public void testNoBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/noBody.kt", this::doTest);
        }

        @TestMetadata("noneCallableRef.kt")
        public void testNoneCallableRef() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/noneCallableRef.kt", this::doTest);
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/normal.kt", this::doTest);
        }

        @TestMetadata("parameter.kt")
        public void testParameter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/parameter.kt", this::doTest);
        }

        @TestMetadata("parameter2.kt")
        public void testParameter2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/parameter2.kt", this::doTest);
        }

        @TestMetadata("parameterOuter.kt")
        public void testParameterOuter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/parameterOuter.kt", this::doTest);
        }

        @TestMetadata("variableReceiver.kt")
        public void testVariableReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/moveSuspiciousCallableReferenceIntoParentheses/variableReceiver.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/nullChecksToSafeCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NullChecksToSafeCall extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInNullChecksToSafeCall() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/nullChecksToSafeCall"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("andCase.kt")
        public void testAndCase() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullChecksToSafeCall/andCase.kt", this::doTest);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullChecksToSafeCall/function.kt", this::doTest);
        }

        @TestMetadata("kotlinType.kt")
        public void testKotlinType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullChecksToSafeCall/kotlinType.kt", this::doTest);
        }

        @TestMetadata("longRightExpression.kt")
        public void testLongRightExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullChecksToSafeCall/longRightExpression.kt", this::doTest);
        }

        @TestMetadata("orCase.kt")
        public void testOrCase() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullChecksToSafeCall/orCase.kt", this::doTest);
        }

        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullChecksToSafeCall/safeCall.kt", this::doTest);
        }

        @TestMetadata("unstableChain.kt")
        public void testUnstableChain() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullChecksToSafeCall/unstableChain.kt", this::doTest);
        }

        @TestMetadata("unstableExtensionInChain.kt")
        public void testUnstableExtensionInChain() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullChecksToSafeCall/unstableExtensionInChain.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/nullableBooleanElvis")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NullableBooleanElvis extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInNullableBooleanElvis() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/nullableBooleanElvis"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("inIf.kt")
        public void testInIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullableBooleanElvis/inIf.kt", this::doTest);
        }

        @TestMetadata("inIf2.kt")
        public void testInIf2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullableBooleanElvis/inIf2.kt", this::doTest);
        }

        @TestMetadata("inIf3.kt")
        public void testInIf3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullableBooleanElvis/inIf3.kt", this::doTest);
        }

        @TestMetadata("notInIf.kt")
        public void testNotInIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullableBooleanElvis/notInIf.kt", this::doTest);
        }

        @TestMetadata("notInIfWithTrue.kt")
        public void testNotInIfWithTrue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/nullableBooleanElvis/notInIfWithTrue.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/recursiveEqualsCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RecursiveEqualsCall extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRecursiveEqualsCall() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/recursiveEqualsCall"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("recursive.kt")
        public void testRecursive() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursive.kt", this::doTest);
        }

        @TestMetadata("recursiveDirect.kt")
        public void testRecursiveDirect() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveDirect.kt", this::doTest);
        }

        @TestMetadata("recursiveDirectFake.kt")
        public void testRecursiveDirectFake() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveDirectFake.kt", this::doTest);
        }

        @TestMetadata("recursiveDirectSafe.kt")
        public void testRecursiveDirectSafe() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveDirectSafe.kt", this::doTest);
        }

        @TestMetadata("recursiveFake.kt")
        public void testRecursiveFake() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveFake.kt", this::doTest);
        }

        @TestMetadata("recursiveFakeNested.kt")
        public void testRecursiveFakeNested() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveFakeNested.kt", this::doTest);
        }

        @TestMetadata("recursiveFakeNoOther.kt")
        public void testRecursiveFakeNoOther() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveFakeNoOther.kt", this::doTest);
        }

        @TestMetadata("recursiveImplicit.kt")
        public void testRecursiveImplicit() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveImplicit.kt", this::doTest);
        }

        @TestMetadata("recursiveNested.kt")
        public void testRecursiveNested() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveNested.kt", this::doTest);
        }

        @TestMetadata("recursiveNot.kt")
        public void testRecursiveNot() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/recursiveEqualsCall/recursiveNot.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantCompanionReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantCompanionReference extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantCompanionReference() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantCompanionReference"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/basic.kt", this::doTest);
        }

        @TestMetadata("companionDoubleNested.kt")
        public void testCompanionDoubleNested() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/companionDoubleNested.kt", this::doTest);
        }

        @TestMetadata("companionNested.kt")
        public void testCompanionNested() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/companionNested.kt", this::doTest);
        }

        @TestMetadata("companionNestedObject.kt")
        public void testCompanionNestedObject() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/companionNestedObject.kt", this::doTest);
        }

        @TestMetadata("directCompanion.kt")
        public void testDirectCompanion() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/directCompanion.kt", this::doTest);
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/functionReference.kt", this::doTest);
        }

        @TestMetadata("import.kt")
        public void testImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/import.kt", this::doTest);
        }

        @TestMetadata("methodArgument.kt")
        public void testMethodArgument() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/methodArgument.kt", this::doTest);
        }

        @TestMetadata("named.kt")
        public void testNamed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/named.kt", this::doTest);
        }

        @TestMetadata("notCompanion.kt")
        public void testNotCompanion() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/notCompanion.kt", this::doTest);
        }

        @TestMetadata("onlyCompanion.kt")
        public void testOnlyCompanion() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantCompanionReference/onlyCompanion.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantExplicitType")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantExplicitType extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantExplicitType() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantExplicitType"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/boolean.kt", this::doTest);
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/char.kt", this::doTest);
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/constructor.kt", this::doTest);
        }

        @TestMetadata("double.kt")
        public void testDouble() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/double.kt", this::doTest);
        }

        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/float.kt", this::doTest);
        }

        @TestMetadata("int.kt")
        public void testInt() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/int.kt", this::doTest);
        }

        @TestMetadata("intExpr.kt")
        public void testIntExpr() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/intExpr.kt", this::doTest);
        }

        @TestMetadata("interface.kt")
        public void testInterface() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/interface.kt", this::doTest);
        }

        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/long.kt", this::doTest);
        }

        @TestMetadata("member.kt")
        public void testMember() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/member.kt", this::doTest);
        }

        @TestMetadata("null.kt")
        public void testNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/null.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/object.kt", this::doTest);
        }

        @TestMetadata("short.kt")
        public void testShort() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/short.kt", this::doTest);
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/string.kt", this::doTest);
        }

        @TestMetadata("top.kt")
        public void testTop() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantExplicitType/top.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantGetter")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantGetter extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantGetter() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantGetter"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/annotation.kt", this::doTest);
        }

        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/default.kt", this::doTest);
        }

        @TestMetadata("fieldExpression.kt")
        public void testFieldExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/fieldExpression.kt", this::doTest);
        }

        @TestMetadata("hasType.kt")
        public void testHasType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/hasType.kt", this::doTest);
        }

        @TestMetadata("hasTypeWithPropertyExplicitType.kt")
        public void testHasTypeWithPropertyExplicitType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/hasTypeWithPropertyExplicitType.kt", this::doTest);
        }

        @TestMetadata("hasTypeWithPropertyInitializer.kt")
        public void testHasTypeWithPropertyInitializer() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/hasTypeWithPropertyInitializer.kt", this::doTest);
        }

        @TestMetadata("notFieldExpression.kt")
        public void testNotFieldExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/notFieldExpression.kt", this::doTest);
        }

        @TestMetadata("notOnlyReturnFieldBody.kt")
        public void testNotOnlyReturnFieldBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/notOnlyReturnFieldBody.kt", this::doTest);
        }

        @TestMetadata("onlyReturnFieldBody.kt")
        public void testOnlyReturnFieldBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantGetter/onlyReturnFieldBody.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantLambdaArrow")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantLambdaArrow extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantLambdaArrow() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantLambdaArrow"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("hasArguments.kt")
        public void testHasArguments() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantLambdaArrow/hasArguments.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantLambdaArrow/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantObjectTypeCheck")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantObjectTypeCheck extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantObjectTypeCheck() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantObjectTypeCheck"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("isClass.kt")
        public void testIsClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantObjectTypeCheck/isClass.kt", this::doTest);
        }

        @TestMetadata("isClassWhenEntry.kt")
        public void testIsClassWhenEntry() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantObjectTypeCheck/isClassWhenEntry.kt", this::doTest);
        }

        @TestMetadata("isNotObject.kt")
        public void testIsNotObject() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantObjectTypeCheck/isNotObject.kt", this::doTest);
        }

        @TestMetadata("isNotObjectWhenEntry.kt")
        public void testIsNotObjectWhenEntry() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantObjectTypeCheck/isNotObjectWhenEntry.kt", this::doTest);
        }

        @TestMetadata("isObject.kt")
        public void testIsObject() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantObjectTypeCheck/isObject.kt", this::doTest);
        }

        @TestMetadata("isObjectWhenEntry.kt")
        public void testIsObjectWhenEntry() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantObjectTypeCheck/isObjectWhenEntry.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantOverride")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantOverride extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantOverride() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantOverride"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("annotated.kt")
        public void testAnnotated() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/annotated.kt", this::doTest);
        }

        @TestMetadata("arguments.kt")
        public void testArguments() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/arguments.kt", this::doTest);
        }

        @TestMetadata("argumentsReplaced.kt")
        public void testArgumentsReplaced() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/argumentsReplaced.kt", this::doTest);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/basic.kt", this::doTest);
        }

        @TestMetadata("callDifferentSuperMethod.kt")
        public void testCallDifferentSuperMethod() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/callDifferentSuperMethod.kt", this::doTest);
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/dataClass.kt", this::doTest);
        }

        @TestMetadata("delegatedMemberHidesSuperTypeOverride.kt")
        public void testDelegatedMemberHidesSuperTypeOverride() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/delegatedMemberHidesSuperTypeOverride.kt", this::doTest);
        }

        @TestMetadata("delegatedMemberHidesSuperTypeOverride2.kt")
        public void testDelegatedMemberHidesSuperTypeOverride2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/delegatedMemberHidesSuperTypeOverride2.kt", this::doTest);
        }

        @TestMetadata("delegatedMemberHidesSuperTypeOverride3.kt")
        public void testDelegatedMemberHidesSuperTypeOverride3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/delegatedMemberHidesSuperTypeOverride3.kt", this::doTest);
        }

        @TestMetadata("delegatedMemberHidesSuperTypeOverride4.kt")
        public void testDelegatedMemberHidesSuperTypeOverride4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/delegatedMemberHidesSuperTypeOverride4.kt", this::doTest);
        }

        @TestMetadata("notCallSuper.kt")
        public void testNotCallSuper() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/notCallSuper.kt", this::doTest);
        }

        @TestMetadata("overrideModifireFinal.kt")
        public void testOverrideModifireFinal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/overrideModifireFinal.kt", this::doTest);
        }

        @TestMetadata("overrideModifireVisibility.kt")
        public void testOverrideModifireVisibility() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/overrideModifireVisibility.kt", this::doTest);
        }

        @TestMetadata("singleExpressionFunction.kt")
        public void testSingleExpressionFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/singleExpressionFunction.kt", this::doTest);
        }

        @TestMetadata("useGenericsSuper.kt")
        public void testUseGenericsSuper() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantOverride/useGenericsSuper.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantSemicolon")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantSemicolon extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantSemicolon() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantSemicolon"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("beforeAnnotationAndLambda.kt")
        public void testBeforeAnnotationAndLambda() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/beforeAnnotationAndLambda.kt", this::doTest);
        }

        @TestMetadata("beforeCommentAndLambda.kt")
        public void testBeforeCommentAndLambda() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/beforeCommentAndLambda.kt", this::doTest);
        }

        @TestMetadata("beforeKDocAndLambda.kt")
        public void testBeforeKDocAndLambda() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/beforeKDocAndLambda.kt", this::doTest);
        }

        @TestMetadata("companionBeforeFun.kt")
        public void testCompanionBeforeFun() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/companionBeforeFun.kt", this::doTest);
        }

        @TestMetadata("companionBeforeInit.kt")
        public void testCompanionBeforeInit() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/companionBeforeInit.kt", this::doTest);
        }

        @TestMetadata("companionBeforePrivateFun.kt")
        public void testCompanionBeforePrivateFun() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/companionBeforePrivateFun.kt", this::doTest);
        }

        @TestMetadata("companionBeforeVal.kt")
        public void testCompanionBeforeVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/companionBeforeVal.kt", this::doTest);
        }

        @TestMetadata("companionInLast.kt")
        public void testCompanionInLast() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/companionInLast.kt", this::doTest);
        }

        @TestMetadata("companionWithBody.kt")
        public void testCompanionWithBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/companionWithBody.kt", this::doTest);
        }

        @TestMetadata("companionWithName.kt")
        public void testCompanionWithName() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSemicolon/companionWithName.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantSetter")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantSetter extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantSetter() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantSetter"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/annotation.kt", this::doTest);
        }

        @TestMetadata("blankBody.kt")
        public void testBlankBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/blankBody.kt", this::doTest);
        }

        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/default.kt", this::doTest);
        }

        @TestMetadata("lowerVisibility1.kt")
        public void testLowerVisibility1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/lowerVisibility1.kt", this::doTest);
        }

        @TestMetadata("lowerVisibility2.kt")
        public void testLowerVisibility2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/lowerVisibility2.kt", this::doTest);
        }

        @TestMetadata("lowerVisibility3.kt")
        public void testLowerVisibility3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/lowerVisibility3.kt", this::doTest);
        }

        @TestMetadata("notOnlyFieldSetBody.kt")
        public void testNotOnlyFieldSetBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/notOnlyFieldSetBody.kt", this::doTest);
        }

        @TestMetadata("onlyFieldSetBody.kt")
        public void testOnlyFieldSetBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/onlyFieldSetBody.kt", this::doTest);
        }

        @TestMetadata("overrideBlankBody.kt")
        public void testOverrideBlankBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/overrideBlankBody.kt", this::doTest);
        }

        @TestMetadata("overrideDefault.kt")
        public void testOverrideDefault() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/overrideDefault.kt", this::doTest);
        }

        @TestMetadata("overrideNotOnlyFieldSetBody.kt")
        public void testOverrideNotOnlyFieldSetBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/overrideNotOnlyFieldSetBody.kt", this::doTest);
        }

        @TestMetadata("overrideOnlyFieldSetBody.kt")
        public void testOverrideOnlyFieldSetBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/overrideOnlyFieldSetBody.kt", this::doTest);
        }

        @TestMetadata("sameVisibility1.kt")
        public void testSameVisibility1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/sameVisibility1.kt", this::doTest);
        }

        @TestMetadata("sameVisibility2.kt")
        public void testSameVisibility2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/sameVisibility2.kt", this::doTest);
        }

        @TestMetadata("sameVisibility3.kt")
        public void testSameVisibility3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSetter/sameVisibility3.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantSuspend")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantSuspend extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantSuspend() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantSuspend"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("coroutineContext.kt")
        public void testCoroutineContext() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSuspend/coroutineContext.kt", this::doTest);
        }

        @TestMetadata("getterDelegate.kt")
        public void testGetterDelegate() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSuspend/getterDelegate.kt", this::doTest);
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSuspend/override.kt", this::doTest);
        }

        @TestMetadata("setterDelegate.kt")
        public void testSetterDelegate() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantSuspend/setterDelegate.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/redundantUnitExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantUnitExpression extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRedundantUnitExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/redundantUnitExpression"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("atLastAfterClass.kt")
        public void testAtLastAfterClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterClass.kt", this::doTest);
        }

        @TestMetadata("atLastAfterConstant.kt")
        public void testAtLastAfterConstant() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterConstant.kt", this::doTest);
        }

        @TestMetadata("atLastAfterFunInIf.kt")
        public void testAtLastAfterFunInIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterFunInIf.kt", this::doTest);
        }

        @TestMetadata("atLastAfterFunInTry.kt")
        public void testAtLastAfterFunInTry() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterFunInTry.kt", this::doTest);
        }

        @TestMetadata("atLastAfterFunInWhen.kt")
        public void testAtLastAfterFunInWhen() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterFunInWhen.kt", this::doTest);
        }

        @TestMetadata("atLastAfterIntFunctionCall.kt")
        public void testAtLastAfterIntFunctionCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterIntFunctionCall.kt", this::doTest);
        }

        @TestMetadata("atLastAfterUnit.kt")
        public void testAtLastAfterUnit() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterUnit.kt", this::doTest);
        }

        @TestMetadata("atLastAfterUnitFunctionCall.kt")
        public void testAtLastAfterUnitFunctionCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterUnitFunctionCall.kt", this::doTest);
        }

        @TestMetadata("atLastAfterVal.kt")
        public void testAtLastAfterVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/atLastAfterVal.kt", this::doTest);
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/lambda.kt", this::doTest);
        }

        @TestMetadata("notRedundant1.kt")
        public void testNotRedundant1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/notRedundant1.kt", this::doTest);
        }

        @TestMetadata("notRedundant2.kt")
        public void testNotRedundant2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/notRedundant2.kt", this::doTest);
        }

        @TestMetadata("notRedundant3.kt")
        public void testNotRedundant3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/notRedundant3.kt", this::doTest);
        }

        @TestMetadata("redundant1.kt")
        public void testRedundant1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/redundant1.kt", this::doTest);
        }

        @TestMetadata("redundant4.kt")
        public void testRedundant4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/redundant4.kt", this::doTest);
        }

        @TestMetadata("redundant5.kt")
        public void testRedundant5() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/redundantUnitExpression/redundant5.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/removeRedundantBackticks")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveRedundantBackticks extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRemoveRedundantBackticks() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/removeRedundantBackticks"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("functionArgument.kt")
        public void testFunctionArgument() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantBackticks/functionArgument.kt", this::doTest);
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantBackticks/functionCall.kt", this::doTest);
        }

        @TestMetadata("identifierContainingSpaces.kt")
        public void testIdentifierContainingSpaces() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantBackticks/identifierContainingSpaces.kt", this::doTest);
        }

        @TestMetadata("keyword.kt")
        public void testKeyword() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantBackticks/keyword.kt", this::doTest);
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantBackticks/property.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/removeRedundantSpreadOperator")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveRedundantSpreadOperator extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRemoveRedundantSpreadOperator() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/removeRedundantSpreadOperator"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/basic.kt", this::doTest);
        }

        @TestMetadata("booleanArrayOf.kt")
        public void testBooleanArrayOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/booleanArrayOf.kt", this::doTest);
        }

        @TestMetadata("byteArrayOf.kt")
        public void testByteArrayOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/byteArrayOf.kt", this::doTest);
        }

        @TestMetadata("charArrayOf.kt")
        public void testCharArrayOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/charArrayOf.kt", this::doTest);
        }

        @TestMetadata("doubleArrayOf.kt")
        public void testDoubleArrayOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/doubleArrayOf.kt", this::doTest);
        }

        @TestMetadata("emptyArray.kt")
        public void testEmptyArray() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/emptyArray.kt", this::doTest);
        }

        @TestMetadata("emptyLiteral.kt")
        public void testEmptyLiteral() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/emptyLiteral.kt", this::doTest);
        }

        @TestMetadata("floatArrayOf.kt")
        public void testFloatArrayOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/floatArrayOf.kt", this::doTest);
        }

        @TestMetadata("intArrayOf.kt")
        public void testIntArrayOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/intArrayOf.kt", this::doTest);
        }

        @TestMetadata("literal.kt")
        public void testLiteral() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/literal.kt", this::doTest);
        }

        @TestMetadata("longArrayOf.kt")
        public void testLongArrayOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/longArrayOf.kt", this::doTest);
        }

        @TestMetadata("multipleValues.kt")
        public void testMultipleValues() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/multipleValues.kt", this::doTest);
        }

        @TestMetadata("multipleValuesWithOtherValues.kt")
        public void testMultipleValuesWithOtherValues() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/multipleValuesWithOtherValues.kt", this::doTest);
        }

        @TestMetadata("namedArgument.kt")
        public void testNamedArgument() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/namedArgument.kt", this::doTest);
        }

        @TestMetadata("namedArgumentForArray.kt")
        public void testNamedArgumentForArray() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/namedArgumentForArray.kt", this::doTest);
        }

        @TestMetadata("noParams.kt")
        public void testNoParams() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/noParams.kt", this::doTest);
        }

        @TestMetadata("shortArrayOf.kt")
        public void testShortArrayOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeRedundantSpreadOperator/shortArrayOf.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/removeSetterParameterType")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveSetterParameterType extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRemoveSetterParameterType() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/removeSetterParameterType"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("emptyType.kt")
        public void testEmptyType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeSetterParameterType/emptyType.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/removeToStringInStringTemplate")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveToStringInStringTemplate extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInRemoveToStringInStringTemplate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/removeToStringInStringTemplate"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("caretInReceiver.kt")
        public void testCaretInReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeToStringInStringTemplate/caretInReceiver.kt", this::doTest);
        }

        @TestMetadata("caretInSelector.kt")
        public void testCaretInSelector() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/removeToStringInStringTemplate/caretInSelector.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ReplaceArrayEqualityOpWithArraysEquals extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInReplaceArrayEqualityOpWithArraysEquals() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("arrayAndOtherTypeEQEQ.kt")
        public void testArrayAndOtherTypeEQEQ() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals/arrayAndOtherTypeEQEQ.kt", this::doTest);
        }

        @TestMetadata("arrayEQEQ.kt")
        public void testArrayEQEQ() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals/arrayEQEQ.kt", this::doTest);
        }

        @TestMetadata("arrayEXCLEQ.kt")
        public void testArrayEXCLEQ() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals/arrayEXCLEQ.kt", this::doTest);
        }

        @TestMetadata("primitiveArrayEQEQ.kt")
        public void testPrimitiveArrayEQEQ() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals/primitiveArrayEQEQ.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ReplaceArrayOfWithLiteral extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInReplaceArrayOfWithLiteral() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/base.kt", this::doTest);
        }

        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/default.kt", this::doTest);
        }

        @TestMetadata("defaultNotAnnotation.kt")
        public void testDefaultNotAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/defaultNotAnnotation.kt", this::doTest);
        }

        @TestMetadata("empty.kt")
        public void testEmpty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/empty.kt", this::doTest);
        }

        @TestMetadata("intArray.kt")
        public void testIntArray() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/intArray.kt", this::doTest);
        }

        @TestMetadata("noAnnotation.kt")
        public void testNoAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/noAnnotation.kt", this::doTest);
        }

        @TestMetadata("noArray.kt")
        public void testNoArray() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/noArray.kt", this::doTest);
        }

        @TestMetadata("unnamed.kt")
        public void testUnnamed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/unnamed.kt", this::doTest);
        }

        @TestMetadata("unnamedVararg.kt")
        public void testUnnamedVararg() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/unnamedVararg.kt", this::doTest);
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceArrayOfWithLiteral/vararg.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/replacePutWithAssignment")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ReplacePutWithAssignment extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInReplacePutWithAssignment() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/replacePutWithAssignment"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("nonMap.kt")
        public void testNonMap() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replacePutWithAssignment/nonMap.kt", this::doTest);
        }

        @TestMetadata("putAsExpression.kt")
        public void testPutAsExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replacePutWithAssignment/putAsExpression.kt", this::doTest);
        }

        @TestMetadata("putOnParameter.kt")
        public void testPutOnParameter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replacePutWithAssignment/putOnParameter.kt", this::doTest);
        }

        @TestMetadata("putOnThis.kt")
        public void testPutOnThis() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replacePutWithAssignment/putOnThis.kt", this::doTest);
        }

        @TestMetadata("putOnVal.kt")
        public void testPutOnVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replacePutWithAssignment/putOnVal.kt", this::doTest);
        }

        @TestMetadata("putOnVar.kt")
        public void testPutOnVar() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replacePutWithAssignment/putOnVar.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/replaceRangeToWithUntil")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ReplaceRangeToWithUntil extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInReplaceRangeToWithUntil() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/replaceRangeToWithUntil"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("closedRange.kt")
        public void testClosedRange() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceRangeToWithUntil/closedRange.kt", this::doTest);
        }

        @TestMetadata("minusTwo.kt")
        public void testMinusTwo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceRangeToWithUntil/minusTwo.kt", this::doTest);
        }

        @TestMetadata("notMinusOne.kt")
        public void testNotMinusOne() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceRangeToWithUntil/notMinusOne.kt", this::doTest);
        }

        @TestMetadata("operator.kt")
        public void testOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceRangeToWithUntil/operator.kt", this::doTest);
        }

        @TestMetadata("operatorLong.kt")
        public void testOperatorLong() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceRangeToWithUntil/operatorLong.kt", this::doTest);
        }

        @TestMetadata("plusOne.kt")
        public void testPlusOne() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceRangeToWithUntil/plusOne.kt", this::doTest);
        }

        @TestMetadata("rangeTo.kt")
        public void testRangeTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceRangeToWithUntil/rangeTo.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/replaceToWithInfixForm")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ReplaceToWithInfixForm extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInReplaceToWithInfixForm() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/replaceToWithInfixForm"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceToWithInfixForm/base.kt", this::doTest);
        }

        @TestMetadata("nonPair.kt")
        public void testNonPair() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceToWithInfixForm/nonPair.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/replaceWithOperatorAssignment")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ReplaceWithOperatorAssignment extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInReplaceWithOperatorAssignment() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/replaceWithOperatorAssignment"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("flexibleTypeBug.kt")
        public void testFlexibleTypeBug() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/flexibleTypeBug.kt", this::doTest);
        }

        @TestMetadata("illegalMultipleOperators.kt")
        public void testIllegalMultipleOperators() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/illegalMultipleOperators.kt", this::doTest);
        }

        @TestMetadata("illegalMultipleOperatorsMiddle.kt")
        public void testIllegalMultipleOperatorsMiddle() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/illegalMultipleOperatorsMiddle.kt", this::doTest);
        }

        @TestMetadata("invalidSubtraction.kt")
        public void testInvalidSubtraction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/invalidSubtraction.kt", this::doTest);
        }

        @TestMetadata("multipleOperators.kt")
        public void testMultipleOperators() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/multipleOperators.kt", this::doTest);
        }

        @TestMetadata("multipleOperatorsRightSideRepeat.kt")
        public void testMultipleOperatorsRightSideRepeat() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/multipleOperatorsRightSideRepeat.kt", this::doTest);
        }

        @TestMetadata("nonCommutativeRepeat.kt")
        public void testNonCommutativeRepeat() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/nonCommutativeRepeat.kt", this::doTest);
        }

        @TestMetadata("nonRepeatingAssignment.kt")
        public void testNonRepeatingAssignment() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/nonRepeatingAssignment.kt", this::doTest);
        }

        @TestMetadata("plusAssignConflict.kt")
        public void testPlusAssignConflict() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/plusAssignConflict.kt", this::doTest);
        }

        @TestMetadata("rightSideRepeat.kt")
        public void testRightSideRepeat() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/rightSideRepeat.kt", this::doTest);
        }

        @TestMetadata("simpleAssign.kt")
        public void testSimpleAssign() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/simpleAssign.kt", this::doTest);
        }

        @TestMetadata("validSubtraction.kt")
        public void testValidSubtraction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/replaceWithOperatorAssignment/validSubtraction.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/scopeFunctions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ScopeFunctions extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInScopeFunctions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/scopeFunctions"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/inspectionsLocal/scopeFunctions/alsoToApply")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AlsoToApply extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInAlsoToApply() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/scopeFunctions/alsoToApply"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/alsoToApply/simple.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ApplyToAlso extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInApplyToAlso() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("arrow.kt")
            public void testArrow() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/arrow.kt", this::doTest);
            }

            @TestMetadata("doubleNestedLambdas.kt")
            public void testDoubleNestedLambdas() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/doubleNestedLambdas.kt", this::doTest);
            }

            @TestMetadata("innerLambda.kt")
            public void testInnerLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/innerLambda.kt", this::doTest);
            }

            @TestMetadata("itInNestedLambda.kt")
            public void testItInNestedLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/itInNestedLambda.kt", this::doTest);
            }

            @TestMetadata("method.kt")
            public void testMethod() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/method.kt", this::doTest);
            }

            @TestMetadata("outerLambda.kt")
            public void testOuterLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/outerLambda.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/simple.kt", this::doTest);
            }

            @TestMetadata("thisInOperation.kt")
            public void testThisInOperation() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/thisInOperation.kt", this::doTest);
            }

            @TestMetadata("thisQualifier.kt")
            public void testThisQualifier() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/applyToAlso/thisQualifier.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/scopeFunctions/letToRun")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LetToRun extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInLetToRun() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/scopeFunctions/letToRun"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("nestedLambda.kt")
            public void testNestedLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/letToRun/nestedLambda.kt", this::doTest);
            }

            @TestMetadata("outerThis.kt")
            public void testOuterThis() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/letToRun/outerThis.kt", this::doTest);
            }

            @TestMetadata("qualifyThis.kt")
            public void testQualifyThis() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/letToRun/qualifyThis.kt", this::doTest);
            }

            @TestMetadata("qualifyThisNoConflict.kt")
            public void testQualifyThisNoConflict() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/letToRun/qualifyThisNoConflict.kt", this::doTest);
            }

            @TestMetadata("qualifyThisWithLambda.kt")
            public void testQualifyThisWithLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/letToRun/qualifyThisWithLambda.kt", this::doTest);
            }

            @TestMetadata("qualifyThisWithLambdaNoConflict.kt")
            public void testQualifyThisWithLambdaNoConflict() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/letToRun/qualifyThisWithLambdaNoConflict.kt", this::doTest);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/letToRun/simple.kt", this::doTest);
            }

            @TestMetadata("thisInStringTemplate.kt")
            public void testThisInStringTemplate() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/letToRun/thisInStringTemplate.kt", this::doTest);
            }
        }

        @TestMetadata("idea/testData/inspectionsLocal/scopeFunctions/runToLet")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class RunToLet extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInRunToLet() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/scopeFunctions/runToLet"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/scopeFunctions/runToLet/simple.kt", this::doTest);
            }
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/selfAssignment")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SelfAssignment extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInSelfAssignment() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/selfAssignment"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("applyCorrect.kt")
        public void testApplyCorrect() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/applyCorrect.kt", this::doTest);
        }

        @TestMetadata("applyIncorrect.kt")
        public void testApplyIncorrect() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/applyIncorrect.kt", this::doTest);
        }

        @TestMetadata("assignToProperty.kt")
        public void testAssignToProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/assignToProperty.kt", this::doTest);
        }

        @TestMetadata("differentThese.kt")
        public void testDifferentThese() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/differentThese.kt", this::doTest);
        }

        @TestMetadata("differentThis.kt")
        public void testDifferentThis() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/differentThis.kt", this::doTest);
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/list.kt", this::doTest);
        }

        @TestMetadata("localVal.kt")
        public void testLocalVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/localVal.kt", this::doTest);
        }

        @TestMetadata("localVar.kt")
        public void testLocalVar() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/localVar.kt", this::doTest);
        }

        @TestMetadata("notAssignment.kt")
        public void testNotAssignment() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/notAssignment.kt", this::doTest);
        }

        @TestMetadata("notSelf.kt")
        public void testNotSelf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/notSelf.kt", this::doTest);
        }

        @TestMetadata("openProperty.kt")
        public void testOpenProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/openProperty.kt", this::doTest);
        }

        @TestMetadata("parameter.kt")
        public void testParameter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/parameter.kt", this::doTest);
        }

        @TestMetadata("property1.kt")
        public void testProperty1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/property1.kt", this::doTest);
        }

        @TestMetadata("property2.kt")
        public void testProperty2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/property2.kt", this::doTest);
        }

        @TestMetadata("property3.kt")
        public void testProperty3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/property3.kt", this::doTest);
        }

        @TestMetadata("propertyHasDelegate.kt")
        public void testPropertyHasDelegate() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/propertyHasDelegate.kt", this::doTest);
        }

        @TestMetadata("propertyHasGetter.kt")
        public void testPropertyHasGetter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/propertyHasGetter.kt", this::doTest);
        }

        @TestMetadata("propertyHasSetter.kt")
        public void testPropertyHasSetter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/propertyHasSetter.kt", this::doTest);
        }

        @TestMetadata("sameThese.kt")
        public void testSameThese() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/sameThese.kt", this::doTest);
        }

        @TestMetadata("sameThis.kt")
        public void testSameThis() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/sameThis.kt", this::doTest);
        }

        @TestMetadata("shadow.kt")
        public void testShadow() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/shadow.kt", this::doTest);
        }

        @TestMetadata("withReceiver.kt")
        public void testWithReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/selfAssignment/withReceiver.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/simplifyAssertNotNull")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SimplifyAssertNotNull extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInSimplifyAssertNotNull() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/simplifyAssertNotNull"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("comments.kt")
        public void testComments() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/comments.kt", this::doTest);
        }

        @TestMetadata("commentsNoMessage.kt")
        public void testCommentsNoMessage() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/commentsNoMessage.kt", this::doTest);
        }

        @TestMetadata("complicatedMessageLambda.kt")
        public void testComplicatedMessageLambda() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/complicatedMessageLambda.kt", this::doTest);
        }

        @TestMetadata("eqNull.kt")
        public void testEqNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/eqNull.kt", this::doTest);
        }

        @TestMetadata("errorFunctionInContext.kt")
        public void testErrorFunctionInContext() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/errorFunctionInContext.kt", this::doTest);
        }

        @TestMetadata("falseAssert.kt")
        public void testFalseAssert() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/falseAssert.kt", this::doTest);
        }

        @TestMetadata("noMessage.kt")
        public void testNoMessage() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/noMessage.kt", this::doTest);
        }

        @TestMetadata("otherVariable.kt")
        public void testOtherVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/otherVariable.kt", this::doTest);
        }

        @TestMetadata("qualifiedAccess.kt")
        public void testQualifiedAccess() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/qualifiedAccess.kt", this::doTest);
        }

        @TestMetadata("withMessage.kt")
        public void testWithMessage() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/withMessage.kt", this::doTest);
        }

        @TestMetadata("withMessageLambdaOutside.kt")
        public void testWithMessageLambdaOutside() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyAssertNotNull/withMessageLambdaOutside.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SimplifyNegatedBinaryExpression extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInSimplifyNegatedBinaryExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/equals.kt", this::doTest);
        }

        @TestMetadata("greaterThan.kt")
        public void testGreaterThan() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/greaterThan.kt", this::doTest);
        }

        @TestMetadata("greaterThanOrEquals.kt")
        public void testGreaterThanOrEquals() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/greaterThanOrEquals.kt", this::doTest);
        }

        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/in.kt", this::doTest);
        }

        @TestMetadata("inapplicableBinaryOperation.kt")
        public void testInapplicableBinaryOperation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/inapplicableBinaryOperation.kt", this::doTest);
        }

        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/is.kt", this::doTest);
        }

        @TestMetadata("lessThan.kt")
        public void testLessThan() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/lessThan.kt", this::doTest);
        }

        @TestMetadata("lessThanOrEquals.kt")
        public void testLessThanOrEquals() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/lessThanOrEquals.kt", this::doTest);
        }

        @TestMetadata("notEquals.kt")
        public void testNotEquals() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/notEquals.kt", this::doTest);
        }

        @TestMetadata("notIn.kt")
        public void testNotIn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/notIn.kt", this::doTest);
        }

        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/notIs.kt", this::doTest);
        }

        @TestMetadata("simpleInvert.kt")
        public void testSimpleInvert() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyNegatedBinaryExpression/simpleInvert.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SimplifyWhenWithBooleanConstantCondition extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInSimplifyWhenWithBooleanConstantCondition() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("falseAndElse1.kt")
        public void testFalseAndElse1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/falseAndElse1.kt", this::doTest);
        }

        @TestMetadata("falseAndElse2.kt")
        public void testFalseAndElse2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/falseAndElse2.kt", this::doTest);
        }

        @TestMetadata("falseAndElse3.kt")
        public void testFalseAndElse3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/falseAndElse3.kt", this::doTest);
        }

        @TestMetadata("falseOnly1.kt")
        public void testFalseOnly1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/falseOnly1.kt", this::doTest);
        }

        @TestMetadata("falseOnly2.kt")
        public void testFalseOnly2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/falseOnly2.kt", this::doTest);
        }

        @TestMetadata("falseOnly3.kt")
        public void testFalseOnly3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/falseOnly3.kt", this::doTest);
        }

        @TestMetadata("hasSubject.kt")
        public void testHasSubject() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/hasSubject.kt", this::doTest);
        }

        @TestMetadata("noBoolean.kt")
        public void testNoBoolean() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/noBoolean.kt", this::doTest);
        }

        @TestMetadata("trueIsNotTop1.kt")
        public void testTrueIsNotTop1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/trueIsNotTop1.kt", this::doTest);
        }

        @TestMetadata("trueIsNotTop2.kt")
        public void testTrueIsNotTop2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/trueIsNotTop2.kt", this::doTest);
        }

        @TestMetadata("trueIsNotTop3.kt")
        public void testTrueIsNotTop3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/trueIsNotTop3.kt", this::doTest);
        }

        @TestMetadata("trueIsTop1.kt")
        public void testTrueIsTop1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/trueIsTop1.kt", this::doTest);
        }

        @TestMetadata("trueIsTop2.kt")
        public void testTrueIsTop2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/trueIsTop2.kt", this::doTest);
        }

        @TestMetadata("trueIsTop3.kt")
        public void testTrueIsTop3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/simplifyWhenWithBooleanConstantCondition/trueIsTop3.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/sortModifiers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SortModifiers extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInSortModifiers() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/sortModifiers"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/sortModifiers/annotation.kt", this::doTest);
        }

        @TestMetadata("annotationGroup.kt")
        public void testAnnotationGroup() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/sortModifiers/annotationGroup.kt", this::doTest);
        }

        @TestMetadata("annotationOverrideFinal.kt")
        public void testAnnotationOverrideFinal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/sortModifiers/annotationOverrideFinal.kt", this::doTest);
        }

        @TestMetadata("overrideFinal.kt")
        public void testOverrideFinal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/sortModifiers/overrideFinal.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/sortModifiers/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/unnecessaryVariable")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnnecessaryVariable extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInUnnecessaryVariable() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/unnecessaryVariable"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("copyOfVal.kt")
        public void testCopyOfVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/copyOfVal.kt", this::doTest);
        }

        @TestMetadata("copyOfValUnused.kt")
        public void testCopyOfValUnused() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/copyOfValUnused.kt", this::doTest);
        }

        @TestMetadata("copyOfValWithExplicitType.kt")
        public void testCopyOfValWithExplicitType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/copyOfValWithExplicitType.kt", this::doTest);
        }

        @TestMetadata("copyOfVar.kt")
        public void testCopyOfVar() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/copyOfVar.kt", this::doTest);
        }

        @TestMetadata("it.kt")
        public void testIt() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/it.kt", this::doTest);
        }

        @TestMetadata("paramCopy.kt")
        public void testParamCopy() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/paramCopy.kt", this::doTest);
        }

        @TestMetadata("parameterWithSameNameBelow.kt")
        public void testParameterWithSameNameBelow() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/parameterWithSameNameBelow.kt", this::doTest);
        }

        @TestMetadata("propertyCopy.kt")
        public void testPropertyCopy() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/propertyCopy.kt", this::doTest);
        }

        @TestMetadata("simpleReturn.kt")
        public void testSimpleReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/simpleReturn.kt", this::doTest);
        }

        @TestMetadata("topLevelCopy.kt")
        public void testTopLevelCopy() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/topLevelCopy.kt", this::doTest);
        }

        @TestMetadata("varCopy.kt")
        public void testVarCopy() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unnecessaryVariable/varCopy.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/unsafeCastFromDynamic")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnsafeCastFromDynamic extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInUnsafeCastFromDynamic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/unsafeCastFromDynamic"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("binaryExpression.kt")
        public void testBinaryExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unsafeCastFromDynamic/binaryExpression.kt", this::doTest);
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unsafeCastFromDynamic/nullable.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unsafeCastFromDynamic/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/unusedLambdaExpressionBody")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnusedLambdaExpressionBody extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInUnusedLambdaExpressionBody() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/unusedLambdaExpressionBody"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("inEnumEntry.kt")
        public void testInEnumEntry() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedLambdaExpressionBody/inEnumEntry.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedLambdaExpressionBody/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/unusedReceiverParameter")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnusedReceiverParameter extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInUnusedReceiverParameter() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/unusedReceiverParameter"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedReceiverParameter/companion.kt", this::doTest);
        }

        @TestMetadata("companionPure.kt")
        public void testCompanionPure() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedReceiverParameter/companionPure.kt", this::doTest);
        }

        @TestMetadata("infix.kt")
        public void testInfix() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedReceiverParameter/infix.kt", this::doTest);
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedReceiverParameter/object.kt", this::doTest);
        }

        @TestMetadata("operator.kt")
        public void testOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedReceiverParameter/operator.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/unusedSymbol")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnusedSymbol extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInUnusedSymbol() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/unusedSymbol"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("asDefaultConstructorParameter.kt")
        public void testAsDefaultConstructorParameter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedSymbol/asDefaultConstructorParameter.kt", this::doTest);
        }

        @TestMetadata("companionViaImport.kt")
        public void testCompanionViaImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedSymbol/companionViaImport.kt", this::doTest);
        }

        @TestMetadata("inAnonymous.kt")
        public void testInAnonymous() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedSymbol/inAnonymous.kt", this::doTest);
        }

        @TestMetadata("inAnonymousDeeply.kt")
        public void testInAnonymousDeeply() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedSymbol/inAnonymousDeeply.kt", this::doTest);
        }

        @TestMetadata("inAnonymousRunWrapped.kt")
        public void testInAnonymousRunWrapped() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedSymbol/inAnonymousRunWrapped.kt", this::doTest);
        }

        @TestMetadata("internal.kt")
        public void testInternal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedSymbol/internal.kt", this::doTest);
        }

        @TestMetadata("withJvmNameUsedFromKotlin.kt")
        public void testWithJvmNameUsedFromKotlin() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/unusedSymbol/withJvmNameUsedFromKotlin.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/useExpressionBody")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UseExpressionBody extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInUseExpressionBody() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/useExpressionBody"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/if.kt", this::doTest);
        }

        @TestMetadata("leftBrace.kt")
        public void testLeftBrace() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/leftBrace.kt", this::doTest);
        }

        @TestMetadata("multiLine.kt")
        public void testMultiLine() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/multiLine.kt", this::doTest);
        }

        @TestMetadata("oneLine.kt")
        public void testOneLine() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/oneLine.kt", this::doTest);
        }

        @TestMetadata("veryVeryLong.kt")
        public void testVeryVeryLong() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/veryVeryLong.kt", this::doTest);
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/when.kt", this::doTest);
        }

        @TestMetadata("whenWithEarlyReturn.kt")
        public void testWhenWithEarlyReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/whenWithEarlyReturn.kt", this::doTest);
        }

        @TestMetadata("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ConvertToExpressionBody extends AbstractLocalInspectionTest {
            public void testAllFilesPresentInConvertToExpressionBody() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
            }

            @TestMetadata("anonymousObjectExpression.kt")
            public void testAnonymousObjectExpression() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/anonymousObjectExpression.kt", this::doTest);
            }

            @TestMetadata("assignPlus.kt")
            public void testAssignPlus() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/assignPlus.kt", this::doTest);
            }

            @TestMetadata("assignment.kt")
            public void testAssignment() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/assignment.kt", this::doTest);
            }

            @TestMetadata("constructorWithEmptyBody.kt")
            public void testConstructorWithEmptyBody() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/constructorWithEmptyBody.kt", this::doTest);
            }

            @TestMetadata("declaration.kt")
            public void testDeclaration() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/declaration.kt", this::doTest);
            }

            @TestMetadata("elvisIfElseUnit.kt")
            public void testElvisIfElseUnit() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/elvisIfElseUnit.kt", this::doTest);
            }

            @TestMetadata("elvisIfUnit.kt")
            public void testElvisIfUnit() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/elvisIfUnit.kt", this::doTest);
            }

            @TestMetadata("elvisWhenUnitNonExhaustive.kt")
            public void testElvisWhenUnitNonExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/elvisWhenUnitNonExhaustive.kt", this::doTest);
            }

            @TestMetadata("emptyList.kt")
            public void testEmptyList() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/emptyList.kt", this::doTest);
            }

            @TestMetadata("expressionWithReturns1.kt")
            public void testExpressionWithReturns1() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/expressionWithReturns1.kt", this::doTest);
            }

            @TestMetadata("expressionWithReturns2.kt")
            public void testExpressionWithReturns2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/expressionWithReturns2.kt", this::doTest);
            }

            @TestMetadata("funWithEmptyBody.kt")
            public void testFunWithEmptyBody() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithEmptyBody.kt", this::doTest);
            }

            @TestMetadata("funWithEmptyBody2.kt")
            public void testFunWithEmptyBody2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithEmptyBody2.kt", this::doTest);
            }

            @TestMetadata("funWithImplicitUnitTypeWithThrow.kt")
            public void testFunWithImplicitUnitTypeWithThrow() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithImplicitUnitTypeWithThrow.kt", this::doTest);
            }

            @TestMetadata("funWithNoBlock.kt")
            public void testFunWithNoBlock() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithNoBlock.kt", this::doTest);
            }

            @TestMetadata("funWithNothingType.kt")
            public void testFunWithNothingType() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithNothingType.kt", this::doTest);
            }

            @TestMetadata("funWithReturn.kt")
            public void testFunWithReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithReturn.kt", this::doTest);
            }

            @TestMetadata("funWithUnitType.kt")
            public void testFunWithUnitType() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithUnitType.kt", this::doTest);
            }

            @TestMetadata("funWithUnitType2.kt")
            public void testFunWithUnitType2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithUnitType2.kt", this::doTest);
            }

            @TestMetadata("funWithUnitTypeWithThrow.kt")
            public void testFunWithUnitTypeWithThrow() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/funWithUnitTypeWithThrow.kt", this::doTest);
            }

            @TestMetadata("functionLiteral.kt")
            public void testFunctionLiteral() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/functionLiteral.kt", this::doTest);
            }

            @TestMetadata("getWithReturn.kt")
            public void testGetWithReturn() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/getWithReturn.kt", this::doTest);
            }

            @TestMetadata("ifElseUnit.kt")
            public void testIfElseUnit() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/ifElseUnit.kt", this::doTest);
            }

            @TestMetadata("ifUnit.kt")
            public void testIfUnit() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/ifUnit.kt", this::doTest);
            }

            @TestMetadata("ifWhenUnitExhaustive.kt")
            public void testIfWhenUnitExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/ifWhenUnitExhaustive.kt", this::doTest);
            }

            @TestMetadata("ifWhenUnitNonExhaustive.kt")
            public void testIfWhenUnitNonExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/ifWhenUnitNonExhaustive.kt", this::doTest);
            }

            @TestMetadata("lambdaIfUnit.kt")
            public void testLambdaIfUnit() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/lambdaIfUnit.kt", this::doTest);
            }

            @TestMetadata("lambdaWhenUnitNonExhaustive.kt")
            public void testLambdaWhenUnitNonExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/lambdaWhenUnitNonExhaustive.kt", this::doTest);
            }

            @TestMetadata("multipleStatements.kt")
            public void testMultipleStatements() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/multipleStatements.kt", this::doTest);
            }

            @TestMetadata("overridePublicFun.kt")
            public void testOverridePublicFun() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/overridePublicFun.kt", this::doTest);
            }

            @TestMetadata("returnFromLambda.kt")
            public void testReturnFromLambda() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/returnFromLambda.kt", this::doTest);
            }

            @TestMetadata("returnFromLambda2.kt")
            public void testReturnFromLambda2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/returnFromLambda2.kt", this::doTest);
            }

            @TestMetadata("returnWithNoValue.kt")
            public void testReturnWithNoValue() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/returnWithNoValue.kt", this::doTest);
            }

            @TestMetadata("whenIfUnitExhaustive.kt")
            public void testWhenIfUnitExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/whenIfUnitExhaustive.kt", this::doTest);
            }

            @TestMetadata("whenIfUnitNonExhaustive.kt")
            public void testWhenIfUnitNonExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/whenIfUnitNonExhaustive.kt", this::doTest);
            }

            @TestMetadata("whenUnitExhaustive.kt")
            public void testWhenUnitExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/whenUnitExhaustive.kt", this::doTest);
            }

            @TestMetadata("whenUnitNonExhaustive.kt")
            public void testWhenUnitNonExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/whenUnitNonExhaustive.kt", this::doTest);
            }

            @TestMetadata("whenUnitWithElse.kt")
            public void testWhenUnitWithElse() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/whenUnitWithElse.kt", this::doTest);
            }

            @TestMetadata("whenWhenNonExhaustive.kt")
            public void testWhenWhenNonExhaustive() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/whenWhenNonExhaustive.kt", this::doTest);
            }

            @TestMetadata("while.kt")
            public void testWhile() throws Exception {
                KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/while.kt", this::doTest);
            }

            @TestMetadata("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/keepComments")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class KeepComments extends AbstractLocalInspectionTest {
                @TestMetadata("1.kt")
                public void test1() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/keepComments/1.kt", this::doTest);
                }

                @TestMetadata("2.kt")
                public void test2() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/keepComments/2.kt", this::doTest);
                }

                @TestMetadata("3.kt")
                public void test3() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/keepComments/3.kt", this::doTest);
                }

                @TestMetadata("4.kt")
                public void test4() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/keepComments/4.kt", this::doTest);
                }

                public void testAllFilesPresentInKeepComments() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/useExpressionBody/convertToExpressionBody/keepComments"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
                }
            }
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/whenWithOnlyElse")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WhenWithOnlyElse extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInWhenWithOnlyElse() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/whenWithOnlyElse"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("complexExpression.kt")
        public void testComplexExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/whenWithOnlyElse/complexExpression.kt", this::doTest);
        }

        @TestMetadata("hasOtherBranches.kt")
        public void testHasOtherBranches() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/whenWithOnlyElse/hasOtherBranches.kt", this::doTest);
        }

        @TestMetadata("notExpression.kt")
        public void testNotExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/whenWithOnlyElse/notExpression.kt", this::doTest);
        }

        @TestMetadata("simpleExpression.kt")
        public void testSimpleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/whenWithOnlyElse/simpleExpression.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/inspectionsLocal/wrapUnaryOperator")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WrapUnaryOperator extends AbstractLocalInspectionTest {
        public void testAllFilesPresentInWrapUnaryOperator() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/inspectionsLocal/wrapUnaryOperator"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/inspectionsLocal/wrapUnaryOperator/simple.kt", this::doTest);
        }
    }
}
