/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.script;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/script/definition/highlighting")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class ScriptConfigurationHighlightingTestGenerated extends AbstractScriptConfigurationHighlightingTest {
    @TestMetadata("acceptedAnnotations")
    public void testAcceptedAnnotations() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/acceptedAnnotations/", this::doTest);
    }

    @TestMetadata("additionalImports")
    public void testAdditionalImports() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/additionalImports/", this::doTest);
    }

    public void testAllFilesPresentInHighlighting() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/script/definition/highlighting"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
    }

    @TestMetadata("asyncResolver")
    public void testAsyncResolver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/asyncResolver/", this::doTest);
    }

    @TestMetadata("conflictingModule")
    public void testConflictingModule() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/conflictingModule/", this::doTest);
    }

    @TestMetadata("customBaseClass")
    public void testCustomBaseClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/customBaseClass/", this::doTest);
    }

    @TestMetadata("customLibrary")
    public void testCustomLibrary() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/customLibrary/", this::doTest);
    }

    @TestMetadata("doNotSpeakAboutJava")
    public void testDoNotSpeakAboutJava() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/doNotSpeakAboutJava/", this::doTest);
    }

    @TestMetadata("doNotSpeakAboutJavaLegacy")
    public void testDoNotSpeakAboutJavaLegacy() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/doNotSpeakAboutJavaLegacy/", this::doTest);
    }

    @TestMetadata("emptyAsyncResolver")
    public void testEmptyAsyncResolver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/emptyAsyncResolver/", this::doTest);
    }

    @TestMetadata("errorResolver")
    public void testErrorResolver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/errorResolver/", this::doTest);
    }

    @TestMetadata("javaNestedClass")
    public void testJavaNestedClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/javaNestedClass/", this::doTest);
    }

    @TestMetadata("multiModule")
    public void testMultiModule() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/multiModule/", this::doTest);
    }

    @TestMetadata("noResolver")
    public void testNoResolver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/noResolver/", this::doTest);
    }

    @TestMetadata("propertyAccessor")
    public void testPropertyAccessor() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/propertyAccessor/", this::doTest);
    }

    @TestMetadata("propertyAccessorFromModule")
    public void testPropertyAccessorFromModule() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/propertyAccessorFromModule/", this::doTest);
    }

    @TestMetadata("simple")
    public void testSimple() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/simple/", this::doTest);
    }

    @TestMetadata("throwingResolver")
    public void testThrowingResolver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/script/definition/highlighting/throwingResolver/", this::doTest);
    }
}
