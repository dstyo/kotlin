/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.codeInsight.unwrap;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class UnwrapRemoveTestGenerated extends AbstractUnwrapRemoveTest {
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/removeExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveExpression extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInRemoveExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/removeExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ifInBlock.kt")
        public void testIfInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeExpression/ifInBlock.kt", this::doTestExpressionRemover);
        }

        @TestMetadata("ifInExpressionInReturn.kt")
        public void testIfInExpressionInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeExpression/ifInExpressionInReturn.kt", this::doTestExpressionRemover);
        }

        @TestMetadata("ifInReturn.kt")
        public void testIfInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeExpression/ifInReturn.kt", this::doTestExpressionRemover);
        }

        @TestMetadata("tryInBlock.kt")
        public void testTryInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeExpression/tryInBlock.kt", this::doTestExpressionRemover);
        }

        @TestMetadata("tryInReturn.kt")
        public void testTryInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeExpression/tryInReturn.kt", this::doTestExpressionRemover);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapThen")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnwrapThen extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapThen() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/unwrapThen"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("thenCompoundInBlock.kt")
        public void testThenCompoundInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapThen/thenCompoundInBlock.kt", this::doTestThenUnwrapper);
        }

        @TestMetadata("thenCompoundInReturn.kt")
        public void testThenCompoundInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapThen/thenCompoundInReturn.kt", this::doTestThenUnwrapper);
        }

        @TestMetadata("thenSimpleInReturn.kt")
        public void testThenSimpleInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapThen/thenSimpleInReturn.kt", this::doTestThenUnwrapper);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapElse")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnwrapElse extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapElse() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/unwrapElse"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("elseCompoundInBlock.kt")
        public void testElseCompoundInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapElse/elseCompoundInBlock.kt", this::doTestElseUnwrapper);
        }

        @TestMetadata("elseCompoundInReturn.kt")
        public void testElseCompoundInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapElse/elseCompoundInReturn.kt", this::doTestElseUnwrapper);
        }

        @TestMetadata("elseSimpleInReturn.kt")
        public void testElseSimpleInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapElse/elseSimpleInReturn.kt", this::doTestElseUnwrapper);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/removeElse")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveElse extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInRemoveElse() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/removeElse"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("else.kt")
        public void testElse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeElse/else.kt", this::doTestElseRemover);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnwrapLoop extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapLoop() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop/doWhile.kt", this::doTestLoopUnwrapper);
        }

        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop/for.kt", this::doTestLoopUnwrapper);
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop/while.kt", this::doTestLoopUnwrapper);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapTry")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnwrapTry extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapTry() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/unwrapTry"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("tryCompoundInBlock.kt")
        public void testTryCompoundInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapTry/tryCompoundInBlock.kt", this::doTestTryUnwrapper);
        }

        @TestMetadata("tryCompoundInReturn.kt")
        public void testTryCompoundInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapTry/tryCompoundInReturn.kt", this::doTestTryUnwrapper);
        }

        @TestMetadata("trySimpleInReturn.kt")
        public void testTrySimpleInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapTry/trySimpleInReturn.kt", this::doTestTryUnwrapper);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnwrapCatch extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapCatch() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("catchCompoundInBlock.kt")
        public void testCatchCompoundInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch/catchCompoundInBlock.kt", this::doTestCatchUnwrapper);
        }

        @TestMetadata("catchCompoundInReturn.kt")
        public void testCatchCompoundInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch/catchCompoundInReturn.kt", this::doTestCatchUnwrapper);
        }

        @TestMetadata("catchSimpleInReturn.kt")
        public void testCatchSimpleInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch/catchSimpleInReturn.kt", this::doTestCatchUnwrapper);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/removeCatch")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveCatch extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInRemoveCatch() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/removeCatch"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("catch.kt")
        public void testCatch() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeCatch/catch.kt", this::doTestCatchRemover);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnwrapFinally extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapFinally() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("finallyCompoundInBlock.kt")
        public void testFinallyCompoundInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally/finallyCompoundInBlock.kt", this::doTestFinallyUnwrapper);
        }

        @TestMetadata("finallyCompoundInReturn.kt")
        public void testFinallyCompoundInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally/finallyCompoundInReturn.kt", this::doTestFinallyUnwrapper);
        }

        @TestMetadata("finallySimpleInReturn.kt")
        public void testFinallySimpleInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally/finallySimpleInReturn.kt", this::doTestFinallyUnwrapper);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/removeFinally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveFinally extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInRemoveFinally() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/removeFinally"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("finallyInBlock.kt")
        public void testFinallyInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeFinally/finallyInBlock.kt", this::doTestFinallyRemover);
        }

        @TestMetadata("finallyInReturn.kt")
        public void testFinallyInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/removeFinally/finallyInReturn.kt", this::doTestFinallyRemover);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnwrapLambda extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapLambda() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("lambdaCallCompoundInBlock.kt")
        public void testLambdaCallCompoundInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallCompoundInBlock.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaCallCompoundInReturn.kt")
        public void testLambdaCallCompoundInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallCompoundInReturn.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaCallInBlock.kt")
        public void testLambdaCallInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallInBlock.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaCallInBlock2.kt")
        public void testLambdaCallInBlock2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallInBlock2.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaCallSimpleInReturn.kt")
        public void testLambdaCallSimpleInReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallSimpleInReturn.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaInBlock.kt")
        public void testLambdaInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaInBlock.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaNonLocalPropertyCompoundInBlock.kt")
        public void testLambdaNonLocalPropertyCompoundInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaNonLocalPropertyCompoundInBlock.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaNonLocalPropertyInBlock.kt")
        public void testLambdaNonLocalPropertyInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaNonLocalPropertyInBlock.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaPropertyCompoundInBlock.kt")
        public void testLambdaPropertyCompoundInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaPropertyCompoundInBlock.kt", this::doTestLambdaUnwrapper);
        }

        @TestMetadata("lambdaPropertyInBlock.kt")
        public void testLambdaPropertyInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaPropertyInBlock.kt", this::doTestLambdaUnwrapper);
        }
    }

    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapFunctionParameter")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnwrapFunctionParameter extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapFunctionParameter() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/unwrapAndRemove/unwrapFunctionParameter"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("functionHasMultiParam.kt")
        public void testFunctionHasMultiParam() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapFunctionParameter/functionHasMultiParam.kt", this::doTestFunctionParameterUnwrapper);
        }

        @TestMetadata("functionHasSingleParam.kt")
        public void testFunctionHasSingleParam() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapFunctionParameter/functionHasSingleParam.kt", this::doTestFunctionParameterUnwrapper);
        }

        @TestMetadata("functionWithReceiver.kt")
        public void testFunctionWithReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/unwrapAndRemove/unwrapFunctionParameter/functionWithReceiver.kt", this::doTestFunctionParameterUnwrapper);
        }
    }
}
