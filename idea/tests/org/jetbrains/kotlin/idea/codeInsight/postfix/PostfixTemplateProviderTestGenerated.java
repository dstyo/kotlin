/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.codeInsight.postfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/codeInsight/postfix")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class PostfixTemplateProviderTestGenerated extends AbstractPostfixTemplateProviderTest {
    public void testAllFilesPresentInPostfix() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/postfix"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("assert.kt")
    public void testAssert() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/assert.kt", this::doTest);
    }

    @TestMetadata("assertNonTopLevel.kt")
    public void testAssertNonTopLevel() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/assertNonTopLevel.kt", this::doTest);
    }

    @TestMetadata("doNotProposeWrappingIncrement.kt")
    public void testDoNotProposeWrappingIncrement() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/doNotProposeWrappingIncrement.kt", this::doTest);
    }

    @TestMetadata("else.kt")
    public void testElse() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/else.kt", this::doTest);
    }

    @TestMetadata("for.kt")
    public void testFor() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/for.kt", this::doTest);
    }

    @TestMetadata("forOnMap.kt")
    public void testForOnMap() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/forOnMap.kt", this::doTest);
    }

    @TestMetadata("forOnString.kt")
    public void testForOnString() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/forOnString.kt", this::doTest);
    }

    @TestMetadata("if.kt")
    public void testIf() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/if.kt", this::doTest);
    }

    @TestMetadata("iter.kt")
    public void testIter() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/iter.kt", this::doTest);
    }

    @TestMetadata("noParOnLoop.kt")
    public void testNoParOnLoop() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/noParOnLoop.kt", this::doTest);
    }

    @TestMetadata("noReturnForNonStatement.kt")
    public void testNoReturnForNonStatement() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/noReturnForNonStatement.kt", this::doTest);
    }

    @TestMetadata("notBoolean.kt")
    public void testNotBoolean() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/notBoolean.kt", this::doTest);
    }

    @TestMetadata("notString.kt")
    public void testNotString() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/notString.kt", this::doTest);
    }

    @TestMetadata("notnull.kt")
    public void testNotnull() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/notnull.kt", this::doTest);
    }

    @TestMetadata("null.kt")
    public void testNull() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/null.kt", this::doTest);
    }

    @TestMetadata("par.kt")
    public void testPar() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/par.kt", this::doTest);
    }

    @TestMetadata("parAfterUserType.kt")
    public void testParAfterUserType() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/parAfterUserType.kt", this::doTest);
    }

    @TestMetadata("parAssignment.kt")
    public void testParAssignment() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/parAssignment.kt", this::doTest);
    }

    @TestMetadata("return.kt")
    public void testReturn() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/return.kt", this::doTest);
    }

    @TestMetadata("returnFromLoop.kt")
    public void testReturnFromLoop() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/returnFromLoop.kt", this::doTest);
    }

    @TestMetadata("sout.kt")
    public void testSout() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/sout.kt", this::doTest);
    }

    @TestMetadata("soutInIf.kt")
    public void testSoutInIf() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/soutInIf.kt", this::doTest);
    }

    @TestMetadata("soutInLoop.kt")
    public void testSoutInLoop() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/soutInLoop.kt", this::doTest);
    }

    @TestMetadata("try.kt")
    public void testTry() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/try.kt", this::doTest);
    }

    @TestMetadata("tryInLocalClass.kt")
    public void testTryInLocalClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/tryInLocalClass.kt", this::doTest);
    }

    @TestMetadata("tryOnFor.kt")
    public void testTryOnFor() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/tryOnFor.kt", this::doTest);
    }

    @TestMetadata("tryOnImportStatement.kt")
    public void testTryOnImportStatement() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/tryOnImportStatement.kt", this::doTest);
    }

    @TestMetadata("tryOnStatement.kt")
    public void testTryOnStatement() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/tryOnStatement.kt", this::doTest);
    }

    @TestMetadata("val.kt")
    public void testVal() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/val.kt", this::doTest);
    }

    @TestMetadata("valAfterReceiver.kt")
    public void testValAfterReceiver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/valAfterReceiver.kt", this::doTest);
    }

    @TestMetadata("valAfterSelector.kt")
    public void testValAfterSelector() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/valAfterSelector.kt", this::doTest);
    }

    @TestMetadata("valAtLamba.kt")
    public void testValAtLamba() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/valAtLamba.kt", this::doTest);
    }

    @TestMetadata("valAtLambaArgumentInCall.kt")
    public void testValAtLambaArgumentInCall() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/valAtLambaArgumentInCall.kt", this::doTest);
    }

    @TestMetadata("var.kt")
    public void testVar() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/var.kt", this::doTest);
    }

    @TestMetadata("when.kt")
    public void testWhen() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/when.kt", this::doTest);
    }

    @TestMetadata("whenExpression.kt")
    public void testWhenExpression() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/whenExpression.kt", this::doTest);
    }

    @TestMetadata("while.kt")
    public void testWhile() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/postfix/while.kt", this::doTest);
    }
}
