/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.codeInsight;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/codeInsight/breadcrumbs")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class BreadcrumbsTestGenerated extends AbstractBreadcrumbsTest {
    public void testAllFilesPresentInBreadcrumbs() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/breadcrumbs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("AnonymousObjects.kt")
    public void testAnonymousObjects() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/AnonymousObjects.kt", this::doTest);
    }

    @TestMetadata("Declarations.kt")
    public void testDeclarations() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/Declarations.kt", this::doTest);
    }

    @TestMetadata("For.kt")
    public void testFor() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/For.kt", this::doTest);
    }

    @TestMetadata("FunctionalType.kt")
    public void testFunctionalType() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/FunctionalType.kt", this::doTest);
    }

    @TestMetadata("If.kt")
    public void testIf() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/If.kt", this::doTest);
    }

    @TestMetadata("LabeledStatements.kt")
    public void testLabeledStatements() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/LabeledStatements.kt", this::doTest);
    }

    @TestMetadata("Lambdas.kt")
    public void testLambdas() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/Lambdas.kt", this::doTest);
    }

    @TestMetadata("OnIfCondition.kt")
    public void testOnIfCondition() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/OnIfCondition.kt", this::doTest);
    }

    @TestMetadata("OnWhenEntryCondition.kt")
    public void testOnWhenEntryCondition() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/OnWhenEntryCondition.kt", this::doTest);
    }

    @TestMetadata("PropertyAccessor.kt")
    public void testPropertyAccessor() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/PropertyAccessor.kt", this::doTest);
    }

    @TestMetadata("StarProjection.kt")
    public void testStarProjection() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/StarProjection.kt", this::doTest);
    }

    @TestMetadata("Try.kt")
    public void testTry() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/Try.kt", this::doTest);
    }

    @TestMetadata("When.kt")
    public void testWhen() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/When.kt", this::doTest);
    }

    @TestMetadata("While.kt")
    public void testWhile() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/breadcrumbs/While.kt", this::doTest);
    }
}
