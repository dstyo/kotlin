/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.codeInsight;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/codeInsight/outOfBlock")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class OutOfBlockModificationTestGenerated extends AbstractOutOfBlockModificationTest {
    public void testAllFilesPresentInOutOfBlock() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/outOfBlock"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("Class_Class_FunNoType_Block.kt")
    public void testClass_Class_FunNoType_Block() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/Class_Class_FunNoType_Block.kt", this::doTest);
    }

    @TestMetadata("Class_Class_FunNoType_Block_Expression.kt")
    public void testClass_Class_FunNoType_Block_Expression() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/Class_Class_FunNoType_Block_Expression.kt", this::doTest);
    }

    @TestMetadata("FunInFun.kt")
    public void testFunInFun() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/FunInFun.kt", this::doTest);
    }

    @TestMetadata("FunInInitBlock.kt")
    public void testFunInInitBlock() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/FunInInitBlock.kt", this::doTest);
    }

    @TestMetadata("FunNoBody.kt")
    public void testFunNoBody() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/FunNoBody.kt", this::doTest);
    }

    @TestMetadata("FunNoType_Block.kt")
    public void testFunNoType_Block() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/FunNoType_Block.kt", this::doTest);
    }

    @TestMetadata("FunNoType_Block_Class.kt")
    public void testFunNoType_Block_Class() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/FunNoType_Block_Class.kt", this::doTest);
    }

    @TestMetadata("FunWithType_Initializer.kt")
    public void testFunWithType_Initializer() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/FunWithType_Initializer.kt", this::doTest);
    }

    @TestMetadata("FunWithType_Initializer_Expression.kt")
    public void testFunWithType_Initializer_Expression() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/FunWithType_Initializer_Expression.kt", this::doTest);
    }

    @TestMetadata("InAntonymsObjectDeclaration.kt")
    public void testInAntonymsObjectDeclaration() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InAntonymsObjectDeclaration.kt", this::doTest);
    }

    @TestMetadata("InClass.kt")
    public void testInClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InClass.kt", this::doTest);
    }

    @TestMetadata("InClassInClass.kt")
    public void testInClassInClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InClassInClass.kt", this::doTest);
    }

    @TestMetadata("InClassPropertyAccessor.kt")
    public void testInClassPropertyAccessor() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InClassPropertyAccessor.kt", this::doTest);
    }

    @TestMetadata("InFunInFunWithBody.kt")
    public void testInFunInFunWithBody() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InFunInFunWithBody.kt", this::doTest);
    }

    @TestMetadata("InFunInFunctionInitializerInFun.kt")
    public void testInFunInFunctionInitializerInFun() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InFunInFunctionInitializerInFun.kt", this::doTest);
    }

    @TestMetadata("InFunInMultiDeclaration.kt")
    public void testInFunInMultiDeclaration() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InFunInMultiDeclaration.kt", this::doTest);
    }

    @TestMetadata("InFunInProperty.kt")
    public void testInFunInProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InFunInProperty.kt", this::doTest);
    }

    @TestMetadata("InFunInPropertyInObjectLiteral.kt")
    public void testInFunInPropertyInObjectLiteral() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InFunInPropertyInObjectLiteral.kt", this::doTest);
    }

    @TestMetadata("InFunObjectLiteral.kt")
    public void testInFunObjectLiteral() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InFunObjectLiteral.kt", this::doTest);
    }

    @TestMetadata("InFunWithInference.kt")
    public void testInFunWithInference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InFunWithInference.kt", this::doTest);
    }

    @TestMetadata("InFunctionLiteral.kt")
    public void testInFunctionLiteral() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InFunctionLiteral.kt", this::doTest);
    }

    @TestMetadata("InGlobalPropertyWithGetter.kt")
    public void testInGlobalPropertyWithGetter() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InGlobalPropertyWithGetter.kt", this::doTest);
    }

    @TestMetadata("InMethod.kt")
    public void testInMethod() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InMethod.kt", this::doTest);
    }

    @TestMetadata("InPropertyAccessorWithInference.kt")
    public void testInPropertyAccessorWithInference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InPropertyAccessorWithInference.kt", this::doTest);
    }

    @TestMetadata("InPropertyAccessorWithInferenceInClass.kt")
    public void testInPropertyAccessorWithInferenceInClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InPropertyAccessorWithInferenceInClass.kt", this::doTest);
    }

    @TestMetadata("InPropertyWithFunctionLiteral.kt")
    public void testInPropertyWithFunctionLiteral() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InPropertyWithFunctionLiteral.kt", this::doTest);
    }

    @TestMetadata("InPropertyWithInference.kt")
    public void testInPropertyWithInference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InPropertyWithInference.kt", this::doTest);
    }

    @TestMetadata("InSuperTypeCallCallInLambdaInCall.kt")
    public void testInSuperTypeCallCallInLambdaInCall() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InSuperTypeCallCallInLambdaInCall.kt", this::doTest);
    }

    @TestMetadata("InSuperTypeCallInLambaInBody.kt")
    public void testInSuperTypeCallInLambaInBody() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InSuperTypeCallInLambaInBody.kt", this::doTest);
    }

    @TestMetadata("InSuperTypeCallInLambdaParameters.kt")
    public void testInSuperTypeCallInLambdaParameters() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InSuperTypeCallInLambdaParameters.kt", this::doTest);
    }

    @TestMetadata("InitBlock.kt")
    public void testInitBlock() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/InitBlock.kt", this::doTest);
    }

    @TestMetadata("Object_FunNoType_Block.kt")
    public void testObject_FunNoType_Block() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/Object_FunNoType_Block.kt", this::doTest);
    }

    @TestMetadata("Object_FunNoType_Block_Expression.kt")
    public void testObject_FunNoType_Block_Expression() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/Object_FunNoType_Block_Expression.kt", this::doTest);
    }

    @TestMetadata("PropNotNullType_Initializer_ObjectLiteral_Fun.kt")
    public void testPropNotNullType_Initializer_ObjectLiteral_Fun() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/PropNotNullType_Initializer_ObjectLiteral_Fun.kt", this::doTest);
    }

    @TestMetadata("PropNullType_Initializer_If_Fun.kt")
    public void testPropNullType_Initializer_If_Fun() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/PropNullType_Initializer_If_Fun.kt", this::doTest);
    }

    @TestMetadata("PropNullType_Initializer_ObjectLiteral_Fun.kt")
    public void testPropNullType_Initializer_ObjectLiteral_Fun() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/PropNullType_Initializer_ObjectLiteral_Fun.kt", this::doTest);
    }

    @TestMetadata("PropertyNoType_Initializer_String.kt")
    public void testPropertyNoType_Initializer_String() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/PropertyNoType_Initializer_String.kt", this::doTest);
    }

    @TestMetadata("PropertyWithType_Initializer_String.kt")
    public void testPropertyWithType_Initializer_String() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/PropertyWithType_Initializer_String.kt", this::doTest);
    }

    @TestMetadata("StringInSuperConstroctorCall.kt")
    public void testStringInSuperConstroctorCall() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/StringInSuperConstroctorCall.kt", this::doTest);
    }

    @TestMetadata("WholeFileChanged.kt")
    public void testWholeFileChanged() throws Exception {
        KotlinTestUtils.runTest("idea/testData/codeInsight/outOfBlock/WholeFileChanged.kt", this::doTest);
    }
}
