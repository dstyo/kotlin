/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.codeInsight.surroundWith;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class SurroundWithTestGenerated extends AbstractSurroundWithTest {
    @TestMetadata("idea/testData/codeInsight/surroundWith/if")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class If extends AbstractSurroundWithTest {
        public void testAllFilesPresentInIf() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("block.kt")
        public void testBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/block.kt", this::doTestWithIfSurrounder);
        }

        @TestMetadata("emptyLine.kt")
        public void testEmptyLine() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/emptyLine.kt", this::doTestWithIfSurrounder);
        }

        @TestMetadata("severalStatements.kt")
        public void testSeveralStatements() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/severalStatements.kt", this::doTestWithIfSurrounder);
        }

        @TestMetadata("singleStatement.kt")
        public void testSingleStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/singleStatement.kt", this::doTestWithIfSurrounder);
        }

        @TestMetadata("singleStatementAtCaret.kt")
        public void testSingleStatementAtCaret() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/singleStatementAtCaret.kt", this::doTestWithIfSurrounder);
        }

        @TestMetadata("usedAsExpression.kt")
        public void testUsedAsExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/usedAsExpression.kt", this::doTestWithIfSurrounder);
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/variable.kt", this::doTestWithIfSurrounder);
        }

        @TestMetadata("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MoveDeclarationsOut extends AbstractSurroundWithTest {
            public void testAllFilesPresentInMoveDeclarationsOut() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/class")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Class extends AbstractSurroundWithTest {
                public void testAllFilesPresentInClass() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/class"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classInType.kt")
                public void testClassInType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/class/classInType.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("localClass.kt")
                public void testLocalClass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/class/localClass.kt", this::doTestWithIfSurrounder);
                }
            }

            @TestMetadata("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/function")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Function extends AbstractSurroundWithTest {
                public void testAllFilesPresentInFunction() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/function"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("firstChildLocalFun.kt")
                public void testFirstChildLocalFun() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/function/firstChildLocalFun.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("localFun.kt")
                public void testLocalFun() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/function/localFun.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("unusedLocalFun.kt")
                public void testUnusedLocalFun() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/function/unusedLocalFun.kt", this::doTestWithIfSurrounder);
                }
            }

            @TestMetadata("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/object")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Object extends AbstractSurroundWithTest {
                public void testAllFilesPresentInObject() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/object"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("localObject.kt")
                public void testLocalObject() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/object/localObject.kt", this::doTestWithIfSurrounder);
                }
            }

            @TestMetadata("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/order")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Order extends AbstractSurroundWithTest {
                public void testAllFilesPresentInOrder() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/order"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("twoClasses.kt")
                public void testTwoClasses() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/order/twoClasses.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("valAndClass.kt")
                public void testValAndClass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/order/valAndClass.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("valOrder.kt")
                public void testValOrder() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/order/valOrder.kt", this::doTestWithIfSurrounder);
                }
            }

            @TestMetadata("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/val")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Val extends AbstractSurroundWithTest {
                public void testAllFilesPresentInVal() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/val"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("fullQualifiedType.kt")
                public void testFullQualifiedType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/val/fullQualifiedType.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("fullQualifiedTypeWithoutTypeRef.kt")
                public void testFullQualifiedTypeWithoutTypeRef() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/val/fullQualifiedTypeWithoutTypeRef.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("valWithTypeWithInitializer.kt")
                public void testValWithTypeWithInitializer() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/val/valWithTypeWithInitializer.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("valWithTypeWoInitializer.kt")
                public void testValWithTypeWoInitializer() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/val/valWithTypeWoInitializer.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("valWoTypeWithInitializer.kt")
                public void testValWoTypeWithInitializer() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/val/valWoTypeWithInitializer.kt", this::doTestWithIfSurrounder);
                }
            }

            @TestMetadata("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Var extends AbstractSurroundWithTest {
                public void testAllFilesPresentInVar() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("varWithNotNullableTypeWithInitializer.kt")
                public void testVarWithNotNullableTypeWithInitializer() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var/varWithNotNullableTypeWithInitializer.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("varWithTypeWoInitializer.kt")
                public void testVarWithTypeWoInitializer() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var/varWithTypeWoInitializer.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("varWoTypeWithInitializer.kt")
                public void testVarWoTypeWithInitializer() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var/varWoTypeWithInitializer.kt", this::doTestWithIfSurrounder);
                }

                @TestMetadata("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var/defaultValue")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class DefaultValue extends AbstractSurroundWithTest {
                    public void testAllFilesPresentInDefaultValue() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var/defaultValue"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("boolean.kt")
                    public void testBoolean() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var/defaultValue/boolean.kt", this::doTestWithIfSurrounder);
                    }

                    @TestMetadata("nullable.kt")
                    public void testNullable() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var/defaultValue/nullable.kt", this::doTestWithIfSurrounder);
                    }

                    @TestMetadata("primitiveNumbers.kt")
                    public void testPrimitiveNumbers() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/if/moveDeclarationsOut/var/defaultValue/primitiveNumbers.kt", this::doTestWithIfSurrounder);
                    }
                }
            }
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/ifElse")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IfElse extends AbstractSurroundWithTest {
        public void testAllFilesPresentInIfElse() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/ifElse"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("block.kt")
        public void testBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElse/block.kt", this::doTestWithIfElseSurrounder);
        }

        @TestMetadata("moveDeclarationsOutVal.kt")
        public void testMoveDeclarationsOutVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElse/moveDeclarationsOutVal.kt", this::doTestWithIfElseSurrounder);
        }

        @TestMetadata("moveDeclarationsOutVar.kt")
        public void testMoveDeclarationsOutVar() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElse/moveDeclarationsOutVar.kt", this::doTestWithIfElseSurrounder);
        }

        @TestMetadata("severalStatements.kt")
        public void testSeveralStatements() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElse/severalStatements.kt", this::doTestWithIfElseSurrounder);
        }

        @TestMetadata("singleStatement.kt")
        public void testSingleStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElse/singleStatement.kt", this::doTestWithIfElseSurrounder);
        }

        @TestMetadata("singleStatementAtCaret.kt")
        public void testSingleStatementAtCaret() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElse/singleStatementAtCaret.kt", this::doTestWithIfElseSurrounder);
        }

        @TestMetadata("usedAsExpression.kt")
        public void testUsedAsExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElse/usedAsExpression.kt", this::doTestWithIfElseSurrounder);
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElse/variable.kt", this::doTestWithIfElseSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/ifElseExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IfElseExpression extends AbstractSurroundWithTest {
        public void testAllFilesPresentInIfElseExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/ifElseExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("asStatement.kt")
        public void testAsStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElseExpression/asStatement.kt", this::doTestWithIfElseExpressionSurrounder);
        }

        @TestMetadata("paranthesized.kt")
        public void testParanthesized() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElseExpression/paranthesized.kt", this::doTestWithIfElseExpressionSurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElseExpression/singleExpression.kt", this::doTestWithIfElseExpressionSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/ifElseExpressionBraces")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IfElseExpressionBraces extends AbstractSurroundWithTest {
        public void testAllFilesPresentInIfElseExpressionBraces() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/ifElseExpressionBraces"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("asStatement.kt")
        public void testAsStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElseExpressionBraces/asStatement.kt", this::doTestWithIfElseExpressionBracesSurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/ifElseExpressionBraces/singleExpression.kt", this::doTestWithIfElseExpressionBracesSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/not")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Not extends AbstractSurroundWithTest {
        public void testAllFilesPresentInNot() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/not"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("booleanExpr.kt")
        public void testBooleanExpr() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/not/booleanExpr.kt", this::doTestWithNotSurrounder);
        }

        @TestMetadata("booleanExprAtCaret.kt")
        public void testBooleanExprAtCaret() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/not/booleanExprAtCaret.kt", this::doTestWithNotSurrounder);
        }

        @TestMetadata("expressionInIf.kt")
        public void testExpressionInIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/not/expressionInIf.kt", this::doTestWithNotSurrounder);
        }

        @TestMetadata("notExpression.kt")
        public void testNotExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/not/notExpression.kt", this::doTestWithNotSurrounder);
        }

        @TestMetadata("severalExpr.kt")
        public void testSeveralExpr() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/not/severalExpr.kt", this::doTestWithNotSurrounder);
        }

        @TestMetadata("severalExprAtCaret.kt")
        public void testSeveralExprAtCaret() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/not/severalExprAtCaret.kt", this::doTestWithNotSurrounder);
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/not/variable.kt", this::doTestWithNotSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/parentheses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Parentheses extends AbstractSurroundWithTest {
        public void testAllFilesPresentInParentheses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/parentheses"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("expr.kt")
        public void testExpr() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/expr.kt", this::doTestWithParenthesesSurrounder);
        }

        @TestMetadata("inIf.kt")
        public void testInIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/inIf.kt", this::doTestWithParenthesesSurrounder);
        }

        @TestMetadata("partOfExpr.kt")
        public void testPartOfExpr() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/partOfExpr.kt", this::doTestWithParenthesesSurrounder);
        }

        @TestMetadata("idea/testData/codeInsight/surroundWith/parentheses/notApplicable")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NotApplicable extends AbstractSurroundWithTest {
            public void testAllFilesPresentInNotApplicable() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/parentheses/notApplicable"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("if.kt")
            public void testIf() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/if.kt", this::doTestWithParenthesesSurrounder);
            }

            @TestMetadata("import.kt")
            public void testImport() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/import.kt", this::doTestWithParenthesesSurrounder);
            }

            @TestMetadata("importQualifiedFirst.kt")
            public void testImportQualifiedFirst() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/importQualifiedFirst.kt", this::doTestWithParenthesesSurrounder);
            }

            @TestMetadata("importQualifiedSecond.kt")
            public void testImportQualifiedSecond() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/importQualifiedSecond.kt", this::doTestWithParenthesesSurrounder);
            }

            @TestMetadata("packageName.kt")
            public void testPackageName() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/packageName.kt", this::doTestWithParenthesesSurrounder);
            }

            @TestMetadata("parameterName.kt")
            public void testParameterName() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/parameterName.kt", this::doTestWithParenthesesSurrounder);
            }

            @TestMetadata("parameterWithType.kt")
            public void testParameterWithType() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/parameterWithType.kt", this::doTestWithParenthesesSurrounder);
            }

            @TestMetadata("qualifiedExpressionSecond.kt")
            public void testQualifiedExpressionSecond() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/qualifiedExpressionSecond.kt", this::doTestWithParenthesesSurrounder);
            }

            @TestMetadata("qualifiedExpressionSecondWithBracket.kt")
            public void testQualifiedExpressionSecondWithBracket() throws Exception {
                KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/parentheses/notApplicable/qualifiedExpressionSecondWithBracket.kt", this::doTestWithParenthesesSurrounder);
            }
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/stringTemplate")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StringTemplate extends AbstractSurroundWithTest {
        public void testAllFilesPresentInStringTemplate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/stringTemplate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("multiExpression.kt")
        public void testMultiExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/stringTemplate/multiExpression.kt", this::doTestWithStringTemplateSurrounder);
        }

        @TestMetadata("multiExpressionConstant.kt")
        public void testMultiExpressionConstant() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/stringTemplate/multiExpressionConstant.kt", this::doTestWithStringTemplateSurrounder);
        }

        @TestMetadata("singleConstant.kt")
        public void testSingleConstant() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/stringTemplate/singleConstant.kt", this::doTestWithStringTemplateSurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/stringTemplate/singleExpression.kt", this::doTestWithStringTemplateSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/when")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class When extends AbstractSurroundWithTest {
        public void testAllFilesPresentInWhen() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/when"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/when/enum.kt", this::doTestWithWhenSurrounder);
        }

        @TestMetadata("multiExpression.kt")
        public void testMultiExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/when/multiExpression.kt", this::doTestWithWhenSurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/when/singleExpression.kt", this::doTestWithWhenSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/tryCatch")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryCatch extends AbstractSurroundWithTest {
        public void testAllFilesPresentInTryCatch() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/tryCatch"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("moveDeclarationsOut.kt")
        public void testMoveDeclarationsOut() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatch/moveDeclarationsOut.kt", this::doTestWithTryCatchSurrounder);
        }

        @TestMetadata("multiExpression.kt")
        public void testMultiExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatch/multiExpression.kt", this::doTestWithTryCatchSurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatch/singleExpression.kt", this::doTestWithTryCatchSurrounder);
        }

        @TestMetadata("usedAsExpression.kt")
        public void testUsedAsExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatch/usedAsExpression.kt", this::doTestWithTryCatchSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/tryCatchExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryCatchExpression extends AbstractSurroundWithTest {
        public void testAllFilesPresentInTryCatchExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/tryCatchExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("asStatement.kt")
        public void testAsStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatchExpression/asStatement.kt", this::doTestWithTryCatchExpressionSurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatchExpression/singleExpression.kt", this::doTestWithTryCatchExpressionSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/tryCatchFinally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryCatchFinally extends AbstractSurroundWithTest {
        public void testAllFilesPresentInTryCatchFinally() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/tryCatchFinally"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("multiExpression.kt")
        public void testMultiExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatchFinally/multiExpression.kt", this::doTestWithTryCatchFinallySurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatchFinally/singleExpression.kt", this::doTestWithTryCatchFinallySurrounder);
        }

        @TestMetadata("usedAsExpression.kt")
        public void testUsedAsExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatchFinally/usedAsExpression.kt", this::doTestWithTryCatchFinallySurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/tryCatchFinallyExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryCatchFinallyExpression extends AbstractSurroundWithTest {
        public void testAllFilesPresentInTryCatchFinallyExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/tryCatchFinallyExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("asStatement.kt")
        public void testAsStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatchFinallyExpression/asStatement.kt", this::doTestWithTryCatchFinallyExpressionSurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryCatchFinallyExpression/singleExpression.kt", this::doTestWithTryCatchFinallyExpressionSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/tryFinally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryFinally extends AbstractSurroundWithTest {
        public void testAllFilesPresentInTryFinally() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/tryFinally"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("multiExpression.kt")
        public void testMultiExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryFinally/multiExpression.kt", this::doTestWithTryFinallySurrounder);
        }

        @TestMetadata("singleExpression.kt")
        public void testSingleExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryFinally/singleExpression.kt", this::doTestWithTryFinallySurrounder);
        }

        @TestMetadata("usedAsExpression.kt")
        public void testUsedAsExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/tryFinally/usedAsExpression.kt", this::doTestWithTryFinallySurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/functionLiteral")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionLiteral extends AbstractSurroundWithTest {
        public void testAllFilesPresentInFunctionLiteral() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/functionLiteral"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("moveDeclarationsOut.kt")
        public void testMoveDeclarationsOut() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/functionLiteral/moveDeclarationsOut.kt", this::doTestWithFunctionLiteralSurrounder);
        }

        @TestMetadata("multiStatement.kt")
        public void testMultiStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/functionLiteral/multiStatement.kt", this::doTestWithFunctionLiteralSurrounder);
        }

        @TestMetadata("singleStatement.kt")
        public void testSingleStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/functionLiteral/singleStatement.kt", this::doTestWithFunctionLiteralSurrounder);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/withIfExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WithIfExpression extends AbstractSurroundWithTest {
        public void testAllFilesPresentInWithIfExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/withIfExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("complexBoolean.kt")
        public void testComplexBoolean() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/withIfExpression/complexBoolean.kt", this::doTestWithSurroundWithIfExpression);
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/withIfExpression/variable.kt", this::doTestWithSurroundWithIfExpression);
        }
    }

    @TestMetadata("idea/testData/codeInsight/surroundWith/withIfElseExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WithIfElseExpression extends AbstractSurroundWithTest {
        public void testAllFilesPresentInWithIfElseExpression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/codeInsight/surroundWith/withIfElseExpression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("complexBoolean.kt")
        public void testComplexBoolean() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/withIfElseExpression/complexBoolean.kt", this::doTestWithSurroundWithIfElseExpression);
        }

        @TestMetadata("replaceWithParenthesized.kt")
        public void testReplaceWithParenthesized() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/withIfElseExpression/replaceWithParenthesized.kt", this::doTestWithSurroundWithIfElseExpression);
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/codeInsight/surroundWith/withIfElseExpression/variable.kt", this::doTestWithSurroundWithIfElseExpression);
        }
    }
}
