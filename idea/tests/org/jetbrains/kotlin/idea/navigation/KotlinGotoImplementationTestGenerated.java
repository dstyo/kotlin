/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.navigation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/navigation/implementations")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class KotlinGotoImplementationTestGenerated extends AbstractKotlinGotoImplementationTest {
    @TestMetadata("AbstractClassImplementorsWithDeclaration.kt")
    public void testAbstractClassImplementorsWithDeclaration() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/AbstractClassImplementorsWithDeclaration.kt", this::doTest);
    }

    public void testAllFilesPresentInImplementations() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/navigation/implementations"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, false);
    }

    @TestMetadata("ClassImplementorsWithDeclaration.kt")
    public void testClassImplementorsWithDeclaration() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/ClassImplementorsWithDeclaration.kt", this::doTest);
    }

    @TestMetadata("ClassNavigation.kt")
    public void testClassNavigation() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/ClassNavigation.kt", this::doTest);
    }

    @TestMetadata("ConstructorPropertyOverriddenNavigation.kt")
    public void testConstructorPropertyOverriddenNavigation() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/ConstructorPropertyOverriddenNavigation.kt", this::doTest);
    }

    @TestMetadata("DefaultImplFunction.kt")
    public void testDefaultImplFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/DefaultImplFunction.kt", this::doTest);
    }

    @TestMetadata("DefaultImplProperty.kt")
    public void testDefaultImplProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/DefaultImplProperty.kt", this::doTest);
    }

    @TestMetadata("DelegatedAndDefaultImplFunction.kt")
    public void testDelegatedAndDefaultImplFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/DelegatedAndDefaultImplFunction.kt", this::doTest);
    }

    @TestMetadata("DelegatedFunction.kt")
    public void testDelegatedFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/DelegatedFunction.kt", this::doTest);
    }

    @TestMetadata("DelegatedProperty.kt")
    public void testDelegatedProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/DelegatedProperty.kt", this::doTest);
    }

    @TestMetadata("EnumEntriesInheritance.kt")
    public void testEnumEntriesInheritance() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/EnumEntriesInheritance.kt", this::doTest);
    }

    @TestMetadata("FakeOverride.kt")
    public void testFakeOverride() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/FakeOverride.kt", this::doTest);
    }

    @TestMetadata("FunctionOverrideNavigation.kt")
    public void testFunctionOverrideNavigation() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/FunctionOverrideNavigation.kt", this::doTest);
    }

    @TestMetadata("GenericDelegatedAndDefaultImplFunction.kt")
    public void testGenericDelegatedAndDefaultImplFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/GenericDelegatedAndDefaultImplFunction.kt", this::doTest);
    }

    @TestMetadata("GenericFakeOverride.kt")
    public void testGenericFakeOverride() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/GenericFakeOverride.kt", this::doTest);
    }

    @TestMetadata("ImplementGenericWithPrimitives.kt")
    public void testImplementGenericWithPrimitives() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/ImplementGenericWithPrimitives.kt", this::doTest);
    }

    @TestMetadata("ObjectImported.kt")
    public void testObjectImported() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/ObjectImported.kt", this::doTest);
    }

    @TestMetadata("OverridesInEnumEntries.kt")
    public void testOverridesInEnumEntries() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/OverridesInEnumEntries.kt", this::doTest);
    }

    @TestMetadata("PropertyOverriddenNavigation.kt")
    public void testPropertyOverriddenNavigation() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/PropertyOverriddenNavigation.kt", this::doTest);
    }

    @TestMetadata("TraitImplementorsWithDeclaration.kt")
    public void testTraitImplementorsWithDeclaration() throws Exception {
        KotlinTestUtils.runTest("idea/testData/navigation/implementations/TraitImplementorsWithDeclaration.kt", this::doTest);
    }
}
