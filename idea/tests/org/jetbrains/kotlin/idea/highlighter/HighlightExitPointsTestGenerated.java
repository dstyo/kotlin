/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.highlighter;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/exitPoints")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class HighlightExitPointsTestGenerated extends AbstractHighlightExitPointsTest {
    public void testAllFilesPresentInExitPoints() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/exitPoints"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("getter.kt")
    public void testGetter() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/getter.kt", this::doTest);
    }

    @TestMetadata("inline1.kt")
    public void testInline1() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/inline1.kt", this::doTest);
    }

    @TestMetadata("inline2.kt")
    public void testInline2() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/inline2.kt", this::doTest);
    }

    @TestMetadata("inline3.kt")
    public void testInline3() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/inline3.kt", this::doTest);
    }

    @TestMetadata("inlineLocalReturn1.kt")
    public void testInlineLocalReturn1() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/inlineLocalReturn1.kt", this::doTest);
    }

    @TestMetadata("inlineLocalReturn2.kt")
    public void testInlineLocalReturn2() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/inlineLocalReturn2.kt", this::doTest);
    }

    @TestMetadata("inlineWithNoInlineParam.kt")
    public void testInlineWithNoInlineParam() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/inlineWithNoInlineParam.kt", this::doTest);
    }

    @TestMetadata("invalidReturn.kt")
    public void testInvalidReturn() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/invalidReturn.kt", this::doTest);
    }

    @TestMetadata("invalidThrow.kt")
    public void testInvalidThrow() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/invalidThrow.kt", this::doTest);
    }

    @TestMetadata("localFunction1.kt")
    public void testLocalFunction1() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/localFunction1.kt", this::doTest);
    }

    @TestMetadata("localFunction2.kt")
    public void testLocalFunction2() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/localFunction2.kt", this::doTest);
    }

    @TestMetadata("localFunctionThrow.kt")
    public void testLocalFunctionThrow() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/localFunctionThrow.kt", this::doTest);
    }

    @TestMetadata("notInline1.kt")
    public void testNotInline1() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/notInline1.kt", this::doTest);
    }

    @TestMetadata("notInline2.kt")
    public void testNotInline2() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/notInline2.kt", this::doTest);
    }

    @TestMetadata("simple.kt")
    public void testSimple() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/simple.kt", this::doTest);
    }

    @TestMetadata("throw1.kt")
    public void testThrow1() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/throw1.kt", this::doTest);
    }

    @TestMetadata("throw2.kt")
    public void testThrow2() throws Exception {
        KotlinTestUtils.runTest("idea/testData/exitPoints/throw2.kt", this::doTest);
    }
}
