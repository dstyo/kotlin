/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.intentions.declarations;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/joinLines")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class JoinLinesTestGenerated extends AbstractJoinLinesTest {
    public void testAllFilesPresentInJoinLines() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/joinLines"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("idea/testData/joinLines/addSemicolon")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AddSemicolon extends AbstractJoinLinesTest {
        public void testAllFilesPresentInAddSemicolon() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/joinLines/addSemicolon"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ClassDeclarations.kt")
        public void testClassDeclarations() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/ClassDeclarations.kt", this::doTest);
        }

        @TestMetadata("FunctionCalls.kt")
        public void testFunctionCalls() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/FunctionCalls.kt", this::doTest);
        }

        @TestMetadata("FunctionCallsAndAComment.kt")
        public void testFunctionCallsAndAComment() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/FunctionCallsAndAComment.kt", this::doTest);
        }

        @TestMetadata("FunctionCallsAndAMultilineComment.kt")
        public void testFunctionCallsAndAMultilineComment() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/FunctionCallsAndAMultilineComment.kt", this::doTest);
        }

        @TestMetadata("FunctionCallsAndSeveralComments.kt")
        public void testFunctionCallsAndSeveralComments() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/FunctionCallsAndSeveralComments.kt", this::doTest);
        }

        @TestMetadata("FunctionCallsWithMutlineSeparator.kt")
        public void testFunctionCallsWithMutlineSeparator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/FunctionCallsWithMutlineSeparator.kt", this::doTest);
        }

        @TestMetadata("FunctionDeclarations.kt")
        public void testFunctionDeclarations() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/FunctionDeclarations.kt", this::doTest);
        }

        @TestMetadata("InsideBraces.kt")
        public void testInsideBraces() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/InsideBraces.kt", this::doTest);
        }

        @TestMetadata("InsideIfBlock.kt")
        public void testInsideIfBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/InsideIfBlock.kt", this::doTest);
        }

        @TestMetadata("LocalAssingments.kt")
        public void testLocalAssingments() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/LocalAssingments.kt", this::doTest);
        }

        @TestMetadata("LocalAssingmentsWithSemicolon.kt")
        public void testLocalAssingmentsWithSemicolon() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/LocalAssingmentsWithSemicolon.kt", this::doTest);
        }

        @TestMetadata("LocalClasses.kt")
        public void testLocalClasses() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/LocalClasses.kt", this::doTest);
        }

        @TestMetadata("LocalFunctions.kt")
        public void testLocalFunctions() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/LocalFunctions.kt", this::doTest);
        }

        @TestMetadata("MemberFunctions.kt")
        public void testMemberFunctions() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/MemberFunctions.kt", this::doTest);
        }

        @TestMetadata("WhileAndACall.kt")
        public void testWhileAndACall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/WhileAndACall.kt", this::doTest);
        }

        @TestMetadata("WhileBlockAndACall.kt")
        public void testWhileBlockAndACall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/WhileBlockAndACall.kt", this::doTest);
        }

        @TestMetadata("WhileBlockAndACall2.kt")
        public void testWhileBlockAndACall2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/addSemicolon/WhileBlockAndACall2.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/joinLines/declarationAndAssignment")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DeclarationAndAssignment extends AbstractJoinLinesTest {
        public void testAllFilesPresentInDeclarationAndAssignment() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/joinLines/declarationAndAssignment"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("blankLineBetween.kt")
        public void testBlankLineBetween() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/blankLineBetween.kt", this::doTest);
        }

        @TestMetadata("commentBetween.kt")
        public void testCommentBetween() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/commentBetween.kt", this::doTest);
        }

        @TestMetadata("longInit.kt")
        public void testLongInit() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/longInit.kt", this::doTest);
        }

        @TestMetadata("longInit2.kt")
        public void testLongInit2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/longInit2.kt", this::doTest);
        }

        @TestMetadata("propertyWithAnnotation.kt")
        public void testPropertyWithAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/propertyWithAnnotation.kt", this::doTest);
        }

        @TestMetadata("simpleInit.kt")
        public void testSimpleInit() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInit.kt", this::doTest);
        }

        @TestMetadata("simpleInit2.kt")
        public void testSimpleInit2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInit2.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithBackticks.kt")
        public void testSimpleInitWithBackticks() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithBackticks.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithBackticks2.kt")
        public void testSimpleInitWithBackticks2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithBackticks2.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithBackticks3.kt")
        public void testSimpleInitWithBackticks3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithBackticks3.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithComments.kt")
        public void testSimpleInitWithComments() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithComments.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithComments2.kt")
        public void testSimpleInitWithComments2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithComments2.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithSemicolons.kt")
        public void testSimpleInitWithSemicolons() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithSemicolons.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithSemicolons2.kt")
        public void testSimpleInitWithSemicolons2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithSemicolons2.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithSemicolons3.kt")
        public void testSimpleInitWithSemicolons3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithSemicolons3.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithType.kt")
        public void testSimpleInitWithType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithType.kt", this::doTest);
        }

        @TestMetadata("simpleInitWithType2.kt")
        public void testSimpleInitWithType2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/declarationAndAssignment/simpleInitWithType2.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/joinLines/nestedIfs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NestedIfs extends AbstractJoinLinesTest {
        public void testAllFilesPresentInNestedIfs() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/joinLines/nestedIfs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("BlockBody.kt")
        public void testBlockBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/nestedIfs/BlockBody.kt", this::doTest);
        }

        @TestMetadata("ComplexCondition1.kt")
        public void testComplexCondition1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/nestedIfs/ComplexCondition1.kt", this::doTest);
        }

        @TestMetadata("ComplexCondition2.kt")
        public void testComplexCondition2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/nestedIfs/ComplexCondition2.kt", this::doTest);
        }

        @TestMetadata("InnerWithElse.kt")
        public void testInnerWithElse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/nestedIfs/InnerWithElse.kt", this::doTest);
        }

        @TestMetadata("OuterWithElse.kt")
        public void testOuterWithElse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/nestedIfs/OuterWithElse.kt", this::doTest);
        }

        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/nestedIfs/Simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/joinLines/removeBraces")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveBraces extends AbstractJoinLinesTest {
        public void testAllFilesPresentInRemoveBraces() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/joinLines/removeBraces"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("CommentAfterStatement.kt")
        public void testCommentAfterStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/CommentAfterStatement.kt", this::doTest);
        }

        @TestMetadata("CommentAfterStatement2.kt")
        public void testCommentAfterStatement2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/CommentAfterStatement2.kt", this::doTest);
        }

        @TestMetadata("CommentBeforeStatement.kt")
        public void testCommentBeforeStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/CommentBeforeStatement.kt", this::doTest);
        }

        @TestMetadata("CommentBeforeStatement2.kt")
        public void testCommentBeforeStatement2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/CommentBeforeStatement2.kt", this::doTest);
        }

        @TestMetadata("DoWhile.kt")
        public void testDoWhile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/DoWhile.kt", this::doTest);
        }

        @TestMetadata("Else.kt")
        public void testElse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/Else.kt", this::doTest);
        }

        @TestMetadata("For.kt")
        public void testFor() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/For.kt", this::doTest);
        }

        @TestMetadata("FunctionBody.kt")
        public void testFunctionBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/FunctionBody.kt", this::doTest);
        }

        @TestMetadata("FunctionWithOneLineReturn.kt")
        public void testFunctionWithOneLineReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/FunctionWithOneLineReturn.kt", this::doTest);
        }

        @TestMetadata("If.kt")
        public void testIf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/If.kt", this::doTest);
        }

        @TestMetadata("IfWithElse.kt")
        public void testIfWithElse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/IfWithElse.kt", this::doTest);
        }

        @TestMetadata("IfWithElseBlockInAssignment.kt")
        public void testIfWithElseBlockInAssignment() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/IfWithElseBlockInAssignment.kt", this::doTest);
        }

        @TestMetadata("IfWithPostfixAfterElseBlock.kt")
        public void testIfWithPostfixAfterElseBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/IfWithPostfixAfterElseBlock.kt", this::doTest);
        }

        @TestMetadata("IfWithQualifiedAfterElseBlock.kt")
        public void testIfWithQualifiedAfterElseBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/IfWithQualifiedAfterElseBlock.kt", this::doTest);
        }

        @TestMetadata("LambdaBody.kt")
        public void testLambdaBody() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/LambdaBody.kt", this::doTest);
        }

        @TestMetadata("NotSingleLineStatement.kt")
        public void testNotSingleLineStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/NotSingleLineStatement.kt", this::doTest);
        }

        @TestMetadata("TwoStatements.kt")
        public void testTwoStatements() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/TwoStatements.kt", this::doTest);
        }

        @TestMetadata("WhenEntry.kt")
        public void testWhenEntry() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/WhenEntry.kt", this::doTest);
        }

        @TestMetadata("While.kt")
        public void testWhile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/removeBraces/While.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/joinLines/stringTemplate")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StringTemplate extends AbstractJoinLinesTest {
        public void testAllFilesPresentInStringTemplate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/joinLines/stringTemplate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("firstLineVariable.kt")
        public void testFirstLineVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/stringTemplate/firstLineVariable.kt", this::doTest);
        }

        @TestMetadata("lineWithMultiStringLiteral.kt")
        public void testLineWithMultiStringLiteral() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/stringTemplate/lineWithMultiStringLiteral.kt", this::doTest);
        }

        @TestMetadata("lineWithMultiStringLiteralAndVariable.kt")
        public void testLineWithMultiStringLiteralAndVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/stringTemplate/lineWithMultiStringLiteralAndVariable.kt", this::doTest);
        }

        @TestMetadata("secondLineVariable.kt")
        public void testSecondLineVariable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/stringTemplate/secondLineVariable.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/stringTemplate/simple.kt", this::doTest);
        }

        @TestMetadata("threeLines.kt")
        public void testThreeLines() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/stringTemplate/threeLines.kt", this::doTest);
        }

        @TestMetadata("threeLines2.kt")
        public void testThreeLines2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/joinLines/stringTemplate/threeLines2.kt", this::doTest);
        }
    }
}
