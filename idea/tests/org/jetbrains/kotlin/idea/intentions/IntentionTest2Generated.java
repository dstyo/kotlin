/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.intentions;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/intentions/loopToCallChain")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IntentionTest2Generated extends AbstractIntentionTest2 {
    public void testAllFilesPresentInLoopToCallChain() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("array.kt")
    public void testArray() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/array.kt", this::doTest);
    }

    @TestMetadata("asSequenceOnly.kt")
    public void testAsSequenceOnly() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/asSequenceOnly.kt", this::doTest);
    }

    @TestMetadata("customTypeWithIterator.kt")
    public void testCustomTypeWithIterator() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/customTypeWithIterator.kt", this::doTest);
    }

    @TestMetadata("embeddedBreak1.kt")
    public void testEmbeddedBreak1() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/embeddedBreak1.kt", this::doTest);
    }

    @TestMetadata("embeddedBreak2.kt")
    public void testEmbeddedBreak2() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/embeddedBreak2.kt", this::doTest);
    }

    @TestMetadata("embeddedContinue.kt")
    public void testEmbeddedContinue() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/embeddedContinue.kt", this::doTest);
    }

    @TestMetadata("intArray.kt")
    public void testIntArray() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/intArray.kt", this::doTest);
    }

    @TestMetadata("itAlreadyUsed.kt")
    public void testItAlreadyUsed() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/itAlreadyUsed.kt", this::doTest);
    }

    @TestMetadata("KT14191.kt")
    public void testKT14191() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/KT14191.kt", this::doTest);
    }

    @TestMetadata("lastOrNull_ifAssign.kt")
    public void testLastOrNull_ifAssign() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/lastOrNull_ifAssign.kt", this::doTest);
    }

    @TestMetadata("moveInitializationsCloserToLoop.kt")
    public void testMoveInitializationsCloserToLoop() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/moveInitializationsCloserToLoop.kt", this::doTest);
    }

    @TestMetadata("range.kt")
    public void testRange() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/range.kt", this::doTest);
    }

    @TestMetadata("twoInitializationsBeforeLoop.kt")
    public void testTwoInitializationsBeforeLoop() throws Exception {
        KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/twoInitializationsBeforeLoop.kt", this::doTest);
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/any")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Any extends AbstractIntentionTest2 {
        public void testAllFilesPresentInAny() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/any"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("anyNotNull.kt")
        public void testAnyNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/anyNotNull.kt", this::doTest);
        }

        @TestMetadata("ifAssign.kt")
        public void testIfAssign() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/ifAssign.kt", this::doTest);
        }

        @TestMetadata("ifAssign_moveDeclaration.kt")
        public void testIfAssign_moveDeclaration() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/ifAssign_moveDeclaration.kt", this::doTest);
        }

        @TestMetadata("ifAssign_moveInitialization.kt")
        public void testIfAssign_moveInitialization() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/ifAssign_moveInitialization.kt", this::doTest);
        }

        @TestMetadata("ifAssign_noBreak.kt")
        public void testIfAssign_noBreak() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/ifAssign_noBreak.kt", this::doTest);
        }

        @TestMetadata("ifAssign_nonBooleanResult.kt")
        public void testIfAssign_nonBooleanResult() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/ifAssign_nonBooleanResult.kt", this::doTest);
        }

        @TestMetadata("ifAssign_nonBooleanResult2.kt")
        public void testIfAssign_nonBooleanResult2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/ifAssign_nonBooleanResult2.kt", this::doTest);
        }

        @TestMetadata("ifReturn.kt")
        public void testIfReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/ifReturn.kt", this::doTest);
        }

        @TestMetadata("ifReturn_nonBooleanResult.kt")
        public void testIfReturn_nonBooleanResult() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/ifReturn_nonBooleanResult.kt", this::doTest);
        }

        @TestMetadata("indexNeeded.kt")
        public void testIndexNeeded() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/indexNeeded.kt", this::doTest);
        }

        @TestMetadata("KT13998.kt")
        public void testKT13998() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/KT13998.kt", this::doTest);
        }

        @TestMetadata("KT13998_1.kt")
        public void testKT13998_1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/KT13998_1.kt", this::doTest);
        }

        @TestMetadata("kt17730.kt")
        public void testKt17730() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/kt17730.kt", this::doTest);
        }

        @TestMetadata("kt17730_1.kt")
        public void testKt17730_1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/kt17730_1.kt", this::doTest);
        }

        @TestMetadata("none.kt")
        public void testNone() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/none.kt", this::doTest);
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/any/return.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/contains")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Contains extends AbstractIntentionTest2 {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/contains/1.kt", this::doTest);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/contains/2.kt", this::doTest);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/contains/3.kt", this::doTest);
        }

        @TestMetadata("4.kt")
        public void test4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/contains/4.kt", this::doTest);
        }

        public void testAllFilesPresentInContains() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/contains"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/count")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Count extends AbstractIntentionTest2 {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/1.kt", this::doTest);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/2.kt", this::doTest);
        }

        public void testAllFilesPresentInCount() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/count"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("countIsInstance.kt")
        public void testCountIsInstance() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/countIsInstance.kt", this::doTest);
        }

        @TestMetadata("countNotNull.kt")
        public void testCountNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/countNotNull.kt", this::doTest);
        }

        @TestMetadata("countSomethingAndNotNull.kt")
        public void testCountSomethingAndNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/countSomethingAndNotNull.kt", this::doTest);
        }

        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/long.kt", this::doTest);
        }

        @TestMetadata("nonConstantInitial.kt")
        public void testNonConstantInitial() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/nonConstantInitial.kt", this::doTest);
        }

        @TestMetadata("nonZeroInitial.kt")
        public void testNonZeroInitial() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/nonZeroInitial.kt", this::doTest);
        }

        @TestMetadata("prefix.kt")
        public void testPrefix() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/prefix.kt", this::doTest);
        }

        @TestMetadata("variableUsedBefore.kt")
        public void testVariableUsedBefore() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/count/variableUsedBefore.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/filter")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Filter extends AbstractIntentionTest2 {
        public void testAllFilesPresentInFilter() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/filter"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("assign.kt")
        public void testAssign() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assign.kt", this::doTest);
        }

        @TestMetadata("assign2.kt")
        public void testAssign2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assign2.kt", this::doTest);
        }

        @TestMetadata("assignFilterIndexed.kt")
        public void testAssignFilterIndexed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assignFilterIndexed.kt", this::doTest);
        }

        @TestMetadata("assignFilterNotNull.kt")
        public void testAssignFilterNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assignFilterNotNull.kt", this::doTest);
        }

        @TestMetadata("assign_ArrayListRequired.kt")
        public void testAssign_ArrayListRequired() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assign_ArrayListRequired.kt", this::doTest);
        }

        @TestMetadata("assign_ArrayListRequired2.kt")
        public void testAssign_ArrayListRequired2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assign_ArrayListRequired2.kt", this::doTest);
        }

        @TestMetadata("assign_ArrayListRequired3.kt")
        public void testAssign_ArrayListRequired3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assign_ArrayListRequired3.kt", this::doTest);
        }

        @TestMetadata("assign_MutableListRequired.kt")
        public void testAssign_MutableListRequired() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assign_MutableListRequired.kt", this::doTest);
        }

        @TestMetadata("assign_breakAndContinue.kt")
        public void testAssign_breakAndContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/assign_breakAndContinue.kt", this::doTest);
        }

        @TestMetadata("cannotSplitOutFilterIsInstance.kt")
        public void testCannotSplitOutFilterIsInstance() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/cannotSplitOutFilterIsInstance.kt", this::doTest);
        }

        @TestMetadata("doNotSplitOutFilterIsInstance.kt")
        public void testDoNotSplitOutFilterIsInstance() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/doNotSplitOutFilterIsInstance.kt", this::doTest);
        }

        @TestMetadata("doNotSplitOutFilterNotNull.kt")
        public void testDoNotSplitOutFilterNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/doNotSplitOutFilterNotNull.kt", this::doTest);
        }

        @TestMetadata("filterIndexed.kt")
        public void testFilterIndexed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed.kt", this::doTest);
        }

        @TestMetadata("filterIndexed2.kt")
        public void testFilterIndexed2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed2.kt", this::doTest);
        }

        @TestMetadata("filterIndexedAndFlatMapWithContinue.kt")
        public void testFilterIndexedAndFlatMapWithContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexedAndFlatMapWithContinue.kt", this::doTest);
        }

        @TestMetadata("filterIndexedTo.kt")
        public void testFilterIndexedTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexedTo.kt", this::doTest);
        }

        @TestMetadata("filterIndexedTo2.kt")
        public void testFilterIndexedTo2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexedTo2.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_indexChangedTwice.kt")
        public void testFilterIndexed_indexChangedTwice() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_indexChangedTwice.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_indexStartNotZero.kt")
        public void testFilterIndexed_indexStartNotZero() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_indexStartNotZero.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_indexUsedAfter.kt")
        public void testFilterIndexed_indexUsedAfter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_indexUsedAfter.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_indexUsedEarlierInLoop.kt")
        public void testFilterIndexed_indexUsedEarlierInLoop() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_indexUsedEarlierInLoop.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_merge1.kt")
        public void testFilterIndexed_merge1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_merge1.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_merge2.kt")
        public void testFilterIndexed_merge2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_merge2.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_merge3.kt")
        public void testFilterIndexed_merge3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_merge3.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_merge4.kt")
        public void testFilterIndexed_merge4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_merge4.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_twoIndices.kt")
        public void testFilterIndexed_twoIndices() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_twoIndices.kt", this::doTest);
        }

        @TestMetadata("filterIndexed_twoIndicesUsed.kt")
        public void testFilterIndexed_twoIndicesUsed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIndexed_twoIndicesUsed.kt", this::doTest);
        }

        @TestMetadata("filterIsInstance.kt")
        public void testFilterIsInstance() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIsInstance.kt", this::doTest);
        }

        @TestMetadata("filterIsInstanceTo.kt")
        public void testFilterIsInstanceTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIsInstanceTo.kt", this::doTest);
        }

        @TestMetadata("filterIsInstance_ifContinue.kt")
        public void testFilterIsInstance_ifContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterIsInstance_ifContinue.kt", this::doTest);
        }

        @TestMetadata("filterNotNull.kt")
        public void testFilterNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterNotNull.kt", this::doTest);
        }

        @TestMetadata("filterNotNullTo.kt")
        public void testFilterNotNullTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterNotNullTo.kt", this::doTest);
        }

        @TestMetadata("filterNotNullTo2.kt")
        public void testFilterNotNullTo2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterNotNullTo2.kt", this::doTest);
        }

        @TestMetadata("filterNotNull_ifContinue.kt")
        public void testFilterNotNull_ifContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterNotNull_ifContinue.kt", this::doTest);
        }

        @TestMetadata("filterNotTo.kt")
        public void testFilterNotTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterNotTo.kt", this::doTest);
        }

        @TestMetadata("filterNot_ifContinue.kt")
        public void testFilterNot_ifContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterNot_ifContinue.kt", this::doTest);
        }

        @TestMetadata("filterTo.kt")
        public void testFilterTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterTo.kt", this::doTest);
        }

        @TestMetadata("filterTo2.kt")
        public void testFilterTo2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/filterTo2.kt", this::doTest);
        }

        @TestMetadata("glueTogetherFilterNotNull.kt")
        public void testGlueTogetherFilterNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/glueTogetherFilterNotNull.kt", this::doTest);
        }

        @TestMetadata("ifContinue.kt")
        public void testIfContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/ifContinue.kt", this::doTest);
        }

        @TestMetadata("ifContinue2.kt")
        public void testIfContinue2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/ifContinue2.kt", this::doTest);
        }

        @TestMetadata("ifContinueInBlock.kt")
        public void testIfContinueInBlock() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/ifContinueInBlock.kt", this::doTest);
        }

        @TestMetadata("ifContinueWithLabel.kt")
        public void testIfContinueWithLabel() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/ifContinueWithLabel.kt", this::doTest);
        }

        @TestMetadata("ifElse.kt")
        public void testIfElse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/ifElse.kt", this::doTest);
        }

        @TestMetadata("inputVarNotUsed.kt")
        public void testInputVarNotUsed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/inputVarNotUsed.kt", this::doTest);
        }

        @TestMetadata("inputVariableNotUsed.kt")
        public void testInputVariableNotUsed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/inputVariableNotUsed.kt", this::doTest);
        }

        @TestMetadata("mergeMultiple.kt")
        public void testMergeMultiple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/mergeMultiple.kt", this::doTest);
        }

        @TestMetadata("splitOutFilterIsInstance.kt")
        public void testSplitOutFilterIsInstance() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/splitOutFilterIsInstance.kt", this::doTest);
        }

        @TestMetadata("splitOutFilterNotNull.kt")
        public void testSplitOutFilterNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/splitOutFilterNotNull.kt", this::doTest);
        }

        @TestMetadata("splitOutFilterNotNull2.kt")
        public void testSplitOutFilterNotNull2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/filter/splitOutFilterNotNull2.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/firstOrNull")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FirstOrNull extends AbstractIntentionTest2 {
        public void testAllFilesPresentInFirstOrNull() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/firstOrNull"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("assignmentInitialization.kt")
        public void testAssignmentInitialization() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/assignmentInitialization.kt", this::doTest);
        }

        @TestMetadata("cannotUseLet.kt")
        public void testCannotUseLet() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/cannotUseLet.kt", this::doTest);
        }

        @TestMetadata("ifAssign.kt")
        public void testIfAssign() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/ifAssign.kt", this::doTest);
        }

        @TestMetadata("ifAssign_breakWithLabel.kt")
        public void testIfAssign_breakWithLabel() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/ifAssign_breakWithLabel.kt", this::doTest);
        }

        @TestMetadata("ifAssign_cannotBeVal.kt")
        public void testIfAssign_cannotBeVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/ifAssign_cannotBeVal.kt", this::doTest);
        }

        @TestMetadata("ifAssign_preserveComments.kt")
        public void testIfAssign_preserveComments() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/ifAssign_preserveComments.kt", this::doTest);
        }

        @TestMetadata("ifAssign_variableUsedBefore.kt")
        public void testIfAssign_variableUsedBefore() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/ifAssign_variableUsedBefore.kt", this::doTest);
        }

        @TestMetadata("ifReturn.kt")
        public void testIfReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/ifReturn.kt", this::doTest);
        }

        @TestMetadata("KT14292.kt")
        public void testKT14292() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/KT14292.kt", this::doTest);
        }

        @TestMetadata("let.kt")
        public void testLet() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/let.kt", this::doTest);
        }

        @TestMetadata("let2.kt")
        public void testLet2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/let2.kt", this::doTest);
        }

        @TestMetadata("letOrNotNull.kt")
        public void testLetOrNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/letOrNotNull.kt", this::doTest);
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/return.kt", this::doTest);
        }

        @TestMetadata("returnExpression.kt")
        public void testReturnExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/returnExpression.kt", this::doTest);
        }

        @TestMetadata("returnExpressionOrNotNull.kt")
        public void testReturnExpressionOrNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/returnExpressionOrNotNull.kt", this::doTest);
        }

        @TestMetadata("returnNotNullIfNone.kt")
        public void testReturnNotNullIfNone() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/returnNotNullIfNone.kt", this::doTest);
        }

        @TestMetadata("returnNotNullIfNone2.kt")
        public void testReturnNotNullIfNone2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/returnNotNullIfNone2.kt", this::doTest);
        }

        @TestMetadata("return_comment.kt")
        public void testReturn_comment() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/return_comment.kt", this::doTest);
        }

        @TestMetadata("safeDotExpression.kt")
        public void testSafeDotExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/safeDotExpression.kt", this::doTest);
        }

        @TestMetadata("withMergedFilter.kt")
        public void testWithMergedFilter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/firstOrNull/withMergedFilter.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/flatMap")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FlatMap extends AbstractIntentionTest2 {
        public void testAllFilesPresentInFlatMap() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/flatMap"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("break.kt")
        public void testBreak() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/break.kt", this::doTest);
        }

        @TestMetadata("continue.kt")
        public void testContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/continue.kt", this::doTest);
        }

        @TestMetadata("flatMapTo.kt")
        public void testFlatMapTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/flatMapTo.kt", this::doTest);
        }

        @TestMetadata("flatMapTo2.kt")
        public void testFlatMapTo2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/flatMapTo2.kt", this::doTest);
        }

        @TestMetadata("flatMapTo3.kt")
        public void testFlatMapTo3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/flatMapTo3.kt", this::doTest);
        }

        @TestMetadata("indexUsed.kt")
        public void testIndexUsed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/indexUsed.kt", this::doTest);
        }

        @TestMetadata("inputVarStillNeeded.kt")
        public void testInputVarStillNeeded() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/inputVarStillNeeded.kt", this::doTest);
        }

        @TestMetadata("notIterable.kt")
        public void testNotIterable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/notIterable.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/simple.kt", this::doTest);
        }

        @TestMetadata("wrongBreak.kt")
        public void testWrongBreak() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/wrongBreak.kt", this::doTest);
        }

        @TestMetadata("wrongContinue.kt")
        public void testWrongContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/flatMap/wrongContinue.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/forEach")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForEach extends AbstractIntentionTest2 {
        public void testAllFilesPresentInForEach() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/forEach"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("indexed.kt")
        public void testIndexed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/forEach/indexed.kt", this::doTest);
        }

        @TestMetadata("indexed_nothingElse.kt")
        public void testIndexed_nothingElse() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/forEach/indexed_nothingElse.kt", this::doTest);
        }

        @TestMetadata("KT14341.kt")
        public void testKT14341() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/forEach/KT14341.kt", this::doTest);
        }

        @TestMetadata("KT21083.kt")
        public void testKT21083() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/forEach/KT21083.kt", this::doTest);
        }

        @TestMetadata("notAvailable.kt")
        public void testNotAvailable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/forEach/notAvailable.kt", this::doTest);
        }

        @TestMetadata("notIndexed.kt")
        public void testNotIndexed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/forEach/notIndexed.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/forEach/simple.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/indexOf")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IndexOf extends AbstractIntentionTest2 {
        public void testAllFilesPresentInIndexOf() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/indexOf"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("indexOf.kt")
        public void testIndexOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/indexOf/indexOf.kt", this::doTest);
        }

        @TestMetadata("indexOfFirst_ifAssign.kt")
        public void testIndexOfFirst_ifAssign() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/indexOf/indexOfFirst_ifAssign.kt", this::doTest);
        }

        @TestMetadata("indexOfFirst_ifReturn.kt")
        public void testIndexOfFirst_ifReturn() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/indexOf/indexOfFirst_ifReturn.kt", this::doTest);
        }

        @TestMetadata("indexOfFirst_mustBeNoIndexInCondition.kt")
        public void testIndexOfFirst_mustBeNoIndexInCondition() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/indexOf/indexOfFirst_mustBeNoIndexInCondition.kt", this::doTest);
        }

        @TestMetadata("indexOfLast_ifAssign.kt")
        public void testIndexOfLast_ifAssign() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/indexOf/indexOfLast_ifAssign.kt", this::doTest);
        }

        @TestMetadata("KT14303.kt")
        public void testKT14303() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/indexOf/KT14303.kt", this::doTest);
        }

        @TestMetadata("lastIndexOf.kt")
        public void testLastIndexOf() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/indexOf/lastIndexOf.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/introduceIndex")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IntroduceIndex extends AbstractIntentionTest2 {
        public void testAllFilesPresentInIntroduceIndex() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/introduceIndex"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("indexPlusPlusInsideExpression.kt")
        public void testIndexPlusPlusInsideExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/introduceIndex/indexPlusPlusInsideExpression.kt", this::doTest);
        }

        @TestMetadata("indexPlusPlusInsideExpression_indexUsedAfterIncrement.kt")
        public void testIndexPlusPlusInsideExpression_indexUsedAfterIncrement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/introduceIndex/indexPlusPlusInsideExpression_indexUsedAfterIncrement.kt", this::doTest);
        }

        @TestMetadata("indexPlusPlusInsideExpression_indexUsedBeforeIncrement.kt")
        public void testIndexPlusPlusInsideExpression_indexUsedBeforeIncrement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/introduceIndex/indexPlusPlusInsideExpression_indexUsedBeforeIncrement.kt", this::doTest);
        }

        @TestMetadata("indexPlusPlusInsideExpression_indexUsedBeforeIncrement2.kt")
        public void testIndexPlusPlusInsideExpression_indexUsedBeforeIncrement2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/introduceIndex/indexPlusPlusInsideExpression_indexUsedBeforeIncrement2.kt", this::doTest);
        }

        @TestMetadata("indexPlusPlusIsNotLastStatement.kt")
        public void testIndexPlusPlusIsNotLastStatement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/introduceIndex/indexPlusPlusIsNotLastStatement.kt", this::doTest);
        }

        @TestMetadata("indexPlusPlusIsNotLastStatement_indexUsedAfterIncrement.kt")
        public void testIndexPlusPlusIsNotLastStatement_indexUsedAfterIncrement() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/introduceIndex/indexPlusPlusIsNotLastStatement_indexUsedAfterIncrement.kt", this::doTest);
        }

        @TestMetadata("indexWithNestedLoop.kt")
        public void testIndexWithNestedLoop() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/introduceIndex/indexWithNestedLoop.kt", this::doTest);
        }

        @TestMetadata("prefixIndexPlusPlusInsideExpression.kt")
        public void testPrefixIndexPlusPlusInsideExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/introduceIndex/prefixIndexPlusPlusInsideExpression.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/map")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Map extends AbstractIntentionTest2 {
        public void testAllFilesPresentInMap() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/map"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("assignMap.kt")
        public void testAssignMap() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/assignMap.kt", this::doTest);
        }

        @TestMetadata("assignMap2.kt")
        public void testAssignMap2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/assignMap2.kt", this::doTest);
        }

        @TestMetadata("KT18816.kt")
        public void testKT18816() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/KT18816.kt", this::doTest);
        }

        @TestMetadata("map.kt")
        public void testMap() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/map.kt", this::doTest);
        }

        @TestMetadata("mapAndFilterIndexed.kt")
        public void testMapAndFilterIndexed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapAndFilterIndexed.kt", this::doTest);
        }

        @TestMetadata("mapIndexed.kt")
        public void testMapIndexed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapIndexed.kt", this::doTest);
        }

        @TestMetadata("mapIndexedNotNull.kt")
        public void testMapIndexedNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapIndexedNotNull.kt", this::doTest);
        }

        @TestMetadata("mapIndexedNotNullTo.kt")
        public void testMapIndexedNotNullTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapIndexedNotNullTo.kt", this::doTest);
        }

        @TestMetadata("mapIndexedNotNullTo_elvisContinue.kt")
        public void testMapIndexedNotNullTo_elvisContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapIndexedNotNullTo_elvisContinue.kt", this::doTest);
        }

        @TestMetadata("mapIndexedNotNull_elvisContinue.kt")
        public void testMapIndexedNotNull_elvisContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapIndexedNotNull_elvisContinue.kt", this::doTest);
        }

        @TestMetadata("mapIndexedTo.kt")
        public void testMapIndexedTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapIndexedTo.kt", this::doTest);
        }

        @TestMetadata("mapIndexed_afterFilter.kt")
        public void testMapIndexed_afterFilter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapIndexed_afterFilter.kt", this::doTest);
        }

        @TestMetadata("mapIndexed_twice.kt")
        public void testMapIndexed_twice() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapIndexed_twice.kt", this::doTest);
        }

        @TestMetadata("mapNotNull.kt")
        public void testMapNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapNotNull.kt", this::doTest);
        }

        @TestMetadata("mapNotNullTo.kt")
        public void testMapNotNullTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapNotNullTo.kt", this::doTest);
        }

        @TestMetadata("mapNotNullTo_elvisContinue.kt")
        public void testMapNotNullTo_elvisContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapNotNullTo_elvisContinue.kt", this::doTest);
        }

        @TestMetadata("mapNotNull_elvisContinue.kt")
        public void testMapNotNull_elvisContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapNotNull_elvisContinue.kt", this::doTest);
        }

        @TestMetadata("mapNotNull_nestedLoopElvisContinue.kt")
        public void testMapNotNull_nestedLoopElvisContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapNotNull_nestedLoopElvisContinue.kt", this::doTest);
        }

        @TestMetadata("mapNotNull_wrongElvisContinue.kt")
        public void testMapNotNull_wrongElvisContinue() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapNotNull_wrongElvisContinue.kt", this::doTest);
        }

        @TestMetadata("mapTo.kt")
        public void testMapTo() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapTo.kt", this::doTest);
        }

        @TestMetadata("mapTo2.kt")
        public void testMapTo2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapTo2.kt", this::doTest);
        }

        @TestMetadata("mapTo3.kt")
        public void testMapTo3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapTo3.kt", this::doTest);
        }

        @TestMetadata("mapTo4.kt")
        public void testMapTo4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapTo4.kt", this::doTest);
        }

        @TestMetadata("mapTo_inputVarNotUsed.kt")
        public void testMapTo_inputVarNotUsed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapTo_inputVarNotUsed.kt", this::doTest);
        }

        @TestMetadata("mapUsesOldIndexAfterFilter.kt")
        public void testMapUsesOldIndexAfterFilter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapUsesOldIndexAfterFilter.kt", this::doTest);
        }

        @TestMetadata("mapVar.kt")
        public void testMapVar() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/mapVar.kt", this::doTest);
        }

        @TestMetadata("map_var.kt")
        public void testMap_var() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/map_var.kt", this::doTest);
        }

        @TestMetadata("map_variableStillNeeded.kt")
        public void testMap_variableStillNeeded() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/map/map_variableStillNeeded.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/maxMin")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MaxMin extends AbstractIntentionTest2 {
        public void testAllFilesPresentInMaxMin() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/maxMin"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("KT14210.kt")
        public void testKT14210() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/KT14210.kt", this::doTest);
        }

        @TestMetadata("max1.kt")
        public void testMax1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/max1.kt", this::doTest);
        }

        @TestMetadata("max2.kt")
        public void testMax2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/max2.kt", this::doTest);
        }

        @TestMetadata("max3.kt")
        public void testMax3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/max3.kt", this::doTest);
        }

        @TestMetadata("max4.kt")
        public void testMax4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/max4.kt", this::doTest);
        }

        @TestMetadata("max5.kt")
        public void testMax5() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/max5.kt", this::doTest);
        }

        @TestMetadata("max6.kt")
        public void testMax6() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/max6.kt", this::doTest);
        }

        @TestMetadata("max7.kt")
        public void testMax7() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/max7.kt", this::doTest);
        }

        @TestMetadata("min1.kt")
        public void testMin1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/min1.kt", this::doTest);
        }

        @TestMetadata("min2.kt")
        public void testMin2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/min2.kt", this::doTest);
        }

        @TestMetadata("min3.kt")
        public void testMin3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/min3.kt", this::doTest);
        }

        @TestMetadata("min4.kt")
        public void testMin4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/min4.kt", this::doTest);
        }

        @TestMetadata("min5.kt")
        public void testMin5() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/maxMin/min5.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/smartCasts")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SmartCasts extends AbstractIntentionTest2 {
        public void testAllFilesPresentInSmartCasts() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/smartCasts"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("errorOutsideLoop.kt")
        public void testErrorOutsideLoop() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/errorOutsideLoop.kt", this::doTest);
        }

        @TestMetadata("smartCastNotBroken.kt")
        public void testSmartCastNotBroken() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastNotBroken.kt", this::doTest);
        }

        @TestMetadata("smartCastNotBroken2.kt")
        public void testSmartCastNotBroken2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastNotBroken2.kt", this::doTest);
        }

        @TestMetadata("smartCastNotBroken3.kt")
        public void testSmartCastNotBroken3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastNotBroken3.kt", this::doTest);
        }

        @TestMetadata("smartCastNotBroken4.kt")
        public void testSmartCastNotBroken4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastNotBroken4.kt", this::doTest);
        }

        @TestMetadata("smartCastNotBroken5.kt")
        public void testSmartCastNotBroken5() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastNotBroken5.kt", this::doTest);
        }

        @TestMetadata("smartCastNotNullRequired.kt")
        public void testSmartCastNotNullRequired() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastNotNullRequired.kt", this::doTest);
        }

        @TestMetadata("smartCastNotRequired.kt")
        public void testSmartCastNotRequired() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastNotRequired.kt", this::doTest);
        }

        @TestMetadata("smartCastRequired.kt")
        public void testSmartCastRequired() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastRequired.kt", this::doTest);
        }

        @TestMetadata("smartCastRequired2.kt")
        public void testSmartCastRequired2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastRequired2.kt", this::doTest);
        }

        @TestMetadata("smartCastRequired3.kt")
        public void testSmartCastRequired3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastRequired3.kt", this::doTest);
        }

        @TestMetadata("smartCastRequired4.kt")
        public void testSmartCastRequired4() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastRequired4.kt", this::doTest);
        }

        @TestMetadata("smartCastRequired5.kt")
        public void testSmartCastRequired5() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastRequired5.kt", this::doTest);
        }

        @TestMetadata("smartCastRequired6.kt")
        public void testSmartCastRequired6() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastRequired6.kt", this::doTest);
        }

        @TestMetadata("smartCastThisRequired.kt")
        public void testSmartCastThisRequired() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/smartCasts/smartCastThisRequired.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/sum")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Sum extends AbstractIntentionTest2 {
        public void testAllFilesPresentInSum() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/sum"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("bytes.kt")
        public void testBytes() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/bytes.kt", this::doTest);
        }

        @TestMetadata("doubles.kt")
        public void testDoubles() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/doubles.kt", this::doTest);
        }

        @TestMetadata("floats.kt")
        public void testFloats() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/floats.kt", this::doTest);
        }

        @TestMetadata("floatsIntoDouble.kt")
        public void testFloatsIntoDouble() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/floatsIntoDouble.kt", this::doTest);
        }

        @TestMetadata("indexUsed.kt")
        public void testIndexUsed() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/indexUsed.kt", this::doTest);
        }

        @TestMetadata("indexUsed2.kt")
        public void testIndexUsed2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/indexUsed2.kt", this::doTest);
        }

        @TestMetadata("ints.kt")
        public void testInts() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/ints.kt", this::doTest);
        }

        @TestMetadata("longs.kt")
        public void testLongs() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/longs.kt", this::doTest);
        }

        @TestMetadata("nonNumbers.kt")
        public void testNonNumbers() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/nonNumbers.kt", this::doTest);
        }

        @TestMetadata("nonZeroInitial.kt")
        public void testNonZeroInitial() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/nonZeroInitial.kt", this::doTest);
        }

        @TestMetadata("short.kt")
        public void testShort() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/short.kt", this::doTest);
        }

        @TestMetadata("smartCast.kt")
        public void testSmartCast() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/smartCast.kt", this::doTest);
        }

        @TestMetadata("smartCastNotNull.kt")
        public void testSmartCastNotNull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/smartCastNotNull.kt", this::doTest);
        }

        @TestMetadata("sumByDouble.kt")
        public void testSumByDouble() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/sumByDouble.kt", this::doTest);
        }

        @TestMetadata("sumByInts.kt")
        public void testSumByInts() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/sumByInts.kt", this::doTest);
        }

        @TestMetadata("sumByIntsIntoLong.kt")
        public void testSumByIntsIntoLong() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/sumByIntsIntoLong.kt", this::doTest);
        }

        @TestMetadata("sumByShorts.kt")
        public void testSumByShorts() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/sum/sumByShorts.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/takeWhile")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TakeWhile extends AbstractIntentionTest2 {
        public void testAllFilesPresentInTakeWhile() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/takeWhile"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ifElse1.kt")
        public void testIfElse1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/takeWhile/ifElse1.kt", this::doTest);
        }

        @TestMetadata("ifElse2.kt")
        public void testIfElse2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/takeWhile/ifElse2.kt", this::doTest);
        }

        @TestMetadata("nestedLoop.kt")
        public void testNestedLoop() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/takeWhile/nestedLoop.kt", this::doTest);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/takeWhile/simple.kt", this::doTest);
        }

        @TestMetadata("wrongBreak.kt")
        public void testWrongBreak() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/takeWhile/wrongBreak.kt", this::doTest);
        }
    }

    @TestMetadata("idea/testData/intentions/loopToCallChain/toCollection")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ToCollection extends AbstractIntentionTest2 {
        @TestMetadata("addAfterLoop.kt")
        public void testAddAfterLoop() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/addAfterLoop.kt", this::doTest);
        }

        @TestMetadata("addToCollection.kt")
        public void testAddToCollection() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/addToCollection.kt", this::doTest);
        }

        public void testAllFilesPresentInToCollection() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain/toCollection"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("badReceiver1.kt")
        public void testBadReceiver1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/badReceiver1.kt", this::doTest);
        }

        @TestMetadata("badReceiver2.kt")
        public void testBadReceiver2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/badReceiver2.kt", this::doTest);
        }

        @TestMetadata("explicitValType.kt")
        public void testExplicitValType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/explicitValType.kt", this::doTest);
        }

        @TestMetadata("goodReceiver.kt")
        public void testGoodReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/goodReceiver.kt", this::doTest);
        }

        @TestMetadata("KT18881.kt")
        public void testKT18881() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/KT18881.kt", this::doTest);
        }

        @TestMetadata("resultCollectionUsedInsideLoop.kt")
        public void testResultCollectionUsedInsideLoop() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/resultCollectionUsedInsideLoop.kt", this::doTest);
        }

        @TestMetadata("toList.kt")
        public void testToList() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/toList.kt", this::doTest);
        }

        @TestMetadata("toList2.kt")
        public void testToList2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/toList2.kt", this::doTest);
        }

        @TestMetadata("toList3.kt")
        public void testToList3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/toList3.kt", this::doTest);
        }

        @TestMetadata("toMutableSet.kt")
        public void testToMutableSet() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/toMutableSet.kt", this::doTest);
        }

        @TestMetadata("toMutableSet2.kt")
        public void testToMutableSet2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/toMutableSet2.kt", this::doTest);
        }

        @TestMetadata("toMutableSet3.kt")
        public void testToMutableSet3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/toMutableSet3.kt", this::doTest);
        }

        @TestMetadata("toSet.kt")
        public void testToSet() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/toSet.kt", this::doTest);
        }

        @TestMetadata("toSetWithMap.kt")
        public void testToSetWithMap() throws Exception {
            KotlinTestUtils.runTest("idea/testData/intentions/loopToCallChain/toCollection/toSetWithMap.kt", this::doTest);
        }
    }
}
