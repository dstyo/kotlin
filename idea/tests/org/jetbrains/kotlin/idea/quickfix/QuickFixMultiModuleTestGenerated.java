/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.quickfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/multiModuleQuickFix")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class QuickFixMultiModuleTestGenerated extends AbstractQuickFixMultiModuleTest {
    @TestMetadata("abstract")
    public void testAbstract() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/abstract/");
    }

    @TestMetadata("addActualToClass")
    public void testAddActualToClass() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/addActualToClass/");
    }

    @TestMetadata("addActualToClassMember")
    public void testAddActualToClassMember() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/addActualToClassMember/");
    }

    @TestMetadata("addActualToTopLevelMember")
    public void testAddActualToTopLevelMember() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/addActualToTopLevelMember/");
    }

    @TestMetadata("addOperatorByHeader")
    public void testAddOperatorByHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/addOperatorByHeader/");
    }

    @TestMetadata("addOperatorByImpl")
    public void testAddOperatorByImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/addOperatorByImpl/");
    }

    public void testAllFilesPresentInMultiModuleQuickFix() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/multiModuleQuickFix"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
    }

    @TestMetadata("annotation")
    public void testAnnotation() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/annotation/");
    }

    @TestMetadata("class")
    public void testClass() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/class/");
    }

    @TestMetadata("classFunction")
    public void testClassFunction() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/classFunction/");
    }

    @TestMetadata("classOverloadedFunction")
    public void testClassOverloadedFunction() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/classOverloadedFunction/");
    }

    @TestMetadata("classSomeProperties")
    public void testClassSomeProperties() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/classSomeProperties/");
    }

    @TestMetadata("companionAbsence")
    public void testCompanionAbsence() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/companionAbsence/");
    }

    @TestMetadata("convertActualEnumToSealedClass")
    public void testConvertActualEnumToSealedClass() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/convertActualEnumToSealedClass/");
    }

    @TestMetadata("convertActualSealedClassToEnum")
    public void testConvertActualSealedClassToEnum() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/convertActualSealedClassToEnum/");
    }

    @TestMetadata("convertExpectEnumToSealedClass")
    public void testConvertExpectEnumToSealedClass() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/convertExpectEnumToSealedClass/");
    }

    @TestMetadata("convertExpectSealedClassToEnum")
    public void testConvertExpectSealedClassToEnum() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/convertExpectSealedClassToEnum/");
    }

    @TestMetadata("createFunInExpectClass")
    public void testCreateFunInExpectClass() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/createFunInExpectClass/");
    }

    @TestMetadata("createValInExpectClass")
    public void testCreateValInExpectClass() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/createValInExpectClass/");
    }

    @TestMetadata("createVarInExpectClass")
    public void testCreateVarInExpectClass() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/createVarInExpectClass/");
    }

    @TestMetadata("deprecatedHeader")
    public void testDeprecatedHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/deprecatedHeader/");
    }

    @TestMetadata("deprecatedHeaderImpl")
    public void testDeprecatedHeaderImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/deprecatedHeaderImpl/");
    }

    @TestMetadata("deprecatedImpl")
    public void testDeprecatedImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/deprecatedImpl/");
    }

    @TestMetadata("deprecatedImplHeader")
    public void testDeprecatedImplHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/deprecatedImplHeader/");
    }

    @TestMetadata("enum")
    public void testEnum() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/enum/");
    }

    @TestMetadata("function")
    public void testFunction() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/function/");
    }

    @TestMetadata("functionSameFile")
    public void testFunctionSameFile() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/functionSameFile/");
    }

    @TestMetadata("functionTypeParameterToReceiverByHeader")
    public void testFunctionTypeParameterToReceiverByHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/functionTypeParameterToReceiverByHeader/");
    }

    @TestMetadata("functionTypeParameterToReceiverByImpl")
    public void testFunctionTypeParameterToReceiverByImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/functionTypeParameterToReceiverByImpl/");
    }

    @TestMetadata("functionTypeReceiverToParameterByHeader")
    public void testFunctionTypeReceiverToParameterByHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/functionTypeReceiverToParameterByHeader/");
    }

    @TestMetadata("functionTypeReceiverToParameterByImpl")
    public void testFunctionTypeReceiverToParameterByImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/functionTypeReceiverToParameterByImpl/");
    }

    @TestMetadata("implementMembersInImplClassNonImplInheritor")
    public void testImplementMembersInImplClassNonImplInheritor() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/implementMembersInImplClassNonImplInheritor/");
    }

    @TestMetadata("interface")
    public void testInterface() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/interface/");
    }

    @TestMetadata("memberFunParameterToReceiverByHeader")
    public void testMemberFunParameterToReceiverByHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberFunParameterToReceiverByHeader/");
    }

    @TestMetadata("memberFunParameterToReceiverByImpl")
    public void testMemberFunParameterToReceiverByImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberFunParameterToReceiverByImpl/");
    }

    @TestMetadata("memberFunReceiverToParameterByHeader")
    public void testMemberFunReceiverToParameterByHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberFunReceiverToParameterByHeader/");
    }

    @TestMetadata("memberFunReceiverToParameterByImpl")
    public void testMemberFunReceiverToParameterByImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberFunReceiverToParameterByImpl/");
    }

    @TestMetadata("memberFunToExtensionByHeader")
    public void testMemberFunToExtensionByHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberFunToExtensionByHeader/");
    }

    @TestMetadata("memberFunToExtensionByImpl")
    public void testMemberFunToExtensionByImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberFunToExtensionByImpl/");
    }

    @TestMetadata("memberValToExtensionByHeader")
    public void testMemberValToExtensionByHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberValToExtensionByHeader/");
    }

    @TestMetadata("memberValToExtensionByHeaderWithInapplicableImpl")
    public void testMemberValToExtensionByHeaderWithInapplicableImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberValToExtensionByHeaderWithInapplicableImpl/");
    }

    @TestMetadata("memberValToExtensionByImpl")
    public void testMemberValToExtensionByImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/memberValToExtensionByImpl/");
    }

    @TestMetadata("nested")
    public void testNested() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/nested/");
    }

    @TestMetadata("object")
    public void testObject() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/object/");
    }

    @TestMetadata("orderHeader")
    public void testOrderHeader() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/orderHeader/");
    }

    @TestMetadata("orderImpl")
    public void testOrderImpl() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/orderImpl/");
    }

    @TestMetadata("package")
    public void testPackage() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/package/");
    }

    @TestMetadata("packageIncorrect")
    public void testPackageIncorrect() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/packageIncorrect/");
    }

    @TestMetadata("packageIncorrectEmpty")
    public void testPackageIncorrectEmpty() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/packageIncorrectEmpty/");
    }

    @TestMetadata("primaryConstructor")
    public void testPrimaryConstructor() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/primaryConstructor/");
    }

    @TestMetadata("primaryConstructorAbsence")
    public void testPrimaryConstructorAbsence() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/primaryConstructorAbsence/");
    }

    @TestMetadata("property")
    public void testProperty() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/property/");
    }

    @TestMetadata("sealed")
    public void testSealed() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/sealed/");
    }

    @TestMetadata("sealedSubclass")
    public void testSealedSubclass() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/sealedSubclass/");
    }

    @TestMetadata("secondaryConstructorAbsence")
    public void testSecondaryConstructorAbsence() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/secondaryConstructorAbsence/");
    }

    @TestMetadata("withFakeJvm")
    public void testWithFakeJvm() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/withFakeJvm/");
    }

    @TestMetadata("withTest")
    public void testWithTest() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/withTest/");
    }

    @TestMetadata("withTestDummy")
    public void testWithTestDummy() throws Exception {
        KotlinTestUtils.runTest(this::doTest,TargetBackend.ANY, "idea/testData/multiModuleQuickFix/withTestDummy/");
    }
}
