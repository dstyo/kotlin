/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.quickfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/quickfix")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class QuickFixMultiFileTestGenerated extends AbstractQuickFixMultiFileTest {
    public void testAllFilesPresentInQuickfix() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
    }

    @TestMetadata("idea/testData/quickfix/addAnnotationTarget")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AddAnnotationTarget extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInAddAnnotationTarget() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/addAnnotationTarget"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("withJava.before.Main.kt")
        public void testWithJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/addAnnotationTarget/withJava.before.Main.kt", this::doTestWithExtraFile);
        }
    }

    @TestMetadata("idea/testData/quickfix/addJvmDefault")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AddJvmDefault extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInAddJvmDefault() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/addJvmDefault"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("javaDefaultOverride.before.Main.kt")
        public void testJavaDefaultOverride() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/addJvmDefault/javaDefaultOverride.before.Main.kt", this::doTestWithExtraFile);
        }
    }

    @TestMetadata("idea/testData/quickfix/addStarProjections")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AddStarProjections extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInAddStarProjections() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/addStarProjections"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }
    }

    @TestMetadata("idea/testData/quickfix/autoImports")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AutoImports extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInAutoImports() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/autoImports"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ambiguousNamePreferFromJdk.before.Main.kt")
        public void testAmbiguousNamePreferFromJdk() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/ambiguousNamePreferFromJdk.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("ambiguousNamePreferWithImportsFromPackage.before.Main.kt")
        public void testAmbiguousNamePreferWithImportsFromPackage() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/ambiguousNamePreferWithImportsFromPackage.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("callableReferenceExtension.before.Main.kt")
        public void testCallableReferenceExtension() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/callableReferenceExtension.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("callableReferenceExtension2.before.Main.kt")
        public void testCallableReferenceExtension2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/callableReferenceExtension2.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("callableReferenceTopLevel.before.Main.kt")
        public void testCallableReferenceTopLevel() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/callableReferenceTopLevel.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("classImport.before.Main.kt")
        public void testClassImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/classImport.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("constructorParameterAnnotation.test")
        public void testConstructorParameterAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/constructorParameterAnnotation.test", this::doTestWithExtraFile);
        }

        @TestMetadata("constructorReference.before.Main.kt")
        public void testConstructorReference() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/constructorReference.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("delegateExtensionBoth.test")
        public void testDelegateExtensionBoth() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/delegateExtensionBoth.test", this::doTestWithExtraFile);
        }

        @TestMetadata("delegateExtensionGet.test")
        public void testDelegateExtensionGet() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/delegateExtensionGet.test", this::doTestWithExtraFile);
        }

        @TestMetadata("delegateExtensionSet.test")
        public void testDelegateExtensionSet() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/delegateExtensionSet.test", this::doTestWithExtraFile);
        }

        @TestMetadata("delegateNoOperator.test")
        public void testDelegateNoOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/delegateNoOperator.test", this::doTestWithExtraFile);
        }

        @TestMetadata("divOperator.before.Main.kt")
        public void testDivOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/divOperator.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("dslMarkers.before.Main.kt")
        public void testDslMarkers() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/dslMarkers.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("extensionFunctionImport.before.Main.kt")
        public void testExtensionFunctionImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/extensionFunctionImport.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("extensionFunctionImportImplicitReceiver.before.Main.kt")
        public void testExtensionFunctionImportImplicitReceiver() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/extensionFunctionImportImplicitReceiver.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("extensionPropertyImport.before.Main.kt")
        public void testExtensionPropertyImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/extensionPropertyImport.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("extensionPropertyOnTypeAliasFromExpansion.before.Main.kt")
        public void testExtensionPropertyOnTypeAliasFromExpansion() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/extensionPropertyOnTypeAliasFromExpansion.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("extensionPropertyOnTypeAliasFromOtherTypeAlias.before.Main.kt")
        public void testExtensionPropertyOnTypeAliasFromOtherTypeAlias() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/extensionPropertyOnTypeAliasFromOtherTypeAlias.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("factoryFunctionFromLambda.before.Main.kt")
        public void testFactoryFunctionFromLambda() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/factoryFunctionFromLambda.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("falsePostfixOperator.before.Main.kt")
        public void testFalsePostfixOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/falsePostfixOperator.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("functionImport.before.Main.kt")
        public void testFunctionImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/functionImport.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("importInFirstPartInQualifiedExpression.before.Main.kt")
        public void testImportInFirstPartInQualifiedExpression() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importInFirstPartInQualifiedExpression.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("importInFirstPartInUserType.test")
        public void testImportInFirstPartInUserType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importInFirstPartInUserType.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinCompanionPropertyAsFieldFromJava.test")
        public void testImportKotlinCompanionPropertyAsFieldFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinCompanionPropertyAsFieldFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinCompanionStaticFunctionFromJava.test")
        public void testImportKotlinCompanionStaticFunctionFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinCompanionStaticFunctionFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinCompanionStaticPropertyDefaultGetterFromJava.test")
        public void testImportKotlinCompanionStaticPropertyDefaultGetterFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinCompanionStaticPropertyDefaultGetterFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinCompanionStaticPropertyDefaultSetterFromJava.test")
        public void testImportKotlinCompanionStaticPropertyDefaultSetterFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinCompanionStaticPropertyDefaultSetterFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinCompanionStaticPropertyOverloadedGetterFromJava.test")
        public void testImportKotlinCompanionStaticPropertyOverloadedGetterFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinCompanionStaticPropertyOverloadedGetterFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinCompanionStaticPropertyOverloadedSetterFromJava.test")
        public void testImportKotlinCompanionStaticPropertyOverloadedSetterFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinCompanionStaticPropertyOverloadedSetterFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinPropertyAsFieldFromJava.test")
        public void testImportKotlinPropertyAsFieldFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinPropertyAsFieldFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinStaticFunctionFromJava.test")
        public void testImportKotlinStaticFunctionFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinStaticFunctionFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinStaticPropertyDefaultGetterFromJava.test")
        public void testImportKotlinStaticPropertyDefaultGetterFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinStaticPropertyDefaultGetterFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinStaticPropertyDefaultSetterFromJava.test")
        public void testImportKotlinStaticPropertyDefaultSetterFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinStaticPropertyDefaultSetterFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinStaticPropertyOverloadedGetterFromJava.test")
        public void testImportKotlinStaticPropertyOverloadedGetterFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinStaticPropertyOverloadedGetterFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importKotlinStaticPropertyOverloadedSetterFromJava.test")
        public void testImportKotlinStaticPropertyOverloadedSetterFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importKotlinStaticPropertyOverloadedSetterFromJava.test", this::doTestWithExtraFile);
        }

        @TestMetadata("importTrait.before.Main.kt")
        public void testImportTrait() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/importTrait.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("indexCallExtensionGet.test")
        public void testIndexCallExtensionGet() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/indexCallExtensionGet.test", this::doTestWithExtraFile);
        }

        @TestMetadata("indexCallExtensionGetNoOperator.test")
        public void testIndexCallExtensionGetNoOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/indexCallExtensionGetNoOperator.test", this::doTestWithExtraFile);
        }

        @TestMetadata("indexCallExtensionImportGetOnNoOperatorWarning.test")
        public void testIndexCallExtensionImportGetOnNoOperatorWarning() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/indexCallExtensionImportGetOnNoOperatorWarning.test", this::doTestWithExtraFile);
        }

        @TestMetadata("indexCallExtensionImportSetOnNoOperatorWarning.test")
        public void testIndexCallExtensionImportSetOnNoOperatorWarning() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/indexCallExtensionImportSetOnNoOperatorWarning.test", this::doTestWithExtraFile);
        }

        @TestMetadata("indexCallExtensionSet.test")
        public void testIndexCallExtensionSet() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/indexCallExtensionSet.test", this::doTestWithExtraFile);
        }

        @TestMetadata("indexCallNoImportWhenGetNeededButSetAvailable.test")
        public void testIndexCallNoImportWhenGetNeededButSetAvailable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/indexCallNoImportWhenGetNeededButSetAvailable.test", this::doTestWithExtraFile);
        }

        @TestMetadata("indexCallNoImportWhenSetNeededButGetAvailable.test")
        public void testIndexCallNoImportWhenSetNeededButGetAvailable() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/indexCallNoImportWhenSetNeededButGetAvailable.test", this::doTestWithExtraFile);
        }

        @TestMetadata("infixCall.before.Main.kt")
        public void testInfixCall() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/infixCall.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("infixCall2.before.Main.kt")
        public void testInfixCall2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/infixCall2.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("invokeExtension.test")
        public void testInvokeExtension() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/invokeExtension.test", this::doTestWithExtraFile);
        }

        @TestMetadata("invokeExtensionNoOperator.test")
        public void testInvokeExtensionNoOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/invokeExtensionNoOperator.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportFunction.test")
        public void testMemberImportFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportFunction.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportJavaField.test")
        public void testMemberImportJavaField() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportJavaField.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportJavaMethod.test")
        public void testMemberImportJavaMethod() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportJavaMethod.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportNotForClassFunction.test")
        public void testMemberImportNotForClassFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportNotForClassFunction.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportNotForClassProperty.test")
        public void testMemberImportNotForClassProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportNotForClassProperty.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportNotForJavaNonStaticField.test")
        public void testMemberImportNotForJavaNonStaticField() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportNotForJavaNonStaticField.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportNotForJavaNonStaticMethod.test")
        public void testMemberImportNotForJavaNonStaticMethod() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportNotForJavaNonStaticMethod.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportNotForTopLevelFunction.test")
        public void testMemberImportNotForTopLevelFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportNotForTopLevelFunction.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberImportProperty.test")
        public void testMemberImportProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberImportProperty.test", this::doTestWithExtraFile);
        }

        @TestMetadata("memberWithTopLevelConflict.before.Main.kt")
        public void testMemberWithTopLevelConflict() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/memberWithTopLevelConflict.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("minusOperator.before.Main.kt")
        public void testMinusOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/minusOperator.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("multiDeclarationExtensionAllComponents.test")
        public void testMultiDeclarationExtensionAllComponents() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/multiDeclarationExtensionAllComponents.test", this::doTestWithExtraFile);
        }

        @TestMetadata("multiDeclarationExtensionAllComponentsMany.test")
        public void testMultiDeclarationExtensionAllComponentsMany() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/multiDeclarationExtensionAllComponentsMany.test", this::doTestWithExtraFile);
        }

        @TestMetadata("multiDeclarationExtensionAllComponentsPrefereFull.test")
        public void testMultiDeclarationExtensionAllComponentsPrefereFull() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/multiDeclarationExtensionAllComponentsPrefereFull.test", this::doTestWithExtraFile);
        }

        @TestMetadata("multiDeclarationExtensionAllComponentsPrefereNotDeprecated.test")
        public void testMultiDeclarationExtensionAllComponentsPrefereNotDeprecated() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/multiDeclarationExtensionAllComponentsPrefereNotDeprecated.test", this::doTestWithExtraFile);
        }

        @TestMetadata("multiDeclarationExtensionComponent1.test")
        public void testMultiDeclarationExtensionComponent1() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/multiDeclarationExtensionComponent1.test", this::doTestWithExtraFile);
        }

        @TestMetadata("multiDeclarationExtensionComponent2.test")
        public void testMultiDeclarationExtensionComponent2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/multiDeclarationExtensionComponent2.test", this::doTestWithExtraFile);
        }

        @TestMetadata("multiDeclarationExtensionComponentNoOperator.test")
        public void testMultiDeclarationExtensionComponentNoOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/multiDeclarationExtensionComponentNoOperator.test", this::doTestWithExtraFile);
        }

        @TestMetadata("nestedClass.before.Main.kt")
        public void testNestedClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/nestedClass.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noFunctionImportOnSimpleName.test")
        public void testNoFunctionImportOnSimpleName() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noFunctionImportOnSimpleName.test", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportForFunInQualifiedNotFirst.before.Main.kt")
        public void testNoImportForFunInQualifiedNotFirst() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportForFunInQualifiedNotFirst.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportForNestedInPrivate.before.Main.kt")
        public void testNoImportForNestedInPrivate() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportForNestedInPrivate.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportForPrivateClass.before.Main.kt")
        public void testNoImportForPrivateClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportForPrivateClass.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportInImports.before.Main.kt")
        public void testNoImportInImports() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportInImports.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportInQualifiedExpressionNotFirst.before.Main.kt")
        public void testNoImportInQualifiedExpressionNotFirst() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportInQualifiedExpressionNotFirst.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportInQualifiedUserTypeNotFirst.before.Main.kt")
        public void testNoImportInQualifiedUserTypeNotFirst() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportInQualifiedUserTypeNotFirst.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportInSafeQualifiedExpressionNotFirst.before.Main.kt")
        public void testNoImportInSafeQualifiedExpressionNotFirst() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportInSafeQualifiedExpressionNotFirst.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportInterfaceRefAsConstructor.before.Main.kt")
        public void testNoImportInterfaceRefAsConstructor() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportInterfaceRefAsConstructor.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportsForClassInExcludedPackage.before.Main.kt")
        public void testNoImportsForClassInExcludedPackage() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportsForClassInExcludedPackage.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportsForExcludedClass.before.Main.kt")
        public void testNoImportsForExcludedClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportsForExcludedClass.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noImportsForFunctionInExcludedPackage.before.Main.kt")
        public void testNoImportsForFunctionInExcludedPackage() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noImportsForFunctionInExcludedPackage.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("noMemberFunctionImportOnSimpleName.test")
        public void testNoMemberFunctionImportOnSimpleName() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noMemberFunctionImportOnSimpleName.test", this::doTestWithExtraFile);
        }

        @TestMetadata("noneApplicableFromInstanceButExtension.before.Main.kt")
        public void testNoneApplicableFromInstanceButExtension() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/noneApplicableFromInstanceButExtension.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("notExcludedClass.before.Main.kt")
        public void testNotExcludedClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/notExcludedClass.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("objectImport.before.Main.kt")
        public void testObjectImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/objectImport.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("objectMemberFunctionImportWhenReceiverPresent.before.Main.kt")
        public void testObjectMemberFunctionImportWhenReceiverPresent() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/objectMemberFunctionImportWhenReceiverPresent.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("operatorAssignPlus.test")
        public void testOperatorAssignPlus() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/operatorAssignPlus.test", this::doTestWithExtraFile);
        }

        @TestMetadata("operatorAssignPlusAssign.test")
        public void testOperatorAssignPlusAssign() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/operatorAssignPlusAssign.test", this::doTestWithExtraFile);
        }

        @TestMetadata("operatorAssignPlusTwoVariantsDifferentPackages.test")
        public void testOperatorAssignPlusTwoVariantsDifferentPackages() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/operatorAssignPlusTwoVariantsDifferentPackages.test", this::doTestWithExtraFile);
        }

        @TestMetadata("packageClass.before.Main.kt")
        public void testPackageClass() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/packageClass.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("plusOperator.before.Main.kt")
        public void testPlusOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/plusOperator.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("plusOperatorWithTypeMismatch.before.Main.kt")
        public void testPlusOperatorWithTypeMismatch() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/plusOperatorWithTypeMismatch.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("postfixOperator.before.Main.kt")
        public void testPostfixOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/postfixOperator.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("propertyImport.before.Main.kt")
        public void testPropertyImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/propertyImport.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("sameModuleImportPriority.before.Main.kt")
        public void testSameModuleImportPriority() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/sameModuleImportPriority.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("timesAssign.before.Main.kt")
        public void testTimesAssign() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/timesAssign.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("typeAliasExtensionFunction.before.Main.kt")
        public void testTypeAliasExtensionFunction() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/typeAliasExtensionFunction.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("typeAliasExtensionFunctionInTypeAliasChain.before.Main.kt")
        public void testTypeAliasExtensionFunctionInTypeAliasChain() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/typeAliasExtensionFunctionInTypeAliasChain.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("typeAliasExtensionProperty.before.Main.kt")
        public void testTypeAliasExtensionProperty() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/typeAliasExtensionProperty.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("typeAliasImport.before.Main.kt")
        public void testTypeAliasImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/typeAliasImport.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("unaryMinusOperator.before.Main.kt")
        public void testUnaryMinusOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/unaryMinusOperator.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("unaryPlusOperator.before.Main.kt")
        public void testUnaryPlusOperator() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/unaryPlusOperator.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("withSmartCastQualifier.before.Main.kt")
        public void testWithSmartCastQualifier() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/withSmartCastQualifier.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("idea/testData/quickfix/autoImports/mismatchingArgs")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MismatchingArgs extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInMismatchingArgs() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/autoImports/mismatchingArgs"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("checkArgumentTypes.test")
            public void testCheckArgumentTypes() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/checkArgumentTypes.test", this::doTestWithExtraFile);
            }

            @TestMetadata("constantExpectedTypeMismatch.test")
            public void testConstantExpectedTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/constantExpectedTypeMismatch.test", this::doTestWithExtraFile);
            }

            @TestMetadata("expectedTypeRequired.test")
            public void testExpectedTypeRequired() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/expectedTypeRequired.test", this::doTestWithExtraFile);
            }

            @TestMetadata("extensionExplicitReceiver.test")
            public void testExtensionExplicitReceiver() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/extensionExplicitReceiver.test", this::doTestWithExtraFile);
            }

            @TestMetadata("extensionImplicitReceiver.test")
            public void testExtensionImplicitReceiver() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/extensionImplicitReceiver.test", this::doTestWithExtraFile);
            }

            @TestMetadata("extensionWrongReceiver.test")
            public void testExtensionWrongReceiver() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/extensionWrongReceiver.test", this::doTestWithExtraFile);
            }

            @TestMetadata("ignoreErrorsOutsideCall.test")
            public void testIgnoreErrorsOutsideCall() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/ignoreErrorsOutsideCall.test", this::doTestWithExtraFile);
            }

            @TestMetadata("lambdaArgument.test")
            public void testLambdaArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/lambdaArgument.test", this::doTestWithExtraFile);
            }

            @TestMetadata("namedArgument.test")
            public void testNamedArgument() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/namedArgument.test", this::doTestWithExtraFile);
            }

            @TestMetadata("notForIncompleteCall.test")
            public void testNotForIncompleteCall() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/notForIncompleteCall.test", this::doTestWithExtraFile);
            }

            @TestMetadata("smartCast.test")
            public void testSmartCast() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/smartCast.test", this::doTestWithExtraFile);
            }

            @TestMetadata("topLevelFun.test")
            public void testTopLevelFun() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/topLevelFun.test", this::doTestWithExtraFile);
            }

            @TestMetadata("topLevelFun_notWithReceiver.test")
            public void testTopLevelFun_notWithReceiver() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/topLevelFun_notWithReceiver.test", this::doTestWithExtraFile);
            }

            @TestMetadata("typeMismatch.test")
            public void testTypeMismatch() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/autoImports/mismatchingArgs/typeMismatch.test", this::doTestWithExtraFile);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/changeSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ChangeSignature extends AbstractQuickFixMultiFileTest {
        @TestMetadata("addJavaMethodParameter.before.Main.kt")
        public void testAddJavaMethodParameter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/addJavaMethodParameter.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("addParameterWithImport.before.Main.kt")
        public void testAddParameterWithImport() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/addParameterWithImport.before.Main.kt", this::doTestWithExtraFile);
        }

        public void testAllFilesPresentInChangeSignature() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/changeSignature"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("matchFunctionLiteralWithSAMType.before.Main.kt")
        public void testMatchFunctionLiteralWithSAMType() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/matchFunctionLiteralWithSAMType.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("removeJavaMethodParameter.before.Main.kt")
        public void testRemoveJavaMethodParameter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/removeJavaMethodParameter.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("idea/testData/quickfix/changeSignature/jk")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Jk extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInJk() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/changeSignature/jk"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("jkAddFunctionParameter.before.Main.java")
            public void testJkAddFunctionParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkAddFunctionParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkAddImplicitPrimaryConstructorParameter.before.Main.java")
            public void testJkAddImplicitPrimaryConstructorParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkAddImplicitPrimaryConstructorParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkAddPrimaryConstructorParameter.before.Main.java")
            public void testJkAddPrimaryConstructorParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkAddPrimaryConstructorParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkAddSecondaryConstructorParameter.before.Main.java")
            public void testJkAddSecondaryConstructorParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkAddSecondaryConstructorParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkChangeFunctionParameter.before.Main.java")
            public void testJkChangeFunctionParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkChangeFunctionParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkChangePrimaryConstructorParameter.before.Main.java")
            public void testJkChangePrimaryConstructorParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkChangePrimaryConstructorParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkChangeSecondaryConstructorParameter.before.Main.java")
            public void testJkChangeSecondaryConstructorParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkChangeSecondaryConstructorParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkKeepValOnAddingParameter1.before.Main.java")
            public void testJkKeepValOnAddingParameter1() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkKeepValOnAddingParameter1.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkKeepValOnAddingParameter2.before.Main.java")
            public void testJkKeepValOnAddingParameter2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkKeepValOnAddingParameter2.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkKeepValOnParameterTypeChange.before.Main.java")
            public void testJkKeepValOnParameterTypeChange() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkKeepValOnParameterTypeChange.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkRemoveFunctionParameter.before.Main.java")
            public void testJkRemoveFunctionParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkRemoveFunctionParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkRemovePrimaryConstructorParameter.before.Main.java")
            public void testJkRemovePrimaryConstructorParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkRemovePrimaryConstructorParameter.before.Main.java", this::doTestWithExtraFile);
            }

            @TestMetadata("jkRemoveSecondaryConstructorParameter.before.Main.java")
            public void testJkRemoveSecondaryConstructorParameter() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/changeSignature/jk/jkRemoveSecondaryConstructorParameter.before.Main.java", this::doTestWithExtraFile);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/checkArguments")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CheckArguments extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInCheckArguments() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/checkArguments"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }
    }

    @TestMetadata("idea/testData/quickfix/convertJavaInterfaceToClass")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConvertJavaInterfaceToClass extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInConvertJavaInterfaceToClass() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/convertJavaInterfaceToClass"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("kotlinInheritor.before.Main.java")
        public void testKotlinInheritor() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/convertJavaInterfaceToClass/kotlinInheritor.before.Main.java", this::doTestWithExtraFile);
        }
    }

    @TestMetadata("idea/testData/quickfix/createFromUsage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CreateFromUsage extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInCreateFromUsage() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createClass")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateClass extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateClass() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AnnotationEntry extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInAnnotationEntry() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/annotationEntry"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("nestedGroovyAnnotation.before.Main.kt")
                public void testNestedGroovyAnnotation() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedGroovyAnnotation.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("nestedJavaAnnotation.before.Main.kt")
                public void testNestedJavaAnnotation() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedJavaAnnotation.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("nestedJavaAnnotationWithNamedArgs.before.Main.kt")
                public void testNestedJavaAnnotationWithNamedArgs() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedJavaAnnotationWithNamedArgs.before.Main.kt", this::doTestWithExtraFile);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CallExpression extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInCallExpression() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/callExpression"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("callInAnnotationEntryWithJavaQualifier.before.Main.kt")
                public void testCallInAnnotationEntryWithJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callInAnnotationEntryWithJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithExplicitParamNamesAndJavaQualifier.before.Main.kt")
                public void testCallWithExplicitParamNamesAndJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithExplicitParamNamesAndJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithFinalJavaSupertype.before.Main.kt")
                public void testCallWithFinalJavaSupertype() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithFinalJavaSupertype.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithGenericJavaReceiver.before.Main.kt")
                public void testCallWithGenericJavaReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithGenericJavaReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithGroovyClassQualifier.before.Main.kt")
                public void testCallWithGroovyClassQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithGroovyClassQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithJavaClassQualifier.before.Main.kt")
                public void testCallWithJavaClassQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaClassQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithJavaClassReceiver.before.Main.kt")
                public void testCallWithJavaClassReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaClassReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithJavaQualifierInMemberValDelegate.before.Main.kt")
                public void testCallWithJavaQualifierInMemberValDelegate() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaQualifierInMemberValDelegate.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithSuperclassAndJavaReceiverNoConstructorParams.before.Main.kt")
                public void testCallWithSuperclassAndJavaReceiverNoConstructorParams() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSuperclassAndJavaReceiverNoConstructorParams.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithSuperclassConstructorParamsAndJavaReceiver.before.Main.kt")
                public void testCallWithSuperclassConstructorParamsAndJavaReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSuperclassConstructorParamsAndJavaReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("callWithSupertraitAndJavaReceiver.before.Main.kt")
                public void testCallWithSupertraitAndJavaReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSupertraitAndJavaReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class TypeArguments extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInTypeArguments() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("javaClassMember.before.Main.kt")
                    public void testJavaClassMember() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMember.before.Main.kt", this::doTestWithExtraFile);
                    }

                    @TestMetadata("javaClassMemberInner.before.Main.kt")
                    public void testJavaClassMemberInner() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInner.before.Main.kt", this::doTestWithExtraFile);
                    }

                    @TestMetadata("javaClassMemberInnerPartialSubstitution.before.Main.kt")
                    public void testJavaClassMemberInnerPartialSubstitution() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInnerPartialSubstitution.before.Main.kt", this::doTestWithExtraFile);
                    }

                    @TestMetadata("javaClassMemberInnerWithReceiverArg.before.Main.kt")
                    public void testJavaClassMemberInnerWithReceiverArg() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInnerWithReceiverArg.before.Main.kt", this::doTestWithExtraFile);
                    }

                    @TestMetadata("javaClassMemberPartialSubstitution.before.Main.kt")
                    public void testJavaClassMemberPartialSubstitution() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberPartialSubstitution.before.Main.kt", this::doTestWithExtraFile);
                    }
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DelegationSpecifier extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInDelegationSpecifier() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("delegatorToNestedJavaSupercall.before.Main.kt")
                public void testDelegatorToNestedJavaSupercall() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/delegatorToNestedJavaSupercall.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("delegatorToNestedJavaSupercallWithParamNames.before.Main.kt")
                public void testDelegatorToNestedJavaSupercallWithParamNames() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/delegatorToNestedJavaSupercallWithParamNames.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("traitDelegatorToNestedGroovySuperclass.before.Main.kt")
                public void testTraitDelegatorToNestedGroovySuperclass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/traitDelegatorToNestedGroovySuperclass.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("traitDelegatorToNestedJavaSuperclass.before.Main.kt")
                public void testTraitDelegatorToNestedJavaSuperclass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/traitDelegatorToNestedJavaSuperclass.before.Main.kt", this::doTestWithExtraFile);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ImportDirective extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInImportDirective() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/importDirective"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotationWithJavaQualifier.before.Main.kt")
                public void testAnnotationWithJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/importDirective/annotationWithJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("classWithGroovyQualifier.before.Main.kt")
                public void testClassWithGroovyQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/importDirective/classWithGroovyQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("classWithJavaQualifier.before.Main.kt")
                public void testClassWithJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/importDirective/classWithJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumEntryInJavaEnum.before.Main.kt")
                public void testEnumEntryInJavaEnum() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/importDirective/enumEntryInJavaEnum.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumWithJavaQualifier.before.Main.kt")
                public void testEnumWithJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/importDirective/enumWithJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("objectWithJavaQualifier.before.Main.kt")
                public void testObjectWithJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/importDirective/objectWithJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("traitWithJavaQualifier.before.Main.kt")
                public void testTraitWithJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/importDirective/traitWithJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ReferenceExpression extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInReferenceExpression() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/referenceExpression"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classByNestedGroovyQualifier.before.Main.kt")
                public void testClassByNestedGroovyQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/classByNestedGroovyQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("classByNestedJavaQualifier.before.Main.kt")
                public void testClassByNestedJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/classByNestedJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumByNestedJavaQualifier.before.Main.kt")
                public void testEnumByNestedJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumByNestedJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumEntryWithJavaEnumQualifier.before.Main.kt")
                public void testEnumEntryWithJavaEnumQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaEnumQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumEntryWithJavaEnumSuperclass.before.Main.kt")
                public void testEnumEntryWithJavaEnumSuperclass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaEnumSuperclass.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumEntryWithJavaNonEnumQualifier.before.Main.kt")
                public void testEnumEntryWithJavaNonEnumQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaNonEnumQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumEntryWithJavaNonEnumSuperclass.before.Main.kt")
                public void testEnumEntryWithJavaNonEnumSuperclass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaNonEnumSuperclass.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("objectWithJavaQualifier.before.Main.kt")
                public void testObjectWithJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/objectWithJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("traitByNestedJavaQualifier.before.Main.kt")
                public void testTraitByNestedJavaQualifier() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/traitByNestedJavaQualifier.before.Main.kt", this::doTestWithExtraFile);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeReference extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInTypeReference() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/typeReference"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotationJavaTypeReceiver.before.Main.kt")
                public void testAnnotationJavaTypeReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/typeReference/annotationJavaTypeReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("classGroovyTypeReceiver.before.Main.kt")
                public void testClassGroovyTypeReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/typeReference/classGroovyTypeReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("classJavaTypeReceiver.before.Main.kt")
                public void testClassJavaTypeReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/typeReference/classJavaTypeReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumEntryJavaEnumReceiver.before.Main.kt")
                public void testEnumEntryJavaEnumReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/typeReference/enumEntryJavaEnumReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("enumJavaTypeReceiver.before.Main.kt")
                public void testEnumJavaTypeReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/typeReference/enumJavaTypeReceiver.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("traitJavaTypeReceiver.before.Main.kt")
                public void testTraitJavaTypeReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createClass/typeReference/traitJavaTypeReceiver.before.Main.kt", this::doTestWithExtraFile);
                }
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateFunction extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateFunction() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction/call")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Call extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInCall() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction/call"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("extensionFunOnGroovyType.before.Main.kt")
                public void testExtensionFunOnGroovyType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/extensionFunOnGroovyType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("extensionFunOnJavaType.before.Main.kt")
                public void testExtensionFunOnJavaType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/extensionFunOnJavaType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("extensionFunOnTypeFromAnotherPackage.before.Main.kt")
                public void testExtensionFunOnTypeFromAnotherPackage() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/extensionFunOnTypeFromAnotherPackage.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("funOnGroovyType.before.Main.kt")
                public void testFunOnGroovyType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/funOnGroovyType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("funOnJavaInterface.before.Main.kt")
                public void testFunOnJavaInterface() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/funOnJavaInterface.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("funOnJavaType.before.Main.kt")
                public void testFunOnJavaType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/funOnJavaType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("genericFunOnJavaType.before.Main.kt")
                public void testGenericFunOnJavaType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/genericFunOnJavaType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("staticExtensionFunOnJavaClass.before.Main.kt")
                public void testStaticExtensionFunOnJavaClass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/staticExtensionFunOnJavaClass.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("staticFunOnJavaClass.before.Main.kt")
                public void testStaticFunOnJavaClass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/staticFunOnJavaClass.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("staticFunOnJavaInterface.before.Main.kt")
                public void testStaticFunOnJavaInterface() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/staticFunOnJavaInterface.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class TypeArguments extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInTypeArguments() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("javaClassMember.before.Main.kt")
                    public void testJavaClassMember() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMember.before.Main.kt", this::doTestWithExtraFile);
                    }

                    @TestMetadata("javaClassMemberPartialSubstitution.before.Main.kt")
                    public void testJavaClassMemberPartialSubstitution() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMemberPartialSubstitution.before.Main.kt", this::doTestWithExtraFile);
                    }

                    @TestMetadata("javaClassMemberWithReceiverArg.before.Main.kt")
                    public void testJavaClassMemberWithReceiverArg() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMemberWithReceiverArg.before.Main.kt", this::doTestWithExtraFile);
                    }
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction/fromJava")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FromJava extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInFromJava() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction/fromJava"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("classMember.before.Main.java")
                public void testClassMember() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/fromJava/classMember.before.Main.java", this::doTestWithExtraFile);
                }

                @TestMetadata("companionMember.before.Main.java")
                public void testCompanionMember() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/fromJava/companionMember.before.Main.java", this::doTestWithExtraFile);
                }

                @TestMetadata("topLevel.before.Main.java")
                public void testTopLevel() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createFunction/fromJava/topLevel.before.Main.java", this::doTestWithExtraFile);
                }
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateSecondaryConstructor extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateSecondaryConstructor() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createSecondaryConstructor"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("delegatorToSuperCallJavaClass.before.Main.kt")
            public void testDelegatorToSuperCallJavaClass() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/delegatorToSuperCallJavaClass.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("groovyConstructor.before.Main.kt")
            public void testGroovyConstructor() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/groovyConstructor.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("javaConstructor.before.Main.kt")
            public void testJavaConstructor() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/javaConstructor.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("superCallJavaClass.before.Main.kt")
            public void testSuperCallJavaClass() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/superCallJavaClass.before.Main.kt", this::doTestWithExtraFile);
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createTypeAlias")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateTypeAlias extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateTypeAlias() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createTypeAlias"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createTypeAlias/typeReference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeReference extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInTypeReference() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createTypeAlias/typeReference"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("javaUserTypeReceiver.test")
                public void testJavaUserTypeReceiver() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createTypeAlias/typeReference/javaUserTypeReceiver.test", this::doTestWithExtraFile);
                }
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createTypeParameter")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateTypeParameter extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateTypeParameter() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createTypeParameter"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateVariable extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateVariable() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable/parameter")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Parameter extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInParameter() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable/parameter"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("platformType.before.Main.kt")
                public void testPlatformType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/parameter/platformType.before.Main.kt", this::doTestWithExtraFile);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable/primaryParameter")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PrimaryParameter extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInPrimaryParameter() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable/primaryParameter"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("staticValOnJavaClass.before.Main.kt")
                public void testStaticValOnJavaClass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/primaryParameter/staticValOnJavaClass.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("valOnJavaType.before.Main.kt")
                public void testValOnJavaType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/primaryParameter/valOnJavaType.before.Main.kt", this::doTestWithExtraFile);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable/property")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Property extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInProperty() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable/property"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("extensionPropertyOnTypeFromAnotherPackage.before.Main.kt")
                public void testExtensionPropertyOnTypeFromAnotherPackage() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/extensionPropertyOnTypeFromAnotherPackage.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("extensionValOnGroovyType.before.Main.kt")
                public void testExtensionValOnGroovyType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/extensionValOnGroovyType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("extensionValOnJavaType.before.Main.kt")
                public void testExtensionValOnJavaType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/extensionValOnJavaType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("staticExtensionValOnJavaType.before.Main.kt")
                public void testStaticExtensionValOnJavaType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/staticExtensionValOnJavaType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("staticValOnJavaClass.before.Main.kt")
                public void testStaticValOnJavaClass() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/staticValOnJavaClass.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("staticValOnJavaInterface.before.Main.kt")
                public void testStaticValOnJavaInterface() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/staticValOnJavaInterface.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("staticVarOnJavaInterface.before.Main.kt")
                public void testStaticVarOnJavaInterface() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/staticVarOnJavaInterface.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("valOnGroovyType.before.Main.kt")
                public void testValOnGroovyType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/valOnGroovyType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("valOnJavaInterface.before.Main.kt")
                public void testValOnJavaInterface() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/valOnJavaInterface.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("valOnJavaType.before.Main.kt")
                public void testValOnJavaType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/valOnJavaType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("varOnJavaType.before.Main.kt")
                public void testVarOnJavaType() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/varOnJavaType.before.Main.kt", this::doTestWithExtraFile);
                }

                @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/fieldFromJava")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class FieldFromJava extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInFieldFromJava() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable/property/fieldFromJava"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("classMemberLateinitVar.before.Main.java")
                    public void testClassMemberLateinitVar() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/fieldFromJava/classMemberLateinitVar.before.Main.java", this::doTestWithExtraFile);
                    }

                    @TestMetadata("classMemberVar.before.Main.java")
                    public void testClassMemberVar() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/fieldFromJava/classMemberVar.before.Main.java", this::doTestWithExtraFile);
                    }

                    @TestMetadata("companionMemberVar.before.Main.java")
                    public void testCompanionMemberVar() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/fieldFromJava/companionMemberVar.before.Main.java", this::doTestWithExtraFile);
                    }

                    @TestMetadata("topLevelVar.before.Main.java")
                    public void testTopLevelVar() throws Exception {
                        KotlinTestUtils.runTest("idea/testData/quickfix/createFromUsage/createVariable/property/fieldFromJava/topLevelVar.before.Main.java", this::doTestWithExtraFile);
                    }
                }
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DeprecatedSymbolUsage extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInDeprecatedSymbolUsage() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("javaDeprecated.before.Main.kt")
        public void testJavaDeprecated() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/javaDeprecated.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("toMethodFromCompanionObject.before.Main.kt")
        public void testToMethodFromCompanionObject() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/toMethodFromCompanionObject.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/classUsages")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClassUsages extends AbstractQuickFixMultiFileTest {
            @TestMetadata("addImportFromSamePackage.before.Main.kt")
            public void testAddImportFromSamePackage() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/classUsages/addImportFromSamePackage.before.Main.kt", this::doTestWithExtraFile);
            }

            public void testAllFilesPresentInClassUsages() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/classUsages"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/classUsages/wholeProject")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class WholeProject extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInWholeProject() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/classUsages/wholeProject"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("annotation.before.Main.kt")
                public void testAnnotation() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/classUsages/wholeProject/annotation.before.Main.kt", this::doTestWithExtraFile);
                }
            }
        }

        @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/imports")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Imports extends AbstractQuickFixMultiFileTest {
            @TestMetadata("addImportForOperator.before.Main.kt")
            public void testAddImportForOperator() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImportForOperator.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("addImportFromSamePackage.before.Main.kt")
            public void testAddImportFromSamePackage() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImportFromSamePackage.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("addImportFromSamePackage2.before.Main.kt")
            public void testAddImportFromSamePackage2() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImportFromSamePackage2.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("addImportFromSamePackage3.before.Main.kt")
            public void testAddImportFromSamePackage3() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImportFromSamePackage3.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("addImports.before.Main.kt")
            public void testAddImports() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImports.before.Main.kt", this::doTestWithExtraFile);
            }

            public void testAllFilesPresentInImports() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/imports"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("rootPackage.before.Main.kt")
            public void testRootPackage() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/imports/rootPackage.before.Main.kt", this::doTestWithExtraFile);
            }
        }

        @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/typeAliases")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TypeAliases extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInTypeAliases() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/typeAliases"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/typeAliases/wholeProject")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class WholeProject extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInWholeProject() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/typeAliases/wholeProject"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
                }

                @TestMetadata("typealias.before.Main.kt")
                public void testTypealias() throws Exception {
                    KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/typeAliases/wholeProject/typealias.before.Main.kt", this::doTestWithExtraFile);
                }
            }
        }

        @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/typeArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TypeArguments extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInTypeArguments() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/typeArguments"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("platformType.before.Main.kt")
            public void testPlatformType() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/typeArguments/platformType.before.Main.kt", this::doTestWithExtraFile);
            }
        }

        @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/wholeProject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WholeProject extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInWholeProject() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/wholeProject"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("function.before.Main.kt")
            public void testFunction() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/wholeProject/function.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("property.before.Main.kt")
            public void testProperty() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/deprecatedSymbolUsage/wholeProject/property.before.Main.kt", this::doTestWithExtraFile);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/increaseVisibility")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IncreaseVisibility extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInIncreaseVisibility() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/increaseVisibility"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("privateMemberToInternalMultiFile.before.Main.kt")
        public void testPrivateMemberToInternalMultiFile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/increaseVisibility/privateMemberToInternalMultiFile.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("privateTopLevelFunInFile.before.Main.kt")
        public void testPrivateTopLevelFunInFile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/increaseVisibility/privateTopLevelFunInFile.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("privateTopLevelValInFile.before.Main.kt")
        public void testPrivateTopLevelValInFile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/increaseVisibility/privateTopLevelValInFile.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("privateTopLevelVarInFile.before.Main.kt")
        public void testPrivateTopLevelVarInFile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/increaseVisibility/privateTopLevelVarInFile.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("privateTopLevelVarWithSetterInFile.before.Main.kt")
        public void testPrivateTopLevelVarWithSetterInFile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/increaseVisibility/privateTopLevelVarWithSetterInFile.before.Main.kt", this::doTestWithExtraFile);
        }
    }

    @TestMetadata("idea/testData/quickfix/memberVisibilityCanBePrivate")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MemberVisibilityCanBePrivate extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInMemberVisibilityCanBePrivate() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/memberVisibilityCanBePrivate"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("getter.before.Main.kt")
        public void testGetter() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/memberVisibilityCanBePrivate/getter.before.Main.kt", this::doTestWithExtraFile);
        }
    }

    @TestMetadata("idea/testData/quickfix/migration")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Migration extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInMigration() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/quickfix/migration/conflictingExtension")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ConflictingExtension extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInConflictingExtension() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/conflictingExtension"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("removeImports.before.Main.kt")
            public void testRemoveImports() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/migration/conflictingExtension/removeImports.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("removeImportsOverloads.before.Main.kt")
            public void testRemoveImportsOverloads() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/migration/conflictingExtension/removeImportsOverloads.before.Main.kt", this::doTestWithExtraFile);
            }
        }

        @TestMetadata("idea/testData/quickfix/migration/javaAnnotationPositionedArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class JavaAnnotationPositionedArguments extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInJavaAnnotationPositionedArguments() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/javaAnnotationPositionedArguments"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("basicMultiple.before.Main.kt")
            public void testBasicMultiple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/migration/javaAnnotationPositionedArguments/basicMultiple.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("noValueForArgumentMultiple.before.Main.kt")
            public void testNoValueForArgumentMultiple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/migration/javaAnnotationPositionedArguments/noValueForArgumentMultiple.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("wrongTypeMultiple.before.Main.kt")
            public void testWrongTypeMultiple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/migration/javaAnnotationPositionedArguments/wrongTypeMultiple.before.Main.kt", this::doTestWithExtraFile);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Modifiers extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInModifiers() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("constVal.before.Main.kt")
        public void testConstVal() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/modifiers/constVal.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AddOpenToClassDeclaration extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInAddOpenToClassDeclaration() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("finalJavaSupertype.before.Main.kt")
            public void testFinalJavaSupertype() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaSupertype.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("finalJavaUpperBound.before.Main.kt")
            public void testFinalJavaUpperBound() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaUpperBound.before.Main.kt", this::doTestWithExtraFile);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/nullables")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Nullables extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInNullables() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/nullables"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }
    }

    @TestMetadata("idea/testData/quickfix/optimizeImports")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class OptimizeImports extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInOptimizeImports() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/optimizeImports"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("notRemoveImportsForTypeAliases.before.Main.kt")
        public void testNotRemoveImportsForTypeAliases() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/optimizeImports/notRemoveImportsForTypeAliases.before.Main.kt", this::doTestWithExtraFile);
        }
    }

    @TestMetadata("idea/testData/quickfix/override")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Override extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInOverride() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/override"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/quickfix/override/nothingToOverride")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NothingToOverride extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInNothingToOverride() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/override/nothingToOverride"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("import.before.Main.kt")
            public void testImport() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/override/nothingToOverride/import.before.Main.kt", this::doTestWithExtraFile);
            }

            @TestMetadata("overrideJavaMethodWithAnnotation.test")
            public void testOverrideJavaMethodWithAnnotation() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/override/nothingToOverride/overrideJavaMethodWithAnnotation.test", this::doTestWithExtraFile);
            }

            @TestMetadata("twoPackages.before.Main.kt")
            public void testTwoPackages() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/override/nothingToOverride/twoPackages.before.Main.kt", this::doTestWithExtraFile);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/properties")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Properties extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInProperties() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/properties"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }
    }

    @TestMetadata("idea/testData/quickfix/removeUnused")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveUnused extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInRemoveUnused() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/removeUnused"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("javaTriangle.before.Main.kt")
        public void testJavaTriangle() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/removeUnused/javaTriangle.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("javaTriangle2.before.Main.kt")
        public void testJavaTriangle2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/removeUnused/javaTriangle2.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("javaTriangle3.before.Main.kt")
        public void testJavaTriangle3() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/removeUnused/javaTriangle3.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("javaTriangleUnused.before.Main.kt")
        public void testJavaTriangleUnused() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/removeUnused/javaTriangleUnused.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("javaTriangleUnused2.before.Main.kt")
        public void testJavaTriangleUnused2() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/removeUnused/javaTriangleUnused2.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("secondaryConstructorFromJava.before.Main.kt")
        public void testSecondaryConstructorFromJava() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/removeUnused/secondaryConstructorFromJava.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("secondaryConstructorFromJavaDelegate.before.Main.kt")
        public void testSecondaryConstructorFromJavaDelegate() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/removeUnused/secondaryConstructorFromJavaDelegate.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("usedObjectAsAliasMulti.before.Main.kt")
        public void testUsedObjectAsAliasMulti() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/removeUnused/usedObjectAsAliasMulti.before.Main.kt", this::doTestWithExtraFile);
        }
    }

    @TestMetadata("idea/testData/quickfix/suppress")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Suppress extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInSuppress() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/suppress"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/quickfix/suppress/forStatement")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForStatement extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInForStatement() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/suppress/forStatement"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/typeImports")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeImports extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInTypeImports() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/typeImports"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("importFromAnotherFile.before.Main.kt")
        public void testImportFromAnotherFile() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/typeImports/importFromAnotherFile.before.Main.kt", this::doTestWithExtraFile);
        }
    }

    @TestMetadata("idea/testData/quickfix/typeMismatch")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeMismatch extends AbstractQuickFixMultiFileTest {
        @TestMetadata("addArrayOfTypeForJavaAnnotation.before.Main.kt")
        public void testAddArrayOfTypeForJavaAnnotation() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/typeMismatch/addArrayOfTypeForJavaAnnotation.before.Main.kt", this::doTestWithExtraFile);
        }

        public void testAllFilesPresentInTypeMismatch() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/typeMismatch"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("paramTypeInOverrides.before.Main.kt")
        public void testParamTypeInOverrides() throws Exception {
            KotlinTestUtils.runTest("idea/testData/quickfix/typeMismatch/paramTypeInOverrides.before.Main.kt", this::doTestWithExtraFile);
        }

        @TestMetadata("idea/testData/quickfix/typeMismatch/genericVarianceViolation")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class GenericVarianceViolation extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInGenericVarianceViolation() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/typeMismatch/genericVarianceViolation"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }

            @TestMetadata("basicMultiple.before.Main.kt")
            public void testBasicMultiple() throws Exception {
                KotlinTestUtils.runTest("idea/testData/quickfix/typeMismatch/genericVarianceViolation/basicMultiple.before.Main.kt", this::doTestWithExtraFile);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/variables")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Variables extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInVariables() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/variables"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
        }

        @TestMetadata("idea/testData/quickfix/variables/changeMutability")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ChangeMutability extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInChangeMutability() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/variables/changeMutability"), Pattern.compile("^(\\w+)\\.((before\\.Main\\.\\w+)|(test))$"), TargetBackend.ANY, true);
            }
        }
    }
}
