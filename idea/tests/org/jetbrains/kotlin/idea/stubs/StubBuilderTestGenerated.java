/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.stubs;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/stubs")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class StubBuilderTestGenerated extends AbstractStubBuilderTest {
    public void testAllFilesPresentInStubs() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/stubs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("AnnotationClass.kt")
    public void testAnnotationClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/AnnotationClass.kt", this::doTest);
    }

    @TestMetadata("AnnotationOnClass.kt")
    public void testAnnotationOnClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/AnnotationOnClass.kt", this::doTest);
    }

    @TestMetadata("AnnotationOnFunction.kt")
    public void testAnnotationOnFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/AnnotationOnFunction.kt", this::doTest);
    }

    @TestMetadata("AnnotationOnLocalFunction.kt")
    public void testAnnotationOnLocalFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/AnnotationOnLocalFunction.kt", this::doTest);
    }

    @TestMetadata("AnnotationWithValue.kt")
    public void testAnnotationWithValue() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/AnnotationWithValue.kt", this::doTest);
    }

    @TestMetadata("AnnotationsOnPrimaryCtr.kt")
    public void testAnnotationsOnPrimaryCtr() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/AnnotationsOnPrimaryCtr.kt", this::doTest);
    }

    @TestMetadata("AnonymousObject.kt")
    public void testAnonymousObject() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/AnonymousObject.kt", this::doTest);
    }

    @TestMetadata("ClassObject.kt")
    public void testClassObject() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/ClassObject.kt", this::doTest);
    }

    @TestMetadata("ClassProperty.kt")
    public void testClassProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/ClassProperty.kt", this::doTest);
    }

    @TestMetadata("ClassTypeParameters.kt")
    public void testClassTypeParameters() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/ClassTypeParameters.kt", this::doTest);
    }

    @TestMetadata("Const.kt")
    public void testConst() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/Const.kt", this::doTest);
    }

    @TestMetadata("DanglingAnnotations.kt")
    public void testDanglingAnnotations() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/DanglingAnnotations.kt", this::doTest);
    }

    @TestMetadata("DynamicType.kt")
    public void testDynamicType() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/DynamicType.kt", this::doTest);
    }

    @TestMetadata("FilePackage.kt")
    public void testFilePackage() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/FilePackage.kt", this::doTest);
    }

    @TestMetadata("FunctionInNotNamedObject.kt")
    public void testFunctionInNotNamedObject() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/FunctionInNotNamedObject.kt", this::doTest);
    }

    @TestMetadata("FunctionParameters.kt")
    public void testFunctionParameters() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/FunctionParameters.kt", this::doTest);
    }

    @TestMetadata("InnerClass.kt")
    public void testInnerClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/InnerClass.kt", this::doTest);
    }

    @TestMetadata("LocalClass.kt")
    public void testLocalClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/LocalClass.kt", this::doTest);
    }

    @TestMetadata("LocalClassInLocalFunction.kt")
    public void testLocalClassInLocalFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/LocalClassInLocalFunction.kt", this::doTest);
    }

    @TestMetadata("LocalNamedObject.kt")
    public void testLocalNamedObject() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/LocalNamedObject.kt", this::doTest);
    }

    @TestMetadata("ManyAnnotationsOnFunction.kt")
    public void testManyAnnotationsOnFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/ManyAnnotationsOnFunction.kt", this::doTest);
    }

    @TestMetadata("MembersInLocalClass.kt")
    public void testMembersInLocalClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/MembersInLocalClass.kt", this::doTest);
    }

    @TestMetadata("MembersInLocalObject.kt")
    public void testMembersInLocalObject() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/MembersInLocalObject.kt", this::doTest);
    }

    @TestMetadata("NamedObject.kt")
    public void testNamedObject() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/NamedObject.kt", this::doTest);
    }

    @TestMetadata("NotStorePropertiesFrom.kt")
    public void testNotStorePropertiesFrom() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/NotStorePropertiesFrom.kt", this::doTest);
    }

    @TestMetadata("NotStorePropertyFromDelegate.kt")
    public void testNotStorePropertyFromDelegate() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/NotStorePropertyFromDelegate.kt", this::doTest);
    }

    @TestMetadata("NotStorePropertyFromInitializer.kt")
    public void testNotStorePropertyFromInitializer() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/NotStorePropertyFromInitializer.kt", this::doTest);
    }

    @TestMetadata("ObjectInInitializer.kt")
    public void testObjectInInitializer() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/ObjectInInitializer.kt", this::doTest);
    }

    @TestMetadata("ObjectInPropertyDelegate.kt")
    public void testObjectInPropertyDelegate() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/ObjectInPropertyDelegate.kt", this::doTest);
    }

    @TestMetadata("PackageProperty.kt")
    public void testPackageProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/PackageProperty.kt", this::doTest);
    }

    @TestMetadata("ParametersWithFqName.kt")
    public void testParametersWithFqName() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/ParametersWithFqName.kt", this::doTest);
    }

    @TestMetadata("PropertyAsPropertyInitalizerInvalidCode.kt")
    public void testPropertyAsPropertyInitalizerInvalidCode() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/PropertyAsPropertyInitalizerInvalidCode.kt", this::doTest);
    }

    @TestMetadata("QualifiedAnnotationOnFunction.kt")
    public void testQualifiedAnnotationOnFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/QualifiedAnnotationOnFunction.kt", this::doTest);
    }

    @TestMetadata("SecondaryConstructors.kt")
    public void testSecondaryConstructors() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/SecondaryConstructors.kt", this::doTest);
    }

    @TestMetadata("SimpleEnumBuild.kt")
    public void testSimpleEnumBuild() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/SimpleEnumBuild.kt", this::doTest);
    }

    @TestMetadata("StarProjection.kt")
    public void testStarProjection() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/StarProjection.kt", this::doTest);
    }

    @TestMetadata("TypeAnnotation.kt")
    public void testTypeAnnotation() throws Exception {
        KotlinTestUtils.runTest("idea/testData/stubs/TypeAnnotation.kt", this::doTest);
    }
}
