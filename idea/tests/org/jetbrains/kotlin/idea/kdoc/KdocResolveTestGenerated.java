/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.kdoc;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.idea.resolve.AbstractReferenceResolveTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/kdoc/resolve")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class KdocResolveTestGenerated extends AbstractReferenceResolveTest {
    public void testAllFilesPresentInResolve() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/kdoc/resolve"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("AmbiguousReference.kt")
    public void testAmbiguousReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/AmbiguousReference.kt", this::doTest);
    }

    @TestMetadata("AmbiguousReferenceTypeParameter.kt")
    public void testAmbiguousReferenceTypeParameter() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/AmbiguousReferenceTypeParameter.kt", this::doTest);
    }

    @TestMetadata("CheckExtensionReceiver.kt")
    public void testCheckExtensionReceiver() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/CheckExtensionReceiver.kt", this::doTest);
    }

    @TestMetadata("ClassSelfReference.kt")
    public void testClassSelfReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ClassSelfReference.kt", this::doTest);
    }

    @TestMetadata("CodeReference.kt")
    public void testCodeReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/CodeReference.kt", this::doTest);
    }

    @TestMetadata("CompanionObjectMember.kt")
    public void testCompanionObjectMember() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/CompanionObjectMember.kt", this::doTest);
    }

    @TestMetadata("ConstructorParamReference.kt")
    public void testConstructorParamReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ConstructorParamReference.kt", this::doTest);
    }

    @TestMetadata("ExtensionFromImports.kt")
    public void testExtensionFromImports() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ExtensionFromImports.kt", this::doTest);
    }

    @TestMetadata("ExtensionFun.kt")
    public void testExtensionFun() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ExtensionFun.kt", this::doTest);
    }

    @TestMetadata("ExtensionNonQualified.kt")
    public void testExtensionNonQualified() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ExtensionNonQualified.kt", this::doTest);
    }

    @TestMetadata("ExtensionVal.kt")
    public void testExtensionVal() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ExtensionVal.kt", this::doTest);
    }

    @TestMetadata("ImportAliasClass.kt")
    public void testImportAliasClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ImportAliasClass.kt", this::doTest);
    }

    @TestMetadata("ImportedClassReference.kt")
    public void testImportedClassReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ImportedClassReference.kt", this::doTest);
    }

    @TestMetadata("OnlyMembersFromClass.kt")
    public void testOnlyMembersFromClass() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/OnlyMembersFromClass.kt", this::doTest);
    }

    @TestMetadata("Overloads.kt")
    public void testOverloads() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/Overloads.kt", this::doTest);
    }

    @TestMetadata("ParamReference.kt")
    public void testParamReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ParamReference.kt", this::doTest);
    }

    @TestMetadata("PropertyTypeParamReference.kt")
    public void testPropertyTypeParamReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/PropertyTypeParamReference.kt", this::doTest);
    }

    @TestMetadata("QualifiedCodeReference.kt")
    public void testQualifiedCodeReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/QualifiedCodeReference.kt", this::doTest);
    }

    @TestMetadata("QualifiedNameFunctionReference.kt")
    public void testQualifiedNameFunctionReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/QualifiedNameFunctionReference.kt", this::doTest);
    }

    @TestMetadata("QualifiedNameReference.kt")
    public void testQualifiedNameReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/QualifiedNameReference.kt", this::doTest);
    }

    @TestMetadata("ReceiverReference.kt")
    public void testReceiverReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/ReceiverReference.kt", this::doTest);
    }

    @TestMetadata("SeeReference.kt")
    public void testSeeReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/SeeReference.kt", this::doTest);
    }

    @TestMetadata("StaticMember.kt")
    public void testStaticMember() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/StaticMember.kt", this::doTest);
    }

    @TestMetadata("TypeParamReference.kt")
    public void testTypeParamReference() throws Exception {
        KotlinTestUtils.runTest("idea/testData/kdoc/resolve/TypeParamReference.kt", this::doTest);
    }
}
