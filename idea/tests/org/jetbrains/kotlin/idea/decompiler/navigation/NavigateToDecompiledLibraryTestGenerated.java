/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.decompiler.navigation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/decompiler/navigation/usercode")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class NavigateToDecompiledLibraryTestGenerated extends AbstractNavigateToDecompiledLibraryTest {
    public void testAllFilesPresentInUsercode() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/decompiler/navigation/usercode"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("ClassObject.kt")
    public void testClassObject() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/ClassObject.kt", this::doTest);
    }

    @TestMetadata("Constructor.kt")
    public void testConstructor() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/Constructor.kt", this::doTest);
    }

    @TestMetadata("Enum.kt")
    public void testEnum() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/Enum.kt", this::doTest);
    }

    @TestMetadata("ExtensionFunction.kt")
    public void testExtensionFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/ExtensionFunction.kt", this::doTest);
    }

    @TestMetadata("ExtensionProperty.kt")
    public void testExtensionProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/ExtensionProperty.kt", this::doTest);
    }

    @TestMetadata("GenericFunctionWithExplicitlyDeclaredTypeArguments.kt")
    public void testGenericFunctionWithExplicitlyDeclaredTypeArguments() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/GenericFunctionWithExplicitlyDeclaredTypeArguments.kt", this::doTest);
    }

    @TestMetadata("GenericFunctionWithInferredTypeArguments.kt")
    public void testGenericFunctionWithInferredTypeArguments() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/GenericFunctionWithInferredTypeArguments.kt", this::doTest);
    }

    @TestMetadata("GlobalFunction.kt")
    public void testGlobalFunction() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/GlobalFunction.kt", this::doTest);
    }

    @TestMetadata("GlobalProperty.kt")
    public void testGlobalProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/GlobalProperty.kt", this::doTest);
    }

    @TestMetadata("NamedObject.kt")
    public void testNamedObject() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/NamedObject.kt", this::doTest);
    }

    @TestMetadata("OverloadedFunWithTypeParam.kt")
    public void testOverloadedFunWithTypeParam() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/OverloadedFunWithTypeParam.kt", this::doTest);
    }

    @TestMetadata("Property.kt")
    public void testProperty() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/Property.kt", this::doTest);
    }

    @TestMetadata("SameNameInDifferentSources.kt")
    public void testSameNameInDifferentSources() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/SameNameInDifferentSources.kt", this::doTest);
    }

    @TestMetadata("TypeAlias.kt")
    public void testTypeAlias() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/TypeAlias.kt", this::doTest);
    }

    @TestMetadata("TypeWithSameShortName.kt")
    public void testTypeWithSameShortName() throws Exception {
        KotlinTestUtils.runTest("idea/testData/decompiler/navigation/usercode/TypeWithSameShortName.kt", this::doTest);
    }
}
