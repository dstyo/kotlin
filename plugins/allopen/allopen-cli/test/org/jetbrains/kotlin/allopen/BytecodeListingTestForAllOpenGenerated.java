/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.allopen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/allopen/allopen-cli/testData/bytecodeListing")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class BytecodeListingTestForAllOpenGenerated extends AbstractBytecodeListingTestForAllOpen {
    public void testAllFilesPresentInBytecodeListing() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/allopen/allopen-cli/testData/bytecodeListing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("allOpenOnNotClasses.kt")
    public void testAllOpenOnNotClasses() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/allOpenOnNotClasses.kt", this::doTest);
    }

    @TestMetadata("alreadyOpen.kt")
    public void testAlreadyOpen() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/alreadyOpen.kt", this::doTest);
    }

    @TestMetadata("anonymousObject.kt")
    public void testAnonymousObject() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/anonymousObject.kt", this::doTest);
    }

    @TestMetadata("explicitFinal.kt")
    public void testExplicitFinal() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/explicitFinal.kt", this::doTest);
    }

    @TestMetadata("metaAnnotation.kt")
    public void testMetaAnnotation() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/metaAnnotation.kt", this::doTest);
    }

    @TestMetadata("nestedInner.kt")
    public void testNestedInner() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/nestedInner.kt", this::doTest);
    }

    @TestMetadata("noAllOpen.kt")
    public void testNoAllOpen() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/noAllOpen.kt", this::doTest);
    }

    @TestMetadata("privateMembers.kt")
    public void testPrivateMembers() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/privateMembers.kt", this::doTest);
    }

    @TestMetadata("sealed.kt")
    public void testSealed() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/sealed.kt", this::doTest);
    }

    @TestMetadata("severalAllOpen.kt")
    public void testSeveralAllOpen() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/severalAllOpen.kt", this::doTest);
    }

    @TestMetadata("simple.kt")
    public void testSimple() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/simple.kt", this::doTest);
    }

    @TestMetadata("springAnnotations.kt")
    public void testSpringAnnotations() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/springAnnotations.kt", this::doTest);
    }

    @TestMetadata("superClassAnnotation.kt")
    public void testSuperClassAnnotation() throws Exception {
        KotlinTestUtils.runTest("plugins/allopen/allopen-cli/testData/bytecodeListing/superClassAnnotation.kt", this::doTest);
    }
}
