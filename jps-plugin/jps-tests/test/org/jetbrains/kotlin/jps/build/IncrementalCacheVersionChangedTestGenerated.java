/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.jps.build;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("jps-plugin/testData/incremental/cacheVersionChanged")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IncrementalCacheVersionChangedTestGenerated extends AbstractIncrementalCacheVersionChangedTest {
    public void testAllFilesPresentInCacheVersionChanged() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/incremental/cacheVersionChanged"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
    }

    @TestMetadata("clearedHasKotlin")
    public void testClearedHasKotlin() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/clearedHasKotlin/", this::doTest);
    }

    @TestMetadata("exportedModule")
    public void testExportedModule() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/exportedModule/", this::doTest);
    }

    @TestMetadata("javaOnlyModulesAreNotAffected")
    public void testJavaOnlyModulesAreNotAffected() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/javaOnlyModulesAreNotAffected/", this::doTest);
    }

    @TestMetadata("module1Modified")
    public void testModule1Modified() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/module1Modified/", this::doTest);
    }

    @TestMetadata("module2Modified")
    public void testModule2Modified() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/module2Modified/", this::doTest);
    }

    @TestMetadata("moduleWithConstantModified")
    public void testModuleWithConstantModified() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/moduleWithConstantModified/", this::doTest);
    }

    @TestMetadata("moduleWithInlineModified")
    public void testModuleWithInlineModified() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/moduleWithInlineModified/", this::doTest);
    }

    @TestMetadata("touchedFile")
    public void testTouchedFile() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/touchedFile/", this::doTest);
    }

    @TestMetadata("touchedOnlyJavaFile")
    public void testTouchedOnlyJavaFile() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/touchedOnlyJavaFile/", this::doTest);
    }

    @TestMetadata("untouchedFiles")
    public void testUntouchedFiles() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/untouchedFiles/", this::doTest);
    }

    @TestMetadata("withError")
    public void testWithError() throws Exception {
        KotlinTestUtils.runTest("jps-plugin/testData/incremental/cacheVersionChanged/withError/", this::doTest);
    }
}
