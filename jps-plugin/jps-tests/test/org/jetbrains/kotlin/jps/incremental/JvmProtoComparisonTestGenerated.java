/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.jps.incremental;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class JvmProtoComparisonTestGenerated extends AbstractJvmProtoComparisonTest {
    @TestMetadata("jps-plugin/testData/comparison/classSignatureChange")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassSignatureChange extends AbstractJvmProtoComparisonTest {
        public void testAllFilesPresentInClassSignatureChange() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/comparison/classSignatureChange"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classAnnotationListChanged")
        public void testClassAnnotationListChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/classAnnotationListChanged/", this::doTest);
        }

        @TestMetadata("classFlagsAndMembersChanged")
        public void testClassFlagsAndMembersChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/classFlagsAndMembersChanged/", this::doTest);
        }

        @TestMetadata("classFlagsChanged")
        public void testClassFlagsChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/classFlagsChanged/", this::doTest);
        }

        @TestMetadata("classTypeParameterListChanged")
        public void testClassTypeParameterListChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/classTypeParameterListChanged/", this::doTest);
        }

        @TestMetadata("classWithSuperTypeListChanged")
        public void testClassWithSuperTypeListChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/classWithSuperTypeListChanged/", this::doTest);
        }

        @TestMetadata("nestedClassSignatureChanged")
        public void testNestedClassSignatureChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/nestedClassSignatureChanged/", this::doTest);
        }

        @TestMetadata("sealedClassImplAdded")
        public void testSealedClassImplAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/sealedClassImplAdded/", this::doTest);
        }

        @TestMetadata("sealedClassImplRemoved")
        public void testSealedClassImplRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/sealedClassImplRemoved/", this::doTest);
        }

        @TestMetadata("sealedClassNestedImplAdded")
        public void testSealedClassNestedImplAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/sealedClassNestedImplAdded/", this::doTest);
        }

        @TestMetadata("sealedClassNestedImplAddedDeep")
        public void testSealedClassNestedImplAddedDeep() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/sealedClassNestedImplAddedDeep/", this::doTest);
        }

        @TestMetadata("sealedClassNestedImplRemoved")
        public void testSealedClassNestedImplRemoved() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classSignatureChange/sealedClassNestedImplRemoved/", this::doTest);
        }
    }

    @TestMetadata("jps-plugin/testData/comparison/classPrivateOnlyChange")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassPrivateOnlyChange extends AbstractJvmProtoComparisonTest {
        public void testAllFilesPresentInClassPrivateOnlyChange() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/comparison/classPrivateOnlyChange"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classWithPrivateFunChanged")
        public void testClassWithPrivateFunChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classPrivateOnlyChange/classWithPrivateFunChanged/", this::doTest);
        }

        @TestMetadata("classWithPrivatePrimaryConstructorChanged")
        public void testClassWithPrivatePrimaryConstructorChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classPrivateOnlyChange/classWithPrivatePrimaryConstructorChanged/", this::doTest);
        }

        @TestMetadata("classWithPrivateSecondaryConstructorChanged")
        public void testClassWithPrivateSecondaryConstructorChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classPrivateOnlyChange/classWithPrivateSecondaryConstructorChanged/", this::doTest);
        }

        @TestMetadata("classWithPrivateValChanged")
        public void testClassWithPrivateValChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classPrivateOnlyChange/classWithPrivateValChanged/", this::doTest);
        }

        @TestMetadata("classWithPrivateVarChanged")
        public void testClassWithPrivateVarChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classPrivateOnlyChange/classWithPrivateVarChanged/", this::doTest);
        }
    }

    @TestMetadata("jps-plugin/testData/comparison/classMembersOnlyChanged")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassMembersOnlyChanged extends AbstractJvmProtoComparisonTest {
        public void testAllFilesPresentInClassMembersOnlyChanged() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/comparison/classMembersOnlyChanged"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classWithCompanionObjectChanged")
        public void testClassWithCompanionObjectChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/classWithCompanionObjectChanged/", this::doTest);
        }

        @TestMetadata("classWithConstructorChanged")
        public void testClassWithConstructorChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/classWithConstructorChanged/", this::doTest);
        }

        @TestMetadata("classWithFunAndValChanged")
        public void testClassWithFunAndValChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/classWithFunAndValChanged/", this::doTest);
        }

        @TestMetadata("classWithNestedClassesChanged")
        public void testClassWithNestedClassesChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/classWithNestedClassesChanged/", this::doTest);
        }

        @TestMetadata("classWitnEnumChanged")
        public void testClassWitnEnumChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/classWitnEnumChanged/", this::doTest);
        }

        @TestMetadata("defaultValues")
        public void testDefaultValues() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/defaultValues/", this::doTest);
        }

        @TestMetadata("membersAnnotationListChanged")
        public void testMembersAnnotationListChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/membersAnnotationListChanged/", this::doTest);
        }

        @TestMetadata("membersFlagsChanged")
        public void testMembersFlagsChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/membersFlagsChanged/", this::doTest);
        }

        @TestMetadata("nestedClassMembersChanged")
        public void testNestedClassMembersChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/nestedClassMembersChanged/", this::doTest);
        }

        @TestMetadata("sealedClassImplAdded")
        public void testSealedClassImplAdded() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/classMembersOnlyChanged/sealedClassImplAdded/", this::doTest);
        }
    }

    @TestMetadata("jps-plugin/testData/comparison/packageMembers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PackageMembers extends AbstractJvmProtoComparisonTest {
        public void testAllFilesPresentInPackageMembers() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/comparison/packageMembers"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("defaultValues")
        public void testDefaultValues() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/packageMembers/defaultValues/", this::doTest);
        }

        @TestMetadata("membersAnnotationListChanged")
        public void testMembersAnnotationListChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/packageMembers/membersAnnotationListChanged/", this::doTest);
        }

        @TestMetadata("membersFlagsChanged")
        public void testMembersFlagsChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/packageMembers/membersFlagsChanged/", this::doTest);
        }

        @TestMetadata("packageFacadePrivateOnlyChanges")
        public void testPackageFacadePrivateOnlyChanges() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/packageMembers/packageFacadePrivateOnlyChanges/", this::doTest);
        }

        @TestMetadata("packageFacadePublicChanges")
        public void testPackageFacadePublicChanges() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/packageMembers/packageFacadePublicChanges/", this::doTest);
        }
    }

    @TestMetadata("jps-plugin/testData/comparison/unchanged")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Unchanged extends AbstractJvmProtoComparisonTest {
        public void testAllFilesPresentInUnchanged() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/comparison/unchanged"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("unchangedClass")
        public void testUnchangedClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/unchanged/unchangedClass/", this::doTest);
        }

        @TestMetadata("unchangedPackageFacade")
        public void testUnchangedPackageFacade() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/unchanged/unchangedPackageFacade/", this::doTest);
        }
    }

    @TestMetadata("jps-plugin/testData/comparison/jvmOnly")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JvmOnly extends AbstractJvmProtoComparisonTest {
        public void testAllFilesPresentInJvmOnly() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/comparison/jvmOnly"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classToFileFacade")
        public void testClassToFileFacade() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/jvmOnly/classToFileFacade/", this::doTest);
        }

        @TestMetadata("membersFlagsChanged")
        public void testMembersFlagsChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/jvmOnly/membersFlagsChanged/", this::doTest);
        }

        @TestMetadata("packageFacadeMultifileClassChanged")
        public void testPackageFacadeMultifileClassChanged() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/jvmOnly/packageFacadeMultifileClassChanged/", this::doTest);
        }

        @TestMetadata("packageFacadeToClass")
        public void testPackageFacadeToClass() throws Exception {
            KotlinTestUtils.runTest("jps-plugin/testData/comparison/jvmOnly/packageFacadeToClass/", this::doTest);
        }
    }
}
